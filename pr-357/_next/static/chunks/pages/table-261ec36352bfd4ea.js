(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7857],{13485:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return i}});var a=t(7896),l=t(59740),r=(t(2784),t(30876)),o=["components"],d={};function i(e){var n=e.components,t=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Table"),(0,r.kt)("h2",null,"Import"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Table"),": The wrapper that provides props, state, and context to its children."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TableHeader"),": The header of the table."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TableHeaderRow"),": The header row of the table."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TableHeaderCell"),": The header cell of the table."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TableBody"),": The body of the table."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TableRow"),": The body row of the table."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TableCell"),": The body cell of the table.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@trendmicro/react-styled-ui';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Table>\n  <TableHeader>\n    <TableHeaderRow>\n      <TableHeaderCell>Event Type</TableHeaderCell>\n      <TableHeaderCell>Detections</TableHeaderCell>\n    </TableHeaderRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>Virus/Malware</TableCell>\n      <TableCell>634</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>Virus/Malware</TableCell>\n      <TableCell>778</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>URL Filtering</TableCell>\n      <TableCell>598</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n")),(0,r.kt)("h3",null,"Variants"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the visual style of the Table. You can set the value to ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"outline"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default"),": Only add bottom border into cells, including table header."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"outline"),": Adds borders on all sides of the table and cells.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="row" spacing="4x">\n  {["default", "outline"].map(variant => (\n    <Stack key={variant} direction="column" spacing="4x" shouldWrapChildren>\n      <Text>{variant}</Text>\n      <Table variant={variant}>\n        <TableHeader>\n          <TableHeaderRow>\n            <TableHeaderCell>Event Type</TableHeaderCell>\n            <TableHeaderCell>Detections</TableHeaderCell>\n          </TableHeaderRow>\n        </TableHeader>\n        <TableBody>\n          <TableRow>\n            <TableCell>Virus/Malware</TableCell>\n            <TableCell>634</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Virus/Malware</TableCell>\n            <TableCell>778</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>URL Filtering</TableCell>\n            <TableCell>598</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </Stack>\n  ))}\n</Stack>\n')),(0,r.kt)("h3",null,"Sizes"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," prop to change the padding of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<TableCell>"),". You can set the value to ",(0,r.kt)("inlineCode",{parentName:"p"},"sm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"md"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"lg"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="column" spacing="6x" shouldWrapChildren>\n  {["sm", "md", "lg"].map(size => (\n    <React.Fragment key={size}>\n      <Text>Size: {size}</Text>\n      <Space width="4x" />\n      <Table variant="outline" size={size}>\n        <TableHeader>\n          <TableHeaderRow>\n            <TableHeaderCell>Event Type</TableHeaderCell>\n            <TableHeaderCell>Detections</TableHeaderCell>\n          </TableHeaderRow>\n        </TableHeader>\n        <TableBody>\n          <TableRow>\n            <TableCell>Virus/Malware</TableCell>\n            <TableCell>634</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Virus/Malware</TableCell>\n            <TableCell>778</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>URL Filtering</TableCell>\n            <TableCell>598</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  ))}\n</Stack>\n')),(0,r.kt)("h3",null,"Hoverable"),(0,r.kt)("p",null,"Enable a hover state on TableRows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Table isHoverable>\n  <TableHeader>\n    <TableHeaderRow>\n      <TableHeaderCell>Event Type</TableHeaderCell>\n      <TableHeaderCell>Detections</TableHeaderCell>\n    </TableHeaderRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>Virus/Malware</TableCell>\n      <TableCell>634</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>Virus/Malware</TableCell>\n      <TableCell>778</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>URL Filtering</TableCell>\n      <TableCell>598</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n")),(0,r.kt)("h2",null,"Custom tables"),(0,r.kt)("p",null,"In the following examples, we demonstrate how to use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tannerlinsley/react-table"},(0,r.kt)("inlineCode",{parentName:"a"},"react-table"))," with the Table component."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import { useTable, useBlockLayout, useRowSelect, useSortBy } from 'react-table';")),(0,r.kt)("h3",null,"Base table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"function BaseTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useBlockLayout,\n  );\n\n  return (\n    <Table\n      isHoverable\n      {...getTableProps()}\n    >\n      <TableHeader>\n        {headerGroups.map(headerGroup => (\n          <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <TableHeaderCell {...column.getHeaderProps()}>{column.render('Header')}</TableHeaderCell>\n            ))}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <TableRow {...row.getRowProps()}>\n              {\n                row.cells.map(cell => {\n                  return (<TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>);\n                })\n              }\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n\nrender(<BaseTable />);\n")),(0,r.kt)("h3",null,"Selectable table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const IndeterminateCheckbox = React.forwardRef(({ indeterminate, ...rest }, ref) => {\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n\n  return (\n    <Checkbox\n      ref={resolvedRef}\n      indeterminate={indeterminate}\n      {...rest}\n    />\n  );\n});\n\nfunction SelectableTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows,\n    state: { selectedRowIds },\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useBlockLayout,\n    useRowSelect,\n    hooks => {\n      hooks.visibleColumns.push(columns => [\n        {\n          id: 'selection',\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <Flex height=\"100%\" alignItems=\"center\">\n              <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n            </Flex>\n          ),\n          Cell: ({ row }) => (\n            <Flex height=\"100%\" alignItems=\"center\">\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n            </Flex>\n          ),\n          width: 41,\n        },\n        ...columns,\n      ]);\n    }\n  );\n\n  return (\n    <>\n      <Table isHoverable {...getTableProps()}>\n        <TableHeader>\n          {headerGroups.map(headerGroup => (\n            <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <TableHeaderCell {...column.getHeaderProps()}>{column.render('Header')}</TableHeaderCell>\n              ))}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody {...getTableBodyProps()}>\n          {rows.slice(0, 10).map((row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>;\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n      <p>Selected Rows: {Object.keys(selectedRowIds).length}</p>\n      <pre>\n        <code>\n          {JSON.stringify(\n            {\n              selectedRowIds: selectedRowIds,\n              'selectedFlatRows[].original': selectedFlatRows.map(\n                d => d.original\n              ),\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </>\n  );\n}\n\nrender(<SelectableTable />);\n")),(0,r.kt)("h3",null,"Sortable table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"function SortableTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      // useSortBy\n      disableSortRemove: true,\n    },\n    useBlockLayout,\n    useSortBy,\n  );\n\n  return (\n    <Table isHoverable {...getTableProps()}>\n      <TableHeader>\n        {headerGroups.map(headerGroup => (\n          <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <TableHeaderCell {...column.getHeaderProps(column.getSortByToggleProps())}>\n                <Box\n                  display=\"inline-block\"\n                  overflow=\"hidden\"\n                  textOverflow=\"ellipsis\"\n                  whiteSpace=\"nowrap\"\n                  maxWidth={`calc(100% - ${(column.isSorted ? '24px' : '0px')})`}\n                >\n                  {column.render('Header')}\n                </Box>\n                {column.isSorted && (\n                  <Box as=\"span\">\n                    <Space minWidth=\"1x\" />\n                    {\n                      column.isSortedDesc ? <Icon icon=\"sort-down\" size={20} /> : <Icon icon=\"sort-up\" size={20} />\n                    }\n                  </Box>\n                )}\n              </TableHeaderCell>\n            ))}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody {...getTableBodyProps()}>\n        {rows.map(\n          (row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          }\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n\nrender(<SortableTable />);\n")),(0,r.kt)("h3",null,"Resizable table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"function ResizableTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    resetResizing,\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useBlockLayout,\n    useResizeColumns,\n  );\n\n  return (\n    <Stack spacing=\"4x\" shouldWrapChildren>\n      <Button onClick={resetResizing}>Reset Resizing</Button>\n      <Table\n        isHoverable\n        variant=\"outline\"\n        {...getTableProps()}\n      >\n        <TableHeader>\n          {headerGroups.map(headerGroup => (\n            <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <TableHeaderCell {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  {/* Use column.getResizerProps to hook up the events correctly */}\n                  <Box\n                    {...column.getResizerProps()}\n                    display=\"inline-block\"\n                    bg=\"blue:60\"\n                    width=\"3x\"\n                    height=\"100%\"\n                    position=\"absolute\"\n                    right=\"0\"\n                    top=\"0\"\n                    transform=\"translateX(50%)\"\n                    zIndex={1}\n                    {...column.isResizing && { bg: \"red:60\" }}\n                  />\n                </TableHeaderCell>\n              ))}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow {...row.getRowProps()}>\n                {\n                  row.cells.map(cell => {\n                    return (<TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>);\n                  })\n                }\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </Stack>\n  );\n}\n\nrender(<ResizableTable />);\n")),(0,r.kt)("h3",null,"Sticky table"),(0,r.kt)("p",null,"In this example, we use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/malte-wessel/react-custom-scrollbars"},(0,r.kt)("inlineCode",{parentName:"a"},"react-custom-scrollbars"))," to display scrollbar."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import { Scrollbars } from 'react-custom-scrollbars';")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"function StickyTable() {\n  const [colorMode] = useColorMode();\n  const scrollbarColor = colorMode === 'dark' ? 'white:tertiary' : 'black:tertiary';\n\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const tableHeaderRef = React.createRef();\n\n  const onScroll = (e) => {\n    const scrollLeft = e.target.scrollLeft;\n    if (!!tableHeaderRef && tableHeaderRef.current.scrollLeft !== scrollLeft) {\n      tableHeaderRef.current.scrollLeft = scrollLeft;\n    }\n  };\n\n  const renderThumb = props => {\n    return (\n      <Box\n        borderRadius=\"lg\"\n        bg={scrollbarColor}\n        {...props}\n      />\n    );\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useBlockLayout,\n  );\n\n  return (\n    <Table\n      isHoverable\n      variant=\"outline\"\n      width={400}\n      height={200}\n      {...getTableProps()}\n    >\n      <TableHeader ref={tableHeaderRef}>\n        {headerGroups.map(headerGroup => (\n          <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <TableHeaderCell {...column.getHeaderProps()}>\n                {column.render('Header')}\n              </TableHeaderCell>\n            ))}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <Scrollbars\n        universal\n        renderThumbHorizontal={renderThumb}\n        renderThumbVertical={renderThumb}\n        onScroll={onScroll}\n      >\n        <TableBody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Scrollbars>\n    </Table>\n  );\n}\n\nrender(<StickyTable />);\n")),(0,r.kt)("h3",null,"Full width table"),(0,r.kt)("p",null,"In this example, we use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bvaughn/react-virtualized"},(0,r.kt)("inlineCode",{parentName:"a"},"react-virtualized"))," to get full width."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import { AutoSizer } from 'react-virtualized';")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"function FullWidthTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      id: 'eventType',\n      accessor: 'eventType',\n      width: 'auto',\n    },\n    {\n      Header: 'Affected Devices',\n      id: 'affectedDevices',\n      accessor: 'affectedDevices',\n      width: 160,\n    },\n    {\n      Header: 'Detections',\n      id: 'detections',\n      accessor: 'detections',\n      width: '10%',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const getCalculatedColumns = ({ initColumns, tableWidth }) => {\n    const columns = initColumns.map(column => {\n      let columnWidth = column.width;\n      if (typeof columnWidth === 'string') {\n        const lastChar = columnWidth.substr(columnWidth.length - 1);\n        if (lastChar === '%') {\n          columnWidth = tableWidth * (parseFloat(columnWidth) / 100);\n          return {\n            ...column,\n            width: columnWidth\n          };\n        }\n        if (columnWidth === 'auto') {\n          return {\n            ...column,\n            width: 0\n          };\n        }\n      }\n      return column;\n    });\n    const customWidthColumns = columns.filter(column => !!column.width);\n    const totalCustomWidth = customWidthColumns.reduce((accumulator, column) => accumulator + column.width, 0);\n    let defaultCellWidth = (tableWidth - totalCustomWidth) / (columns.length - customWidthColumns.length);\n    defaultCellWidth = defaultCellWidth <= 0 ? 150 : defaultCellWidth;\n    return columns.map(column => {\n      if (!!column.width) {\n        return column;\n      }\n      return {\n        ...column,\n        width: defaultCellWidth\n      };\n    });\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useBlockLayout,\n  );\n\n  return (\n    <Box height={300} overflow=\"auto\">\n      <AutoSizer>\n        {({ height, width }) => {\n          if (height === 0 || width === 0) {\n            return null;\n          }\n          const newColumns = getCalculatedColumns({ initColumns: columns, tableWidth: width });\n          return (\n            <Table\n              isHoverable\n              {...getTableProps()}\n            >\n              <TableHeader>\n                {headerGroups.map(headerGroup => (\n                  <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map(column => {\n                      const columnId = column.id;\n                      const _column = newColumns.filter(column => column.id === columnId);\n                      const _columnWidth = _column[0].width;\n                      return (\n                        <TableHeaderCell\n                          width={_columnWidth}\n                          {...column.getHeaderProps()}\n                        >\n                          {column.render('Header')}\n                        </TableHeaderCell>\n                      );\n                    })}\n                  </TableHeaderRow>\n                ))}\n              </TableHeader>\n              <TableBody {...getTableBodyProps()}>\n                {rows.map((row, i) => {\n                  prepareRow(row);\n                  return (\n                    <TableRow {...row.getRowProps()}>\n                      {\n                        row.cells.map(cell => {\n                          const columnId = cell.column.id;\n                          const _column = newColumns.filter(column => column.id === columnId);\n                          const _columnWidth = _column[0].width;\n                          return (\n                            <TableCell\n                              width={_columnWidth}\n                              {...cell.getCellProps()}\n                            >\n                              {cell.render('Cell')}\n                            </TableCell>\n                          );\n                        })\n                      }\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          );\n        }}\n      </AutoSizer>\n    </Box>\n  );\n}\n\nrender(<FullWidthTable />);\n")),(0,r.kt)("h3",null,"Row reordering"),(0,r.kt)("h4",null,"By react-movable"),(0,r.kt)("p",null,"In this example, we use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tajo/react-movable"},(0,r.kt)("inlineCode",{parentName:"a"},"react-movable"))," to move table rows."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import { List, arrayMove } from 'react-movable';")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"function ReactMovableExample() {\n  const [items, setItems] = React.useState([\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ]);\n\n  return (\n    <ReactMovable.List\n      values={items}\n      onChange={({ oldIndex, newIndex }) =>\n        setItems(ReactMovable.arrayMove(items, oldIndex, newIndex))\n      }\n      renderList={({ children, props, isDragged }) => (\n        <Table\n          style={{\n            cursor: isDragged ? 'grabbing' : undefined\n          }}\n        >\n          <TableHeader>\n            <TableHeaderRow>\n              <TableHeaderCell>Event Type</TableHeaderCell>\n              <TableHeaderCell>Affected Devices</TableHeaderCell>\n              <TableHeaderCell>Detections</TableHeaderCell>\n            </TableHeaderRow>\n          </TableHeader>\n          <TableBody {...props}>{children}</TableBody>\n        </Table>\n      )}\n      renderItem={({ value, props, isDragged, isSelected }) => {\n        const row = (\n          <TableRow\n            {...props}\n            style={{\n              ...props.style,\n              cursor: isDragged ? 'grabbing' : 'grab',\n              backgroundColor: isDragged || isSelected ? '#8a8a8a' : 'inherit',\n            }}\n          >\n            <TableCell>{value.eventType}</TableCell>\n            <TableCell>{value.affectedDevices}</TableCell>\n            <TableCell>{value.detections}</TableCell>\n          </TableRow>\n        );\n        return isDragged ? (\n          <Table style={{ ...props.style }}>\n            <TableBody>{row}</TableBody>\n          </Table>\n        ) : (\n          row\n        );\n      }}\n    />\n  );\n}\n\nrender(<ReactMovableExample />);\n")),(0,r.kt)("h4",null,"By react-dnd"),(0,r.kt)("p",null,"In this example, we use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/react-dnd/react-dnd"},(0,r.kt)("inlineCode",{parentName:"a"},"react-dnd"))," to move table rows."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import { DndProvider, useDrop, useDragLayer } from 'react-dnd';")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import { HTML5Backend, getEmptyImage } from 'react-dnd-html5-backend';")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import update from 'immutability-helper';")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const ItemTypes = {\n  TR: 'tr',\n};\n\nconst TR = ({ id, row, index, moveTr }) => {\n  const ref = React.useRef(null);\n  const [, drop] = ReactDND.useDrop({\n    accept: ItemTypes.TR,\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current ? ref.current.getBoundingClientRect() : {};\n      // Get vertical middle\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      moveTr(dragIndex, hoverIndex);\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  const [{ isDragging }, drag, preview] = ReactDND.useDrag({\n    item: { type: ItemTypes.TR, id, index, row },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  drag(drop(ref));\n\n  React.useEffect(() => {\n    preview(ReactDNDHtml5backend.getEmptyImage(), { captureDraggingState: true });\n  }, []);\n\n  return (\n    <TableRow\n      ref={ref}\n      style={{\n        cursor: 'move',\n        opacity: isDragging ? 0 : 1,\n      }}\n    >\n      <TableCell>{row.eventType}</TableCell>\n      <TableCell>{row.affectedDevices}</TableCell>\n      <TableCell>{row.detections}</TableCell>\n    </TableRow>\n  );\n};\n\nconst CustomDragLayer = () => {\n  const { itemType, isDragging, item, initialOffset, currentOffset, } = ReactDND.useDragLayer((monitor) => ({\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    initialOffset: monitor.getInitialSourceClientOffset(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging(),\n  }));\n\n  const layerStyles = {\n    position: 'fixed',\n    pointerEvents: 'none',\n    zIndex: 100,\n    left: 0,\n    top: 0,\n  };\n\n  const getItemStyles = (initialOffset, currentOffset) => {\n    if (!initialOffset || !currentOffset) {\n      return {\n        display: 'none',\n      };\n    }\n    const { x, y } = currentOffset;\n    const transform = `translate(${x}px, ${y}px)`;\n    return {\n      transform,\n      WebkitTransform: transform,\n    };\n  };\n\n  if (!isDragging) {\n    return null;\n  }\n\n  if (itemType === ItemTypes.TR) {\n    const row = item.row;\n     return (\n       <Box style={layerStyles}>\n        <Box style={getItemStyles(initialOffset, currentOffset)}>\n          <TableRow\n            style={{\n              backgroundColor: '#8a8a8a',\n            }}\n          >\n            <TableCell>{row.eventType}</TableCell>\n            <TableCell>{row.affectedDevices}</TableCell>\n            <TableCell>{row.detections}</TableCell>\n          </TableRow>\n        </Box>\n      </Box>\n    );\n  }\n\n  return null;\n};\n\nfunction ReactDNDExample() {\n  const [items, setItems] = React.useState([\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ]);\n  const moveTr = React.useCallback((dragIndex, hoverIndex) => {\n    const dragCard = items[dragIndex];\n    setItems(update(items, {\n      $splice: [\n        [dragIndex, 1],\n        [hoverIndex, 0, dragCard],\n      ],\n    }));\n  }, [items]);\n  return (\n    <Table>\n      <TableHeader>\n        <TableHeaderRow>\n          <TableHeaderCell>Event Type</TableHeaderCell>\n          <TableHeaderCell>Affected Devices</TableHeaderCell>\n          <TableHeaderCell>Detections</TableHeaderCell>\n        </TableHeaderRow>\n      </TableHeader>\n      <TableBody>\n        {\n          items.map((item, i) => (\n            <TR key={item.id} index={i} id={item.id} row={item} moveTr={moveTr}/>\n          ))\n        }\n        <CustomDragLayer />\n      </TableBody>\n    </Table>\n  );\n}\n\nrender(\n  <ReactDND.DndProvider backend={ReactDNDHtml5backend.HTML5Backend}>\n    <ReactDNDExample />\n  </ReactDND.DndProvider>\n);\n")),(0,r.kt)("h3",null,"Column reordering"),(0,r.kt)("p",null,"In this example, we use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/atlassian/react-beautiful-dnd"},(0,r.kt)("inlineCode",{parentName:"a"},"react-beautiful-dnd"))," to move table columns."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const getItemStyle = ({ isDragging, isDropAnimating }, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n\n  // change background colour if dragging\n  background: isDragging ? \"#8a8a8a\" : \"inherit\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nfunction BaseTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    allColumns,\n    setColumnOrder,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n    },\n    useColumnOrder,\n    useBlockLayout,\n  );\n\n  const currentColOrder = React.useRef();\n  const [placeholderProps, setPlaceholderProps] = React.useState({});\n  const onDragEnd = (result) => {\n    setPlaceholderProps({});\n\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n  };\n\n  const onDragUpdate = (dragUpdateObj, b) => {\n    if(!dragUpdateObj.destination){\n      return;\n    }\n    const draggableId = dragUpdateObj.draggableId;\n    const destinationIndex = dragUpdateObj.destination.index;\n\n    const queryAttr = \"data-rbd-drag-handle-draggable-id\";\n    const domQuery = `[${queryAttr}='${draggableId}']`;\n    const draggedDOM = document.querySelector(domQuery);\n\n    if (!draggedDOM) {\n      return;\n    }\n    const { clientHeight, clientWidth } = draggedDOM;\n\n    const clientX = Array.from(draggedDOM.parentNode.children)\n      .slice(0, destinationIndex)\n      .reduce((total, curr) => {\n        return total + curr.clientWidth;\n      }, 0);\n\n    setPlaceholderProps({\n      clientHeight,\n      clientWidth,\n      clientY: 0,\n      clientX: clientX\n    });\n\n    const colOrder = [...currentColOrder.current];\n    const sIndex = dragUpdateObj.source.index;\n    const dIndex = dragUpdateObj.destination && dragUpdateObj.destination.index;\n    if (typeof sIndex === \"number\" && typeof dIndex === \"number\") {\n      colOrder.splice(sIndex, 1);\n      colOrder.splice(dIndex, 0, dragUpdateObj.draggableId);\n      setColumnOrder(colOrder);\n    }\n  };\n\n  return (\n    <Table {...getTableProps()}>\n      <TableHeader>\n        {headerGroups.map((headerGroup, index) => (\n          <ReactBeautifulDND.DragDropContext\n            key={index}\n            onDragStart={() => {\n              currentColOrder.current = allColumns.map(o => o.id);\n            }}\n            onDragUpdate={onDragUpdate}\n            onDragEnd={onDragEnd}\n          >\n            <ReactBeautifulDND.Droppable droppableId=\"droppable\" direction=\"horizontal\">\n              {(droppableProvided, droppableSnapshot) => {\n                return (\n                  <TableHeaderRow\n                    ref={droppableProvided.innerRef}\n                    {...droppableProvided.droppableProps}\n                    {...headerGroup.getHeaderGroupProps()}\n                  >\n                    {headerGroup.headers.map((column, index) => (\n                      <ReactBeautifulDND.Draggable\n                        key={column.id}\n                        draggableId={column.id}\n                        index={index}\n                        isDragDisabled={!column.accessor}\n                      >\n                        {(provided, snapshot) => {\n                          return (\n                            <TableHeaderCell\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              {...column.getHeaderProps()}\n                              style={{\n                                ...getItemStyle(\n                                  snapshot,\n                                  provided.draggableProps.style\n                                )\n                              }}\n                            >\n                              {column.render(\"Header\")}\n                            </TableHeaderCell>\n                          );\n                        }}\n                      </ReactBeautifulDND.Draggable>\n                    ))}\n                    {droppableProvided.placeholder}\n                    <Box\n                      position=\"absolute\"\n                      top={placeholderProps.clientY}\n                      left={placeholderProps.clientX}\n                      height={placeholderProps.clientHeight}\n                      bg=\"gray:60\"\n                      width={placeholderProps.clientWidth}\n                    />\n                  </TableHeaderRow>\n                );\n              }}\n            </ReactBeautifulDND.Droppable>\n          </ReactBeautifulDND.DragDropContext>\n        ))}\n      </TableHeader>\n      <TableBody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <TableRow {...row.getRowProps()}>\n              {\n                row.cells.map(cell => {\n                  return (<TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>);\n                })\n              }\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n\n// The resetServerContext function should be used when server side rendering (SSR).\n// It ensures context state does not persist across multiple renders on the server\n// which would result in client/server markup mismatches after multiple requests are rendered on the server.\nReactBeautifulDND.resetServerContext();\n\nrender(<BaseTable />);\n")),(0,r.kt)("h2",null,"Props"),(0,r.kt)("h3",null,"Table"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Table")," composes the ",(0,r.kt)("a",{parentName:"p",href:"./flex"},(0,r.kt)("inlineCode",{parentName:"a"},"Flex"))," component."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"isHoverable"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Enable a hover state on TableRows.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"size"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'md'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The size of TableCells. One of: ",(0,r.kt)("inlineCode",{parentName:"td"},"'sm'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"'md'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"'lg'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'default'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The variant of the table style to use. One of: ",(0,r.kt)("inlineCode",{parentName:"td"},"'default'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"'outline'"))))),(0,r.kt)("h3",null,"TableHeader"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TableHeader")," composes the ",(0,r.kt)("a",{parentName:"p",href:"./box"},(0,r.kt)("inlineCode",{parentName:"a"},"Box"))," component."),(0,r.kt)("h3",null,"TableHeaderRow"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TableHeaderRow")," composes the ",(0,r.kt)("a",{parentName:"p",href:"./pseudobox"},(0,r.kt)("inlineCode",{parentName:"a"},"PseudoBox"))," component."),(0,r.kt)("h3",null,"TableHeaderCell"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TableHeaderCell")," composes the ",(0,r.kt)("a",{parentName:"p",href:"./box"},(0,r.kt)("inlineCode",{parentName:"a"},"Box"))," component."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"width"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"150")))),(0,r.kt)("h3",null,"TableBody"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TableBody")," composes the ",(0,r.kt)("a",{parentName:"p",href:"./box"},(0,r.kt)("inlineCode",{parentName:"a"},"Box"))," component."),(0,r.kt)("h3",null,"TableRow"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TableRow")," composes the ",(0,r.kt)("a",{parentName:"p",href:"./pseudobox"},(0,r.kt)("inlineCode",{parentName:"a"},"PseudoBox"))," component."),(0,r.kt)("h3",null,"TableCell"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TableCell")," composes the ",(0,r.kt)("a",{parentName:"p",href:"./box"},(0,r.kt)("inlineCode",{parentName:"a"},"Box"))," component."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"width"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"150")))))}i.isMDXComponent=!0},27697:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/table",function(){return t(13485)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=27697,e(e.s=n);var n}));var n=e.O();_N_E=n}]);