(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2689],{54958:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return d}});var a=n(7896),r=n(59740),l=(n(2784),n(30876)),o=["components"],i={};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",null,"Scrollbar"),(0,l.kt)("h2",null,"Import"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Scrollbar\n} from '@trendmicro/react-styled-ui';\n")),(0,l.kt)("h2",null,"Usage"),(0,l.kt)("p",null,"The scrollbar default is hidden until you hover the mouse pointer over the content."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Scrollbar\n  height={160}\n  width="50%"\n  border={1}\n  borderColor="#424242"\n  resize="both"\n>\n  <Lorem count={12} style={{ paddingLeft: \'16px\', whiteSpace: \'nowrap\' }}  />\n</Scrollbar>\n')),(0,l.kt)("h3",null,"Visibility"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"visibility")," prop to change the visibility style of ",(0,l.kt)("inlineCode",{parentName:"p"},"Scrollbar"),". You can set the value to ",(0,l.kt)("inlineCode",{parentName:"p"},"auto")," (default), ",(0,l.kt)("inlineCode",{parentName:"p"},"visible"),", or ",(0,l.kt)("inlineCode",{parentName:"p"},"hidden"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Flex>\n  <Box flex="auto" mr="4x">\n    <Text size="xl" marginBottom="2x">auto</Text>\n    <Scrollbar\n      height={120}\n      border={1}\n      borderColor="#424242"\n      visibility="auto"\n    >\n      <Lorem count={12} style={{ paddingLeft: \'16px\' }} />\n    </Scrollbar>\n  </Box>\n  <Box flex="auto" mr="4x">\n    <Text size="xl" marginBottom="2x">visible</Text>\n    <Scrollbar\n      height={120}\n      border={1}\n      borderColor="#424242"\n      visibility="visible"\n    >\n      <Lorem count={12} style={{ paddingLeft: \'16px\' }} />\n    </Scrollbar>\n  </Box>\n  <Box flex="auto" mr="4x">\n    <Text size="xl" marginBottom="2x">hidden</Text>\n    <Scrollbar\n      height={120}\n      border={1}\n      borderColor="#424242"\n      visibility="hidden"\n    >\n      <Lorem count={12} style={{ paddingLeft: \'16px\' }} />\n    </Scrollbar>\n  </Box>\n</Flex>\n')),(0,l.kt)("h3",null,"Disabled"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"disabled")," attribute, the overflow is clipped, and the rest of the content is hidden."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"<Scrollbar height={160} disabled>\n  <Lorem count={12} />\n</Scrollbar>\n")),(0,l.kt)("h3",null,"The minimal thumb size"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"minThumbSize")," attribute to set the minimal size (in pixels) for thumbs."),(0,l.kt)("p",null,"The thumbs size will be the original size if the original size > the minimal size. In other words, the thumbs size will be the minimal size if the original size < the minimal size."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'function MinThumbSizeScroll() {\n  const [minThumbSize, setMinThumbSize] = React.useState(32);\n  const [dataRow, setDataRow] = React.useState(8);\n\n  return (\n    <>\n      <Box marginBottom="2x">\n        <Text marginBottom="1x">The minimal thumb size:</Text>\n        <RadioGroup onChange={value => setMinThumbSize(Number(value))} value={minThumbSize}>\n          <Stack spacing="1x" shouldWrapChildren>\n            <Radio value={32}>32px (default)</Radio>\n            <Radio value={16}>16px (customization)</Radio>\n          </Stack>\n        </RadioGroup>\n      </Box>\n      <Box marginBottom="2x">\n        <Text marginBottom="1x">Data row:</Text>\n        <RadioGroup onChange={value => setDataRow(Number(value))} value={dataRow}>\n          <Stack spacing="1x" shouldWrapChildren>\n            <Radio value={8}>8 rows</Radio>\n            <Radio value={24}>24 rows</Radio>\n          </Stack>\n        </RadioGroup>\n      </Box>\n      <Box>\n        <Text marginBottom="1x">Result:</Text>\n        <Scrollbar\n          height={120}\n          border={1}\n          borderColor="#424242"\n          visibility="visible"\n          minThumbSize={minThumbSize}\n        >\n          <Lorem count={dataRow} style={{ paddingLeft: \'16px\' }} />\n        </Scrollbar>\n      </Box>\n    </>\n  );\n}\n')),(0,l.kt)("h3",null,"The fixed thumb size"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"thumbSize")," attribute to set a fixed size (in pixels) for thumbs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'function FixedThumbSizeScroll() {\n  const [thumbSize, setThumbSize] = React.useState(-1);\n  const [dataRow, setDataRow] = React.useState(8);\n\n  return (\n    <>\n      <Box marginBottom="2x">\n        <Text marginBottom="1x">The fixed thumb size:</Text>\n        <RadioGroup onChange={value => setThumbSize(Number(value))} value={thumbSize}>\n          <Stack spacing="1x" shouldWrapChildren>\n            <Radio value={-1}>undefined (default)</Radio>\n            <Radio value={100}>100px (customization)</Radio>\n          </Stack>\n        </RadioGroup>\n      </Box>\n      <Box marginBottom="2x">\n        <Text marginBottom="1x">Data row:</Text>\n        <RadioGroup onChange={value => setDataRow(Number(value))} value={dataRow}>\n          <Stack spacing="1x" shouldWrapChildren>\n            <Radio value={8}>8 rows</Radio>\n            <Radio value={24}>24 rows</Radio>\n          </Stack>\n        </RadioGroup>\n      </Box>\n      <Box>\n        <Text marginBottom="1x">Result:</Text>\n        <Scrollbar\n          height={120}\n          border={1}\n          borderColor="#424242"\n          visibility="visible"\n          thumbSize={thumbSize === -1 ? undefined : thumbSize}\n        >\n          <Lorem count={dataRow} style={{ paddingLeft: \'16px\' }} />\n        </Scrollbar>\n      </Box>\n    </>\n  );\n}\n')),(0,l.kt)("h3",null,"The scrollbar in ",(0,l.kt)("inlineCode",{parentName:"h3"},"Menu")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Menu width="160px">\n  <MenuButton width="100%">Select an option</MenuButton>\n  <MenuList width="100%" height={200}>\n    <Scrollbar>\n      <MenuItem>List item 1</MenuItem>\n      <MenuItem>List item 2</MenuItem>\n      <MenuItem>List item 3</MenuItem>\n      <MenuItem>List item 4</MenuItem>\n      <MenuItem>List item 5</MenuItem>\n      <MenuItem>List item 6</MenuItem>\n      <MenuItem>List item 7</MenuItem>\n      <MenuItem>List item 8</MenuItem>\n      <MenuItem>List item 9</MenuItem>\n      <MenuItem>List item 10</MenuItem>\n      <MenuItem>List item 11</MenuItem>\n      <MenuItem>List item 12</MenuItem>\n    </Scrollbar>\n  </MenuList>\n</Menu>\n')),(0,l.kt)("h3",null,"The scrollbar in ",(0,l.kt)("inlineCode",{parentName:"h3"},"Table")),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"renderScrollView")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"renderScrollTrack")," attributes to customize ",(0,l.kt)("inlineCode",{parentName:"p"},"Scrollbar")," style."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"function CustomScrollbar({\n  showVerticalScrollbar,\n  showHorizontalScrollbar,\n  children,\n  ...props\n}) {\n  const renderScrollView = props => {\n    return (\n      <Box\n        {...props}\n        right={showVerticalScrollbar ? \"8px\" : 0}\n        bottom={showHorizontalScrollbar ? \"8px\" : 0}\n      />\n    );\n  };\n\n  const renderScrollTrack = props => {\n    const [colorMode] = useColorMode();\n    const bgColor = {\n      dark: 'gray:70',\n      light: 'gray:70',\n    }[colorMode];\n    return (\n      <Box\n        {...props}\n        bg={bgColor}\n      />\n    );\n  };\n\n  return (\n    <Scrollbar\n      visibility=\"visible\"\n      renderView={renderScrollView}\n      renderHorizontalTrack={renderScrollTrack}\n      renderVerticalTrack={renderScrollTrack}\n      {...props}\n    >\n      {children}\n    </Scrollbar>\n  );\n}\n\nfunction StickyTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const tableHeaderRef = React.createRef();\n\n  const [showHorizontalScrollbar, setShowHorizontalScrollbar] = React.useState(false);\n  const [showVerticalScrollbar, setShowVerticalScrollbar] = React.useState(false);\n\n  const onScroll = (e) => {\n    const scrollLeft = e.target.scrollLeft;\n    if (tableHeaderRef.current && tableHeaderRef.current.scrollLeft !== scrollLeft) {\n      tableHeaderRef.current.scrollLeft = scrollLeft;\n    }\n  };\n\n  const onUpdate = ({ hasHorizontalScrollbar, hasVerticalScrollbar, ...props }) => {\n    setShowHorizontalScrollbar(hasHorizontalScrollbar);\n    setShowVerticalScrollbar(hasVerticalScrollbar);\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useBlockLayout,\n  );\n  \n  return (\n    <Table\n      variant=\"outline\"\n      width={400}\n      height={200}\n      {...getTableProps()}\n    >\n      <TableHeader ref={tableHeaderRef}>\n        {headerGroups.map(headerGroup => {\n          const { style, ...props } = headerGroup.getHeaderGroupProps();\n          let headerWidth = style.width;\n          if (showVerticalScrollbar) {\n            headerWidth = `calc(${style.width} + 8px)`; // 8px is scrollbar width\n          }\n          return (\n            <TableHeaderRow style={{...style, width: headerWidth}} {...props}>\n              {headerGroup.headers.map((column, index) => (\n                <TableHeaderCell\n                  key={column.accessor}\n                  {...(showVerticalScrollbar && index === headerGroup.headers.length - 1) && {\n                    borderRight: 0,\n                  }}\n                  {...column.getHeaderProps()}\n                >\n                  {column.render('Header')}\n                </TableHeaderCell>\n              ))}\n              {showVerticalScrollbar && (\n                <TableHeaderCell width=\"8px\" padding={0} borderLeft={0} />\n              )}\n            </TableHeaderRow>\n          );\n        })}\n      </TableHeader>\n      <CustomScrollbar\n        showVerticalScrollbar\n        showHorizontalScrollbar\n        onScroll={onScroll}\n        onUpdate={onUpdate}\n      >\n        <TableBody {...getTableBodyProps()}>\n          {rows.map((row, index) => {\n            prepareRow(row);\n            return (\n              <TableRow key={index} {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell key={cell.id} {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </CustomScrollbar>\n    </Table>\n  );\n}\n\nrender(<StickyTable />);\n")),(0,l.kt)("h3",null,"Shadow scrollbar"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'function ShadowScrollbar(props) {\n  const shadowTopRef = React.useRef(null);\n  const shadowBottomRef = React.useRef(null);\n\n  const handleUpdate = ({ values }) => {\n    const { scrollTop, scrollHeight, clientHeight } = values;\n    const shadowTopOpacity = 1 / 20 * Math.min(scrollTop, 20);\n    const bottomScrollTop = scrollHeight - clientHeight;\n    const shadowBottomOpacity = 1 / 20 * (bottomScrollTop - Math.max(scrollTop, bottomScrollTop - 20));\n    shadowTopRef.current.style.opacity = shadowTopOpacity;\n    shadowBottomRef.current.style.opacity = shadowBottomOpacity;\n  };\n  return (\n    <Box position="relative">\n      <Scrollbar\n        onUpdate={handleUpdate}\n        {...props}\n      />\n      <Box\n        ref={shadowTopRef}\n        position="absolute"\n        top="0"\n        left="0"\n        right="0"\n        height="24px"\n        background="linear-gradient(to bottom, rgba(33, 33, 33, 1) 0%, rgba(255, 255, 255, 0) 100%)"\n      />\n      <Box\n        ref={shadowBottomRef}\n        position="absolute"\n        bottom="0"\n        left="0"\n        right="0"\n        height="24px"\n        background="linear-gradient(to top, rgba(33, 33, 33, 1) 0%, rgba(255, 255, 255, 0) 100%)"\n      />\n    </Box>\n  );\n}\n\nrender(\n  <ShadowScrollbar height={300}>\n    <Lorem count={12} />\n  </ShadowScrollbar>\n);\n')),(0,l.kt)("h2",null,"Props"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the overflow is clipped, and the rest of the content is hidden.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxHeight"),(0,l.kt)("td",{parentName:"tr",align:"left"},"number ","|"," string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'auto'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Set a minimum height (in pixels) for auto-height mode. If ",(0,l.kt)("inlineCode",{parentName:"td"},"maxHeight")," is not ",(0,l.kt)("inlineCode",{parentName:"td"},"'auto'"),", activate auto-height mode.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"minHeight"),(0,l.kt)("td",{parentName:"tr",align:"left"},"number ","|"," string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'auto'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Set a maximum height (in pixels) for auto-height mode.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"minThumbSize"),(0,l.kt)("td",{parentName:"tr",align:"left"},"number"),(0,l.kt)("td",{parentName:"tr",align:"left"},"32"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Minimal thumb size in pixels.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"onScroll"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Event handler.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"onUpdate"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function({ values, hasHorizontalScrollbar, hasVerticalScrollbar })"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Called whenever the component is updated.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"renderView"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"The element your content will be rendered in.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"renderHorizontalThumb"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Horizontal thumb element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"renderHorizontalTrack"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Horizontal track element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"renderVerticalThumb"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Vertical thumb element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"renderVerticalTrack"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Vertical track element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"thumbSize"),(0,l.kt)("td",{parentName:"tr",align:"left"},"number"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Set a fixed size (in pixels) for thumbs.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"visibility"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'auto'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Acceptable values: ",(0,l.kt)("inlineCode",{parentName:"td"},"'auto'"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"'visible'"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"'hidden'"),". If ",(0,l.kt)("inlineCode",{parentName:"td"},"'auto'"),", it will automatically show or hide the scrollbar on the container. If ",(0,l.kt)("inlineCode",{parentName:"td"},"'visible'"),", the scrollbar is visible.  If ",(0,l.kt)("inlineCode",{parentName:"td"},"'hidden'"),", the scrollbar is invisible.")))))}d.isMDXComponent=!0},12553:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/scrollbar",function(){return n(54958)}])}},function(e){e.O(0,[9774,2888,179],(function(){return t=12553,e(e.s=t);var t}));var t=e.O();_N_E=t}]);