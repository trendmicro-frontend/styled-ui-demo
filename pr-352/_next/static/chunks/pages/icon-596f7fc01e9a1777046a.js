_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[38],{"97Jx":function(e,n){function t(){return e.exports=t=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},e.exports.default=e.exports,e.exports.__esModule=!0,t.apply(this,arguments)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0},Km8e:function(e,n,t){"use strict";var o=Object.assign.bind(Object);e.exports=o,e.exports.default=e.exports},LdEA:function(e,n){e.exports=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r},e.exports.default=e.exports,e.exports.__esModule=!0},ZVZ0:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return u}));var o=t("ERkP"),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),s=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"===typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=s(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(t),d=o,u=b["".concat(i,".").concat(d)]||b[d]||m[d]||a;return t?r.a.createElement(u,c(c({ref:n},p),{},{components:t})):r.a.createElement(u,c({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"===typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"===typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=t[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},m3Bd:function(e,n,t){var o=t("LdEA");e.exports=function(e,n){if(null==e)return{};var t,r,a=o(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a},e.exports.default=e.exports,e.exports.__esModule=!0},mNcY:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return s}));var o=t("97Jx"),r=t.n(o),a=t("m3Bd"),i=t.n(a),c=(t("ERkP"),t("ZVZ0")),l=["components"],p={};function s(e){var n=e.components,t=i()(e,l);return Object(c.b)("wrapper",r()({},p,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",null,"Icon"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Icon")," is used to render SVG icons in a more convenient way. You can extend icons by defining icon keys in ",Object(c.b)("inlineCode",{parentName:"p"},"theme.icons"),"."),Object(c.b)("h2",null,"Import"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"import { Icon } from '@trendmicro/react-styled-ui';\n")),Object(c.b)("h2",null,"Usage"),Object(c.b)("p",null,"Use an icon by passing the ",Object(c.b)("inlineCode",{parentName:"p"},"icon")," prop. This ",Object(c.b)("inlineCode",{parentName:"p"},"icon")," property value must match an icon key defined in ",Object(c.b)("inlineCode",{parentName:"p"},"theme.icons"),". By default, the icon inherits the font size and color of its parent."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="row" spacing="4x" alignItems="center">\n  <Icon icon="face-smile-o" />\n  <Icon icon="face-smile-o" size="6x" color="red:50" />\n  <Icon icon="face-smile-o" size="8x" color="yellow:50" />\n  <Icon icon="face-smile-o" size="12x" color="teal:40" />\n</Stack>\n')),Object(c.b)("h3",null,"Animating icons"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"spin")," prop to get any icon to rotate either in the clockwise (CW) or counterclockwise (CCW) direction."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const useToggle = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const toggle = () => setValue(value => !value);\n  return [value, toggle, setValue];\n};\n\nfunction Example() {\n  const [checked, toggle] = useToggle(true);\n  const playState = checked ? \'running\' : \'paused\';\n\n  return (\n    <>\n      <Flex mb="4x">\n        <ToggleSwitch size="sm" checked={checked} onChange={toggle} /><Space width="4x" />Toggle animation\n      </Flex>\n      <Stack direction="row" spacing="4x">\n        <Icon icon="spinner" size="6x" spin animationPlayState={playState} />\n        <Icon icon="spinner" size="6x" spin animationDuration="4s" animationPlayState={playState} />\n        <Icon icon="clock" size="6x" spin animationPlayState={playState} animationTimingFunction="steps(8)" />\n        <Icon icon="redo" size="6x" spin="cw" animationPlayState={playState} />\n        <Icon icon="undo" size="6x" spin="ccw" animationPlayState={playState} />\n      </Stack>\n    </>\n  );\n}\n\nrender(<Example />);\n')),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"animation")," prop can be used to override default animation, it is a shorthand property for:"),Object(c.b)("p",null,"\u2022 ",Object(c.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-name"},"animationName"),Object(c.b)("br",null),"\n\u2022 ",Object(c.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-duration"},"animationDuration"),Object(c.b)("br",null),"\n\u2022 ",Object(c.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function"},"animationTimingFunction"),Object(c.b)("br",null),"\n\u2022 ",Object(c.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay"},"animationDelay"),Object(c.b)("br",null),"\n\u2022 ",Object(c.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count"},"animationIterationCount"),Object(c.b)("br",null),"\n\u2022 ",Object(c.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction"},"animationDirection"),Object(c.b)("br",null),"\n\u2022 ",Object(c.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode"},"animationFillMode"),Object(c.b)("br",null),"\n\u2022 ",Object(c.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state"},"animationPlayState"),Object(c.b)("br",null)),Object(c.b)("h2",null,"Adding custom icons"),Object(c.b)("p",null,"First, you have to add custom icons to the theme. Each icon must be an object containing ",Object(c.b)("inlineCode",{parentName:"p"},"path")," and optional style props passed to ",Object(c.b)("a",{parentName:"p",href:"./svgicon"},"SVGIcon"),"."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled noInline",disabled:!0,noInline:!0},'const customIcons = {\n  icon1: {\n    path: (\n      <path fill="currentColor" d="..." />\n    ),\n  },\n  icon2: {\n    path: (\n      <g fill="currentColor">\n        <path d="..." />\n      </g>\n    ),\n\n    // optional style props\n    viewBox: \'0 0 48 48\',\n  },\n};\n\nconst customTheme = {\n  ...theme,\n  icons: {\n    ...theme.icons,\n    ...customIcons,\n  },\n};\n')),Object(c.b)("p",null,"After that simply wrap your app into ",Object(c.b)("inlineCode",{parentName:"p"},"ThemeProvider")," component and pass your theme as a ",Object(c.b)("inlineCode",{parentName:"p"},"theme")," prop. Just like this:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled noInline",disabled:!0,noInline:!0},"<ThemeProvider theme={customTheme}>\n  <App />\n</ThemeProvider>\n")),Object(c.b)("p",null,"Pass the icon name as a prop to the ",Object(c.b)("inlineCode",{parentName:"p"},"<Icon>")," component to render the SVG icon:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled noInline",disabled:!0,noInline:!0},'<Icon icon="icon1" color="blue:50" />\n')),Object(c.b)("h3",null,"Search icons"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const getIcons = (keyword) => tmicons.map(({ group, icons }) => {\n    const filteredIcons = icons.filter(({ iconset, name }) => (!keyword || name.indexOf(keyword) >= 0));\n    if (filteredIcons.length === 0) {\n      return null\n    }\n    return { group, icons: filteredIcons }\n  }\n);\n\nconst FlexItem = (props) => (\n  <Box {...props} />\n);\n\nconst renderIconGroup = (iconSet, keyword, showCharCode, color) => {\n  if(!iconSet) {\n    return null;\n  }\n  return (<Box key={iconSet.group.name}>\n    <FlexItem pt={iconSet.group.id !== 0 && \'2x\'}>\n      <Text fontSize={"2xl"}>{iconSet.group.name}</Text>    \n    </FlexItem>\n    {<Grid\n      gap="2x"\n      templateColumns="repeat(auto-fill, minmax(300px, 1fr));"\n      p="4x"\n      pl="6x"\n      pr="4x"\n    >\n      {iconSet.icons.map(icon => (\n        <Flex direction="row" align="center" pb={0} pr={0} overflow="hidden" key={icon.code}>\n          <FlexItem flex="initial" pr="2x">\n            <Icon icon={icon.name}/>\n          </FlexItem>\n          <FlexItem flex="none" pr="2x">\n            <Text display={"inline-block"} fontSize={"md"} color={color}>\n              {icon.name}\n            </Text>\n          </FlexItem>\n          {showCharCode && <FlexItem flex="none" pr="1x" color={color}>\n            <Text fontSize={"md"}>\n              {`(&#x${icon.code})`}\n            </Text>\n          </FlexItem>\n          }\n          <FlexItem flex="none" pb="1x">\n            {icon.new && <Badge variantColor="green" badgeContent={"new"} />}\n          </FlexItem>\n        </Flex>\n      ))}\n    </Grid>}\n  </Box>)\n}\n\nfunction Example() {\n  const [keyword, setKeyword] = React.useState(\'\');\n  const [showCharCode, setShowCharCode] = React.useState(false);\n  const [colorMode] = useColorMode();\n  const color = {\n    light: \'black:secondary\',\n    dark: \'white:secondary\',\n  }[colorMode];\n\n  const onChange = (e) => {\n    const keyword = e.target.value;\n    setKeyword(keyword);\n  };\n\n  const onClearInput = (e) => {\n    const keyword = \'\';\n    setKeyword(keyword);\n  };\n\n  const onChecked = () => {\n    setShowCharCode(!showCharCode);\n  }\n\n  return (\n    <>\n      <Flex direction="row" align="center" position="relative">\n        <Box pl="4x">\n          <SearchInput\n            fontSize="md"\n            placeholder="Search"\n            onChange={onChange}\n            onClearInput={onClearInput}\n            width={430}\n          />\n        </Box>\n        <Box position="absolute" right="5px">\n          <Checkbox\n            size="md"\n            onChange={() => onChecked()}>\n            Display character codes\n          </Checkbox>\n        </Box>\n      </Flex>\n      <Grid\n        gap={0}\n        templateRows="1fr"\n        p="4x"\n        transition="all .3s ease-in"\n      >\n        {getIcons(keyword).map((iconSet) => renderIconGroup(iconSet, keyword, showCharCode, color))}\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),Object(c.b)("h2",null,"Props"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Icon")," composes the ",Object(c.b)("a",{parentName:"p",href:"./svgicon"},Object(c.b)("inlineCode",{parentName:"a"},"SVGIcon"))," component. You can override the default styles with style props."),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:"left"},"Name"),Object(c.b)("th",{parentName:"tr",align:"left"},"Type"),Object(c.b)("th",{parentName:"tr",align:"left"},"Default"),Object(c.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:"left"},"icon"),Object(c.b)("td",{parentName:"tr",align:"left"},"string"),Object(c.b)("td",{parentName:"tr",align:"left"}),Object(c.b)("td",{parentName:"tr",align:"left"},"The name of the icon.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:"left"},"spin"),Object(c.b)("td",{parentName:"tr",align:"left"},"boolean ","|"," string"),Object(c.b)("td",{parentName:"tr",align:"left"},"false"),Object(c.b)("td",{parentName:"tr",align:"left"},"If ",Object(c.b)("inlineCode",{parentName:"td"},"true")," or ",Object(c.b)("inlineCode",{parentName:"td"},"'cw'"),", it will rotate in the clockwise direction. If ",Object(c.b)("inlineCode",{parentName:"td"},"'ccw'"),", it will rotate in the counterclockwise direction. Otherwise, no rotation occurs.")))))}s.isMDXComponent=!0},rBOv:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/icon",function(){return t("mNcY")}])}},[["rBOv",0,1]]]);