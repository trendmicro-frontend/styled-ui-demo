(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{"+wNj":function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}t.d(n,"a",(function(){return a}))},HbGN:function(e,n,t){"use strict";t.d(n,"a",(function(){return r}));var a=t("+wNj");function r(e,n){if(null==e)return{};var t,r,o=Object(a.a)(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}},Km8e:function(e,n,t){"use strict";var a=Object.assign.bind(Object);e.exports=a,e.exports.default=e.exports},ZVZ0:function(e,n,t){"use strict";t.d(n,"a",(function(){return g})),t.d(n,"b",(function(){return T}));var a=t("ERkP"),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),d=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"===typeof e?e(n):i(i({},n),e)),t},g=function(e){var n=d(e.components);return(r.a.createElement(c.Provider,{value:n},e.children))},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return(r.a.createElement(r.a.Fragment,{},n))}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=d(t),u=a,b=g["".concat(l,".").concat(u)]||g[u]||p[u]||o;return t?r.a.createElement(b,i(i({ref:n},c),{},{components:t})):r.a.createElement(b,i({ref:n},c))}));function T(e,n){var t=arguments,a=n&&n.mdxType;if("string"===typeof e||a){var o=t.length,l=new Array(o);l[0]=b;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"===typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},cxan:function(e,n,t){"use strict";function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}t.d(n,"a",(function(){return a}))},"efS/":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tag",function(){return t("zfxO")}])},zfxO:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return d}));var a=t("cxan"),r=t("HbGN"),o=t("ERkP"),l=t.n(o),i=t("ZVZ0"),s=(l.a.createElement,{}),c="wrapper";function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)(c,Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",null,"Tag"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Tag")," is used for items that need to be labeled, categorized, or organized using keywords that describe them."),Object(i.b)("h2",null,"Import"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import Tag from '@trendmicro/react-styled-ui/Tag';\n// or\nimport { Tag } from '@trendmicro/react-styled-ui';\n")),Object(i.b)("h2",null,"Usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<Tag>Sample Tag</Tag>\n")),Object(i.b)("h3",null,"Variants"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"variant")," prop to change the visual style of the ",Object(i.b)("inlineCode",{parentName:"p"},"Tag"),". You can set the value to ",Object(i.b)("inlineCode",{parentName:"p"},"solid"),", ",Object(i.b)("inlineCode",{parentName:"p"},"outline"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Stack direction="row" spacing="2x" shouldWrapChildren>\n  <Tag variant="solid">Solid Tag</Tag>\n  <Tag variant="outline">Outline Tag</Tag>\n</Stack>\n')),Object(i.b)("h3",null,"Colors"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"variantColor")," prop to change the color scheme of the ",Object(i.b)("inlineCode",{parentName:"p"},"Tag"),". ",Object(i.b)("inlineCode",{parentName:"p"},"variantColor")," can be any color key that exist in the ",Object(i.b)("inlineCode",{parentName:"p"},"theme.colors"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Stack spacing="4x">\n  <Stack direction="row" spacing="2x" shouldWrapChildren>\n    <Tag variantColor="gray">Gray</Tag>\n    <Tag variantColor="red">Red</Tag>\n    <Tag variantColor="magenta">Magenta</Tag>\n    <Tag variantColor="purple">Purple</Tag>\n    <Tag variantColor="blue">Blue</Tag>\n    <Tag variantColor="green">Green</Tag>\n    <Tag variantColor="teal">Teal</Tag>\n    <Tag variantColor="cyan">Cyan</Tag>\n  </Stack>\n  <Stack direction="row" spacing="2x" shouldWrapChildren>\n    <Tag variantColor="gray" borderRadius="lg">Gray</Tag>\n    <Tag variantColor="red" borderRadius="lg">Red</Tag>\n    <Tag variantColor="magenta" borderRadius="lg">Magenta</Tag>\n    <Tag variantColor="purple" borderRadius="lg">Purple</Tag>\n    <Tag variantColor="blue" borderRadius="lg">Blue</Tag>\n    <Tag variantColor="green" borderRadius="lg">Green</Tag>\n    <Tag variantColor="teal" borderRadius="lg">Teal</Tag>\n    <Tag variantColor="cyan" borderRadius="lg">Cyan</Tag>\n  </Stack>\n  <Stack direction="row" spacing="2x" shouldWrapChildren>\n    <Tag variant="outline" variantColor="gray">Gray</Tag>\n    <Tag variant="outline" variantColor="red">Red</Tag>\n    <Tag variant="outline" variantColor="magenta">Magenta</Tag>\n    <Tag variant="outline" variantColor="purple">Purple</Tag>\n    <Tag variant="outline" variantColor="blue">Blue</Tag>\n    <Tag variant="outline" variantColor="green">Green</Tag>\n    <Tag variant="outline" variantColor="teal">Teal</Tag>\n    <Tag variant="outline" variantColor="cyan">Cyan</Tag>\n  </Stack>\n  <Stack direction="row" spacing="2x" shouldWrapChildren>\n    <Tag variant="outline" variantColor="gray" borderRadius="lg">Gray</Tag>\n    <Tag variant="outline" variantColor="red" borderRadius="lg">Red</Tag>\n    <Tag variant="outline" variantColor="magenta" borderRadius="lg">Magenta</Tag>\n    <Tag variant="outline" variantColor="purple" borderRadius="lg">Purple</Tag>\n    <Tag variant="outline" variantColor="blue" borderRadius="lg">Blue</Tag>\n    <Tag variant="outline" variantColor="green" borderRadius="lg">Green</Tag>\n    <Tag variant="outline" variantColor="teal" borderRadius="lg">Teal</Tag>\n    <Tag variant="outline" variantColor="cyan" borderRadius="lg">Cyan</Tag>\n  </Stack>\n</Stack>\n')),Object(i.b)("h3",null,"Sizes"),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"size")," prop to change the size of the ",Object(i.b)("inlineCode",{parentName:"p"},"Tag"),". You can set the value to ",Object(i.b)("inlineCode",{parentName:"p"},"sm"),", ",Object(i.b)("inlineCode",{parentName:"p"},"md"),", or ",Object(i.b)("inlineCode",{parentName:"p"},"lg"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Stack spacing="4x">\n  <Stack\n    align="center"\n    direction="row"\n    spacing="2x"\n  >\n    <Tag size="sm" variantColor="gray">Small</Tag>\n    <Tag size="md" variantColor="gray">Medium</Tag>\n    <Tag size="lg" variantColor="gray">Large</Tag>\n  </Stack>\n  <Stack\n    align="center"\n    direction="row"\n    spacing="2x"\n  >\n    <Tag size="sm" variant="outline" variantColor="gray">Small</Tag>\n    <Tag size="md" variant="outline" variantColor="gray">Medium</Tag>\n    <Tag size="lg" variant="outline" variantColor="gray">Large</Tag>\n  </Stack>\n</Stack>\n')),Object(i.b)("h3",null,"States"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Stack spacing="4x">\n  <Stack direction="row" spacing="4x" shouldWrapChildren>\n    <Tag isCloseButtonVisible>Normal</Tag>\n    <Tag isCloseButtonVisible disabled>Disabled</Tag>\n    <Tag isCloseButtonVisible isInvalid>Invalid</Tag>\n  </Stack>\n  <Stack direction="row" spacing="4x" shouldWrapChildren>\n    <Tag variant="outline" isCloseButtonVisible>Normal</Tag>\n    <Tag variant="outline" isCloseButtonVisible disabled>Disabled</Tag>\n    <Tag variant="outline" isCloseButtonVisible isInvalid>Invalid</Tag>\n  </Stack>\n</Stack>\n')),Object(i.b)("h3",null,"Editable tag"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),'const EditableTag = React.forwardRef((\n  {\n    value,\n    isInvalid,\n    onChange,\n    onClick,\n    ...rest\n  },\n  ref,\n) => {\n  const { colorMode } = useColorMode();\n  const tagInputRef = React.useRef();\n  const tagHiddenSpanRef = React.useRef();\n  const { sizes } = useTheme();\n  const mt = `calc(${sizes[\'1x\']} - 1px)`;\n  const [inputVisible, setInputVisible] = React.useState(false);\n  const handleInputVisible = () => setInputVisible(true);\n  const handleInputHidden = () => setInputVisible(false);\n  const handleInputBlur = (e) => {\n    onChange(e);\n    handleInputHidden();\n  };\n  const handleInputKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    if (keyCode === 13) {\n      // Enter\n      onChange(e);\n      handleInputHidden();\n    }\n    if (keyCode === 27) {\n      // Esc\n      handleInputHidden();\n    }\n  };\n  const handleTagClick = (e) => {\n    e.stopPropagation();\n    onClick(e);\n    handleInputVisible();\n  };\n  const handleTagKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    if (keyCode === 13) {\n      handleInputVisible();\n    }\n  };\n  const resizeInput = () => {\n    if (!tagInputRef.current) {\n      return;\n    }\n    const tagInput = tagInputRef.current;\n    const tagHiddenSpan = tagHiddenSpanRef.current;\n    tagHiddenSpan.textContent = tagInput.value;\n    tagInput.style.width = `${tagHiddenSpan.offsetWidth}px`;\n    tagInput.focus();\n  };\n\n  React.useEffect(() => {\n    resizeInput();\n  }, [inputVisible]);\n\n  const hoverInvalidBgColor = {\n    dark: \'red:50\',\n    light: \'red:50\',\n  }[colorMode];\n\n  if (inputVisible) {\n    return (\n      <>\n        <Box\n          as="span"\n          ref={tagHiddenSpanRef}\n          position="absolute"\n          height="0"\n          overflow="hidden"\n          whiteSpace="pre"\n        />\n        <InputBase\n          ref={tagInputRef}\n          minHeight="6x"\n          mr="2x"\n          mt={mt}\n          defaultValue={value}\n          onKeyUp={handleInputKeyUp}\n          onBlur={handleInputBlur}\n          onInput={resizeInput}\n        />\n      </>\n    );\n  }\n  return (\n    <Tag\n      ref={ref}\n      isCloseButtonVisible\n      isInvalid={isInvalid}\n      mr="2x"\n      mt={mt}\n      onClick={handleTagClick}\n      onKeyUp={handleTagKeyUp}\n      cursor="pointer"\n      {...isInvalid && {\n        _hover: {\n          \'&:not(:focus)\': {\n            bg: hoverInvalidBgColor,\n            \'&::before\': {\n              bg: hoverInvalidBgColor,\n            },\n          },\n        }\n      }}\n      {...rest}\n    />\n  );\n});\n\nrender(\n  <EditableTag\n    value="Sample Tag"\n    onChange={() => console.log(\'Change the tag content.\')}\n    onClick={() => console.log(\'Click the tag.\')}\n    onClose={() => console.log(\'Close the tag.\')}\n  >\n    Sample Tag\n  </EditableTag>\n);\n\n')),Object(i.b)("h3",null,"New tag"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),'function Tags() {\n  const [inputVisible, setInputVisible] = React.useState(false);\n  const [tags, setTags] = React.useState([]);\n  const handleInputVisible = () => setInputVisible(true);\n  const handleInputHidden = () => setInputVisible(false);\n  const handleInputBlur = (e) => {\n    e.stopPropagation();\n    const inputValue = e.target.value;\n    let newTags = tags;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      newTags = [...tags, inputValue];\n    }\n    setTags(newTags);\n    handleInputHidden();\n  };\n  const handleInputKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    if (keyCode === 13) {\n      const inputValue = e.target.value;\n      let newTags = tags;\n      if (inputValue && tags.indexOf(inputValue) === -1) {\n        newTags = [...tags, inputValue];\n      }\n      setTags(newTags);\n      handleInputHidden();\n    }\n\n    if (keyCode === 27) {\n      handleInputHidden();\n    }\n  };\n  const handleTagChange = (index) => (e) => {\n    const inputValue = e.target.value;\n    let newTags = tags;\n    newTags[index] = inputValue;\n    setTags([...newTags]);\n  };\n  const handleTagClose = (index) => (e) => {\n    e.stopPropagation();\n    tags.splice(index, 1);\n    setTags([...tags]);\n  };\n\n  return (\n    <Box>\n      {\n        tags.map((tag, i) => {\n          return (\n            <EditableTag\n              key={i}\n              onChange={handleTagChange(i)}\n              onClose={handleTagClose(i)}\n            >\n              {tag}\n            </EditableTag>\n          );\n        })\n      }\n      { !inputVisible && (\n        <Box\n          display="inline-flex"\n          alignItems="center"\n          borderRadius="sm"\n          border="1px dotted"\n          borderColor="gray:60"\n          width={92}\n          Height="6x"\n          py={2}\n          pl="2x"\n          pr="1x"\n          mt="1x"\n          onClick={handleInputVisible}\n        >\n          <Icon icon="add" color="white:tertiary" />\n          <Space width="2x" />\n          <Text\n            color="white:secondary"\n            fontSize="xs"\n            lineHeight="xs"\n          >\n            New Tag\n          </Text>\n        </Box>\n      )}\n      { inputVisible && (\n        <InputBase\n          autoFocus\n          minHeight="6x"\n          mt="1x"\n          onKeyUp={handleInputKeyUp}\n          onBlur={handleInputBlur}\n        />\n      )}\n    </Box>\n  );\n}\n\nrender(<Tags />);\n')),Object(i.b)("h3",null,"With input"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"For duplicated entries, put both entries invalid, and hover the token to display error message."),Object(i.b)("li",{parentName:"ul"},"When paste with text with delimiter, automatically convert to tags. Default delimiter: ",Object(i.b)("inlineCode",{parentName:"li"},","),", ",Object(i.b)("inlineCode",{parentName:"li"},";"))),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),"const useWrapperStyle = ({\n  isFocused,\n}) => {\n  const { colorMode } = useColorMode();\n  const { sizes } = useTheme();\n  const borderColor = {\n    dark: 'gray:60',\n    light: 'gray:30',\n  }[colorMode];\n  const invalidBorderColor = {\n    dark: 'red:50',\n    light: 'red:60',\n  }[colorMode];\n  const focusBorderColor = {\n    dark: 'blue:60',\n    light: 'blue:60',\n  }[colorMode];\n\n  const pxSpace = sizes['3x'];\n  const pbSpace = sizes['1x'];\n  const px = `calc(${pxSpace} - 1px)`;\n  const pb = `calc(${pbSpace} - 1px)`;\n\n  return {\n    backgroundColor: 'transparent',\n    borderRadius: 'sm',\n    fontSize: 'sm',\n    lineHeight: 'sm',\n    px: px,\n    pb: pb,\n    border: 1,\n    borderColor: isFocused ? focusBorderColor : borderColor,\n    _invalid: {\n      borderColor: invalidBorderColor,\n    },\n  };\n};\n\nconst Tags = () => {\n  const { colorMode } = useColorMode();\n  const tagCreatorRef = React.useRef();\n  const [inputValue, setInputValue] = React.useState('');\n  const [tags, setTags] = React.useState([]);\n  const [placeholderVisible, setPlaceholderVisible] = React.useState(true);\n  const [isWrapperFocused, setWrapperFocused] = React.useState(false);\n  const checkTagAndGetMessage = ({ id, value }) => {\n    const isDuplicated = tags.find((t) => t.value === value && t.id !== id);\n    if (isDuplicated) {\n      return 'Duplicated entries';\n    }\n    return '';\n  };\n  const createTag = (value) => {\n    if (!value) {\n      return;\n    }\n    const newTag = {\n      id: new Date().getTime(),\n      value: value,\n      isActive: false,\n    };\n    const newTags = [...tags, newTag];\n    setTags(newTags);\n    setInputValue('');\n  };\n  const updateTag = ({ id, value }) => {\n    const newTags = [...tags];\n    let tag = newTags.find((t) => t.id === id);\n    tag.value = value || tag.value;\n    tag.isActive = false;\n    setTags(newTags);\n  };\n  const handleInputBlur = (e) => {\n    e.stopPropagation();\n    const value = e.target.value;\n    createTag(value);\n    setWrapperFocused(false);\n    if (tags.length === 0) {\n      setPlaceholderVisible(true);\n    }\n  };\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    setInputValue(value);\n  };\n  const handleInputFocus = (e) => {\n    setPlaceholderVisible(false);\n  };\n  const handleInputKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    let value = e.target.value;\n    if (keyCode === 13) { // Enter\n      createTag(value);\n    }\n    if (keyCode === 186 || keyCode === 188) { // Semicolon(;) or Comma(,)\n      value = value.substring(0, value.length - 1);\n      createTag(value);\n    }\n    if (keyCode === 27) { // Esc\n      setInputValue('');\n    }\n  };\n  const handleInputPaste = (e) => {\n    e.preventDefault();\n    const pastedData = e.clipboardData.getData('text');\n    let separatedValues = pastedData.split(\n      new RegExp([',', ';', '\\n', '\\r', '\\r\\n'].join('|'))\n    );\n    separatedValues = separatedValues.map((value, i) => {\n      return {\n        id: new Date().getTime() + i,\n        value: value.trim(),\n        isActive: false,\n      };\n    });\n    const newTags = [...tags, ...separatedValues];\n    setTags(newTags);\n    setInputValue('');\n  };\n  const handleTagChange = (tagId) => (e) => {\n    const value = e.target.value;\n    updateTag({ id: tagId, value });\n  };\n  const handleTagClick = (tagId) => (e) => {\n    const newTags = [...tags];\n    let tag = newTags.find((t) => t.id === tagId);\n    tag.isActive = true;\n    setTags(newTags);\n  };\n  const handleTagClose = (tagId) => (e) => {\n    e.stopPropagation();\n    const tag = tags.find((t) => t.id === tagId);\n    if (!tag) {\n      return;\n    }\n    const newTags = tags.filter((t) => t.id !== tagId);\n    setTags(newTags);\n    tagCreatorRef.current.focus();\n  };\n  const handleTagFocus = (e) => {\n    setWrapperFocused(true);\n  };\n  const handleWrapperClick = (e) => {\n    tagCreatorRef.current.focus();\n    setWrapperFocused(true);\n  };\n\n  const wrapperStyle = useWrapperStyle({\n    isFocused: isWrapperFocused,\n  });\n  const placeholderColor = {\n    dark: 'white:tertiary',\n    light: 'black:tertiary',\n  }[colorMode];\n  const invalidColor = {\n    dark: 'red:60',\n    light: 'red:50',\n  }[colorMode];\n\n  const renderTags = tags.map((tag, i) => {\n    return {\n      ...tag,\n      errorMessage: checkTagAndGetMessage({ id: tag.id, value: tag.value }),\n    };\n  });\n  const invalidTags = renderTags.filter((t) => t.errorMessage.length > 0);\n  let hasError = false;\n  if (invalidTags.length > 1) {\n    hasError = true;\n  } else if (invalidTags.length === 1 && invalidTags[0].isActive === false) {\n    hasError = true;\n  }\n\n  return (\n    <>\n      <PseudoBox\n        {...wrapperStyle}\n        role=\"presentation\"\n        aria-invalid={hasError}\n        onClick={handleWrapperClick}\n      >\n        {\n          renderTags.map((tag, i) => {\n            const id = tag.id;\n            const value = tag.value;\n            const errorMessage = tag.errorMessage;\n            if (errorMessage) {\n              return (\n                <EditableTag\n                  key={id}\n                  value={value}\n                  isInvalid={errorMessage.length > 0}\n                  onChange={handleTagChange(id)}\n                  onClick={handleTagClick(id)}\n                  onClose={handleTagClose(id)}\n                  onFocus={handleTagFocus}\n                >\n                  <Popover hideArrow trigger=\"hover\">\n                    <PopoverTrigger>\n                      <Text>{value}</Text>\n                    </PopoverTrigger>\n                    <PopoverContent>\n                      <PopoverBody>{errorMessage}</PopoverBody>\n                    </PopoverContent>\n                  </Popover>\n                </EditableTag>\n              );\n            }\n            return (\n              <EditableTag\n                key={id}\n                value={value}\n                isInvalid={errorMessage.length > 0}\n                onChange={handleTagChange(id)}\n                onClick={handleTagClick(id)}\n                onClose={handleTagClose(id)}\n                onFocus={handleTagFocus}\n              >\n                {value}\n              </EditableTag>\n            );\n          })\n        }\n        {placeholderVisible && (\n          <Text color={placeholderColor}>Placeholder text</Text>\n        )}\n        <InputBase\n          ref={tagCreatorRef}\n          minHeight=\"6x\"\n          mt=\"1x\"\n          value={inputValue}\n          onChange={handleInputChange}\n          onKeyUp={handleInputKeyUp}\n          onBlur={handleInputBlur}\n          onFocus={handleInputFocus}\n          onPaste={handleInputPaste}\n        />\n      </PseudoBox>\n      {hasError && (\n        <Text color={invalidColor}>There are invalid entries.</Text>\n      )}\n    </>\n  );\n};\n\nrender(<Tags />);\n")),Object(i.b)("h2",null,"Props"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Default"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"disabled"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"If ",Object(i.b)("inlineCode",{parentName:"td"},"true"),", the tag will be disabled. This sets ",Object(i.b)("inlineCode",{parentName:"td"},"aria-disabled=true")," and you can style this state by passing the ",Object(i.b)("inlineCode",{parentName:"td"},"_disabled")," prop.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"isInvalid"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"If ",Object(i.b)("inlineCode",{parentName:"td"},"true"),", the tag will indicate an error. You can style this state by passing the ",Object(i.b)("inlineCode",{parentName:"td"},"_invalid")," prop.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"isCloseButtonVisible"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"If ",Object(i.b)("inlineCode",{parentName:"td"},"true"),", a close button will appear on the right side.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"onClose"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"function"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"A callback called when the close button is clicked.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"size"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"'md'"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"The size of the tag component. One of: ",Object(i.b)("inlineCode",{parentName:"td"},"'sm'"),", ",Object(i.b)("inlineCode",{parentName:"td"},"'md'"),", ",Object(i.b)("inlineCode",{parentName:"td"},"'lg'"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"variant"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"'solid'"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"The variant style of the tag component. One of: ",Object(i.b)("inlineCode",{parentName:"td"},"'solid'"),", ",Object(i.b)("inlineCode",{parentName:"td"},"'outline'"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"variantColor"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"'gray'"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"The color scheme of the tag variant. It must be a color key defined in ",Object(i.b)("inlineCode",{parentName:"td"},"theme.colors"),".")))))}d.isMDXComponent=!0}},[["efS/",0,1]]]);