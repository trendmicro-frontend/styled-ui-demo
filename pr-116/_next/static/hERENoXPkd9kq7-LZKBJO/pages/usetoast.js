(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{"+wNj":function(n,t,e){"use strict";function o(n,t){if(null==n)return{};var e,o,a={},r=Object.keys(n);for(o=0;o<r.length;o++)e=r[o],t.indexOf(e)>=0||(a[e]=n[e]);return a}e.d(t,"a",(function(){return o}))},HbGN:function(n,t,e){"use strict";e.d(t,"a",(function(){return a}));var o=e("+wNj");function a(n,t){if(null==n)return{};var e,a,r=Object(o.a)(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)e=i[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}},Km8e:function(n,t,e){"use strict";var o=Object.assign.bind(Object);n.exports=o,n.exports.default=n.exports},ZVZ0:function(n,t,e){"use strict";e.d(t,"a",(function(){return b})),e.d(t,"b",(function(){return f}));var o=e("ERkP"),a=e.n(o);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function i(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,o)}return e}function s(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?i(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function l(n,t){if(null==n)return{};var e,o,a=function(n,t){if(null==n)return{};var e,o,a={},r=Object.keys(n);for(o=0;o<r.length;o++)e=r[o],t.indexOf(e)>=0||(a[e]=n[e]);return a}(n,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(o=0;o<r.length;o++)e=r[o],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(a[e]=n[e])}return a}var c=a.a.createContext({}),p=function(n){var t=a.a.useContext(c),e=t;return n&&(e="function"===typeof n?n(t):s({},t,{},n)),e},b=function(n){var t=p(n.components);return a.a.createElement(c.Provider,{value:t},n.children)},u="mdxType",m={inlineCode:"code",wrapper:function(n){var t=n.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(o.forwardRef)((function(n,t){var e=n.components,o=n.mdxType,r=n.originalType,i=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),b=p(e),u=o,d=b["".concat(i,".").concat(u)]||b[u]||m[u]||r;return e?a.a.createElement(d,s({ref:t},c,{components:e})):a.a.createElement(d,s({ref:t},c))}));function f(n,t){var e=arguments,o=t&&t.mdxType;if("string"===typeof n||o){var r=e.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=n,s[u]="string"===typeof n?n:o,i[1]=s;for(var c=2;c<r;c++)i[c]=e[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,e)}d.displayName="MDXCreateElement"},cxan:function(n,t,e){"use strict";function o(){return(o=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o])}return n}).apply(this,arguments)}e.d(t,"a",(function(){return o}))},wrY4:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/usetoast",function(){return e("xUdK")}])},xUdK:function(n,t,e){"use strict";e.r(t),e.d(t,"default",(function(){return p}));var o=e("cxan"),a=e("HbGN"),r=e("ERkP"),i=e.n(r),s=e("ZVZ0"),l=(i.a.createElement,{}),c="wrapper";function p(n){var t=n.components,e=Object(a.a)(n,["components"]);return Object(s.b)(c,Object(o.a)({},l,e,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h1",null,"useToast"),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"useToast")," Hook allows you to show up a toast notification that presents timely information, including confirmation of actions, alerts, and errors."),Object(s.b)("p",null,"See ",Object(s.b)("a",Object(o.a)({parentName:"p"},{href:"./toast"}),Object(s.b)("inlineCode",{parentName:"a"},"Toast"))," and ",Object(s.b)("a",Object(o.a)({parentName:"p"},{href:"./alerttoast"}),Object(s.b)("inlineCode",{parentName:"a"},"AlertToast"))," for more examples of how to use."),Object(s.b)("h2",null,"Import"),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import useToast from '@trendmicro/react-styled-ui/useToast';\n// or\nimport { useToast } from '@trendmicro/react-styled-ui';\n")),Object(s.b)("h2",null,Object(s.b)("inlineCode",{parentName:"h2"},"useToast")),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const toast = useToast();\n")),Object(s.b)("p",null,"Returns a toast function, which is used to trigger a toast notification."),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"disabled",disabled:!0}),"function Example() {\n  // Get a toast function\n  const toast = useToast();\n\n  toast({\n    // [optional] The position to display toast notifications.\n    position: 'bottom-right',\n\n    // [optional] The duration (in ms) that a toast notification remains visible and interactive.\n    duration: 5000,\n\n    render: ({ onClose, position }) => {\n      const styleProps = {\n        'top-left': { mt: '2x', mx: '4x' },\n        'top': { mt: '2x', mx: '4x' },\n        'top-right': { mt: '2x', mx: '4x' },\n        'bottom-left': { mb: '2x', mx: '4x' },\n        'bottom': { mb: '2x', mx: '4x' },\n        'bottom-right': { mb: '2x', mx: '4x' },\n      }[position];\n\n      return (\n        <ToastLayout {...styleProps}>\n          <ToastNotification onClose={onClose} />\n        </ToastLayout>\n      );\n    },\n  });\n}\n")),Object(s.b)("h3",null,"How to setup"),Object(s.b)("p",null,"First, you have to create a layout to wrap each toast notification as below:"),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"disabled",disabled:!0}),'const ToastLayout = (props) => {\n  const { colorMode } = useColorMode();\n  // Add a box shadow effect\n  const boxShadow = {\n    dark: \'dark.sm\',\n    light: \'light.sm\',\n  }[colorMode];\n\n  return (\n    <Box\n      fontSize="sm"\n      lineHeight="sm"\n      textAlign="left"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n')),Object(s.b)("p",null,"Then, create a ",Object(s.b)("inlineCode",{parentName:"p"},"ToastNotification")," component to wrap children:"),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"disabled",disabled:!0}),"const ToastNotification = ({ onClose }) => (\n  <Toast onClose={onClose}>\n    This is a toast notification.\n  </Toast>\n);\n")),Object(s.b)("p",null,"Let's see how this works."),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),"const ToastNotification = ({ onClose }) => (\n  <Toast onClose={onClose}>\n    This is a toast notification.\n  </Toast>\n);\n\nconst ToastLayout = (props) => {\n  const { colorMode } = useColorMode();\n  const boxShadow = {\n    dark: 'dark.sm',\n    light: 'light.sm',\n  }[colorMode];\n\n  return (\n    <Box\n      fontSize=\"sm\"\n      lineHeight=\"sm\"\n      textAlign=\"left\"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (ToastNotification) => () => {\n    toast({\n      position: 'bottom-right',\n      duration: 5000,\n      render: ({ onClose, position }) => {\n        const styleProps = {\n          'top-left': { mt: '2x', mx: '4x' },\n          'top': { mt: '2x', mx: '4x' },\n          'top-right': { mt: '2x', mx: '4x' },\n          'bottom-left': { mb: '2x', mx: '4x' },\n          'bottom': { mb: '2x', mx: '4x' },\n          'bottom-right': { mb: '2x', mx: '4x' },\n        }[position];\n\n        return (\n          <ToastLayout {...styleProps}>\n            <ToastNotification onClose={onClose} />\n          </ToastLayout>\n        );\n      },\n    });\n  };\n\n  return (\n    <>\n      <Button variant=\"secondary\" onClick={handleClickBy(ToastNotification)}>\n        Show\n      </Button>\n      <ToastLayout mt=\"4x\">\n        <ToastNotification />\n      </ToastLayout>\n    </>\n  );\n}\n\nrender(<Example />);\n")),Object(s.b)("h3",null,"Options"),Object(s.b)("h4",null,Object(s.b)("inlineCode",{parentName:"h4"},"position")),Object(s.b)("p",null,"You can display toast notifications in different positions, including ",Object(s.b)("inlineCode",{parentName:"p"},"top-left"),", ",Object(s.b)("inlineCode",{parentName:"p"},"top"),", ",Object(s.b)("inlineCode",{parentName:"p"},"top-right"),", ",Object(s.b)("inlineCode",{parentName:"p"},"bottom-left"),", ",Object(s.b)("inlineCode",{parentName:"p"},"bottom"),", and ",Object(s.b)("inlineCode",{parentName:"p"},"bottom-right"),". The default value is ",Object(s.b)("inlineCode",{parentName:"p"},"top"),"."),Object(s.b)("h4",null,Object(s.b)("inlineCode",{parentName:"h4"},"duration")),Object(s.b)("p",null,"When the ",Object(s.b)("inlineCode",{parentName:"p"},"duration")," is set to ",Object(s.b)("inlineCode",{parentName:"p"},"null"),", the toast notification will appear indefinitely until manually closed by the user. The default value is ",Object(s.b)("inlineCode",{parentName:"p"},"5000")," in milliseconds."),Object(s.b)("h4",null,Object(s.b)("inlineCode",{parentName:"h4"},"render({ id, onClose, position, duration })")),Object(s.b)("p",null,"A render function that renders toast notifications."),Object(s.b)("pre",null,Object(s.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),"const ToastBasic = ({ onClose }) => (\n  <Toast onClose={onClose}>\n    This is a toast notification.\n  </Toast>\n);\n\nconst ToastLayout = (props) => {\n  const { colorMode } = useColorMode();\n  const boxShadow = {\n    dark: 'dark.sm',\n    light: 'light.sm',\n  }[colorMode];\n\n  return (\n    <Box\n      fontSize=\"sm\"\n      lineHeight=\"sm\"\n      textAlign=\"left\"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const duration = 5000; // in ms\n  const handleClickBy = (position) => () => {\n    toast({\n      duration,\n      position,\n      render: ({ onClose, position }) => {\n        const styleProps = {\n          'top-left': { mt: '2x', mx: '4x' },\n          'top': { mt: '2x', mx: '4x' },\n          'top-right': { mt: '2x', mx: '4x' },\n          'bottom-left': { mb: '2x', mx: '4x' },\n          'bottom': { mb: '2x', mx: '4x' },\n          'bottom-right': { mb: '2x', mx: '4x' },\n        }[position];\n\n        return (\n          <ToastLayout {...styleProps}>\n            <ToastBasic onClose={onClose} />\n          </ToastLayout>\n        );\n      }\n    });\n  };\n\n  return (\n    <Grid\n      gap=\"4x\"\n      templateColumns=\"1fr 1fr 1fr\"\n    >\n      <Button onClick={handleClickBy('top-left')}>\n        Top Left\n      </Button>\n      <Button onClick={handleClickBy('top')}>\n        Top\n      </Button>\n      <Button onClick={handleClickBy('top-right')}>\n        Top Right\n      </Button>\n      <Button onClick={handleClickBy('bottom-left')}>\n        Bottom Left\n      </Button>\n      <Button onClick={handleClickBy('bottom')}>\n        Bottom\n      </Button>\n      <Button onClick={handleClickBy('bottom-right')}>\n        Bottom Right\n      </Button>\n    </Grid>\n  );\n}\n\nrender(<Example />);\n")))}p.isMDXComponent=!0}},[["wrY4",0,1]]]);