_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[23],{"3ADl":function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/checkbox",function(){return n("s1aV")}])},ZVZ0:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return s}));var a=n("ERkP"),c=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,c=function(e,t){if(null==e)return{};var n,a,c={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var i=c.a.createContext({}),d=function(e){var t=c.a.useContext(i),n=t;return e&&(n="function"===typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return c.a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},h=c.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,b=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),p=d(n),h=a,s=p["".concat(b,".").concat(h)]||p[h]||m[h]||r;return n?c.a.createElement(s,l(l({ref:t},i),{},{components:n})):c.a.createElement(s,l({ref:t},i))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var r=n.length,b=new Array(r);b[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"===typeof e?e:a,b[1]=l;for(var i=2;i<r;i++)b[i]=n[i];return c.a.createElement.apply(null,b)}return c.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},s1aV:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return i}));var a=n("97Jx"),c=n.n(a),r=n("m3Bd"),b=n.n(r),l=(n("ERkP"),n("ZVZ0")),o=(n("l1C2"),{});function i(e){var t=e.components,n=b()(e,["components"]);return Object(l.b)("wrapper",c()({},o,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",null,"Checkbox"),Object(l.b)("p",null,"Use a ",Object(l.b)("inlineCode",{parentName:"p"},"Checkbox")," in forms when a user needs to select multiple values from a list of options."),Object(l.b)("p",null,"Since native HTML checkboxes are 100% accessible by default, a common ",Object(l.b)("a",{parentName:"p",href:"https://dev.to/lkopacz/create-custom-keyboard-accessible-checkboxes-2036"},"CSS technique")," is used to style checkboxes."),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"Checkbox")," component is composed of the ",Object(l.b)("a",{parentName:"p",href:"./controlbox"},Object(l.b)("inlineCode",{parentName:"a"},"ControlBox"))," component that is created to style an element based on sibling input."),Object(l.b)("h2",null,"Import"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-js"},"import Checkbox from '@trendmicro/react-styled-ui/Checkbox';\n// or\nimport { Checkbox } from '@trendmicro/react-styled-ui';\n")),Object(l.b)("h2",null,"Usage"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},"<Checkbox defaultChecked>Checkbox</Checkbox>\n")),Object(l.b)("h3",null,"Colors"),Object(l.b)("p",null,"Use the ",Object(l.b)("inlineCode",{parentName:"p"},"variantColor")," prop to change the color scheme of the checkbox. ",Object(l.b)("inlineCode",{parentName:"p"},"variantColor")," can be any color key with key ",Object(l.b)("inlineCode",{parentName:"p"},"50")," (hover) or ",Object(l.b)("inlineCode",{parentName:"p"},"60")," (checked, active) that exist in ",Object(l.b)("inlineCode",{parentName:"p"},"theme.colors"),"."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="row" spacing="6x">\n  <Checkbox variantColor="red" defaultChecked>\n    Checkbox\n  </Checkbox>\n  <Checkbox variantColor="green" defaultChecked>\n    Checkbox\n  </Checkbox>\n  <Checkbox variantColor="purple" indeterminate>\n    Checkbox\n  </Checkbox>\n</Stack>\n')),Object(l.b)("h3",null,"Sizes"),Object(l.b)("p",null,"Use the ",Object(l.b)("inlineCode",{parentName:"p"},"size")," prop to change the size of the checkbox. You can set the value to ",Object(l.b)("inlineCode",{parentName:"p"},"sm"),", ",Object(l.b)("inlineCode",{parentName:"p"},"md"),", or ",Object(l.b)("inlineCode",{parentName:"p"},"lg"),"."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="row" spacing="4x">\n  <Checkbox size="sm">Checkbox</Checkbox>\n  <Checkbox size="md">Checkbox</Checkbox>\n  <Checkbox size="lg">Checkbox</Checkbox>\n</Stack>\n')),Object(l.b)("h3",null,"States"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="row" spacing="6x" alignItems="center">\n  <Stack spacing="2x" alignItems="center">\n    <Checkbox>Checkbox</Checkbox>\n    <Checkbox disabled>Checkbox</Checkbox>\n  </Stack>\n  <Stack spacing="2x" alignItems="center">\n    <Checkbox defaultChecked>Checkbox</Checkbox>\n    <Checkbox disabled defaultChecked>Checkbox</Checkbox>\n  </Stack>\n  <Stack spacing="2x" alignItems="center">\n    <Checkbox indeterminate>Checkbox</Checkbox>\n    <Checkbox disabled indeterminate>Checkbox</Checkbox>\n  </Stack>\n</Stack>\n')),Object(l.b)("h3",null,"Indeterminate"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-jsx"},'function IndeterminateExample() {\n  const [checkedItems, setCheckedItems] = React.useState([true, false]);\n  const allChecked = checkedItems.every(Boolean);\n  const isIndeterminate = checkedItems.some(Boolean) && !allChecked;\n\n  return (\n    <>\n      <Checkbox\n        checked={allChecked}\n        indeterminate={isIndeterminate}\n        onChange={e => setCheckedItems([e.target.checked, e.target.checked])}\n        children="Parent Checkbox"\n      />\n      <Stack direction="column" pl="6x" mt="1x" spacing="1x" shouldWrapChildren>\n        <Checkbox\n          checked={checkedItems[0]}\n          onChange={e => setCheckedItems([e.target.checked, checkedItems[1]])}\n          children="Child Checkbox 1"\n        />\n        <Checkbox\n          checked={checkedItems[1]}\n          onChange={e => setCheckedItems([checkedItems[0], e.target.checked])}\n          children="Child Checkbox 2"\n        />\n      </Stack>\n    </>\n  );\n}\n')),Object(l.b)("h2",null,"Props"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:"left"},"Name"),Object(l.b)("th",{parentName:"tr",align:"left"},"Type"),Object(l.b)("th",{parentName:"tr",align:"left"},"Default"),Object(l.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"id"),Object(l.b)("td",{parentName:"tr",align:"left"},"string"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"The ",Object(l.b)("inlineCode",{parentName:"td"},"id")," attribute of the input field.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"name"),Object(l.b)("td",{parentName:"tr",align:"left"},"string"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"The name of a input field in a checkbox. The name is useful for form submissions.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"value"),Object(l.b)("td",{parentName:"tr",align:"left"},"string ","|"," number"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"The value for checkbox input. This is the return value for form submissions.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"variantColor"),Object(l.b)("td",{parentName:"tr",align:"left"},"string"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"The color of the checkbox when it is selected. The color should be one of the color keys in the theme (for example, ",Object(l.b)("inlineCode",{parentName:"td"},"'green'"),", ",Object(l.b)("inlineCode",{parentName:"td"},"'red'"),")")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"size"),Object(l.b)("td",{parentName:"tr",align:"left"},"string"),Object(l.b)("td",{parentName:"tr",align:"left"},"'md'"),Object(l.b)("td",{parentName:"tr",align:"left"},"The size (width and height) of the checkbox. Acceptable values: ",Object(l.b)("inlineCode",{parentName:"td"},"'sm'"),", ",Object(l.b)("inlineCode",{parentName:"td"},"'md'"),", ",Object(l.b)("inlineCode",{parentName:"td"},"'lg'"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"defaultChecked"),Object(l.b)("td",{parentName:"tr",align:"left"},"boolean"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"If ",Object(l.b)("inlineCode",{parentName:"td"},"true"),", the checkbox will be selected initially.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"checked"),Object(l.b)("td",{parentName:"tr",align:"left"},"boolean"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"If ",Object(l.b)("inlineCode",{parentName:"td"},"true"),", the checkbox will be selected. Use onChange to update the state for a controlled component.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"disabled"),Object(l.b)("td",{parentName:"tr",align:"left"},"boolean"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"If ",Object(l.b)("inlineCode",{parentName:"td"},"true"),", the checkbox will be disabled. This sets ",Object(l.b)("inlineCode",{parentName:"td"},"aria-disabled=true")," and you can set this state by using the ",Object(l.b)("inlineCode",{parentName:"td"},"_disabled")," prop.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"indeterminate"),Object(l.b)("td",{parentName:"tr",align:"left"},"boolean"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"If ",Object(l.b)("inlineCode",{parentName:"td"},"true"),", the checkbox will be indeterminate. This only affects the icon shown inside the checkbox.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"children"),Object(l.b)("td",{parentName:"tr",align:"left"},"ReactNode"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"The children of the checkbox.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"onChange"),Object(l.b)("td",{parentName:"tr",align:"left"},"function"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"A callback called when the state is changed.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"onBlur"),Object(l.b)("td",{parentName:"tr",align:"left"},"function"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"A callback called when the checkbox loses focus.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:"left"},"onFocus"),Object(l.b)("td",{parentName:"tr",align:"left"},"function"),Object(l.b)("td",{parentName:"tr",align:"left"}),Object(l.b)("td",{parentName:"tr",align:"left"},"A callback called when the checkbox receives focus.")))))}i.isMDXComponent=!0}},[["3ADl",0,2,1]]]);