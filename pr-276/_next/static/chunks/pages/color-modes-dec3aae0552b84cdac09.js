_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[26],{ZVZ0:function(e,n,r){"use strict";r.d(n,"a",(function(){return d})),r.d(n,"b",(function(){return s}));var o=r("ERkP"),t=r.n(o);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function c(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?c(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var p=t.a.createContext({}),u=function(e){var n=t.a.useContext(p),r=n;return e&&(r="function"===typeof e?e(n):i(i({},n),e)),r},d=function(e){var n=u(e.components);return t.a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.a.createElement(t.a.Fragment,{},n)}},b=t.a.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(r),b=o,s=d["".concat(c,".").concat(b)]||d[b]||m[b]||a;return r?t.a.createElement(s,i(i({ref:n},p),{},{components:r})):t.a.createElement(s,i({ref:n},p))}));function s(e,n){var r=arguments,o=n&&n.mdxType;if("string"===typeof e||o){var a=r.length,c=new Array(a);c[0]=b;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"===typeof e?e:o,c[1]=i;for(var p=2;p<a;p++)c[p]=r[p];return t.a.createElement.apply(null,c)}return t.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},dgNP:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/color-modes",function(){return r("u+42")}])},"u+42":function(e,n,r){"use strict";r.r(n),r.d(n,"default",(function(){return p}));var o=r("qWom"),t=r.n(o),a=r("3yN8"),c=r.n(a),i=(r("ERkP"),r("ZVZ0")),l=(r("l1C2"),{});function p(e){var n=e.components,r=c()(e,["components"]);return Object(i.b)("wrapper",t()({},l,r,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",null,"Color Modes"),Object(i.b)("p",null,"To enable color modes, wrap your application in a ",Object(i.b)("inlineCode",{parentName:"p"},"ColorModeProvider")," and specify the value prop with a color mode: ",Object(i.b)("inlineCode",{parentName:"p"},"dark")," or ",Object(i.b)("inlineCode",{parentName:"p"},"light"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled",disabled:!0},"import React from 'react';\nimport { ThemeProvider, ColorModeProvider } from '@trendmicro/react-styled-ui';\nimport App from './App';\n\nfunction Example({ children }) {\n  return (\n    <ThemeProvider>\n      <ColorModeProvider value=\"dark\">\n        <App />\n      </ColorModeProvider>\n    </ThemeProvider>\n  );\n}\n")),Object(i.b)("p",null,"Then you can use the ",Object(i.b)("inlineCode",{parentName:"p"},"useColorMode")," Hook to get current color mode or change the color mode."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled",disabled:!0},"// App.jsx\nimport React from 'react';\nimport { Button, useColorMode } from '@trendmicro/react-styled-ui';\n\nconst App = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  return (\n    <Button onClick={toggleColorMode}>\n      Toggle Color Mode\n    </Button>\n  );\n};\n")),Object(i.b)("p",null,"To force a specific color mode, wrap your component in ",Object(i.b)("inlineCode",{parentName:"p"},"LightMode")," or ",Object(i.b)("inlineCode",{parentName:"p"},"DarkMode"),", it will override global color mode."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},'<Flex>\n  <LightMode bg="white" color="black:primary" px="4x" py="2x">\n    <Button variant="outline">\n      Light Mode\n    </Button>\n  </LightMode>\n  <DarkMode bg="gray:100" color="white:primary" px="4x" py="2x">\n    <Button variant="outline">\n      Dark Mode\n    </Button>\n  </DarkMode>\n</Flex>\n')))}p.isMDXComponent=!0}},[["dgNP",0,2,1]]]);