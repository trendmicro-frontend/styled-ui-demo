_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[71],{"97Jx":function(t,e){function n(){return t.exports=n=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},t.exports.default=t.exports,t.exports.__esModule=!0,n.apply(this,arguments)}t.exports=n,t.exports.default=t.exports,t.exports.__esModule=!0},Km8e:function(t,e,n){"use strict";var o=Object.assign.bind(Object);t.exports=o,t.exports.default=t.exports},LdEA:function(t,e){t.exports=function(t,e){if(null==t)return{};var n,o,a={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(a[n]=t[n]);return a},t.exports.default=t.exports,t.exports.__esModule=!0},ZVZ0:function(t,e,n){"use strict";n.d(e,"a",(function(){return p})),n.d(e,"b",(function(){return d}));var o=n("ERkP"),a=n.n(o);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function r(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=a.a.createContext({}),b=function(t){var e=a.a.useContext(c),n=e;return t&&(n="function"===typeof t?t(e):s(s({},e),t)),n},p=function(t){var e=b(t.components);return a.a.createElement(c.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.a.createElement(a.a.Fragment,{},e)}},u=a.a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,l=t.parentName,c=r(t,["components","mdxType","originalType","parentName"]),p=b(n),u=o,d=p["".concat(l,".").concat(u)]||p[u]||m[u]||i;return n?a.a.createElement(d,s(s({ref:e},c),{},{components:n})):a.a.createElement(d,s({ref:e},c))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"===typeof t||o){var i=n.length,l=new Array(i);l[0]=u;var s={};for(var r in e)hasOwnProperty.call(e,r)&&(s[r]=e[r]);s.originalType=t,s.mdxType="string"===typeof t?t:o,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},"kEL/":function(t,e,n){"use strict";n.r(e),n.d(e,"default",(function(){return b}));var o=n("97Jx"),a=n.n(o),i=n("m3Bd"),l=n.n(i),s=(n("ERkP"),n("ZVZ0")),r=["components"],c={};function b(t){var e=t.components,n=l()(t,r);return Object(s.b)("wrapper",a()({},c,n,{components:e,mdxType:"MDXLayout"}),Object(s.b)("h1",null,"Toast"),Object(s.b)("p",null,"A toast notification is a short message that displays at the  side of the screen and disappears automatically after a few seconds. A toast notification is a status update about an operation for which the current activity remains visibility and interactive. Basically, a toast notification is used inform the user of something that is not critical and that does not require specific attention, and does not prevent the user from using the app."),Object(s.b)("h2",null,"Import"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},"import {\n  Toast,\n  ToastProvider,\n  useToast,\n} from '@trendmicro/react-styled-ui';\n")),Object(s.b)("h2",null,"Usage"),Object(s.b)("p",null,"Add ",Object(s.b)("inlineCode",{parentName:"p"},"ToastProvider")," to the root."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled",disabled:!0},'<ToastProvider placement="bottom-right">\n  <App />\n</ToastProvider>\n')),Object(s.b)("p",null,"For the Hook version, use the ",Object(s.b)("inlineCode",{parentName:"p"},"useToast")," Hook to get all the methods, properties, and state. See the ",Object(s.b)("b",null,"useToast Hook")," section for detailed usage."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled",disabled:!0},"function Example() {\n  const toast = useToast();\n  const handleClick = () => {\n    toast(({ onClose, placement }) => (\n      <Box>toast</Box>\n    ));\n  };\n\n  return (\n    <Button onClick={handleClick}>\n      Trigger Toast\n    </Button>\n  );\n}\n")),Object(s.b)("h3",null,"Layout"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Increase the vertical padding space to ",Object(s.b)("inlineCode",{parentName:"li"},"4x")," (or ",Object(s.b)("inlineCode",{parentName:"li"},"1rem"),") for a multiline paragraph."),Object(s.b)("li",{parentName:"ul"},"Set the minimum horizontal margin space to ",Object(s.b)("inlineCode",{parentName:"li"},"4x")," (or ",Object(s.b)("inlineCode",{parentName:"li"},"1rem"),") before the close button."),Object(s.b)("li",{parentName:"ul"},"Set the minimum horizontal margin space to ",Object(s.b)("inlineCode",{parentName:"li"},"4x")," (or ",Object(s.b)("inlineCode",{parentName:"li"},"1rem"),") between the icon and the content."),Object(s.b)("li",{parentName:"ul"},"Apply vertical margin space with ",Object(s.b)("inlineCode",{parentName:"li"},"2x")," (or ",Object(s.b)("inlineCode",{parentName:"li"},".5rem"),") between the title and its content."),Object(s.b)("li",{parentName:"ul"},"Apply vertical margin space with ",Object(s.b)("inlineCode",{parentName:"li"},"6x")," (or ",Object(s.b)("inlineCode",{parentName:"li"},"1.5rem"),") between the end of the content and the action button (or action link).")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const ToastSimple = ({ onClose }) => (\n  <Toast isCloseButtonVisible onClose={onClose}>\n    <Text>This is a toast notification.</Text>\n  </Toast>\n);\n\nconst ToastWithIcon = ({ onClose }) => (\n  <Toast isCloseButtonVisible onClose={onClose} py="4x">\n    <Flex align="flex-start">\n      <Box\n        bg="gray:40"\n        height={48}\n        minWidth={48}\n      />\n      <Space minWidth="4x" />\n      <Text>This is a toast notification.</Text>\n    </Flex>\n  </Toast>\n);\n\nconst ToastWithTitle = ({ onClose }) => (\n  <Toast isCloseButtonVisible onClose={onClose} py="4x">\n    <Box mb="2x">\n      <Text fontWeight="bold">Notification Title</Text>\n    </Box>\n    <Box mr={-36}>\n      <Text>This is a toast notification.</Text>\n    </Box>\n  </Toast>\n);\n\nconst ToastWithActionButton = ({ onClose }) => (\n  <Toast isCloseButtonVisible onClose={onClose} py="4x">\n    <Box mb="6x">\n      <Text>This is a toast notification.</Text>\n    </Box>\n    <Flex justify="flex-end" mr={-36}>\n      <FlatButton variant="outline" color="black:primary" size="sm">\n        Action Button\n      </FlatButton>\n    </Flex>\n  </Toast>\n);\n\nconst ToastWithActionLink = ({ onClose }) => (\n  <Toast isCloseButtonVisible onClose={onClose} py="4x">\n    <Box mb="6x">\n      <Text>This is a toast notification.</Text>\n    </Box>\n    <Flex justify="flex-end" mr={-36}>\n      <Link>Action Link</Link>\n    </Flex>\n  </Toast>\n);\n\nconst ToastWithAllTogether = ({ onClose }) => (\n  <Toast isCloseButtonVisible onClose={onClose} py="4x">\n    <Box mb="2x">\n      <Text fontWeight="bold">Notification Title</Text>\n    </Box>\n    <Flex align="flex-start" mb="6x">\n      <Box\n        bg="gray:40"\n        height={48}\n        minWidth={48}\n      />\n      <Space minWidth="4x" />\n      <Text>This is a toast notification.</Text>\n    </Flex>\n    <Flex justify="flex-end" mr={-36}>\n      <FlatButton variant="outline" color="black:primary" size="sm">\n        Action Button\n      </FlatButton>\n    </Flex>\n  </Toast>\n);\n\nconst ToastLayout = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const boxShadow = colorStyle.shadow.thin;\n\n  return (\n    <Box\n      fontSize="sm"\n      lineHeight="sm"\n      textAlign="left"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (ToastNotification) => () => {\n    toast(({ onClose, placement }) => {\n      const styleProps = {\n        \'top-left\': { mt: \'2x\', mx: \'4x\' },\n        \'top\': { mt: \'2x\', mx: \'4x\' },\n        \'top-right\': { mt: \'2x\', mx: \'4x\' },\n        \'bottom-left\': { mb: \'2x\', mx: \'4x\' },\n        \'bottom\': { mb: \'2x\', mx: \'4x\' },\n        \'bottom-right\': { mb: \'2x\', mx: \'4x\' },\n      }[placement];\n\n      return (\n        <ToastLayout {...styleProps}>\n          <ToastNotification onClose={onClose} />\n        </ToastLayout>\n      );\n    }, {\n      placement: \'bottom-right\',\n      duration: 5000,\n    });\n  };\n\n  return (\n    <>\n      <Stack direction="column" spacing="6x">\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(ToastSimple)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <ToastSimple />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(ToastWithIcon)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <ToastWithIcon />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(ToastWithTitle)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <ToastWithTitle />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(ToastWithActionButton)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <ToastWithActionButton />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(ToastWithActionLink)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <ToastWithActionLink />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(ToastWithAllTogether)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <ToastWithAllTogether />\n          </ToastLayout>\n        </Box>\n      </Stack>\n    </>\n  );\n}\n\nrender(<Example />);\n')),Object(s.b)("h3",null,"Appearances"),Object(s.b)("p",null,"You can control the appearance of a toast notification. If specified, the value can be one of ",Object(s.b)("inlineCode",{parentName:"p"},"success"),", ",Object(s.b)("inlineCode",{parentName:"p"},"info"),", ",Object(s.b)("inlineCode",{parentName:"p"},"warning"),", or ",Object(s.b)("inlineCode",{parentName:"p"},"error"),"."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const ToastSuccess = ({ onClose }) => (\n  <Toast\n    isCloseButtonVisible\n    onClose={onClose}\n    appearance=\"success\"\n  >\n    This is a success toast alert.\n  </Toast>\n);\n\nconst ToastInfo = ({ onClose }) => (\n  <Toast\n    isCloseButtonVisible\n    onClose={onClose}\n    appearance=\"info\"\n  >\n    This is an info toast alert.\n  </Toast>\n);\n\nconst ToastWarning = ({ onClose }) => (\n  <Toast\n    isCloseButtonVisible\n    onClose={onClose}\n    appearance=\"warning\"\n  >\n    This is a warning toast alert.\n  </Toast>\n);\n\nconst ToastError = ({ onClose }) => (\n  <Toast\n    isCloseButtonVisible\n    onClose={onClose}\n    appearance=\"error\"\n  >\n    This is an error toast alert.\n  </Toast>\n);\n\nconst ToastLayout = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const boxShadow = colorStyle.shadow.thin;\n\n  return (\n    <Box\n      fontSize=\"sm\"\n      lineHeight=\"sm\"\n      textAlign=\"left\"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (ToastNotification) => () => {\n    toast(({ onClose, placement }) => {\n      const styleProps = {\n        'top-left': { mt: '2x', mx: '4x' },\n        'top': { mt: '2x', mx: '4x' },\n        'top-right': { mt: '2x', mx: '4x' },\n        'bottom-left': { mb: '2x', mx: '4x' },\n        'bottom': { mb: '2x', mx: '4x' },\n        'bottom-right': { mb: '2x', mx: '4x' },\n      }[placement];\n\n      return (\n        <ToastLayout {...styleProps}>\n          <ToastNotification onClose={onClose} />\n        </ToastLayout>\n      );\n    }, {\n      placement: 'bottom-right',\n      duration: 5000,\n    });\n  };\n  const toastComponents = [\n    ToastSuccess,\n    ToastInfo,\n    ToastWarning,\n    ToastError,\n  ];\n\n  return (\n    <Stack direction=\"column\" spacing=\"6x\">\n      {toastComponents.map((ToastNotification, idx) => (\n        <Box key={idx}>\n          <Button variant=\"secondary\" onClick={handleClickBy(ToastNotification)}>\n            Show\n          </Button>\n          <ToastLayout mt=\"4x\">\n            <ToastNotification />\n          </ToastLayout>\n        </Box>\n      ))}\n    </Stack>\n  );\n}\n\nrender(<Example />);\n")),Object(s.b)("h3",null,"Icons"),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"icon")," prop allows you to override the default icon for the specified appearance."),Object(s.b)("p",null,"Setting the ",Object(s.b)("inlineCode",{parentName:"p"},"icon")," prop to ",Object(s.b)("inlineCode",{parentName:"p"},"false")," will remove the icon altogether."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const ToastWithDefaultIcon = ({ onClose }) => (\n  <Toast\n    isCloseButtonVisible\n    onClose={onClose}\n    appearance=\"success\"\n  >\n    This is a success toast alert.\n  </Toast>\n);\n\nconst ToastWithAnotherIcon = ({ onClose }) => (\n  <Toast\n    isCloseButtonVisible\n    onClose={onClose}\n    appearance=\"success\"\n    icon=\"success\"\n  >\n    This is a success toast alert.\n  </Toast>\n);\n\nconst ToastWithProprietaryIcon = ({ onClose }) => (\n  <Toast\n    isCloseButtonVisible\n    onClose={onClose}\n    appearance=\"success\"\n    icon={<Icon icon=\"check-circle-o\" color=\"gray:80\" />}\n  >\n    This is a success toast alert.\n  </Toast>\n);\n\nconst ToastWithoutIcon = ({ onClose }) => (\n  <Toast\n    isCloseButtonVisible\n    onClose={onClose}\n    appearance=\"success\"\n    icon={false}\n  >\n    This is a success toast alert.\n  </Toast>\n);\n\nconst ToastLayout = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const boxShadow = colorStyle.shadow.thin;\n\n  return (\n    <Box\n      fontSize=\"sm\"\n      lineHeight=\"sm\"\n      textAlign=\"left\"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (ToastNotification) => () => {\n    toast(({ onClose, placement }) => {\n      const styleProps = {\n        'top-left': { mt: '2x', mx: '4x' },\n        'top': { mt: '2x', mx: '4x' },\n        'top-right': { mt: '2x', mx: '4x' },\n        'bottom-left': { mb: '2x', mx: '4x' },\n        'bottom': { mb: '2x', mx: '4x' },\n        'bottom-right': { mb: '2x', mx: '4x' },\n      }[placement];\n\n      return (\n        <ToastLayout {...styleProps}>\n          <ToastNotification onClose={onClose} />\n        </ToastLayout>\n      );\n    }, {\n      placement: 'bottom-right',\n      duration: 5000,\n    });\n  };\n  const alertToasts = [\n    ToastWithDefaultIcon,\n    ToastWithAnotherIcon,\n    ToastWithProprietaryIcon,\n    ToastWithoutIcon,\n  ];\n\n  return (\n    <Stack direction=\"column\" spacing=\"6x\">\n      {alertToasts.map((ToastNotification, idx) => (\n        <Box key={idx}>\n          <Button variant=\"secondary\" onClick={handleClickBy(ToastNotification)}>\n            Show\n          </Button>\n          <ToastLayout mt=\"4x\">\n            <ToastNotification />\n          </ToastLayout>\n        </Box>\n      ))}\n    </Stack>\n  );\n}\n\nrender(<Example />);\n")),Object(s.b)("h2",null,"Toast Props"),Object(s.b)("p",null,"A ",Object(s.b)("inlineCode",{parentName:"p"},"Toast")," element is composed of the ",Object(s.b)("a",{parentName:"p",href:"./box"},Object(s.b)("inlineCode",{parentName:"a"},"Box"))," component. You can override the default styles using the style props."),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:"left"},"Name"),Object(s.b)("th",{parentName:"tr",align:"left"},"Type"),Object(s.b)("th",{parentName:"tr",align:"left"},"Default"),Object(s.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:"left"},"isCloseButtonVisible"),Object(s.b)("td",{parentName:"tr",align:"left"},"boolean"),Object(s.b)("td",{parentName:"tr",align:"left"}),Object(s.b)("td",{parentName:"tr",align:"left"},"If ",Object(s.b)("inlineCode",{parentName:"td"},"true"),", a close button will appear on the right side.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:"left"},"onClose"),Object(s.b)("td",{parentName:"tr",align:"left"},"function"),Object(s.b)("td",{parentName:"tr",align:"left"}),Object(s.b)("td",{parentName:"tr",align:"left"},"A callback called when the close button is clicked.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:"left"},"appearance"),Object(s.b)("td",{parentName:"tr",align:"left"},"string"),Object(s.b)("td",{parentName:"tr",align:"left"},"'none'"),Object(s.b)("td",{parentName:"tr",align:"left"},"One of: ",Object(s.b)("inlineCode",{parentName:"td"},"'none'"),", ",Object(s.b)("inlineCode",{parentName:"td"},"'success'"),", ",Object(s.b)("inlineCode",{parentName:"td"},"'info'"),", ",Object(s.b)("inlineCode",{parentName:"td"},"'warning'"),", ",Object(s.b)("inlineCode",{parentName:"td"},"'error'"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:"left"},"icon"),Object(s.b)("td",{parentName:"tr",align:"left"},"string ","|"," ReactNode ","|"," false"),Object(s.b)("td",{parentName:"tr",align:"left"}),Object(s.b)("td",{parentName:"tr",align:"left"},"Override the icon displayed before the children. Unless provided, the icon is mapped to the value of the ",Object(s.b)("inlineCode",{parentName:"td"},"appearance")," prop.")))),Object(s.b)("h2",null,"ToastProvider Props"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:"left"},"Name"),Object(s.b)("th",{parentName:"tr",align:"left"},"Type"),Object(s.b)("th",{parentName:"tr",align:"left"},"Default"),Object(s.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:"left"},"children"),Object(s.b)("td",{parentName:"tr",align:"left"},"ReactNode"),Object(s.b)("td",{parentName:"tr",align:"left"}),Object(s.b)("td",{parentName:"tr",align:"left"})),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:"left"},"container"),Object(s.b)("td",{parentName:"tr",align:"left"},"DOM element"),Object(s.b)("td",{parentName:"tr",align:"left"}),Object(s.b)("td",{parentName:"tr",align:"left"})),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:"left"},"placement"),Object(s.b)("td",{parentName:"tr",align:"left"},"string"),Object(s.b)("td",{parentName:"tr",align:"left"},"'bottom-right'"),Object(s.b)("td",{parentName:"tr",align:"left"},"Set the default placement to place toasts. One of: ",Object(s.b)("inlineCode",{parentName:"td"},"'top'"),", ",Object(s.b)("inlineCode",{parentName:"td"},"'top-right'"),", ",Object(s.b)("inlineCode",{parentName:"td"},"'top-left'"),", ",Object(s.b)("inlineCode",{parentName:"td"},"'bottom'"),", ",Object(s.b)("inlineCode",{parentName:"td"},"'bottom-left'"),", ",Object(s.b)("inlineCode",{parentName:"td"},"'bottom-right'"))))),Object(s.b)("h2",null,"useToast Hook"),Object(s.b)("p",null,"The useToast hook has the following signature:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},"const {\n  // Methods\n  close,\n  closeAll,\n  find,\n  findIndex,\n  notify,\n  update,\n\n  // Properties\n  placement,\n\n  // State\n  state,\n} = useToast();\n")),Object(s.b)("h3",null,"toast.close(id)"),Object(s.b)("p",null,"Close a toast at its placement."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Arguments")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"id")," ",Object(s.b)("em",{parentName:"li"},"(string)"),": The id to close the toast.")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Returns")),Object(s.b)("p",null,"This method returns ",Object(s.b)("inlineCode",{parentName:"p"},"undefined"),"."),Object(s.b)("h3",null,"toast.closeAll(","[options={}]",")"),Object(s.b)("p",null,"Close all toasts at once with the given placements, including ",Object(s.b)("inlineCode",{parentName:"p"},"top"),", ",Object(s.b)("inlineCode",{parentName:"p"},"top-left"),", ",Object(s.b)("inlineCode",{parentName:"p"},"top-right"),", ",Object(s.b)("inlineCode",{parentName:"p"},"bottom"),", ",Object(s.b)("inlineCode",{parentName:"p"},"bottom-left"),", ",Object(s.b)("inlineCode",{parentName:"p"},"bottom-right"),"."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Arguments")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"[options={}]")," ",Object(s.b)("em",{parentName:"li"},"(Object)"),": The options object."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"[options.placements=[]]")," ",Object(s.b)("em",{parentName:"li"},"(Array)"),": An array of placements to close toasts.")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Returns")),Object(s.b)("p",null,"This method returns ",Object(s.b)("inlineCode",{parentName:"p"},"undefined"),"."),Object(s.b)("h3",null,"toast.find(id)"),Object(s.b)("p",null,"Find the first toast in the array that matches the provided toast id. Otherwise, ",Object(s.b)("inlineCode",{parentName:"p"},"undefined")," is returned if not found.\nIf no values satisfy the testing function, undefined is returned."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Arguments")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"id")," ",Object(s.b)("em",{parentName:"li"},"(string)"),": The id to find the toast.")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Returns")),Object(s.b)("p",null,Object(s.b)("em",{parentName:"p"},"(Object)"),": Returns the toast object."),Object(s.b)("h3",null,"toast.findIndex(id)"),Object(s.b)("p",null,"Find the first toast in the array that matches the provided toast id. Otherwise, -1 is returned if not found."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Arguments")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"id")," ",Object(s.b)("em",{parentName:"li"},"(string)"),": The id to find the toast.")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Returns")),Object(s.b)("p",null,Object(s.b)("em",{parentName:"p"},"(number)"),": Returns the array index."),Object(s.b)("h3",null,"toast.notify(message, ","[options={}]",")"),Object(s.b)("p",null,"Create a toast at the specified placement and return the toast id."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Arguments")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"message")," ",Object(s.b)("em",{parentName:"li"},"(Function|string)"),": The toast message to render."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"[options={}]")," ",Object(s.b)("em",{parentName:"li"},"(Object)"),": The options object."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"[options.duration=null]")," ",Object(s.b)("em",{parentName:"li"},"(number)"),": The duration (in milliseconds) that the toast should remain on the screen. If set to null, toast will never dismiss."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"[options.id]")," ",Object(s.b)("em",{parentName:"li"},"(string)"),": A unique ID of the toast."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"[options.placement]")," ",Object(s.b)("em",{parentName:"li"},"(string)"),": The placement of the toast.")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Aliases")),Object(s.b)("p",null,"toast(message, ","[options={}]",")"),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Returns")),Object(s.b)("p",null,Object(s.b)("em",{parentName:"p"},"(string)"),": Returns the toast id."),Object(s.b)("h3",null,"toast.update(id, ","[options={}]",")"),Object(s.b)("p",null,"Update a specific toast with new options based on the given toast id."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Arguments")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"id")," ",Object(s.b)("em",{parentName:"li"},"(string)"),": The id to update the toast."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"[options={}]")," ",Object(s.b)("em",{parentName:"li"},"(Object)"),": The options object."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"[options.duration=null]")," ",Object(s.b)("em",{parentName:"li"},"(number)"),": The duration (in milliseconds) that the toast should remain on the screen. If set to null, toast will never dismiss."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"[options.message]")," ",Object(s.b)("em",{parentName:"li"},"(Function|string)"),": The toast message to render.")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Returns")),Object(s.b)("p",null,"Returns ",Object(s.b)("inlineCode",{parentName:"p"},"true")," if the toast exists, else ",Object(s.b)("inlineCode",{parentName:"p"},"false"),"."),Object(s.b)("h3",null,"toast.placement"),Object(s.b)("p",null,"Specify the placement to place the toast. The default placement will be used if the placement option is not explicitly specified."),Object(s.b)("h3",null,"toast.state"),Object(s.b)("p",null,"The toast state is a placement object, each placement contains an array of objects representing the current toasts."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},"{\n  'top': [\n    {\n      id: '1', // A unique identifier that represents the toast message\n      message: ({ id, onClose, placement }) => <Toast />, // The toast message to render\n      placement: 'top', // The placement of the toast\n      duration: null, // The duration (in milliseconds) that the toast should remain on the screen. If set to null, toast will never dismiss.\n      onClose: () => toast.close(id, placement), // The function to close the toast\n    },\n  ],\n  'top-left': [],\n  'top-right': [],\n  'bottom': [],\n  'bottom-left': [],\n  'bottom-right': [],\n}\n")))}b.isMDXComponent=!0},m3Bd:function(t,e,n){var o=n("LdEA");t.exports=function(t,e){if(null==t)return{};var n,a,i=o(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i},t.exports.default=t.exports,t.exports.__esModule=!0},q87K:function(t,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/toast",function(){return n("kEL/")}])}},[["q87K",0,1]]]);