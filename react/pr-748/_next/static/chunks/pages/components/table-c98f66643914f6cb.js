(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7807],{13259:function(e,n,t){"use strict";t.r(n);var l=t(52322),r=t(45392);function o(e){var n=Object.assign({div:"div",h1:"h1",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",code:"code",h3:"h3",p:"p",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,r.ah)(),e.components);return(0,l.jsxs)(n.div,{className:"main-content",id:"main-content",children:[(0,l.jsx)(n.h1,{id:"table",children:"Table"}),"\n",(0,l.jsxs)(n.h2,{id:"import",children:["Import",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import {\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n} from '@tonic-ui/react';\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"usage",children:["Usage",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nrender(() => {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: \'rgba(255, 255, 255, 0.12)\',\n    light: \'rgba(0, 0, 0, 0.12)\',\n  }[colorMode];\n  const tableRowProps = {\n    _hover: {\n      backgroundColor: hoverBackgroundColor,\n    },\n  };\n  const [variant, changeVariantBy] = useSelection(\'default\');\n  const [size, changeSizeBy] = useSelection(\'md\');\n  const [isTableHeaderVisible, toggleIsTableHeaderVisible] = useToggle(true);\n  const [isTableBodyVisible, toggleIsTableBodyVisible] = useToggle(true);\n  const data = React.useMemo(() => [\n    { id: 1, eventType: \'Virus/Malware\', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: \'Spyware/Grayware\', affectedDevices: 20, detections: 778 },\n    { id: 3, eventType: \'URL Filtering\', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: \'Web Reputation\', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: \'Network Virus\', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: \'Application Control\', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  return (\n    <>\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Table props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            variant\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'default\', \'outline\'].map(value => (\n            <Button\n              key={value}\n              selected={value === variant}\n              onClick={changeVariantBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'sm\', \'md\', \'lg\'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <Divider mb="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Table composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isTableHeaderVisible} onChange={() => toggleIsTableHeaderVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">TableHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isTableBodyVisible} onChange={() => toggleIsTableBodyVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">TableBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider mb="4x" />\n      <Flex alignItems="center" columnGap="3x" minHeight="5x">\n        <Table\n          variant={variant}\n          size={size}\n        >\n          {isTableHeaderVisible && (\n            <TableHeader>\n              <TableHeaderRow>\n                <TableHeaderCell width="240px">Event Type</TableHeaderCell>\n                <TableHeaderCell textAlign="right">Affected Devices</TableHeaderCell>\n                <TableHeaderCell textAlign="right">Detections</TableHeaderCell>\n              </TableHeaderRow>\n            </TableHeader>\n          )}\n          {isTableBodyVisible && (\n            <TableBody>\n              {data.map(row => (\n                <TableRow key={row.id} {...tableRowProps}>\n                  <TableCell width="240px">{row.eventType}</TableCell>\n                  <TableCell textAlign="right">{row.affectedDevices}</TableCell>\n                  <TableCell textAlign="right">{row.detections}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          )}\n        </Table>\n      </Flex>\n    </>\n  );\n});\n'})}),"\n",(0,l.jsxs)(n.h3,{id:"using-react-table",children:["Using ",(0,l.jsx)(n.code,{children:"react-table"}),(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#using-react-table",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.p,{children:["This section demonstrates how to use the ",(0,l.jsx)(n.code,{children:"react-table"})," library with the ",(0,l.jsx)(n.code,{children:"Table"})," component, by showcasing various examples. The library provides several hooks, such as ",(0,l.jsx)(n.code,{children:"useTable"}),", ",(0,l.jsx)(n.code,{children:"useBlockLayout"}),", ",(0,l.jsx)(n.code,{children:"useRowSelect"}),", and ",(0,l.jsx)(n.code,{children:"useSortBy"}),", to help create customizable and feature-rich tables. The examples showcase how to utilize these hooks to implement complex features, such as sorting, filtering, pagination, and selection, in your table with ease. Additionally, the examples illustrate the flexibility and extensibility of ",(0,l.jsx)(n.code,{children:"react-table"})," through customizable cell rendering, pagination, and sorting options."]}),"\n",(0,l.jsxs)(n.p,{children:["To use the ",(0,l.jsx)(n.code,{children:"react-table"})," library in your project, you can import the necessary hooks using the following code:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import { useTable, useBlockLayout, useRowSelect, useSortBy } from 'react-table';\n"})}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:"render(() => {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const tableRowProps = {\n    _hover: {\n      backgroundColor: hoverBackgroundColor,\n    },\n  };\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n      width: 240,\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n      width: 140,\n      customProps: {\n        textAlign: 'right',\n      },\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n      width: 136,\n      customProps: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 778 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = ReactTable.useTable(\n    {\n      columns,\n      data,\n    },\n    ReactTable.useBlockLayout,\n  );\n\n  return (\n    <Table {...getTableProps()}>\n      <TableHeader>\n        {headerGroups.map(headerGroup => (\n          <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <TableHeaderCell\n                {...column.getHeaderProps()}\n                {...column.customProps}\n              >\n                {column.render('Header')}\n              </TableHeaderCell>\n            ))}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <TableRow\n              {...row.getRowProps()}\n              {...tableRowProps}\n            >\n              {\n                row.cells.map(cell => {\n                  return (\n                    <TableCell\n                      {...cell.getCellProps()}\n                      {...cell.column.customProps}\n                    >\n                      {cell.render('Cell')}\n                    </TableCell>);\n                })\n              }\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n});\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"selectable-rows",children:["Selectable rows",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#selectable-rows",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const IndeterminateCheckbox = React.forwardRef(({ indeterminate, ...rest }, ref) => {\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n\n  return (\n    <Checkbox\n      ref={resolvedRef}\n      indeterminate={indeterminate}\n      {...rest}\n    />\n  );\n});\n\nfunction SelectableTable() {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const selectedBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.08)',\n    light: 'rgba(0, 0, 0, 0.08)',\n  }[colorMode];\n  const tableRowProps = {\n    _hover: {\n      backgroundColor: hoverBackgroundColor,\n    },\n    _selected: {\n      backgroundColor: selectedBackgroundColor,\n    },\n  };\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n      width: 240,\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n      width: 140,\n      customProps: {\n        textAlign: 'right',\n      },\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n      width: 136,\n      customProps: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows,\n    state: { selectedRowIds },\n  } = ReactTable.useTable(\n    {\n      columns,\n      data,\n    },\n    ReactTable.useBlockLayout,\n    ReactTable.useRowSelect,\n    hooks => {\n      hooks.visibleColumns.push(columns => [\n        {\n          id: 'selection',\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <Flex height=\"100%\" alignItems=\"center\">\n              <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n            </Flex>\n          ),\n          Cell: ({ row }) => (\n            <Flex height=\"100%\" alignItems=\"center\">\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n            </Flex>\n          ),\n          width: 48,\n        },\n        ...columns,\n      ]);\n    }\n  );\n\n  return (\n    <>\n      <Table {...getTableProps()}>\n        <TableHeader>\n          {headerGroups.map(headerGroup => (\n            <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <TableHeaderCell\n                  {...column.getHeaderProps()}\n                  {...column.customProps}\n                >\n                  {column.render('Header')}\n                </TableHeaderCell>\n              ))}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody {...getTableBodyProps()}>\n          {rows.slice(0, 10).map((row, i) => {\n            prepareRow(row);\n            const isRowSelected = Object.keys(selectedRowIds).indexOf(row.id) >= 0;\n            return (\n              <TableRow\n                data-selected={isRowSelected ? 'true' : undefined}\n                {...row.getRowProps()}\n                {...tableRowProps}\n              >\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell\n                      {...cell.getCellProps()}\n                      {...cell.column.customProps}\n                    >\n                      {cell.render('Cell')}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n      <p>Selected Rows: {Object.keys(selectedRowIds).length}</p>\n      <pre>\n        <code>\n          {JSON.stringify(\n            {\n              selectedRowIds: selectedRowIds,\n              'selectedFlatRows[].original': selectedFlatRows.map(\n                d => d.original\n              ),\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </>\n  );\n}\n\nrender(<SelectableTable />);\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"sortable-rows",children:["Sortable rows",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#sortable-rows",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:"function SortableTable() {\n  const [colorMode] = useColorMode();\n  const sortedHeaderColor = {\n    dark: 'white:emphasis',\n    light: 'black:emphasis',\n  }[colorMode];\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const tableRowProps = {\n    _hover: {\n      backgroundColor: hoverBackgroundColor,\n    },\n  };\n\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n      width: 240,\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n      width: 176,\n      customProps: {\n        textAlign: 'right',\n        justifyContent: 'flex-end',\n      },\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n      width: 136,\n      customProps: {\n        textAlign: 'right',\n        justifyContent: 'flex-end',\n      },\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = ReactTable.useTable(\n    {\n      columns,\n      data,\n      // useSortBy\n      disableSortRemove: true,\n    },\n    ReactTable.useBlockLayout,\n    ReactTable.useSortBy,\n  );\n\n  return (\n    <Table {...getTableProps()}>\n      <TableHeader>\n        {headerGroups.map(headerGroup => (\n          <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <TableHeaderCell\n                {...column.getHeaderProps(column.getSortByToggleProps())}\n                {...column.isSorted && { color: sortedHeaderColor }}\n                _hover={{\n                  backgroundColor: hoverBackgroundColor,\n                }}\n              >\n                <Flex\n                  alignItems=\"center\"\n                  {...column.customProps}\n                >\n                  <Truncate>\n                    {column.render('Header')}\n                  </Truncate>\n                  {column.isSorted && column.isSortedDesc && (\n                    <Icon icon=\"sort-down\" size={20} ml=\"1x\" />\n                  )}\n                  {column.isSorted && !column.isSortedDesc && (\n                    <Icon icon=\"sort-up\" size={20}  ml=\"1x\" />\n                  )}\n                </Flex>\n              </TableHeaderCell>\n            ))}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody {...getTableBodyProps()}>\n        {rows.map(\n          (row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow\n                {...row.getRowProps()}\n                {...tableRowProps}\n              >\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell\n                      {...cell.getCellProps()}\n                      {...cell.column.customProps}\n                    >\n                      {cell.render('Cell')}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          }\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n\nrender(<SortableTable />);\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"resizable-columns",children:["Resizable columns",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#resizable-columns",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:"function ResizableTable() {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const tableRowProps = {\n    _hover: {\n      backgroundColor: hoverBackgroundColor,\n    },\n  };\n  const hoveringStyle = {\n    'dark': {\n      borderRight: 1,\n      borderColor: 'gray:50',\n    },\n    'light': {\n      borderRight: 1,\n      borderColor: 'gray:70',\n    }\n  }[colorMode];\n  const resizingStyle = {\n    'dark': {\n      borderRight: 1,\n      borderColor: 'gray:50',\n      boxShadow: '4px 0px 0px 0px rgba(255, 255, 255, 0.12)',\n    },\n    'light': {\n      borderRight: 1,\n      borderColor: 'gray:70',\n      boxShadow: '4px 0px 0px 0px rgba(0, 0, 0, 0.12)',\n    },\n  }[colorMode];\n\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n      width: 240,\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n      width: 144,\n      customProps: {\n        textAlign: 'right',\n        justifyContent: 'flex-end',\n      },\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n      width: 136,\n      customProps: {\n        textAlign: 'right',\n        justifyContent: 'flex-end',\n      },\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    resetResizing,\n  } = ReactTable.useTable(\n    {\n      columns,\n      data,\n    },\n    ReactTable.useBlockLayout,\n    ReactTable.useResizeColumns,\n  );\n\n  const [hoveredResizerId, setHoveredResizerId] = React.useState();\n  const handleEnterResizer = (cellId) => (e) => {\n    setHoveredResizerId(cellId);\n  };\n  const handleLeaveResizer = (e) => {\n    setHoveredResizerId(null);\n  };\n\n  return (\n    <Stack spacing=\"4x\" shouldWrapChildren>\n      <Button onClick={resetResizing}>\n        Reset Column Widths\n      </Button>\n      <Table\n        variant=\"outline\"\n        {...getTableProps()}\n      >\n        <TableHeader>\n          {headerGroups.map(headerGroup => {\n            return (\n              <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column, index) => {\n                  const cellId = column.id;\n                  const isLastChild = (index === headerGroup.headers.length - 1);\n                  const isResizing = column.isResizing;\n                  return (\n                    <TableHeaderCell {...column.getHeaderProps()}>\n                      <Flex alignItems=\"center\" height=\"100%\" {...column.customProps}>\n                        <Truncate>\n                          {column.render('Header')}\n                        </Truncate>\n                      </Flex>\n                      {!isLastChild && (\n                        <Box\n                          {...column.getResizerProps()} // Use column.getResizerProps to hook up the events correctly\n                          display=\"inline-flex\"\n                          width=\"8px\"\n                          height=\"calc(100% + 2px)\" // 2px is border-bottom width of the table header\n                          position=\"absolute\"\n                          right=\"-8px\"\n                          top=\"0\"\n                          zIndex={1}\n                          onMouseEnter={handleEnterResizer(cellId)}\n                          onMouseLeave={handleLeaveResizer}\n                        >\n                          <Box\n                            width=\"4px\"\n                            height=\"100%\"\n                            marginLeft=\"-3px\"\n                            {...(!isResizing && hoveredResizerId === cellId) && hoveringStyle}\n                            {...isResizing && resizingStyle}\n                          />\n                        </Box>\n                      )}\n                    </TableHeaderCell>\n                  );\n                })}\n              </TableHeaderRow>\n            );\n          })}\n        </TableHeader>\n        <TableBody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow\n                {...row.getRowProps()}\n                {...tableRowProps}\n              >\n                {\n                  row.cells.map((cell, index) => {\n                    const cellId = cell.column.id;\n                    const isLastChild = (index === row.cells.length - 1);\n                    const isResizing = cell.column.isResizing;\n                    return (\n                      <TableCell\n                        {...cell.getCellProps()}\n                        {...cell.column.customProps}\n                        position=\"relative\"\n                      >\n                        <Box\n                          overflow=\"hidden\"\n                          textOverflow=\"ellipsis\"\n                        >\n                          {cell.render('Cell')}\n                        </Box>\n                        {!isLastChild && (\n                          <Box\n                            display=\"inline-flex\"\n                            width=\"8px\"\n                            height=\"calc(100% + 1px)\" // 1px is border-bottom width of the table row\n                            position=\"absolute\"\n                            right=\"-8px\"\n                            top=\"0\"\n                            zIndex={1}\n                          >\n                            <Box\n                              width=\"4px\"\n                              height=\"100%\"\n                              marginLeft=\"-3px\"\n                              {...(!isResizing && hoveredResizerId === cellId) && hoveringStyle}\n                              {...isResizing && resizingStyle}\n                            />\n                          </Box>\n                        )}\n                      </TableCell>\n                    );\n                  })\n                }\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </Stack>\n  );\n}\n\nrender(<ResizableTable />);\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"scrollable-table",children:["Scrollable table",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#scrollable-table",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"TableScrollbar"})," component shares the same API as the ",(0,l.jsx)(n.code,{children:"Scrollbar"})," component. It allows for the creation of scrollable content within a table."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"function Example() {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const tableRowProps = {\n    _hover: {\n      backgroundColor: hoverBackgroundColor,\n    },\n  };\n  const tableHeaderRef = React.createRef();\n\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n      customProps: {\n        textAlign: 'right',\n      },\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n      customProps: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const onScroll = (e) => {\n    const scrollLeft = e.target.scrollLeft;\n    if (!!tableHeaderRef && tableHeaderRef.current.scrollLeft !== scrollLeft) {\n      tableHeaderRef.current.scrollLeft = scrollLeft;\n    }\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = ReactTable.useTable(\n    {\n      columns,\n      data,\n    },\n    ReactTable.useBlockLayout,\n  );\n\n  return (\n    <Table\n      width={400}\n      height={200}\n      {...getTableProps()}\n    >\n      <TableHeader ref={tableHeaderRef}>\n        {headerGroups.map(headerGroup => {\n          const { style, ...props } = headerGroup.getHeaderGroupProps();\n          return (\n            <TableHeaderRow style={style} {...props}>\n              {headerGroup.headers.map((column, index) => (\n                <TableHeaderCell\n                  key={column.accessor}\n                  {...column.getHeaderProps()}\n                  {...column.customProps}\n                >\n                  {column.render('Header')}\n                </TableHeaderCell>\n              ))}\n            </TableHeaderRow>\n          );\n        })}\n      </TableHeader>\n      <TableScrollbar\n        height=\"100%\"\n        onScroll={onScroll}\n      >\n        <TableBody {...getTableBodyProps()}>\n          {rows.map((row, index) => {\n            prepareRow(row);\n            return (\n              <TableRow\n                key={index}\n                {...row.getRowProps()}\n                {...tableRowProps}\n              >\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      {...cell.getCellProps()}\n                      {...cell.column.customProps}\n                    >\n                      {cell.render('Cell')}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </TableScrollbar>\n    </Table>\n  );\n}\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"full-width-table",children:["Full width table",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#full-width-table",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import { AutoSizer } from 'react-virtualized';\n"})}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:"function FullWidthTable() {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const tableRowProps = {\n    _hover: {\n      backgroundColor: hoverBackgroundColor,\n    },\n  };\n\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      id: 'eventType',\n      accessor: 'eventType',\n      width: 'auto',\n    },\n    {\n      Header: 'Affected Devices',\n      id: 'affectedDevices',\n      accessor: 'affectedDevices',\n      width: 140,\n      customProps: {\n        textAlign: 'right',\n      },\n    },\n    {\n      Header: 'Detections',\n      id: 'detections',\n      accessor: 'detections',\n      width: '10%',\n      customProps: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const getCalculatedColumns = ({ initColumns, tableWidth }) => {\n    const columns = initColumns.map(column => {\n      let columnWidth = column.width;\n      if (typeof columnWidth === 'string') {\n        const lastChar = columnWidth.substr(columnWidth.length - 1);\n        if (lastChar === '%') {\n          columnWidth = tableWidth * (parseFloat(columnWidth) / 100);\n          return {\n            ...column,\n            width: columnWidth\n          };\n        }\n        if (columnWidth === 'auto') {\n          return {\n            ...column,\n            width: 0\n          };\n        }\n      }\n      return column;\n    });\n    const customWidthColumns = columns.filter(column => !!column.width);\n    const totalCustomWidth = customWidthColumns.reduce((accumulator, column) => accumulator + column.width, 0);\n    let defaultCellWidth = (tableWidth - totalCustomWidth) / (columns.length - customWidthColumns.length);\n    defaultCellWidth = defaultCellWidth <= 0 ? 150 : defaultCellWidth;\n    return columns.map(column => {\n      if (!!column.width) {\n        return column;\n      }\n      return {\n        ...column,\n        width: defaultCellWidth\n      };\n    });\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = ReactTable.useTable(\n    {\n      columns,\n      data,\n    },\n    ReactTable.useBlockLayout,\n  );\n\n  return (\n    <Box height={300} overflow=\"auto\">\n      <ReactVirtualized.AutoSizer>\n        {({ height, width }) => {\n          if (height === 0 || width === 0) {\n            return null;\n          }\n          const newColumns = getCalculatedColumns({ initColumns: columns, tableWidth: width });\n          return (\n            <Table\n              width={width}\n              {...getTableProps()}\n            >\n              <TableHeader>\n                {headerGroups.map(headerGroup => (\n                  <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map(column => {\n                      const columnId = column.id;\n                      const _column = newColumns.filter(column => column.id === columnId);\n                      const _columnWidth = _column[0].width;\n                      return (\n                        <TableHeaderCell\n                          width={_columnWidth}\n                          {...column.getHeaderProps()}\n                          {...column.customProps}\n                        >\n                          {column.render('Header')}\n                        </TableHeaderCell>\n                      );\n                    })}\n                  </TableHeaderRow>\n                ))}\n              </TableHeader>\n              <TableBody {...getTableBodyProps()}>\n                {rows.map((row, i) => {\n                  prepareRow(row);\n                  return (\n                    <TableRow\n                      {...row.getRowProps()}\n                      {...tableRowProps}\n                    >\n                      {\n                        row.cells.map(cell => {\n                          const columnId = cell.column.id;\n                          const _column = newColumns.filter(column => column.id === columnId);\n                          const _columnWidth = _column[0].width;\n                          return (\n                            <TableCell\n                              width={_columnWidth}\n                              {...cell.getCellProps()}\n                              {...cell.column.customProps}\n                            >\n                              {cell.render('Cell')}\n                            </TableCell>\n                          );\n                        })\n                      }\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          );\n        }}\n      </ReactVirtualized.AutoSizer>\n    </Box>\n  );\n}\n\nrender(<FullWidthTable />);\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"row-reordering",children:["Row reordering",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-reordering",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.p,{children:["You can use either ",(0,l.jsx)(n.code,{children:"react-movable"})," or ",(0,l.jsx)(n.code,{children:"react-dnd"})," to enable row reordering."]}),"\n",(0,l.jsxs)(n.p,{children:["The following example uses ",(0,l.jsx)(n.code,{children:"react-movable"})," to enable row reordering:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import { List, arrayMove } from 'react-movable';\n"})}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:"function ReactMovableExample() {\n  const { colorMode } = useColorMode();\n  const tableProps = {\n    'dark': {\n      backgroundColor: 'gray:80',\n    },\n    'light': {\n      backgroundColor: 'gray:10',\n    }\n  }[colorMode];\n  const rowProps = {\n    'dark': {\n      backgroundColor: 'gray:100',\n    },\n    'light': {\n      backgroundColor: 'white',\n    },\n  }[colorMode];\n\n  const [items, setItems] = React.useState([\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ]);\n\n  return (\n    <ReactMovable.List\n      values={items}\n      onChange={({ oldIndex, newIndex }) =>\n        setItems(ReactMovable.arrayMove(items, oldIndex, newIndex))\n      }\n      renderList={({ children, props, isDragged }) => (\n        <Table\n          {...tableProps}\n          style={{\n            cursor: isDragged ? 'grabbing' : undefined,\n          }}\n        >\n          <TableHeader>\n            <TableHeaderRow\n              {...rowProps}\n            >\n              <TableHeaderCell width=\"240px\">Event Type</TableHeaderCell>\n              <TableHeaderCell width=\"140px\" textAlign=\"right\">Affected Devices</TableHeaderCell>\n              <TableHeaderCell width=\"136px\" textAlign=\"right\">Detections</TableHeaderCell>\n            </TableHeaderRow>\n          </TableHeader>\n          <TableBody {...props}>{children}</TableBody>\n        </Table>\n      )}\n      renderItem={({ value, props, isDragged, isSelected }) => {\n        const row = (\n          <TableRow\n            {...props}\n            {...rowProps}\n            style={{\n              ...props.style,\n              cursor: isDragged ? 'grabbing' : 'grab',\n            }}\n          >\n            <TableCell width=\"240px\">{value.eventType}</TableCell>\n            <TableCell width=\"140px\" textAlign=\"right\">{value.affectedDevices}</TableCell>\n            <TableCell width=\"136px\" textAlign=\"right\">{value.detections}</TableCell>\n          </TableRow>\n        );\n        return isDragged ? (\n          <Table style={{ ...props.style }}>\n            <TableBody>{row}</TableBody>\n          </Table>\n        ) : (\n          row\n        );\n      }}\n    />\n  );\n}\n\nrender(<ReactMovableExample />);\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The following example uses ",(0,l.jsx)(n.code,{children:"react-dnd"})," to enable row reordering:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import { DndProvider, useDrop, useDragLayer } from 'react-dnd';\nimport { HTML5Backend, getEmptyImage } from 'react-dnd-html5-backend';\nimport immutableUpdate from 'immutability-helper';\n"})}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const ItemTypes = {\n  TR: 'tr',\n};\n\nconst TR = ({ id, row, index, moveTr, ...otherProps }) => {\n  const ref = React.useRef(null);\n  const [, drop] = ReactDND.useDrop({\n    accept: ItemTypes.TR,\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current ? ref.current.getBoundingClientRect() : {};\n      // Get vertical middle\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      moveTr(dragIndex, hoverIndex);\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  const [{ isDragging }, drag, preview] = ReactDND.useDrag({\n    type: ItemTypes.TR,\n    item: { id, index, row },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  drag(drop(ref));\n\n  React.useEffect(() => {\n    preview(ReactDNDHtml5backend.getEmptyImage(), { captureDraggingState: true });\n  }, []);\n\n  return (\n    <TableRow\n      {...otherProps}\n      ref={ref}\n      style={{\n        cursor: 'move',\n        opacity: isDragging ? 0 : 1,\n      }}\n    >\n      <TableCell width=\"240px\">{row.eventType}</TableCell>\n      <TableCell width=\"140px\" textAlign=\"right\">{row.affectedDevices}</TableCell>\n      <TableCell width=\"136px\" textAlign=\"right\">{row.detections}</TableCell>\n    </TableRow>\n  );\n};\n\nconst CustomDragLayer = (props) => {\n  const { itemType, isDragging, item, initialOffset, currentOffset, } = ReactDND.useDragLayer((monitor) => ({\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    initialOffset: monitor.getInitialSourceClientOffset(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging(),\n  }));\n\n  const layerStyles = {\n    position: 'fixed',\n    pointerEvents: 'none',\n    zIndex: 100,\n    left: 0,\n    top: 0,\n  };\n\n  const getItemStyles = (initialOffset, currentOffset) => {\n    if (!initialOffset || !currentOffset) {\n      return {\n        display: 'none',\n      };\n    }\n    const { x, y } = currentOffset;\n    const transform = `translate(${x}px, ${y}px)`;\n    return {\n      transform,\n      WebkitTransform: transform,\n    };\n  };\n\n  if (!isDragging) {\n    return null;\n  }\n\n  if (itemType === ItemTypes.TR) {\n    const row = item.row;\n     return (\n       <Box style={layerStyles}>\n        <Box style={getItemStyles(initialOffset, currentOffset)}>\n          <TableRow {...props}>\n            <TableCell width=\"240px\">{row.eventType}</TableCell>\n            <TableCell width=\"140px\" textAlign=\"right\">{row.affectedDevices}</TableCell>\n            <TableCell width=\"136px\" textAlign=\"right\">{row.detections}</TableCell>\n          </TableRow>\n        </Box>\n      </Box>\n    );\n  }\n\n  return null;\n};\n\nfunction ReactDNDExample() {\n  const [items, setItems] = React.useState([\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ]);\n  const moveTr = React.useCallback((dragIndex, hoverIndex) => {\n    const dragCard = items[dragIndex];\n    setItems(immutableUpdate(items, {\n      $splice: [\n        [dragIndex, 1],\n        [hoverIndex, 0, dragCard],\n      ],\n    }));\n  }, [items]);\n  const { colorMode } = useColorMode();\n  const tableProps = {\n    'dark': {\n      backgroundColor: 'gray:80',\n    },\n    'light': {\n      backgroundColor: 'gray:10',\n    }\n  }[colorMode];\n  const rowProps = {\n    'dark': {\n      backgroundColor: 'gray:100',\n    },\n    'light': {\n      backgroundColor: 'white',\n    },\n  }[colorMode];\n\n  return (\n    <Table\n     {...tableProps}\n    >\n      <TableHeader>\n        <TableHeaderRow\n           {...rowProps}\n        >\n          <TableHeaderCell width=\"240px\">Event Type</TableHeaderCell>\n          <TableHeaderCell width=\"140px\" textAlign=\"right\">Affected Devices</TableHeaderCell>\n          <TableHeaderCell width=\"136px\" textAlign=\"right\">Detections</TableHeaderCell>\n        </TableHeaderRow>\n      </TableHeader>\n      <TableBody>\n        {\n          items.map((item, i) => (\n            <TR {...rowProps} key={item.id} index={i} id={item.id} row={item} moveTr={moveTr}/>\n          ))\n        }\n        <CustomDragLayer {...rowProps} />\n      </TableBody>\n    </Table>\n  );\n}\n\nrender(\n  <ReactDND.DndProvider backend={ReactDNDHtml5backend.HTML5Backend}>\n    <ReactDNDExample />\n  </ReactDND.DndProvider>\n);\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"column-reordering",children:["Column reordering",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-reordering",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n"})}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:"function ReorderColumnTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      accessor: 'eventType',\n      width: 240,\n    },\n    {\n      Header: 'Affected Devices',\n      accessor: 'affectedDevices',\n      width: 144,\n      customProps: {\n        textAlign: 'right',\n      },\n    },\n    {\n      Header: 'Detections',\n      accessor: 'detections',\n      width: 136,\n      customProps: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ], []);\n\n  const { colorMode } = useColorMode();\n  const { colors } = useTheme();\n  const columnPlaceholderProps = {\n    'dark': {\n      backgroundColor: 'gray:90',\n      color: 'gray:50',\n    },\n    'light': {\n      backgroundColor: 'gray:10',\n      color: 'gray:30',\n    }\n  }[colorMode];\n  const columnDraggerProps = {\n    'dark': {\n      backgroundColor: 'gray:80',\n      color: 'gray:30',\n      boxShadow: '0 4px 16px 0 rgba(0, 0, 0, 0.48), 0 2px 4px 0 rgba(0, 0, 0, 0.16)',\n      border: `1px solid ${colors['gray:60']}`,\n    },\n    'light': {\n      backgroundColor: 'gray:10',\n      color: 'gray:80',\n      boxShadow: '0 4px 16px 0 rgba(0, 0, 0, 0.16), 0 2px 4px 0 rgba(0, 0, 0, 0.08)',\n      border: `1px solid ${colors['gray:20']}`,\n    }\n  }[colorMode];\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    allColumns,\n    setColumnOrder,\n  } = ReactTable.useTable(\n    {\n      columns,\n      data,\n      defaultColumn: {},\n    },\n    ReactTable.useColumnOrder,\n    ReactTable.useBlockLayout,\n  );\n\n  const currentColOrder = React.useRef();\n  const [placeholderProps, setPlaceholderProps] = React.useState({});\n  const onDragEnd = (result) => {\n    setPlaceholderProps({});\n\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n  };\n  const onDragUpdate = (dragUpdateObj, b) => {\n    if(!dragUpdateObj.destination){\n      return;\n    }\n    const draggableId = dragUpdateObj.draggableId;\n    const destinationIndex = dragUpdateObj.destination.index;\n\n    const queryAttr = \"data-rbd-drag-handle-draggable-id\";\n    const domQuery = `[${queryAttr}='${draggableId}']`;\n    const draggedDOM = document.querySelector(domQuery);\n\n    if (!draggedDOM) {\n      return;\n    }\n    const { clientHeight, clientWidth, offsetWidth } = draggedDOM;\n    const clientX = Array.from(draggedDOM.parentNode.children)\n      .slice(0, destinationIndex)\n      .reduce((total, curr) => {\n        return total + curr.clientWidth;\n      }, 0);\n\n    setPlaceholderProps({\n      clientHeight,\n      clientWidth: offsetWidth,\n      clientY: 2,\n      clientX: clientX,\n      content: draggedDOM.innerHTML,\n    });\n\n    const colOrder = [...currentColOrder.current];\n    const sIndex = dragUpdateObj.source.index;\n    const dIndex = dragUpdateObj.destination && dragUpdateObj.destination.index;\n    if (typeof sIndex === \"number\" && typeof dIndex === \"number\") {\n      colOrder.splice(sIndex, 1);\n      colOrder.splice(dIndex, 0, dragUpdateObj.draggableId);\n      setColumnOrder(colOrder);\n    }\n  };\n  const onDragStart = () => {\n    currentColOrder.current = allColumns.map(o => o.id);\n  };\n\n  return (\n    <Table {...getTableProps()}>\n      <TableHeader>\n        {headerGroups.map((headerGroup, index) => (\n          <rbd.DragDropContext\n            key={index}\n            onDragStart={onDragStart}\n            onDragUpdate={onDragUpdate}\n            onDragEnd={onDragEnd}\n          >\n            <rbd.Droppable\n              droppableId=\"droppable-table-header\"\n              direction=\"horizontal\"\n            >\n              {(droppableProvided, droppableSnapshot) => {\n                return (\n                  <TableHeaderRow\n                    ref={droppableProvided.innerRef}\n                    {...droppableProvided.droppableProps}\n                    {...headerGroup.getHeaderGroupProps()}\n                  >\n                    {headerGroup.headers.map((column, index) => (\n                      <rbd.Draggable\n                        key={column.id}\n                        draggableId={column.id}\n                        index={index}\n                        isDragDisabled={!column.accessor}\n                      >\n                        {(provided, snapshot) => {\n                          const { style: headerStyle, ...columnHeaderProps } = column.getHeaderProps();\n                          const columnHeaderStyle = {\n                            ...headerStyle,\n                            ...provided.draggableProps.style,\n                          };\n                          return (\n                            <TableHeaderCell\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              {...columnHeaderProps}\n                              {...column.customProps}\n                              {...snapshot.isDragging && columnDraggerProps}\n                              ref={provided.innerRef}\n                              userSelect=\"none\"\n                              style={columnHeaderStyle}\n                            >\n                              {column.render(\"Header\")}\n                            </TableHeaderCell>\n                          );\n                        }}\n                      </rbd.Draggable>\n                    ))}\n                    {droppableProvided.placeholder}\n                    <TableHeaderCell\n                      position=\"absolute\"\n                      top={placeholderProps.clientY}\n                      left={placeholderProps.clientX}\n                      height={placeholderProps.clientHeight}\n                      width={placeholderProps.clientWidth}\n                      display={!!placeholderProps.clientWidth ? 'block' : 'none' }\n                      {...columnPlaceholderProps}\n                    >\n                      { placeholderProps.content }\n                    </TableHeaderCell>\n                  </TableHeaderRow>\n                );\n              }}\n            </rbd.Droppable>\n          </rbd.DragDropContext>\n        ))}\n      </TableHeader>\n      <TableBody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <TableRow {...row.getRowProps()}>\n              {\n                row.cells.map(cell => {\n                  return (\n                    <TableCell\n                      {...cell.getCellProps()}\n                      {...cell.column.customProps}\n                    >\n                      {cell.render('Cell')}\n                    </TableCell>\n                  );\n                })\n              }\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n\n// The resetServerContext function should be used when server side rendering (SSR).\n// It ensures context state does not persist across multiple renders on the server\n// which would result in client/server markup mismatches after multiple requests are rendered on the server.\nrbd.resetServerContext();\n\nrender(<ReorderColumnTable />);\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"props",children:["Props",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.h3,{id:"table-1",children:["Table",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#table-1",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"size"}),(0,l.jsx)(n.td,{align:"left",children:"string"}),(0,l.jsx)(n.td,{align:"left",children:"'md'"}),(0,l.jsx)(n.td,{align:"left",children:"The size of TableCells. One of: 'sm', 'md', 'lg'"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"variant"}),(0,l.jsx)(n.td,{align:"left",children:"string"}),(0,l.jsx)(n.td,{align:"left",children:"'default'"}),(0,l.jsx)(n.td,{align:"left",children:"The variant of the table style to use. One of: 'default', 'outline'"})]})]})]}),"\n",(0,l.jsxs)(n.h3,{id:"tableheader",children:["TableHeader",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheader",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,l.jsxs)(n.h3,{id:"tableheaderrow",children:["TableHeaderRow",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheaderrow",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,l.jsxs)(n.h3,{id:"tableheadercell",children:["TableHeaderCell",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheadercell",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"width"}),(0,l.jsx)(n.td,{align:"left",children:"number | string"}),(0,l.jsx)(n.td,{align:"left",children:"150"}),(0,l.jsx)(n.td,{align:"left",children:"The width of the column."})]})})]}),"\n",(0,l.jsxs)(n.h3,{id:"tablebody",children:["TableBody",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablebody",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,l.jsxs)(n.h3,{id:"tablerow",children:["TableRow",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablerow",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,l.jsxs)(n.h3,{id:"tablecell",children:["TableCell",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablecell",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"width"}),(0,l.jsx)(n.td,{align:"left",children:"number | string"}),(0,l.jsx)(n.td,{align:"left",children:"150"}),(0,l.jsx)(n.td,{align:"left",children:"The width of the column."})]})]})]}),"\n",(0,l.jsxs)(n.h3,{id:"tablescrollbar",children:["TableScrollbar",(0,l.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablescrollbar",children:(0,l.jsx)(n.svg,{children:(0,l.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"TableScrollbar"})," component shares the same API as the ",(0,l.jsx)(n.code,{children:"Scrollbar"})," component."]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode | function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"The content of the scrollbar."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"width"}),(0,l.jsx)(n.td,{align:"left",children:"number | string"}),(0,l.jsx)(n.td,{align:"left",children:"'auto'"}),(0,l.jsxs)(n.td,{align:"left",children:["The width of the scrollbar. If set to 'auto', you can constrain the width using the ",(0,l.jsx)(n.code,{children:"minWidth"})," and ",(0,l.jsx)(n.code,{children:"maxWidth"})," props."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"height"}),(0,l.jsx)(n.td,{align:"left",children:"number | string"}),(0,l.jsx)(n.td,{align:"left",children:"'auto'"}),(0,l.jsxs)(n.td,{align:"left",children:["The height of the scrollbar. If set to 'auto', you can constrain the height using the ",(0,l.jsx)(n.code,{children:"minHeight"})," and ",(0,l.jsx)(n.code,{children:"maxHeight"})," props."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"minWidth"}),(0,l.jsx)(n.td,{align:"left",children:"number | string"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"The minimum width of the scrollbar."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"maxWidth"}),(0,l.jsx)(n.td,{align:"left",children:"number | string"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"The maximum width of the scrollbar."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"minHeight"}),(0,l.jsx)(n.td,{align:"left",children:"number | string"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"The minimum height of the scrollbar."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"maxHeight"}),(0,l.jsx)(n.td,{align:"left",children:"number | string"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"The maximum height of the scrollbar."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"minThumbWidth"}),(0,l.jsx)(n.td,{align:"left",children:"number"}),(0,l.jsx)(n.td,{align:"left",children:"32"}),(0,l.jsx)(n.td,{align:"left",children:"The minimum width of the thumb in pixels."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"minThumbHeight"}),(0,l.jsx)(n.td,{align:"left",children:"number"}),(0,l.jsx)(n.td,{align:"left",children:"32"}),(0,l.jsx)(n.td,{align:"left",children:"The minimum height of the thumb in pixels."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onScroll"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"A callback function that is called when the scrollbar is scrolled."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onUpdate"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"A callback function that is called when the scrollbar is updated."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"overflow"}),(0,l.jsx)(n.td,{align:"left",children:"string"}),(0,l.jsx)(n.td,{align:"left",children:"'auto'"}),(0,l.jsx)(n.td,{align:"left",children:"The overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"overflowX"}),(0,l.jsx)(n.td,{align:"left",children:"string"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"The horizontal overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"overflowY"}),(0,l.jsx)(n.td,{align:"left",children:"string"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"The vertical overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]})]})]})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,r.ah)(),e.components).wrapper;return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(o,e)})):o(e)}},19845:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/table",function(){return t(13259)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=19845)}),_N_E=e.O()}]);