(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[345],{8506:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return s}});var a=n(7896),o=n(9740),u=(n(2784),n(876)),l=["components"],r={};function s(t){var e=t.components,n=(0,o.Z)(t,l);return(0,u.kt)("wrapper",(0,a.Z)({},r,n,{components:e,mdxType:"MDXLayout"}),(0,u.kt)("h1",null,"useLatestRef"),(0,u.kt)("p",null,"A custom Hook that returns a ref object with the latest value."),(0,u.kt)("p",null,"This is mostly useful to get access to the latest value of some props or state inside an asynchronous callback, instead of that value at the time the callback was created from."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-js"},"// import\nimport { useLatestRef } from '@tonic-ui/react-hooks';\n\n// usage\nconst ref = useLatestRef(value);\n")),(0,u.kt)("h3",null,"Parameters"),(0,u.kt)("table",null,(0,u.kt)("thead",{parentName:"table"},(0,u.kt)("tr",{parentName:"thead"},(0,u.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,u.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,u.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,u.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,u.kt)("tbody",{parentName:"table"},(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:"left"},"value"),(0,u.kt)("td",{parentName:"tr",align:"left"},"any"),(0,u.kt)("td",{parentName:"tr",align:"left"}),(0,u.kt)("td",{parentName:"tr",align:"left"},"The latest value.")))),(0,u.kt)("h3",null,"Returns"),(0,u.kt)("p",null,"Returns a ref object with the ",(0,u.kt)("inlineCode",{parentName:"p"},"current")," property set to the latest value."),(0,u.kt)("h3",null,"Example"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx"},'function Component() {\n  const [countdownMode, setCountdownMode] = React.useState(false);\n  const timeoutRef = React.useRef(null);\n  const [count, setCount] = React.useState(0);\n  const latestRef = useLatestRef(count);\n\n  function handleAlertClick() {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n    timeoutRef.current = setTimeout(() => {\n      alert(`Latest count value: ${latestRef.current}`);\n      timeoutRef.current = null;\n      setCountdownMode(false);\n    }, 3000);\n    setCountdownMode(true);\n  }\n\n  return (\n    <>\n      <Box mb="4x">\n        You clicked {count} times\n      </Box>\n      <Button disabled={countdownMode} onClick={handleAlertClick}>\n        Show Alert In 5 Seconds\n      </Button>\n      <Space width="2x" />\n      <Button disabled={!countdownMode} onClick={() => setCount(count + 1)}>\n        Click Me\n      </Button>\n    </>\n  );\n};\n')))}s.isMDXComponent=!0},4322:function(t,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useLatestRef",function(){return n(8506)}])}},function(t){t.O(0,[9774,2888,179],(function(){return e=4322,t(t.s=e);var e}));var e=t.O();_N_E=e}]);