(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6689],{10973:function(t,n,e){"use strict";e.r(n),e.d(n,{default:function(){return index_page}});var o=e(52322),r=e(45392),i=e(83449),a=e(28165),l=e(67569),c=e(2784);function _slicedToArray(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e,o,r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var i=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(e=r.next()).done)&&(i.push(e.value),!n||i.length!==n);a=!0);}catch(t){l=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw o}}return i}}(t,n)||function(t,n){if(t){if("string"==typeof t)return _arrayLikeToArray(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);if("Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return _arrayLikeToArray(t,n)}}(t,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=Array(n);e<n;e++)o[e]=t[e];return o}var states=function(){var t=_slicedToArray((0,l.useColorMode)(),1)[0],n={dark:"red:80",light:"red:80"}[t],e={dark:"blue:80",light:"blue:80"}[t],o={dark:"gray:70",light:"gray:30"}[t],r={dark:"gray:60",light:"gray:20"}[t],i=["chart-pie","chart-line","chart-table","chart-bar"],u=i.length-1,s=_slicedToArray((0,c.useState)("chart-pie"),2),d=s[0],B=s[1],m=_slicedToArray((0,c.useState)("chart-pie"),2),p=m[0],h=m[1],v=_slicedToArray((0,c.useState)("chart-pie"),2),f=v[0],g=v[1],x=_slicedToArray((0,c.useState)("chart-pie"),2),y=x[0],k=x[1],b=_slicedToArray((0,c.useState)("chart-pie"),2),E=b[0],D=b[1],C=_slicedToArray((0,c.useState)("chart-pie"),2),T=C[0],G=C[1];return c.createElement(l.Flex,{direction:"column",rowGap:"4x"},c.createElement(l.Box,null,c.createElement(l.Box,{mb:"2x"},c.createElement(l.TextLabel,null,"Emphasis")),c.createElement(l.ButtonGroup,{variant:"emphasis"},i.map(function(t,e){return c.createElement(c.Fragment,{key:t},c.createElement(l.Button,{disabled:e===u,selected:d===t,onClick:function(n){B(t),n.currentTarget.blur()},width:"8x"},c.createElement(l.Icon,{icon:t})),e!==u&&c.createElement(l.Divider,{orientation:"vertical",color:n}))}))),c.createElement(l.Box,null,c.createElement(l.Box,{mb:"2x"},c.createElement(l.TextLabel,null,"Primary")),c.createElement(l.ButtonGroup,{variant:"primary"},i.map(function(t,n){return c.createElement(c.Fragment,{key:t},c.createElement(l.Button,{disabled:n===u,selected:p===t,onClick:function(n){h(t),n.currentTarget.blur()},width:"8x"},c.createElement(l.Icon,{icon:t})),n!==u&&c.createElement(l.Divider,{orientation:"vertical",color:e}))}))),c.createElement(l.Box,null,c.createElement(l.Box,{mb:"2x"},c.createElement(l.TextLabel,null,"Default")),c.createElement(l.ButtonGroup,{variant:"default"},i.map(function(t,n){return c.createElement(c.Fragment,{key:t},c.createElement(l.Button,{disabled:n===u,selected:f===t,onClick:function(n){g(t),n.currentTarget.blur()},width:"8x"},c.createElement(l.Icon,{icon:t})),n!==u&&c.createElement(l.Divider,{orientation:"vertical",color:o}))}))),c.createElement(l.Box,null,c.createElement(l.Box,{mb:"2x"},c.createElement(l.TextLabel,null,"Secondary")),c.createElement(l.ButtonGroup,{variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},i.map(function(t,n){return c.createElement(c.Fragment,{key:t},c.createElement(l.Button,{disabled:n===u,selected:y===t,onClick:function(n){k(t),n.currentTarget.blur()},width:"8x"},c.createElement(l.Icon,{icon:t})))}))),c.createElement(l.Box,null,c.createElement(l.Box,{mb:"2x"},c.createElement(l.TextLabel,null,"Ghost")),c.createElement(l.ButtonGroup,{variant:"ghost"},i.map(function(t,n){return c.createElement(c.Fragment,{key:t},c.createElement(l.Button,{disabled:n===u,selected:E===t,onClick:function(n){D(t),n.currentTarget.blur()},width:"8x"},c.createElement(l.Icon,{icon:t})),n!==u&&c.createElement(l.Divider,{orientation:"vertical",color:r}))}))),c.createElement(l.Box,null,c.createElement(l.Box,{mb:"2x"},c.createElement(l.TextLabel,null,"Ghost (w/o ButtonGroup)")),c.createElement(l.Flex,null,i.map(function(t,n){return c.createElement(c.Fragment,{key:t},c.createElement(l.Button,{disabled:n===u,selected:T===t,onClick:function(n){G(t),n.currentTarget.blur()},variant:"ghost",width:"8x"},c.createElement(l.Icon,{icon:t})))}))))};function orientation_arrayLikeToArray(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=Array(n);e<n;e++)o[e]=t[e];return o}var orientation=function(){var t,n=(function(t){if(Array.isArray(t))return t}(t=(0,l.useColorMode)())||function(t,n){var e,o,r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var i=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(e=r.next()).done)&&(i.push(e.value),!n||i.length!==n);a=!0);}catch(t){l=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw o}}return i}}(t,1)||function(t,n){if(t){if("string"==typeof t)return orientation_arrayLikeToArray(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);if("Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return orientation_arrayLikeToArray(t,n)}}(t,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],e={dark:"gray:70",light:"gray:30"}[n],o={dark:"gray:60",light:"gray:20"}[n];return c.createElement(l.Stack,{direction:"row",spacing:"4x"},c.createElement(l.Stack,{spacing:"4x",alignItems:"center"},c.createElement(l.ButtonGroup,null,c.createElement(l.Button,null,"One"),c.createElement(l.Divider,{orientation:"vertical",color:e}),c.createElement(l.Button,null,"Two"),c.createElement(l.Divider,{orientation:"vertical",color:e}),c.createElement(l.Button,null,"Three")),c.createElement(l.ButtonGroup,{orientation:"vertical"},c.createElement(l.Button,null,"One"),c.createElement(l.Divider,{color:e}),c.createElement(l.Button,null,"Two"),c.createElement(l.Divider,{color:e}),c.createElement(l.Button,null,"Three"))),c.createElement(l.Stack,{spacing:"4x",alignItems:"center"},c.createElement(l.ButtonGroup,{variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},c.createElement(l.Button,null,"One"),c.createElement(l.Button,null,"Two"),c.createElement(l.Button,null,"Three")),c.createElement(l.ButtonGroup,{orientation:"vertical",variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginTop:-1}},"","")},c.createElement(l.Button,null,"One"),c.createElement(l.Button,null,"Two"),c.createElement(l.Button,null,"Three"))),c.createElement(l.Stack,{spacing:"4x",alignItems:"center"},c.createElement(l.ButtonGroup,{variant:"ghost",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},c.createElement(l.Button,null,"One"),c.createElement(l.Divider,{orientation:"vertical",color:o}),c.createElement(l.Button,null,"Two"),c.createElement(l.Divider,{orientation:"vertical",color:o}),c.createElement(l.Button,null,"Three")),c.createElement(l.ButtonGroup,{orientation:"vertical",variant:"ghost",css:(0,a.iv)({"> *:not(:first-of-type)":{marginTop:-1}},"","")},c.createElement(l.Button,null,"One"),c.createElement(l.Divider,{color:o}),c.createElement(l.Button,null,"Two"),c.createElement(l.Divider,{color:o}),c.createElement(l.Button,null,"Three"))))};function sizes_arrayLikeToArray(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=Array(n);e<n;e++)o[e]=t[e];return o}var sizes=function(){var t,n=(function(t){if(Array.isArray(t))return t}(t=(0,l.useColorMode)())||function(t,n){var e,o,r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var i=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(e=r.next()).done)&&(i.push(e.value),!n||i.length!==n);a=!0);}catch(t){l=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw o}}return i}}(t,1)||function(t,n){if(t){if("string"==typeof t)return sizes_arrayLikeToArray(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);if("Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return sizes_arrayLikeToArray(t,n)}}(t,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],e={dark:"gray:70",light:"gray:30"}[n],o={dark:"gray:60",light:"gray:20"}[n];return c.createElement(l.Stack,{direction:"row",spacing:"4x"},c.createElement(l.Stack,{spacing:"4x",alignItems:"flex-start"},c.createElement(l.ButtonGroup,{size:"sm"},c.createElement(l.Button,null,"Left"),c.createElement(l.Divider,{orientation:"vertical",color:e}),c.createElement(l.Button,null,"Middle"),c.createElement(l.Divider,{orientation:"vertical",color:e}),c.createElement(l.Button,null,"Right")),c.createElement(l.ButtonGroup,{size:"md"},c.createElement(l.Button,null,"Left"),c.createElement(l.Divider,{orientation:"vertical",color:e}),c.createElement(l.Button,null,"Middle"),c.createElement(l.Divider,{orientation:"vertical",color:e}),c.createElement(l.Button,null,"Right")),c.createElement(l.ButtonGroup,{size:"lg"},c.createElement(l.Button,null,"Left"),c.createElement(l.Divider,{orientation:"vertical",color:e}),c.createElement(l.Button,null,"Middle"),c.createElement(l.Divider,{orientation:"vertical",color:e}),c.createElement(l.Button,null,"Right"))),c.createElement(l.Stack,{spacing:"4x",alignItems:"flex-start"},c.createElement(l.ButtonGroup,{size:"sm",variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},c.createElement(l.Button,null,"Left"),c.createElement(l.Button,null,"Middle"),c.createElement(l.Button,null,"Right")),c.createElement(l.ButtonGroup,{size:"md",variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},c.createElement(l.Button,null,"Left"),c.createElement(l.Button,null,"Middle"),c.createElement(l.Button,null,"Right")),c.createElement(l.ButtonGroup,{size:"lg",variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},c.createElement(l.Button,null,"Left"),c.createElement(l.Button,null,"Middle"),c.createElement(l.Button,null,"Right"))),c.createElement(l.Stack,{spacing:"4x",alignItems:"flex-start"},c.createElement(l.ButtonGroup,{size:"sm",variant:"ghost",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},c.createElement(l.Button,null,"Left"),c.createElement(l.Divider,{orientation:"vertical",color:o}),c.createElement(l.Button,null,"Middle"),c.createElement(l.Divider,{orientation:"vertical",color:o}),c.createElement(l.Button,null,"Right")),c.createElement(l.ButtonGroup,{size:"md",variant:"ghost",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},c.createElement(l.Button,null,"Left"),c.createElement(l.Divider,{orientation:"vertical",color:o}),c.createElement(l.Button,null,"Middle"),c.createElement(l.Divider,{orientation:"vertical",color:o}),c.createElement(l.Button,null,"Right")),c.createElement(l.ButtonGroup,{size:"lg",variant:"ghost",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},c.createElement(l.Button,null,"Left"),c.createElement(l.Divider,{orientation:"vertical",color:o}),c.createElement(l.Button,null,"Middle"),c.createElement(l.Divider,{orientation:"vertical",color:o}),c.createElement(l.Button,null,"Right"))))};function variants_arrayLikeToArray(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=Array(n);e<n;e++)o[e]=t[e];return o}var variants=function(){var t,n=(function(t){if(Array.isArray(t))return t}(t=(0,l.useColorMode)())||function(t,n){var e,o,r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var i=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(e=r.next()).done)&&(i.push(e.value),!n||i.length!==n);a=!0);}catch(t){l=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw o}}return i}}(t,1)||function(t,n){if(t){if("string"==typeof t)return variants_arrayLikeToArray(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);if("Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return variants_arrayLikeToArray(t,n)}}(t,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],e={dark:"red:80",light:"red:80"}[n],o={dark:"blue:80",light:"blue:80"}[n],r={dark:"gray:70",light:"gray:30"}[n],i={dark:"gray:60",light:"gray:20"}[n];return c.createElement(l.Stack,{direction:"column",spacing:"3x"},c.createElement(l.ButtonGroup,{variant:"emphasis"},c.createElement(l.Button,null,"One"),c.createElement(l.Divider,{orientation:"vertical",color:e}),c.createElement(l.Button,null,"Two"),c.createElement(l.Divider,{orientation:"vertical",color:e}),c.createElement(l.Button,null,"Three")),c.createElement(l.ButtonGroup,{variant:"primary"},c.createElement(l.Button,null,"One"),c.createElement(l.Divider,{orientation:"vertical",color:o}),c.createElement(l.Button,null,"Two"),c.createElement(l.Divider,{orientation:"vertical",color:o}),c.createElement(l.Button,null,"Three")),c.createElement(l.ButtonGroup,{variant:"default"},c.createElement(l.Button,null,"One"),c.createElement(l.Divider,{orientation:"vertical",color:r}),c.createElement(l.Button,null,"Two"),c.createElement(l.Divider,{orientation:"vertical",color:r}),c.createElement(l.Button,null,"Three")),c.createElement(l.ButtonGroup,{variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},c.createElement(l.Button,null,"One"),c.createElement(l.Button,null,"Two"),c.createElement(l.Button,null,"Three")),c.createElement(l.ButtonGroup,{variant:"ghost",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},c.createElement(l.Button,null,"One"),c.createElement(l.Divider,{orientation:"vertical",color:i}),c.createElement(l.Button,null,"Two"),c.createElement(l.Divider,{orientation:"vertical",color:i}),c.createElement(l.Button,null,"Three")))};function basic_arrayLikeToArray(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=Array(n);e<n;e++)o[e]=t[e];return o}var basic=function(){var t,n={dark:"gray:70",light:"gray:30"}[(function(t){if(Array.isArray(t))return t}(t=(0,l.useColorMode)())||function(t,n){var e,o,r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var i=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(e=r.next()).done)&&(i.push(e.value),!n||i.length!==n);a=!0);}catch(t){l=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw o}}return i}}(t,1)||function(t,n){if(t){if("string"==typeof t)return basic_arrayLikeToArray(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);if("Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return basic_arrayLikeToArray(t,n)}}(t,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]];return c.createElement(l.ButtonGroup,null,c.createElement(l.Button,null,"One"),c.createElement(l.Divider,{orientation:"vertical",color:n}),c.createElement(l.Button,null,"Two"),c.createElement(l.Divider,{orientation:"vertical",color:n}),c.createElement(l.Button,null,"Three"))};function _createMdxContent(t){var n=Object.assign({div:"div",h1:"h1",p:"p",code:"code",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",h3:"h3",ul:"ul",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,r.ah)(),t.components);return(0,o.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n",(0,o.jsx)(n.h1,{id:"buttongroup",children:"ButtonGroup"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ButtonGroup"})," is used to group related buttons."]}),"\n",(0,o.jsxs)(n.h2,{id:"import",children:["Import",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import { ButtonGroup } from '@tonic-ui/react';\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"usage",children:["Usage",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h3,{id:"basic-button-group",children:["Basic button group",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-button-group",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(i.Z,{component:basic,file:{data:"import {\n  Button,\n  ButtonGroup,\n  Divider,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React from 'react';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const dividerColor ={\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n\n  return (\n    <ButtonGroup>\n      <Button>One</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Two</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Three</Button>\n    </ButtonGroup>\n  );\n};\n\nexport default App;",path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Button,\n  ButtonGroup,\n  Divider,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React from 'react';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const dividerColor ={\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n\n  return (\n    <ButtonGroup>\n      <Button>One</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Two</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Three</Button>\n    </ButtonGroup>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"group-variants",children:["Group variants",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#group-variants",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"variant"})," prop to change the visual style of every button in a group. You can set the value to ",(0,o.jsx)(n.code,{children:"emphasis"}),", ",(0,o.jsx)(n.code,{children:"primary"}),", ",(0,o.jsx)(n.code,{children:"default"}),", ",(0,o.jsx)(n.code,{children:"secondary"})," and ",(0,o.jsx)(n.code,{children:"ghost"}),"."]}),"\n",(0,o.jsx)(i.Z,{component:variants,file:{data:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor ={\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor ={\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="column" spacing="3x">\n      <ButtonGroup variant="emphasis">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="primary">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="default">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="secondary"\n        css={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Button>Two</Button>\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="ghost"\n        css={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor ={\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor ={\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="column" spacing="3x">\n      <ButtonGroup variant="emphasis">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="primary">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="default">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="secondary"\n        css={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Button>Two</Button>\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="ghost"\n        css={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"group-sizes",children:["Group sizes",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#group-sizes",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"size"})," prop to change the size of the ",(0,o.jsx)(n.code,{children:"ButtonGroup"}),". You can set the value to ",(0,o.jsx)(n.code,{children:"sm"}),", ",(0,o.jsx)(n.code,{children:"md"}),", or ",(0,o.jsx)(n.code,{children:"lg"}),"."]}),"\n",(0,o.jsx)(i.Z,{component:sizes,file:{data:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup size="sm">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="md">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="lg">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup size="sm">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="md">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="lg">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"group-orientation",children:["Group orientation",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#group-orientation",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["Make a set of buttons appear vertically stacked rather than horizontally, by adding ",(0,o.jsx)(n.code,{children:'orientation="vertical"'})," to the ",(0,o.jsx)(n.code,{children:"ButtonGroup"})," component."]}),"\n",(0,o.jsx)(i.Z,{component:orientation,file:{data:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup>\n          <Button>One</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup orientation="vertical">\n          <Button>One</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup>\n          <Button>One</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup orientation="vertical">\n          <Button>One</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"group-states",children:["Group states",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#group-states",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:"The following example shows different states (i.e. normal, disabled, and selected states) when composing a group of buttons."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Use the ",(0,o.jsx)(n.code,{children:"disabled"})," prop to make the ",(0,o.jsx)(n.code,{children:"Button"})," appear disabled."]}),"\n",(0,o.jsxs)(n.li,{children:["Use the ",(0,o.jsx)(n.code,{children:"selected"})," prop to make the ",(0,o.jsx)(n.code,{children:"Button"})," appear selected."]}),"\n"]}),"\n",(0,o.jsx)(i.Z,{component:states,file:{data:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Icon,\n  TextLabel,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React, { Fragment, useState } from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor = {\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor = {\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor = {\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor = {\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  const icons = [\'chart-pie\', \'chart-line\', \'chart-table\', \'chart-bar\'];\n  const lastIconIndex = icons.length - 1;\n  const [activeButton1, setActiveButton1] = useState(\'chart-pie\');\n  const [activeButton2, setActiveButton2] = useState(\'chart-pie\');\n  const [activeButton3, setActiveButton3] = useState(\'chart-pie\');\n  const [activeButton4, setActiveButton4] = useState(\'chart-pie\');\n  const [activeButton5, setActiveButton5] = useState(\'chart-pie\');\n  const [activeButton6, setActiveButton6] = useState(\'chart-pie\');\n\n  const handleClick1 = (button) => (e) => {\n    setActiveButton1(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick2 = (button) => (e) => {\n    setActiveButton2(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick3 = (button) => (e) => {\n    setActiveButton3(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick4 = (button) => (e) => {\n    setActiveButton4(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick5 = (button) => (e) => {\n    setActiveButton5(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick6 = (button) => (e) => {\n    setActiveButton6(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n\n  return (\n    <Flex direction="column" rowGap="4x">\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Emphasis\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="emphasis">\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton1 === key}\n                onClick={handleClick1(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={emphasisDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Primary\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="primary">\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton2 === key}\n                onClick={handleClick2(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={primaryDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Default\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="default">\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton3 === key}\n                onClick={handleClick3(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={defaultDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Secondary\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton4 === key}\n                onClick={handleClick4(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Ghost\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="ghost"\n        >\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton5 === key}\n                onClick={handleClick5(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={ghostDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Ghost (w/o ButtonGroup)\n          </TextLabel>\n        </Box>\n        <Flex>\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton6 === key}\n                onClick={handleClick6(key)}\n                variant="ghost"\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n            </Fragment>\n          ))}\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default App;',path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Icon,\n  TextLabel,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React, { Fragment, useState } from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor = {\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor = {\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor = {\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor = {\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  const icons = [\'chart-pie\', \'chart-line\', \'chart-table\', \'chart-bar\'];\n  const lastIconIndex = icons.length - 1;\n  const [activeButton1, setActiveButton1] = useState(\'chart-pie\');\n  const [activeButton2, setActiveButton2] = useState(\'chart-pie\');\n  const [activeButton3, setActiveButton3] = useState(\'chart-pie\');\n  const [activeButton4, setActiveButton4] = useState(\'chart-pie\');\n  const [activeButton5, setActiveButton5] = useState(\'chart-pie\');\n  const [activeButton6, setActiveButton6] = useState(\'chart-pie\');\n\n  const handleClick1 = (button) => (e) => {\n    setActiveButton1(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick2 = (button) => (e) => {\n    setActiveButton2(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick3 = (button) => (e) => {\n    setActiveButton3(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick4 = (button) => (e) => {\n    setActiveButton4(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick5 = (button) => (e) => {\n    setActiveButton5(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick6 = (button) => (e) => {\n    setActiveButton6(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n\n  return (\n    <Flex direction="column" rowGap="4x">\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Emphasis\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="emphasis">\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton1 === key}\n                onClick={handleClick1(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={emphasisDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Primary\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="primary">\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton2 === key}\n                onClick={handleClick2(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={primaryDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Default\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="default">\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton3 === key}\n                onClick={handleClick3(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={defaultDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Secondary\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton4 === key}\n                onClick={handleClick4(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Ghost\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="ghost"\n        >\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton5 === key}\n                onClick={handleClick5(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={ghostDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Ghost (w/o ButtonGroup)\n          </TextLabel>\n        </Box>\n        <Flex>\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton6 === key}\n                onClick={handleClick6(key)}\n                variant="ghost"\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n            </Fragment>\n          ))}\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h2,{id:"props",children:["Props",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h3,{id:"buttongroup-1",children:["ButtonGroup",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#buttongroup-1",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsxs)(n.td,{align:"left",children:["ReactNode | ",(0,o.jsx)(n.code,{children:"(context) => ReactNode"})]}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"A function child can be used intead of a React element. This function is called with the context object."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"orientation"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'horizontal'"}),(0,o.jsx)(n.td,{align:"left",children:"The orientation of the button group. One of: 'horizontal', 'vertical'"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"size"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'md'"}),(0,o.jsx)(n.td,{align:"left",children:"The size of the button group. One of: 'sm', 'md', 'lg'"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"variant"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'default'"}),(0,o.jsx)(n.td,{align:"left",children:"The variant of the button group. One of: 'emphasis', 'primary', 'default', 'secondary', 'ghost'"})]})]})]})]})}var index_page=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,r.ah)(),t.components).wrapper;return n?(0,o.jsx)(n,Object.assign({},t,{children:(0,o.jsx)(_createMdxContent,t)})):_createMdxContent(t)}},83449:function(t,n,e){"use strict";e.d(n,{Z:function(){return v}});var o=e(67569),r=e(49427),i=e(5632),a=e(2784),l=e(85175),c=e(82821),u=e(90622),s=e(52057),d=e(63651),B=["size"];function _extends(){return(_extends=Object.assign?Object.assign.bind():function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])}return t}).apply(this,arguments)}var m=(0,a.forwardRef)(function(t,n){var e=t.size,r=function(t,n){if(null==t)return{};var e,o,r=function(t,n){if(null==t)return{};var e,o,r={},i=Object.keys(t);for(o=0;o<i.length;o++)e=i[o],n.indexOf(e)>=0||(r[e]=t[e]);return r}(t,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(o=0;o<i.length;o++)e=i[o],!(n.indexOf(e)>=0)&&Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}(t,B);return a.createElement(o.SVGIcon,_extends({size:e,viewBox:"0 0 1024 1024"},r),a.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});m.displayName="CodeSandboxIcon";var p=e(94981);function _slicedToArray(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e,o,r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var i=[],a=!0,l=!1;try{for(r=r.call(t);!(a=(e=r.next()).done)&&(i.push(e.value),!n||i.length!==n);a=!0);}catch(t){l=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(l)throw o}}return i}}(t,n)||function(t,n){if(t){if("string"==typeof t)return _arrayLikeToArray(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);if("Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return _arrayLikeToArray(t,n)}}(t,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=Array(n);e<n;e++)o[e]=t[e];return o}var h={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},Demo=function(t){var n=t.component,e=t.file,B=t.sandbox,v=(0,i.useRouter)(),f=_slicedToArray((0,a.useReducer)(function(t){return!t},!1),2),g=f[0],x=f[1],y=_slicedToArray((0,o.useColorMode)(),1)[0],k={dark:u.y,light:u.q}[y],b=_slicedToArray((0,r.useToggle)(!1),2),E=b[0],D=b[1],C=(0,c.Z)(null==e?void 0:e.data),T=C.onCopy,G=C.hasCopied,j=(0,a.useCallback)(function(){T()},[T]),I=(0,a.useCallback)(function(){(0,s.b)(B)},[B]),L=(0,a.useCallback)(function(){x(),D(!1)},[x,D]);return a.createElement(l.nu,{code:null==e?void 0:e.data,disabled:!0,language:"jsx",theme:k},a.createElement(o.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[y],p:"4x"},a.createElement(o.Box,{fontSize:"sm",lineHeight:"sm"},a.createElement(a.Fragment,{key:g},a.createElement(n,null)))),a.createElement(o.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},a.createElement(p.Z,{"data-track":E?"CodeBlock|hide_source|".concat((0,d.Z)({path:v.pathname})):"CodeBlock|show_source|".concat((0,d.Z)({path:v.pathname})),onClick:D},a.createElement(o.Tooltip,{label:E?"Hide the source":"Show the source"},a.createElement(o.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),a.createElement(p.Z,{"data-track":"CodeBlock|copy_source|".concat((0,d.Z)({path:v.pathname})),onClick:j},a.createElement(o.Tooltip,{label:G?"Copied":"Copy the source"},a.createElement(o.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),a.createElement(p.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(v.pathname),onClick:I},a.createElement(o.Tooltip,{label:"Edit in CodeSandbox"},a.createElement(m,{size:{sm:"5x",md:"4x"}}))),a.createElement(p.Z,{"data-track":"CodeBlock|reset|".concat(v.pathname),onClick:L},a.createElement(o.Tooltip,{label:"Reset the demo"},a.createElement(o.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),a.createElement(o.Fade,{in:E},a.createElement(o.Collapse,{in:E,unmountOnExit:!0},a.createElement(l.uz,{style:h}))))};Demo.displayName="Demo";var v=Demo},69388:function(t,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/button-group",function(){return e(10973)}])}},function(t){t.O(0,[9774,2888,179],function(){return t(t.s=69388)}),_N_E=t.O()}]);