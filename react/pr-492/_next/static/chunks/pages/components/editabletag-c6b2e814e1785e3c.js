(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6285],{62827:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return s}});var a=t(7896),l=t(59740),r=(t(2784),t(30876)),i=["components"],o={};function s(n){var e=n.components,t=(0,l.Z)(n,i);return(0,r.kt)("wrapper",(0,a.Z)({},o,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"EditableTag"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"EditableTag")," is essentially a ",(0,r.kt)("a",{parentName:"p",href:"tag"},"Tag")," with the states. "),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { EditableTag } from '@tonic-ui/react';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<EditableTag >Editable Tag</EditableTag>\n")),(0,r.kt)("h3",null,"States"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack spacing="4x">\n  <Stack direction="row" spacing="4x" shouldWrapChildren>\n    <EditableTag isClosable>Normal</EditableTag>\n    <EditableTag isClosable disabled>Disabled</EditableTag>\n    <EditableTag isClosable isInvalid>Invalid</EditableTag>\n    <EditableTag isClosable borderRadius="lg">Normal</EditableTag>\n    <EditableTag isClosable borderRadius="lg" disabled>Disabled</EditableTag>\n    <EditableTag isClosable borderRadius="lg" isInvalid>Invalid</EditableTag>\n  </Stack>\n  <Stack direction="row" spacing="4x" shouldWrapChildren>\n    <EditableTag variant="outline" isClosable>Normal</EditableTag>\n    <EditableTag variant="outline" isClosable disabled>Disabled</EditableTag>\n    <EditableTag variant="outline" isClosable isInvalid>Invalid</EditableTag>\n    <EditableTag variant="outline" isClosable borderRadius="lg">Normal</EditableTag>\n    <EditableTag variant="outline" isClosable borderRadius="lg" disabled>Disabled</EditableTag>\n    <EditableTag variant="outline" isClosable borderRadius="lg" isInvalid>Invalid</EditableTag>\n  </Stack>\n</Stack>\n')),(0,r.kt)("h3",null,"Add and edit tag"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const TagCreator = ({\n  onCreate,\n  ...reset\n}) => {\n  const [colorMode] = useColorMode();\n  const color = {\n    dark: \'white:secondary\',\n    light: \'black:secondary\',\n  }[colorMode];\n\n  const [inputVisible, setInputVisible] = React.useState(false);\n  const handleInputVisible = () => setInputVisible(true);\n  const handleInputHidden = () => setInputVisible(false);\n  const handleInputBlur = (e) => {\n    e.stopPropagation();\n    const value = e.target.value;\n    onCreate(value);\n    handleInputHidden();\n  };\n  const handleInputKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    if (keyCode === 13) { // Enter\n      const value = e.target.value;\n      onCreate(value);\n      handleInputHidden();\n    }\n    if (keyCode === 27) { // Escape\n      handleInputHidden();\n    }\n  };\n\n  if (inputVisible) {\n    return (\n      <InputBase\n        autoFocus\n        height="28px"\n        verticalAlign="top"\n        onKeyUp={handleInputKeyUp}\n        onBlur={handleInputBlur}\n      />\n    );\n  }\n\n  return (\n    <Box\n      display="inline-flex"\n      alignItems="center"\n      borderRadius="sm"\n      border="1px dotted"\n      borderColor={color}\n      py="1x"\n      px="2x"\n      onClick={handleInputVisible}\n    >\n      <Icon icon="add" color={color} />\n      <Space width="1x" />\n      <Text color={color} fontSize="xs" lineHeight="xs">Add</Text>\n    </Box>\n  );\n};\n\nconst TagEditor = ({\n  children,\n  tagIndex,\n  onClose,\n  onUpdate,\n  ...reset\n}) => {\n  const tagInputRef = React.useRef();\n  const tagHiddenSpanRef = React.useRef();\n  const [inputVisible, setInputVisible] = React.useState(false);\n  const handleInputVisible = () => setInputVisible(true);\n  const handleInputHidden = () => setInputVisible(false);\n  const updateTags = (e) => {\n    const value = e.target.value;\n    onUpdate({ tagIndex, value });\n  };\n  const handleInputBlur = (e) => {\n    updateTags(e);\n    handleInputHidden();\n  };\n  const handleInputKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    if (keyCode === 13) { // Enter\n      updateTags(e);\n      handleInputHidden();\n    }\n    if (keyCode === 27) { // Esc\n      handleInputHidden();\n    }\n  };\n  const handleTagClick = (e) => {\n    e.stopPropagation();\n    handleInputVisible();\n  };\n  const handleTagKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    if (keyCode === 13) { // Enter\n      handleInputVisible();\n    }\n  };\n  const handleTagClose = (e) => {\n    e.stopPropagation();\n    onClose(tagIndex);\n  };\n  const handleInputResize = () => {\n    if (!tagInputRef.current) {\n      return;\n    }\n    const tagInput = tagInputRef.current;\n    const tagHiddenSpan = tagHiddenSpanRef.current;\n    tagHiddenSpan.textContent = tagInput.value;\n    tagInput.style.width = `${tagHiddenSpan.offsetWidth}px`;\n    tagInput.focus();\n  };\n\n  React.useEffect(() => {\n    handleInputResize();\n  }, [inputVisible]);\n\n  if (inputVisible) {\n    return (\n      <>\n        <Box\n          as="span"\n          ref={tagHiddenSpanRef}\n          position="absolute"\n          height="0"\n          overflow="hidden"\n          whiteSpace="pre"\n        />\n        <InputBase\n          ref={tagInputRef}\n          minHeight="6x"\n          maxWidth="100%"\n          mr="2x"\n          mt="1x"\n          defaultValue={children}\n          onKeyUp={handleInputKeyUp}\n          onBlur={handleInputBlur}\n          onInput={handleInputResize}\n        />\n      </>\n    );\n  }\n\n  return (\n    <EditableTag\n      isClosable\n      mr="2x"\n      mt="1x"\n      verticalAlign="top"\n      onClick={handleTagClick}\n      onClose={handleTagClose}\n      onKeyUp={handleTagKeyUp}\n      cursor="pointer"\n    >\n      <Text\n        title={children}\n        maxWidth={120}\n        overflow="hidden"\n        textOverflow="ellipsis"\n        whiteSpace="nowrap"\n      >\n        {children}\n      </Text>\n    </EditableTag>\n  );\n};\n\nconst Tags = () => {\n  const [tags, setTags] = React.useState([]);\n  const createTag = (value) => {\n    let newTags = tags;\n    if (value && tags.indexOf(value) === -1) {\n      newTags = [...tags, value];\n    }\n    setTags(newTags);\n  };\n  const updateTag = ({ tagIndex, value }) => {\n    let newTags = tags;\n    newTags[tagIndex] = value;\n    setTags(newTags);\n  };\n  const handleTagEditorClose = (tagIndex) => {\n    tags.splice(tagIndex, 1);\n    setTags([...tags]);\n  };\n\n  return (\n    <>\n      {\n        tags.map((tag, i) => (\n          <TagEditor\n            key={i}\n            tagIndex={i}\n            onClose={handleTagEditorClose}\n            onUpdate={updateTag}\n          >\n            {tag}\n          </TagEditor>\n        ))\n      }\n      <TagCreator onCreate={createTag} />\n    </>\n  );\n};\n\nrender(<Tags />);\n')),(0,r.kt)("h3",null,"With input"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For duplicated entries, put both entries invalid, and hover the token to display error message."),(0,r.kt)("li",{parentName:"ul"},"When paste with text with delimiter, automatically convert to tags. Default delimiter: ",(0,r.kt)("inlineCode",{parentName:"li"},","),", ",(0,r.kt)("inlineCode",{parentName:"li"},";"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const useWrapperStyle = ({\n  isFocused,\n}) => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:60',\n    light: 'gray:30',\n  }[colorMode];\n  const invalidBorderColor = {\n    dark: 'red:50',\n    light: 'red:60',\n  }[colorMode];\n  const focusBorderColor = {\n    dark: 'blue:60',\n    light: 'blue:60',\n  }[colorMode];\n\n  return {\n    backgroundColor: 'transparent',\n    borderRadius: 'sm',\n    fontSize: 'sm',\n    lineHeight: 'sm',\n    minHeight: '14x',\n    px: '3x',\n    pb: '1x',\n    border: 1,\n    borderColor: isFocused ? focusBorderColor : borderColor,\n    _invalid: {\n      borderColor: invalidBorderColor,\n    },\n  };\n};\n\nconst TagCreator = React.forwardRef((\n  {\n    onBlur,\n    onCreate,\n    onFocus,\n    ...reset\n  },\n  ref\n) => {\n  const [inputValue, setInputValue] = React.useState('');\n  const createTags = (values) => {\n    onCreate(values);\n    setInputValue('');\n  };\n  const handleInputBlur = (e) => {\n    e.stopPropagation();\n    const value = e.target.value;\n    if (value) {\n      createTags([value]);\n    }\n    onBlur(e);\n  };\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    setInputValue(value);\n  };\n  const handleInputKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    let value = e.target.value;\n    if (keyCode === 13) { // Enter\n      createTags([value]);\n    }\n    if (keyCode === 186 || keyCode === 188) { // Semicolon(;) or Comma(,)\n      value = value.substring(0, value.length - 1);\n      createTags([value]);\n    }\n    if (keyCode === 27) { // Esc\n      setInputValue('');\n    }\n  };\n  const handleInputPaste = (e) => {\n    e.preventDefault();\n    const pastedData = e.clipboardData.getData('text');\n    const separatedValues = pastedData.split(\n      new RegExp([',', ';', '\\n', '\\r', '\\r\\n'].join('|'))\n    );\n    createTags(separatedValues);\n  };\n\n  return (\n    <InputBase\n      ref={ref}\n      minHeight=\"6x\"\n      value={inputValue}\n      onBlur={handleInputBlur}\n      onChange={handleInputChange}\n      onFocus={onFocus}\n      onKeyUp={handleInputKeyUp}\n      onPaste={handleInputPaste}\n      {...reset}\n    />\n  );\n});\n\nconst TagEditor = ({\n  children,\n  isInvalid,\n  tagId,\n  onClick,\n  onClose,\n  onFocus,\n  onUpdate,\n  ...reset\n}) => {\n  const tagInputRef = React.useRef();\n  const tagHiddenSpanRef = React.useRef();\n  const [inputVisible, setInputVisible] = React.useState(false);\n  const handleInputVisible = () => setInputVisible(true);\n  const handleInputHidden = () => setInputVisible(false);\n  const updateTag = (value) => {\n    onUpdate({ id: tagId, value });\n  };\n  const handleInputBlur = (e) => {\n    updateTag(e.target.value);\n    handleInputHidden();\n  };\n  const handleInputKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    if (keyCode === 13) { // Enter\n      updateTag(e.target.value);\n      handleInputHidden();\n    }\n    if (keyCode === 27) { // Esc\n      handleInputHidden();\n    }\n  };\n  const handleInputResize = () => {\n    if (!tagInputRef.current) {\n      return;\n    }\n    const tagInput = tagInputRef.current;\n    const tagHiddenSpan = tagHiddenSpanRef.current;\n    tagHiddenSpan.textContent = tagInput.value;\n    tagInput.style.width = `${tagHiddenSpan.offsetWidth}px`;\n    tagInput.focus();\n  };\n\n  const handleTagClick = (e) => {\n    e.stopPropagation();\n    handleInputVisible();\n    onClick(tagId);\n  };\n  const handleTagClose = (e) => {\n    e.stopPropagation();\n    onClose(tagId);\n  };\n  const handleTagKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    if (keyCode === 13) {\n      handleInputVisible();\n    }\n  };\n\n  React.useEffect(() => {\n    handleInputResize();\n  }, [inputVisible]);\n\n  if (inputVisible) {\n    return (\n      <>\n        <Box\n          as=\"span\"\n          ref={tagHiddenSpanRef}\n          position=\"absolute\"\n          height=\"0\"\n          overflow=\"hidden\"\n          whiteSpace=\"pre\"\n        />\n        <InputBase\n          ref={tagInputRef}\n          minHeight=\"6x\"\n          maxWidth=\"100%\"\n          mr=\"2x\"\n          mt=\"1x\"\n          defaultValue={children}\n          onBlur={handleInputBlur}\n          onInput={handleInputResize}\n          onKeyUp={handleInputKeyUp}\n        />\n      </>\n    );\n  }\n\n  return (\n    <EditableTag\n      isClosable\n      isInvalid={isInvalid}\n      onClick={handleTagClick}\n      onClose={handleTagClose}\n      onKeyUp={handleTagKeyUp}\n      onFocus={onFocus}\n      cursor=\"pointer\"\n      {...reset}\n    >\n      <Text\n        title={children}\n        maxWidth={120}\n        overflow=\"hidden\"\n        textOverflow=\"ellipsis\"\n        whiteSpace=\"nowrap\"\n      >\n        {children}\n      </Text>\n    </EditableTag>\n  );\n};\n\nconst Tags = () => {\n  const [colorMode] = useColorMode();\n  const placeholderColor = {\n    dark: 'white:tertiary',\n    light: 'black:tertiary',\n  }[colorMode];\n  const invalidColor = {\n    dark: 'red:50',\n    light: 'red:60',\n  }[colorMode];\n\n  const [tags, setTags] = React.useState([]);\n  const [hasError, setHasError] = React.useState(false);\n  const tagCreatorRef = React.useRef();\n  const [placeholderVisible, setPlaceholderVisible] = React.useState(true);\n  const [isWrapperFocused, setWrapperFocused] = React.useState(false);\n\n  const verifyTag = ({ id, value }) => {\n    const isDuplicated = tags.find((t) => t.value === value && t.id !== id);\n    if (isDuplicated) {\n      return 'Duplicated entries';\n    }\n    return '';\n  };\n  const createTags = (values) => {\n    if (values.length === 0) {\n      return;\n    }\n    values = values.filter(value => {\n      if (value.trim() === '') {\n        return false; // skip\n      }\n      return true;\n    }).map((value, i) => {\n      const tagId = new Date().getTime() + i;\n      return {\n        id: tagId,\n        value: value,\n        isActive: false,\n        error: verifyTag({ id: tagId, value: value }),\n      };\n    });\n    const newTags = [...tags, ...values];\n    setTags(newTags);\n  };\n  const updateTag = ({ id, value }) => {\n    const newTags = [...tags];\n    const tag = newTags.find((t) => t.id === id);\n    tag.value = value || tag.value;\n    tag.isActive = false;\n    tag.error = verifyTag({ id, value });\n    setTags(newTags);\n  };\n\n  const handleTagCreatorBlur = () => {\n    setWrapperFocused(false);\n    if (tags.length === 0) {\n      setPlaceholderVisible(true);\n    }\n  };\n  const handleTagCreatorFocus = () => {\n    setPlaceholderVisible(false);\n  };\n\n  const handleTagEditorClick = (tagId) => {\n    const newTags = [...tags];\n    let tag = newTags.find((t) => t.id === tagId);\n    tag.isActive = true;\n    setTags(newTags);\n  };\n  const handleTagEditorClose = (tagId) => {\n    const tag = tags.find((t) => t.id === tagId);\n    if (!tag) {\n      return;\n    }\n    const newTags = tags.filter((t) => t.id !== tagId);\n    setTags(newTags);\n    tagCreatorRef.current.focus();\n  };\n  const handleTagEditorFocus = () => {\n    setWrapperFocused(true);\n  };\n\n  const handleWrapperClick = (e) => {\n    const activeTag = tags.find((t) => t.isActive);\n    if (activeTag) {\n      return;\n    }\n    tagCreatorRef.current.focus();\n    setWrapperFocused(true);\n  };\n  const wrapperStyle = useWrapperStyle({\n    isFocused: isWrapperFocused,\n  });\n\n  React.useEffect(() => {\n    const invalidTags = tags.filter(t => t.error.length > 0);\n    if (invalidTags.length > 1) {\n      setHasError(true);\n    }\n    if (invalidTags.length === 1 && invalidTags[0].isActive === false) {\n      setHasError(true);\n    }\n    if (invalidTags.length === 0) {\n      setHasError(false);\n    }\n  }, [tags]);\n\n  return (\n    <>\n      <Box\n        {...wrapperStyle}\n        role=\"presentation\"\n        aria-invalid={hasError}\n        onClick={handleWrapperClick}\n      >\n        {placeholderVisible && <Text mt=\"1x\" color={placeholderColor}>Placeholder text</Text>}\n        {\n          tags.map(tag => {\n            const id = tag.id;\n            const value = tag.value;\n            const error = tag.error;\n            return (\n              <TagEditor\n                key={id}\n                isInvalid={!!error}\n                verticalAlign=\"top\"\n                mr=\"2x\"\n                mt=\"1x\"\n                tagId={id}  \n                onClick={handleTagEditorClick}\n                onClose={handleTagEditorClose}\n                onFocus={handleTagEditorFocus}\n                onUpdate={updateTag}\n              >\n                {value}\n              </TagEditor>\n            );\n          })\n        }\n        <TagCreator\n          ref={tagCreatorRef}\n          mt=\"1x\"\n          onBlur={handleTagCreatorBlur}\n          onCreate={createTags}\n          onFocus={handleTagCreatorFocus}\n        />\n      </Box>\n      {hasError && <Text color={invalidColor}>There are invalid entries.</Text>}\n    </>\n  );\n};\n\nrender(<Tags />);\n")),(0,r.kt)("h2",null,"Props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the tag will be disabled. This sets ",(0,r.kt)("inlineCode",{parentName:"td"},"aria-disabled=true")," and you can style this state by passing the ",(0,r.kt)("inlineCode",{parentName:"td"},"_disabled")," prop.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"isInvalid"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the tag will indicate an error. You can style this state by passing the ",(0,r.kt)("inlineCode",{parentName:"td"},"_invalid")," prop.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"isClosable"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", a close button will appear on the right side.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onClose"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"A callback called when the close button is clicked.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"size"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'md'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The size of the tag component. One of: 'sm', 'md', 'lg'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'solid'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The variant style of the tag component. One of: 'solid', 'outline'")))))}s.isMDXComponent=!0},62772:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/editabletag",function(){return t(62827)}])}},function(n){n.O(0,[9774,2888,179],(function(){return e=62772,n(n.s=e);var e}));var e=n.O();_N_E=e}]);