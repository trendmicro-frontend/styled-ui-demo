(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[496],{42878:function(e,n,a){"use strict";a.r(n),a.d(n,{default:function(){return g}});var l=a(7896),t=a(59740),o=(a(2784),a(30876)),r=["components"],i={};function g(e){var n=e.components,a=(0,t.Z)(e,r);return(0,o.kt)("wrapper",(0,l.Z)({},i,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",null,"Tag"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Tag")," is used for items that need to be labeled, categorized, or organized using keywords that describe them."),(0,o.kt)("p",null,"You can use ",(0,o.kt)("a",{parentName:"p",href:"editabletag"},"EditableTag")," component to implement a tag that can be edited."),(0,o.kt)("h2",null,"Import"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Tag,\n  EditableTag,\n} from '@tonic-ui/react';\n")),(0,o.kt)("h2",null,"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"<Tag>Sample Tag</Tag>\n")),(0,o.kt)("h3",null,"Variants"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the visual style of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Tag"),". You can set the value to ",(0,o.kt)("inlineCode",{parentName:"p"},"solid"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"outline"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="row" spacing="2x" shouldWrapChildren>\n  <Tag variant="solid">Solid Tag</Tag>\n  <Tag variant="outline">Outline Tag</Tag>\n</Stack>\n')),(0,o.kt)("h3",null,"Custom colors"),(0,o.kt)("p",null,"The color of the tag can be changed by passing the ",(0,o.kt)("inlineCode",{parentName:"p"},"backgroundColor"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"borderColor"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"color")," props. See the ",(0,o.kt)("a",{parentName:"p",href:"../system/colors"},"colors")," section to learn more about colors."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const [colorMode] = useColorMode();\n  const solidColors = {\n    dark: [\n      {\n        label: 'Light gray',\n        backgroundColor: 'gray:70',\n        color: 'gray:20'\n      },\n      {\n        label: 'Red',\n        backgroundColor: 'red:80',\n        color: 'red:20'\n      },\n      {\n        label: 'Magenta',\n        backgroundColor: 'magenta:80',\n        color: 'magenta:20'\n      },\n      {\n        label: 'Purple',\n        backgroundColor: 'purple:80',\n        color: 'purple:20'\n      },\n      {\n        label: 'Blue',\n        backgroundColor: 'blue:80',\n        color: 'blue:20'\n      },\n      {\n        label: 'Green',\n        backgroundColor: 'green:70',\n        color: 'green:20'\n      },\n      {\n        label: 'Teal',\n        backgroundColor: 'teal:70',\n        color: 'teal:20'\n      },\n      {\n        label: 'Cyan',\n        backgroundColor: 'cyan:70',\n        color: 'cyan:20'\n      },\n    ],\n    light: [\n      {\n        label: 'Light gray',\n        backgroundColor: 'gray:20',\n        color: 'black:emphasis'\n      },\n      {\n        label: 'Red',\n        backgroundColor: 'red:20',\n        color: 'red:100'\n      },\n      {\n        label: 'Magenta',\n        backgroundColor: 'magenta:20',\n        color: 'magenta:100'\n      },\n      {\n        label: 'Purple',\n        backgroundColor: 'purple:20',\n        color: 'purple:100'\n      },\n      {\n        label: 'Blue',\n        backgroundColor: 'blue:20',\n        color: 'blue:100'\n      },\n      {\n        label: 'Green',\n        backgroundColor: 'green:20',\n        color: 'green:100'\n      },\n      {\n        label: 'Teal',\n        backgroundColor: 'teal:20',\n        color: 'teal:100'\n      },\n      {\n        label: 'Cyan',\n        backgroundColor: 'cyan:20',\n        color: 'cyan:100'\n      },\n    ]\n  }[colorMode];\n  const outlineColors = {\n    dark: [\n      {\n        label: 'Light gray',\n        borderColor: 'gray:40',\n        color: 'gray:40'\n      },\n      {\n        label: 'Red',\n        borderColor: 'red:50',\n        color: 'red:50'\n      },\n      {\n        label: 'Magenta',\n        borderColor: 'magenta:50',\n        color: 'magenta:50'\n      },\n      {\n        label: 'Purple',\n        borderColor: 'purple:50',\n        color: 'purple:50'\n      },\n      {\n        label: 'Blue',\n        borderColor: 'blue:50',\n        color: 'blue:50'\n      },\n      {\n        label: 'Green',\n        borderColor: 'green:50',\n        color: 'green:50'\n      },\n      {\n        label: 'Teal',\n        borderColor: 'teal:50',\n        color: 'teal:50'\n      },\n      {\n        label: 'Cyan',\n        borderColor: 'cyan:50',\n        color: 'cyan:50'\n      },\n    ],\n    light: [\n      {\n        label: 'Light gray',\n        borderColor: 'gray:60',\n        color: 'gray:60'\n      },\n      {\n        label: 'Red',\n        borderColor: 'red:60',\n        color: 'red:60'\n      },\n      {\n        label: 'Magenta',\n        borderColor: 'magenta:60',\n        color: 'magenta:60'\n      },\n      {\n        label: 'Purple',\n        borderColor: 'purple:50',\n        color: 'purple:50'\n      },\n      {\n        label: 'Blue',\n        borderColor: 'blue:60',\n        color: 'blue:60'\n      },\n      {\n        label: 'Green',\n        borderColor: 'green:60',\n        color: 'green:60'\n      },\n      {\n        label: 'Teal',\n        borderColor: 'teal:60',\n        color: 'teal:60'\n      },\n      {\n        label: 'Cyan',\n        borderColor: 'cyan:60',\n        color: 'cyan:60'\n      },\n    ]\n  }[colorMode];\n\n  return (\n    <Stack spacing=\"4x\">\n      <Stack direction=\"row\" spacing=\"2x\" shouldWrapChildren>\n        {solidColors.map(({ backgroundColor, color, label }, index) => (\n          <Tag key={label} backgroundColor={backgroundColor} color={color} variant=\"solid\">{label}</Tag>\n        ))}\n      </Stack>\n      <Stack direction=\"row\" spacing=\"2x\" shouldWrapChildren>\n        {solidColors.map(({ backgroundColor, color, label }, index) => (\n          <Tag key={label} backgroundColor={backgroundColor} color={color} variant=\"solid\" borderRadius=\"lg\">{label}</Tag>\n        ))}\n      </Stack>\n      <Stack direction=\"row\" spacing=\"2x\" shouldWrapChildren>\n        {outlineColors.map(({ borderColor, color, label }, index) => (\n          <Tag key={label} borderColor={borderColor} color={color} variant=\"outline\">{label}</Tag>\n        ))}\n      </Stack>\n      <Stack direction=\"row\" spacing=\"2x\" shouldWrapChildren>\n        {outlineColors.map(({ borderColor, color, label }, index) => (\n          <Tag key={label} borderColor={borderColor} color={color} variant=\"outline\" borderRadius=\"lg\">{label}</Tag>\n        ))}\n      </Stack>\n    </Stack>\n  );\n}\n")),(0,o.kt)("h3",null,"Sizes"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," prop to change the size of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Tag"),". You can set the value to ",(0,o.kt)("inlineCode",{parentName:"p"},"sm"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"md"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"lg"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack spacing="4x">\n  <Stack direction="row" alignItems="center" spacing="2x">\n    <Tag size="sm">Small</Tag>\n    <Tag size="md">Medium</Tag>\n    <Tag size="lg">Large</Tag>\n  </Stack>\n  <Stack direction="row" alignItems="center" spacing="2x">\n    <Tag size="sm" borderRadius="lg">Small</Tag>\n    <Tag size="md" borderRadius="lg">Medium</Tag>\n    <Tag size="lg" borderRadius="32px">Large</Tag>\n  </Stack>\n  <Stack direction="row" alignItems="center" spacing="2x">\n    <Tag size="sm" variant="outline">Small</Tag>\n    <Tag size="md" variant="outline">Medium</Tag>\n    <Tag size="lg" variant="outline">Large</Tag>\n  </Stack>\n    <Stack direction="row" alignItems="center" spacing="2x">\n    <Tag size="sm" variant="outline" borderRadius="lg">Small</Tag>\n    <Tag size="md" variant="outline" borderRadius="lg">Medium</Tag>\n    <Tag size="lg" variant="outline" borderRadius="32px">Large</Tag>\n  </Stack>\n</Stack>\n')),(0,o.kt)("h3",null,"States"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack spacing="4x">\n  <Stack direction="row" spacing="4x" shouldWrapChildren>\n    <Tag>Normal</Tag>\n    <Tag disabled>Disabled</Tag>\n    <Tag isInvalid>Invalid</Tag>\n  </Stack>\n  <Stack direction="row" spacing="4x" shouldWrapChildren>\n    <Tag variant="outline">Normal</Tag>\n    <Tag variant="outline" disabled>Disabled</Tag>\n    <Tag variant="outline" isInvalid>Invalid</Tag>\n  </Stack>\n</Stack>\n')),(0,o.kt)("h3",null,"With close button"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack spacing="4x">\n  <Stack direction="row" alignItems="center" spacing="2x">\n    <Tag isClosable size="sm" onClose={()=> { alert(\'Close small tag\'); }}>Small</Tag>\n    <Tag isClosable size="md" onClose={()=> { alert(\'Close medium tag\'); }}>Medium</Tag>\n    <Tag isClosable size="lg" onClose={()=> { alert(\'Close large tag\'); }}>Large</Tag>\n  </Stack>\n  <Stack direction="row" alignItems="center" spacing="2x">\n    <Tag isClosable size="sm" borderRadius="lg" onClose={()=> { alert(\'Close small tag\'); }}>Small</Tag>\n    <Tag isClosable size="md" borderRadius="lg" onClose={()=> { alert(\'Close medium tag\'); }}>Medium</Tag>\n    <Tag isClosable size="lg" borderRadius="32px" onClose={()=> { alert(\'Close large tag\'); }}>Large</Tag>\n  </Stack>\n  <Stack direction="row" alignItems="center" spacing="2x">\n    <Tag isClosable size="sm" variant="outline" onClose={()=> { alert(\'Close small tag\'); }}>Small</Tag>\n    <Tag isClosable size="md" variant="outline" onClose={()=> { alert(\'Close medium tag\'); }}>Medium</Tag>\n    <Tag isClosable size="lg" variant="outline" onClose={()=> { alert(\'Close large tag\'); }}>Large</Tag>\n  </Stack>\n    <Stack direction="row" alignItems="center" spacing="2x">\n    <Tag isClosable size="sm" variant="outline" borderRadius="lg" onClose={()=> { alert(\'Close small tag\'); }}>Small</Tag>\n    <Tag isClosable size="md" variant="outline" borderRadius="lg" onClose={()=> { alert(\'Close medium tag\'); }}>Medium</Tag>\n    <Tag isClosable size="lg" variant="outline" borderRadius="32px" onClose={()=> { alert(\'Close large tag\'); }}>Large</Tag>\n  </Stack>\n</Stack>\n')),(0,o.kt)("h2",null,"Props"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,o.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"If ",(0,o.kt)("inlineCode",{parentName:"td"},"true"),", the tag will be disabled. This sets ",(0,o.kt)("inlineCode",{parentName:"td"},"aria-disabled=true")," and you can style this state by passing the ",(0,o.kt)("inlineCode",{parentName:"td"},"_disabled")," prop.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"isClosable"),(0,o.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"If ",(0,o.kt)("inlineCode",{parentName:"td"},"true"),", a close button will appear on the right side.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"isInvalid"),(0,o.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"If ",(0,o.kt)("inlineCode",{parentName:"td"},"true"),", the tag will indicate an error. You can style this state by passing the ",(0,o.kt)("inlineCode",{parentName:"td"},"_invalid")," prop.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"onClose"),(0,o.kt)("td",{parentName:"tr",align:"left"},"function"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"A callback called when the close button is clicked.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"string"),(0,o.kt)("td",{parentName:"tr",align:"left"},"'md'"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The size of the tag component. One of: 'sm', 'md', 'lg'")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,o.kt)("td",{parentName:"tr",align:"left"},"string"),(0,o.kt)("td",{parentName:"tr",align:"left"},"'solid'"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The variant style of the tag component. One of: 'solid', 'outline'")))))}g.isMDXComponent=!0},99237:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/tag",function(){return a(42878)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=99237,e(e.s=n);var n}));var n=e.O();_N_E=n}]);