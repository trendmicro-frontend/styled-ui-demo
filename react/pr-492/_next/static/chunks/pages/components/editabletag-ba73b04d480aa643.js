(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6285],{62827:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return d}});var a=t(7896),l=t(59740),r=(t(2784),t(30876)),o=["components"],i={};function d(e){var n=e.components,t=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"EditableTag"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"EditableTag")," is a ",(0,r.kt)("a",{parentName:"p",href:"tag"},"Tag")," can be edited. "),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { EditableTag } from '@tonic-ui/react';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<EditableTag>Editable Tag</EditableTag>\n")),(0,r.kt)("h3",null,"States"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack spacing="4x">\n  <Stack direction="row" spacing="4x" shouldWrapChildren>\n    <EditableTag>Normal</EditableTag>\n    <EditableTag disabled>Disabled</EditableTag>\n    <EditableTag isInvalid>Invalid</EditableTag>\n    <EditableTag borderRadius="lg">Normal</EditableTag>\n    <EditableTag borderRadius="lg" disabled>Disabled</EditableTag>\n    <EditableTag borderRadius="lg" isInvalid>Invalid</EditableTag>\n  </Stack>\n  <Stack direction="row" spacing="4x" shouldWrapChildren>\n    <EditableTag variant="outline">Normal</EditableTag>\n    <EditableTag variant="outline" disabled>Disabled</EditableTag>\n    <EditableTag variant="outline" isInvalid>Invalid</EditableTag>\n    <EditableTag variant="outline" borderRadius="lg">Normal</EditableTag>\n    <EditableTag variant="outline" borderRadius="lg" disabled>Disabled</EditableTag>\n    <EditableTag variant="outline" borderRadius="lg" isInvalid>Invalid</EditableTag>\n  </Stack>\n</Stack>\n')),(0,r.kt)("h3",null,"Add and edit tag"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const TagCreator = ({\n  onCreate,\n  ...reset\n}) => {\n  const [colorMode] = useColorMode();\n  const color = {\n    dark: \'white:secondary\',\n    light: \'black:secondary\',\n  }[colorMode];\n\n  const [inputVisible, setInputVisible] = React.useState(false);\n  const handleInputVisible = () => setInputVisible(true);\n  const handleInputHidden = () => setInputVisible(false);\n  const handleInputBlur = (e) => {\n    e.stopPropagation();\n    const value = e.target.value;\n    onCreate(value);\n    handleInputHidden();\n  };\n  const handleInputKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    if (keyCode === 13) { // Enter\n      const value = e.target.value;\n      onCreate(value);\n      handleInputHidden();\n    }\n    if (keyCode === 27) { // Escape\n      handleInputHidden();\n    }\n  };\n\n  if (inputVisible) {\n    return (\n      <InputBase\n        autoFocus\n        height="6x"\n        onKeyUp={handleInputKeyUp}\n        onBlur={handleInputBlur}\n      />\n    );\n  }\n\n  return (\n    <Box\n      display="inline-flex"\n      alignItems="center"\n      border="1px dotted"\n      borderColor={color}\n      borderRadius="lg"\n      cursor="pointer"\n      py="2q"\n      px="2x"\n      onClick={handleInputVisible}\n    >\n      <Icon icon="add" color={color} />\n      <Space width="1x" />\n      <Text color={color} fontSize="xs" lineHeight="xs">Add</Text>\n    </Box>\n  );\n};\n\nconst Tags = () => {\n  const [tags, setTags] = React.useState([\'disabled\', \'invalid\', \'normal\']);\n  const handleTagCreate = (value) => {\n    if (value) {\n      setTags([...tags, value]);\n    }\n  };\n  const handleTagChange = (index) => ({ value }) => {\n    tags[index] = value;\n    setTags([...tags]);\n  };\n  const handleTagClose = (index) => (e) => {\n    tags.splice(index, 1);\n    setTags([...tags]);\n  };\n\n  return (\n    <Flex>\n      {\n        tags.map((value, i) => (\n          <EditableTag\n            key={i}\n            mr="2x"\n            variant="outline"\n            borderRadius="lg"\n            title={value}\n            disabled={value === \'disabled\'}\n            isInvalid={value === \'invalid\'}\n            onChange={handleTagChange(i)}\n            onClose={handleTagClose(i)}\n          >\n            {value}\n          </EditableTag>\n        ))\n      }\n      <TagCreator onCreate={handleTagCreate} />\n    </Flex>\n  );\n};\n\nrender(<Tags />);\n')),(0,r.kt)("h3",null,"With input"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For duplicate entries, put the warning message."),(0,r.kt)("li",{parentName:"ul"},"When paste with text with delimiter, automatically convert to tags. Default delimiter: ",(0,r.kt)("inlineCode",{parentName:"li"},","),", ",(0,r.kt)("inlineCode",{parentName:"li"},";")),(0,r.kt)("li",{parentName:"ul"},"Delete the item by clicking the close icon or pressing ",(0,r.kt)("inlineCode",{parentName:"li"},"backspace")," button")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const useWrapperStyle = ({\n  isFocused,\n}) => {\n  const [colorMode] = useColorMode();\n  const backgroundColor = {\n    dark: 'transparent',\n    light: 'white',\n  }[colorMode];\n  const borderColor = {\n    dark: 'gray:60',\n    light: 'gray:30',\n  }[colorMode];\n  const hoverBorderColor = {\n    dark: 'blue:50',\n    light: 'blue:50',\n  }[colorMode];\n  const invalidBorderColor = {\n    dark: 'red:50',\n    light: 'red:60',\n  }[colorMode];\n  const focusBorderColor = {\n    dark: 'blue:60',\n    light: 'blue:60',\n  }[colorMode];\n  const disabledBorderColor = {\n    dark: 'gray:60',\n    light: 'gray:30',\n  }[colorMode];\n  const disabledOpacity = {\n    dark: 0.28,\n    light: 0.3,\n  }[colorMode];\n\n  return {\n    backgroundColor,\n    border: 1,\n    borderColor: isFocused ? focusBorderColor : borderColor,\n    borderRadius: 'sm',\n    fontSize: 'sm',\n    lineHeight: 'sm',\n    height: '9x',\n    px: 'calc(.75rem - 1px)', // 12px - 1px\n    py: 'calc(.375rem - 1px)', // 6px - 1px\n    _hover: {\n      borderColor: hoverBorderColor,\n    },\n    _disabled: {\n      borderColor: disabledBorderColor,\n      cursor: 'not-allowed',\n      opacity: disabledOpacity,\n    },\n    _invalid: {\n      borderColor: invalidBorderColor,\n    },\n  };\n};\n\nconst TagCreator = React.forwardRef((\n  {\n    onBlur,\n    onCreate,\n    onChange,\n    onKeyUp,\n    onPaste,\n    ...reset\n  },\n  ref\n) => {\n  const [inputValue, setInputValue] = React.useState('');\n\n  const createTags = (values) => {\n    if (typeof onCreate === \"function\") {\n      onCreate(values);\n    }\n    setInputValue('');\n  };\n  const handleInputBlur = (e) => {\n    e.stopPropagation();\n    const value = e.target.value;\n    if (value) {\n      createTags([value]);\n    }\n    if (typeof onBlur === \"function\") {\n      onBlur(e);\n    }\n  };\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    setInputValue(value);\n    if (typeof onChange === \"function\") {\n      onChange(e);\n    }\n  };\n  const handleInputKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    let value = e.target.value;\n    if (keyCode === 13) { // Enter\n      createTags([value]);\n    }\n    if (keyCode === 186 || keyCode === 188) { // Semicolon(;) or Comma(,)\n      value = value.substring(0, value.length - 1);\n      createTags([value]);\n    }\n    if (keyCode === 27) { // Esc\n      setInputValue('');\n    }\n    if (typeof onKeyUp === \"function\") {\n      onKeyUp(e);\n    }\n  };\n  const handleInputPaste = (e) => {\n    e.preventDefault();\n    const pastedData = e.clipboardData.getData('text');\n    const separatedValues = pastedData.split(\n      new RegExp([',', ';', '\\n', '\\r', '\\r\\n'].join('|'))\n    );\n    createTags(separatedValues);\n    if (typeof onPaste === \"function\") {\n      onPaste(e);\n    }\n  };\n\n  return (\n    <InputBase\n      ref={ref}\n      value={inputValue}\n      onBlur={handleInputBlur}\n      onChange={handleInputChange}\n      onKeyUp={handleInputKeyUp}\n      onPaste={handleInputPaste}\n      {...reset}\n    />\n  );\n});\n\nconst Tags = () => {\n  const [colorMode] = useColorMode();\n  const placeholderColor = {\n    dark: 'white:tertiary',\n    light: 'black:tertiary',\n  }[colorMode];\n  const invalidColor = {\n    dark: 'red:50',\n    light: 'red:60',\n  }[colorMode];\n\n  const tagCreatorRef = React.useRef();\n  const [tags, setTags] = React.useState([]);\n  const [hasError, setHasError] = React.useState(false);\n  const [placeholderVisible, setPlaceholderVisible] = React.useState(true);\n  const [isWrapperFocused, setWrapperFocused] = React.useState(false);\n\n  const verifyTag = ({ id, value }) => {\n    const isDuplicated = tags.find((t) => t.value === value && t.id !== id);\n    if (isDuplicated) {\n      return 'Duplicated entries';\n    }\n    return '';\n  };\n  const createTags = (values) => {\n    if (values.length === 0) {\n      return;\n    }\n    values = values.filter(value => {\n      if (value.trim() === '') {\n        return false; // skip\n      }\n      return true;\n    }).map((value, i) => {\n      const tagId = new Date().getTime() + i;\n      return {\n        id: tagId,\n        value: value,\n      };\n    });\n    const newTags = [...tags, ...values];\n    setTags(newTags);\n  };\n  const updateTag = ({ id, value }) => {\n    const newTags = [...tags];\n    const tag = newTags.find((t) => t.id === id);\n    tag.value = value || tag.value;\n    setTags(newTags);\n  };\n\n  const handleTagCreatorBlur = () => {\n    setWrapperFocused(false);\n    if (tags.length === 0) {\n      setPlaceholderVisible(true);\n    }\n  };\n  const handleTagCreatorFocus = () => {\n    setWrapperFocused(true);\n    setPlaceholderVisible(false);\n  };\n  const handleTagCreatorKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    const value = e.target.value;\n    if (keyCode == 8) { // Delete\n      if (!value && tags.length > 0) {\n        // remove last tag\n        tags.splice((tags.length-1), 1);\n        setTags([...tags]);\n      }\n    }\n  };\n\n  const handleTagChange = (tagId) => ({ value }) => {\n    updateTag({ id: tagId, value });\n  };\n  const handleTagClose = (tagId) => (e) => {\n    const newTags = tags.filter((t) => t.id !== tagId);\n    setTags(newTags);\n    tagCreatorRef.current.focus();\n  };\n\n  const handleWrapperClick = (e) => {\n    tagCreatorRef.current.focus();\n  };\n  const wrapperStyle = useWrapperStyle({\n    isFocused: isWrapperFocused,\n  });\n\n  React.useEffect(() => {\n    const invalidTags = tags.map((tag, i) => {\n      tag.error = verifyTag({ id: tag.id, value: tag.value });\n      return tag;\n    }).filter(t => t.error.length > 0);\n\n    if (invalidTags.length >= 1) {\n      setHasError(true);\n    }\n    if (invalidTags.length === 0) {\n      setHasError(false);\n    }\n  }, [tags]);\n\n  return (\n    <>\n      <Box\n        role=\"presentation\"\n        aria-invalid={hasError}\n        display=\"flex\"\n        onClick={handleWrapperClick}\n        {...wrapperStyle}\n      >\n        {placeholderVisible && (\n          <Text\n            display=\"inline-flex\"\n            py=\"2q\"\n            color={placeholderColor}\n          >\n            Placeholder text\n          </Text>\n        )}\n        {\n          tags.map(tag => {\n            const id = tag.id;\n            const value = tag.value;\n            const error = tag.error;\n            return (\n              <EditableTag\n                key={id}\n                mr=\"2x\"\n                title={value}\n                isInvalid={!!error}\n                onChange={handleTagChange(id)}\n                onClose={handleTagClose(id)}\n              >\n                {value}\n              </EditableTag>\n            );\n          })\n        }\n        <TagCreator\n          ref={tagCreatorRef}\n          display=\"inline-flex\"\n          height=\"6x\"\n          onBlur={handleTagCreatorBlur}\n          onCreate={createTags}\n          onFocus={handleTagCreatorFocus}\n          onKeyUp={handleTagCreatorKeyUp}\n        />\n      </Box>\n      {hasError && <Text color={invalidColor}>There are invalid entries.</Text>}\n    </>\n  );\n};\n\nrender(<Tags />);\n")),(0,r.kt)("h2",null,"Props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The content of the tag.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the tag will be disabled. This sets ",(0,r.kt)("inlineCode",{parentName:"td"},"aria-disabled=true")," and you can style this state by passing the ",(0,r.kt)("inlineCode",{parentName:"td"},"_disabled")," prop.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"isClosable"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"true"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", a close button will appear on the right side.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"isInvalid"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the tag will indicate an error. You can style this state by passing the ",(0,r.kt)("inlineCode",{parentName:"td"},"_invalid")," prop.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"labelMaxWidth"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The maximum width of the label. This value is specified in pixels. If > 0, the string will be clipped, display an ellipsis (...).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onClose"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"A callback called when the close button is clicked.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"size"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'md'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The size of the tag component. One of: 'sm', 'md', 'lg'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'solid'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The variant style of the tag component. One of: 'solid', 'outline'")))))}d.isMDXComponent=!0},62772:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/editabletag",function(){return t(62827)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=62772,e(e.s=n);var n}));var n=e.O();_N_E=n}]);