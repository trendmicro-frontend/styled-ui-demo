(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4516],{24713:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return index_page}});var o,r,l,a,i=t(52322),s=t(45392),c=t(83449),u=t(73705),d=t(67569),p=t(1582),f=t(2784),m=t(95412),h=t(6738),g=["columns","data","layout","variant","tableOptions","tableRef"];function _extends(){return(_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function _slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return _arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var assignRef=function(e,n){if(null!=e){if("function"==typeof e){e(n);return}try{e.current=n}catch(t){throw Error("Cannot assign value '".concat(n,"' to ref '").concat(e,"'"))}}},getTextWidth=function getTextWidth(e,n){var t=(getTextWidth.canvas||(getTextWidth.canvas=document.createElement("canvas"))).getContext("2d");return t.font=n,t.measureText(e).width||0},ConditionalWrapper=function(e){var n=e.children,t=e.condition,o=e.wrapper;return t?o(n):n},b=(0,f.forwardRef)(function(e,n){var t=e.columns,o=e.data,r=e.layout,l=void 0===r?"flexbox":r,a=e.variant,i=void 0===a?"default":a,s=e.tableOptions,c=e.tableRef,b=function(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}(e,g),x=_slicedToArray((0,d.useColorMode)(),1)[0],y=(0,d.useTheme)(),v={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[x],T={dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"}[x],renderExpandedRow=function(e){var n=Object.entries(e.row.original);return f.createElement(d.Flex,{borderBottom:1,borderBottomColor:{dark:"gray:70",light:"gray:30"}[x]},f.createElement(d.Box,{width:"12x",borderRight:2,borderRightColor:{dark:"gray:60",light:"gray:30"}[x]}),f.createElement(d.Box,{as:"pre",fontFamily:"mono",m:0,px:"3x",py:"2x"},f.createElement(d.Grid,{templateColumns:"auto auto",columnGap:"10x",rowGap:"1x"},n.map(function(e){var n=_slicedToArray(e,2),t=n[0],o=n[1];return f.createElement(f.Fragment,{key:t},f.createElement(d.TextLabel,null,t),f.createElement(d.Text,null,Array.isArray(o)?o.map(function(e){return f.createElement(d.Text,{key:e},e)}):"boolean"==typeof o?o.toString():o))}))))},w=(0,m.b7)(_objectSpread({data:o,columns:t,getCoreRowModel:(0,u.sC)()},s));c&&assignRef(c,w);var S=_slicedToArray((0,f.useState)(0),2),C=S[0],M=S[1];return(0,f.useEffect)(function(){if(C){var e=[y.fontWeights.semibold,y.fontSizes.sm,y.fonts.base].join(" "),n=w.getAllColumns().filter(function(e){return"auto"!==e.columnDef.size}).map(function(n){var t=n.id,o=n.columnDef,r=o.minSize,l=o.size;if("number"==typeof l)return{id:t,size:l};if("string"==typeof l&&l.endsWith("%")){var a="string"==typeof o.header?getTextWidth(o.header,e):0;return{id:t,size:Math.max(C*parseFloat(l)/100,a+24,r)}}return{id:t,size:r}}),t=w.getAllColumns().filter(function(e){return"auto"===e.columnDef.size}).map(function(n){var t=n.id,o=n.columnDef,r=o.minSize;return{id:t,size:Math.max(("string"==typeof o.header?getTextWidth(o.header,e):0)+24,r)}}),o=n.reduce(function(e,n){return e+n.size},0),r=t.reduce(function(e,n){return e+n.size},0),l=C-o;if(0===t.length&&l>0){var a=l/n.length;n.forEach(function(e){e.size+=a}),l=0}t.length>0&&l>r&&t.forEach(function(e,n){e.size=Math.max(l/(t.length-n),e.size),l-=e.size});for(var i={},s=0;s<n.length;s++){var c=n[s];i[c.id]=c.size}for(var u=0;u<t.length;u++){var d=t[u];i[d.id]=d.size}w.setColumnSizing(i)}},[t,w,C,y]),f.createElement(h.ZP,{onResize:function(e){var n=e.width;C!==n&&M(n)}},function(e){var n=e.width,t=e.height;return f.createElement(d.Table,_extends({layout:l,variant:i,width:n,height:t},b),f.createElement(d.TableHeader,null,w.getHeaderGroups().map(function(e){return f.createElement(d.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return f.createElement(d.TableHeaderCell,_extends({key:e.id},n),e.isPlaceholder?null:(0,m.ie)(e.column.columnDef.header,e.getContext()))}))})),f.createElement(ConditionalWrapper,{condition:"flexbox"===l,wrapper:function(e){return f.createElement(d.TableScrollbar,{height:"100%",overflow:"visible"},e)}},f.createElement(d.TableBody,null,w.getRowModel().rows.map(function(e){return f.createElement(f.Fragment,{key:e.id},f.createElement(d.TableRow,{"data-selected":(0,p.dataAttr)(e.getIsSelected()),_hover:{backgroundColor:v},_selected:{backgroundColor:T}},e.getVisibleCells().map(function(e){var n=_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return f.createElement(d.TableCell,_extends({key:e.id},n),(0,m.ie)(e.column.columnDef.cell,e.getContext()))})),e.getCanExpand()&&"flexbox"===l&&f.createElement(d.Collapse,{in:e.getIsExpanded()},renderExpandedRow({row:e})),e.getCanExpand()&&"table"===l&&f.createElement(d.TableRow,null,f.createElement(d.TableCell,{padding:0,borderBottom:0,colSpan:e.getVisibleCells().length},f.createElement(d.Collapse,{in:e.getIsExpanded()},renderExpandedRow({row:e})))))}))))})});b.displayName="BaseTable";var x=["isExpanded"];function expandable_table_rows_extends(){return(expandable_table_rows_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function expandable_table_rows_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return expandable_table_rows_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return expandable_table_rows_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function expandable_table_rows_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var y=[{endpointId:"0d4523d9-ceed-4a9a-b3d0-056814ee8811",endpointHostname:"endpoint-1",endpointIPs:["fe80::c5a0:6dd9:1002:5760","10.1.136.130"],endpointMAC:"00:50:56:9c:3c:5a",eventId:1,eventSourceType:1,firstSeen:"2023-06-07T02:31:48Z",lastSeen:"2023-06-07T02:31:48Z",objectFirstSeen:"2023-06-07T02:27:34Z",objectLastSeen:"2023-06-07T02:32:04Z",objectIPs:["192.8.82.3","199.7.83.46","192.113.5.32"],osDescription:"Windows 10 Enterprise (64-bit) build 19044",osType:"0x00000007",osVer:"10.0.19044",processCmd:"C:\\Windows\\System32\\svchost.exe -k NetworkService -p -s NlaSvc",processFileCreation:"2023-06-05T10:07:28Z",processFileHashMD5:"b7f884c1b74a263f746ee12a5f7c9f6a",processFileHashSHA1:"1bc5066ddf693fc034d6514618854e26a84fd0d1",processFileHashSHA256:"add683a6910abbbf0e28b557fad0ba998166394932ae2aca069d9aa19ea8fe88",processFileModifiedTime:"2023-06-05T10:07:28Z",processFileSize:55320,processLaunchTime:"2023-06-06T09:42:15Z",processName:"C:\\Windows\\System32\\svchost.exe",processId:1408,processSigner:"Microsoft Windows Publisher",processSignerValid:!0,processUser:"NETWORK SERVICE",processUserDomain:"NT AUTHORITY",productCode:"dummy",productVersion:"x.y.z",sessionId:0,timezone:"Pacific Standard Time"}],v=(0,f.forwardRef)(function(e,n){var t=e.isExpanded,o=function(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}(e,x),r=t?Math.floor(93.1):133,l=p.transitionEasing.easeOut,a=t?(0,p.getEnterTransitionProps)({timeout:r,easing:l}):(0,p.getExitTransitionProps)({timeout:r,easing:l}),i={transform:t?"rotate(90deg)":"rotate(0deg)",transition:(0,p.createTransitionStyle)("transform",a)};return f.createElement(d.ButtonBase,o,f.createElement(d.Icon,expandable_table_rows_extends({icon:"angle-right",size:"4x"},i)))});v.displayName="TableRowToggleIcon";var expandable_table_rows=function(){var e=expandable_table_rows_slicedToArray((0,d.useColorMode)(),1)[0],n=expandable_table_rows_slicedToArray((0,d.useColorStyle)({colorMode:e}),1)[0],t=(0,f.useMemo)(function(){return[{id:"toggle-expanded",header:function(){return null},cell:function(e){var n=e.row,t=n.getCanExpand(),o=n.getIsExpanded();return t?f.createElement(v,{isExpanded:o,onClick:n.getToggleExpandedHandler()}):null},size:48},{header:"Logged",accessorKey:"firstSeen",size:180,cell:function(e){var n,t=e.row;return f.createElement(d.Truncate,null,null===(n=t.original)||void 0===n?void 0:n.firstSeen)}},{id:"details",cell:function(e){var t=Object.entries(e.row.original);return f.createElement(d.Truncate,{as:"pre",fontFamily:"mono",m:0,sx:{"--truncate-line-clamp":3,wordBreak:"break-all",whiteSpace:"normal",display:"-webkit-box",WebkitBoxOrient:"vertical",WebkitLineClamp:"var(--truncate-line-clamp)"}},t.map(function(e,o){var r=expandable_table_rows_slicedToArray(e,2),l=r[0],a=r[1];return f.createElement(d.Box,{key:l,display:"inline"},l,": ",f.createElement(d.Text,{display:"inline",color:n.color.tertiary},Array.isArray(a)?a.join(","):a),o<t.length-1&&f.createElement(d.Divider,{display:"inline",orientation:"vertical",mx:"2x"}))}))},size:"auto"}]},[e,n]),o=(0,f.useMemo)(function(){return{defaultColumn:{minSize:48},getExpandedRowModel:(0,u.rV)(),getRowCanExpand:function(){return!0}}},[]),r=(0,f.useRef)(null);return(0,f.useEffect)(function(){r.current&&r.current.toggleAllRowsExpanded(!0)},[]),f.createElement(d.Box,{height:500},f.createElement(b,{layout:"flexbox",variant:"default",columns:t,data:y,tableOptions:o,tableRef:r}))};function FilterButton_extends(){return(FilterButton_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function FilterButton_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var T=(0,f.forwardRef)(function(e,n){var t,o=(function(e){if(Array.isArray(e))return e}(t=(0,d.useColorStyle)())||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(t,1)||function(e,n){if(e){if("string"==typeof e)return FilterButton_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return FilterButton_arrayLikeToArray(e,n)}}(t,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return f.createElement(d.Button,FilterButton_extends({variant:"ghost",sx:{color:o.color.info,_focus:{color:o.color.info}}},e))});T.displayName="FilterButton";var w=t(5081),S=t(91338),C=["disabled"];function FilterTag_extends(){return(FilterTag_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function FilterTag_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var M=(0,f.forwardRef)(function(e,n){var t,o=e.disabled,r=function(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}(e,C),l=(function(e){if(Array.isArray(e))return e}(t=(0,d.useColorMode)())||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(t,1)||function(e,n){if(e){if("string"==typeof e)return FilterTag_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return FilterTag_arrayLikeToArray(e,n)}}(t,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return f.createElement(d.Tag,FilterTag_extends({disabled:o,isClosable:!0,tabIndex:o?void 0:0,sx:{borderRadius:".75rem",cursor:"pointer",_hover:{backgroundColor:{dark:"gray:60",light:"gray:40"}[l]},_disabled:{cursor:"not-allowed",userSelect:"none"}}},r))});function DropdownFilterTag_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}M.displayName="FilterTag";var DropdownFilterTag=function(e){var n,t=e.label,o=e.options,r=e.value,l=void 0===r?null:r,a=e.onChange,i=e.onClose,s=(function(e){if(Array.isArray(e))return e}(n=(0,d.useColorStyle)())||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(n,1)||function(e,n){if(e){if("string"==typeof e)return DropdownFilterTag_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return DropdownFilterTag_arrayLikeToArray(e,n)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],c=(0,f.useRef)(!1),u=(0,f.useMemo)(function(){return o.map(function(e){return e.value})},[o]),p=(0,f.useMemo)(function(){return o.reduce(function(e,n){return e[n.value]=n,e},{})},[o]);return f.createElement(S.Z,{defaultIsOpen:!l,options:u,offset:[0,4],onChange:function(e){c.current=!!e,a(e)},onClose:function(){l||c.current||(0,w.zU)(i)(),c.current=!1},renderOption:function(e){var n;return null===(n=p[e])||void 0===n?void 0:n.label},value:l},f.createElement(M,{onClose:function(e){e.stopPropagation(),(0,w.zU)(i)()}},f.createElement(d.Flex,{columnGap:"1x"},f.createElement(d.Text,{color:s.color.secondary},t),f.createElement(d.OverflowTooltip,{label:l},l))))};DropdownFilterTag.displayName="DropdownFilterTag";var P=t(6980);function MultiselectFilterTag_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var MultiselectFilterTag=function(e){var n,t=e.label,o=e.options,r=e.value,l=void 0===r?null:r,a=e.onChange,i=e.onClose,s=(function(e){if(Array.isArray(e))return e}(n=(0,d.useColorStyle)())||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(n,1)||function(e,n){if(e){if("string"==typeof e)return MultiselectFilterTag_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return MultiselectFilterTag_arrayLikeToArray(e,n)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],c=(0,f.useMemo)(function(){return o.map(function(e){return e.value})},[o]),u=(0,f.useMemo)(function(){return o.reduce(function(e,n){return e[n.value]=n,e},{})},[o]);return f.createElement(P.Z,{isSearchable:!0,defaultIsOpen:Array.isArray(l)?0===l.length:!l,options:c,offset:[0,4],onChange:function(e){a(e),0===e.length&&(0,w.zU)(i)()},renderOption:function(e){var n;return null===(n=u[e])||void 0===n?void 0:n.label},shouldSelectAllIfNoneSelected:!1,value:l},f.createElement(M,{onClose:function(e){e.stopPropagation(),(0,w.zU)(i)()}},f.createElement(d.Flex,{columnGap:"1x"},f.createElement(d.Text,{color:s.color.secondary},t),f.createElement(d.OverflowTooltip,{label:l},Array.isArray(l)?l.map(function(e){var n;return null===(n=u[e])||void 0===n?void 0:n.label}).join(", "):u[l]))))};MultiselectFilterTag.displayName="MultiselectFilterTag";var I=["label","value","onChange","onClose","inputProps"];function InputFilterTag_extends(){return(InputFilterTag_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function InputFilterTag_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return InputFilterTag_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return InputFilterTag_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function InputFilterTag_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var k=(0,f.forwardRef)(function(e,n){var t=e.label,o=e.value,r=void 0===o?"":o,l=e.onChange,a=e.onClose,i=e.inputProps;!function(e,n){if(null!=e){var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}}}(e,I);var s=(0,f.useRef)(!1),c=(0,f.useRef)(null),u=InputFilterTag_slicedToArray((0,f.useState)(null!=r?r:""),2),m=u[0],h=u[1],g=InputFilterTag_slicedToArray((0,d.useColorStyle)(),1)[0],b=(0,f.useCallback)(function(e){h(e.target.value)},[]),x=(0,f.useCallback)(function(){(0,w.zU)(l)(m),s.current=!0,document.activeElement&&document.activeElement.blur()},[m,l]);return(0,f.useEffect)(function(){var e=setTimeout(function(){var e=c.current;e&&e.focus()},100);return function(){clearTimeout(e)}},[]),f.createElement(d.Popover,{arrow:!1,defaultIsOpen:!r,initialFocusRef:c,offset:[0,4],onClose:function(){s.current||(r?h(r):(0,w.zU)(a)()),s.current=!1},returnFocusOnClose:!1},f.createElement(d.PopoverTrigger,{shouldWrapChildren:!0},f.createElement(M,{onClose:function(e){e.stopPropagation(),(0,w.zU)(a)()}},f.createElement(d.Flex,{columnGap:"1x"},f.createElement(d.Text,{color:g.color.secondary},t),f.createElement(d.OverflowTooltip,{label:r},r)))),f.createElement(d.PopoverContent,{PopperProps:{usePortal:!0}},f.createElement(d.Box,{mb:"2x"},f.createElement(d.Input,InputFilterTag_extends({},i,{ref:c,value:m,onChange:(0,p.callEventHandlers)(i.onChange,b)}))),f.createElement(d.Box,null,f.createElement(d.Button,{disabled:!m,variant:"primary",size:"sm",onClick:x},"Apply"))))});function advanced_filter_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function advanced_filter_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?advanced_filter_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):advanced_filter_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function advanced_filter_extends(){return(advanced_filter_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function advanced_filter_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||advanced_filter_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function advanced_filter_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return advanced_filter_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return advanced_filter_arrayLikeToArray(e,n)}}function advanced_filter_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}k.displayName="InputFilterTag";var advanced_filter=function(){var e=advanced_filter_slicedToArray((0,f.useState)(""),2),n=e[0],t=e[1],o=(0,f.useMemo)(function(){return[{id:"deviceType",name:"Device type",render:function(e){return f.createElement(DropdownFilterTag,advanced_filter_extends({},e,{label:"Device type:",options:[{value:"desktop",label:"Desktop"},{value:"server",label:"Server"}]}))}},{id:"displayName",name:"Display name",render:function(e){return f.createElement(k,advanced_filter_extends({},e,{label:"Display name:",inputProps:{placeholder:"Specify display name",maxLength:256}}))}},{id:"osType",name:"OS type",render:function(e){return f.createElement(MultiselectFilterTag,advanced_filter_extends({},e,{label:"OS type:",options:[{value:"windows",label:"Windows"},{value:"macos",label:"macOS"},{value:"linux",label:"Linux"}]}))}}]},[]),r=advanced_filter_slicedToArray((0,f.useState)([]),2),l=r[0],a=r[1],i=(0,f.useMemo)(function(){var e=l.map(function(e){return e.id});return o.filter(function(n){return!e.includes(n.id)})},[o,l]),s=(0,f.useCallback)(function(){a([])},[]);return f.createElement(d.Flex,{flexWrap:"wrap",alignItems:"center",columnGap:"2x",rowGap:"3x"},f.createElement(d.SearchInput,{placeholder:"Search",onChange:function(e){t(e.target.value)},onClearInput:function(){t("")},value:n}),f.createElement(d.Menu,{returnFocusOnClose:!1},f.createElement(d.MenuToggle,{disabled:0===i.length},function(e){var n=e.getMenuToggleProps;return f.createElement(d.Button,advanced_filter_extends({},n(),{variant:"secondary",width:"8x",height:"8x"}),f.createElement(d.Icon,{icon:"filter"}))}),f.createElement(d.MenuList,{width:"max-content"},i.map(function(e){return f.createElement(d.MenuItem,{key:e.id,onClick:function(){a(function(n){return[].concat(function(e){if(Array.isArray(e))return advanced_filter_arrayLikeToArray(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||advanced_filter_unsupportedIterableToArray(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e])})}},e.name)}))),l.map(function(e){return f.createElement(f.Fragment,{key:e.id},e.render({value:e.value,onChange:function(n){a(function(t){return t.map(function(t){return t.id!==e.id?t:advanced_filter_objectSpread(advanced_filter_objectSpread({},t),{},{value:n})})})},onClose:function(){a(function(n){return n.filter(function(n){return n.id!==e.id})})}}))}),l.length>0&&f.createElement(T,{columnGap:"1x",onClick:function(){return s()}},f.createElement(d.Icon,{icon:"filter-delete"})," ",f.createElement(d.Text,null,"Clear")))};function Toolbar_extends(){return(Toolbar_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var O=(0,f.forwardRef)(function(e,n){return f.createElement(d.Flex,Toolbar_extends({ref:n},{alignItems:"flex-start",justifyContent:"space-between",columnGap:"6x"},e))});function ToolbarItem_extends(){return(ToolbarItem_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}O.displayName="Toolbar";var E=(0,f.forwardRef)(function(e,n){return f.createElement(d.Flex,ToolbarItem_extends({ref:n},{alignItems:"center",columnGap:"2x",rowGap:"3x"},e))});function table_toolbar_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||table_toolbar_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function table_toolbar_toConsumableArray(e){return function(e){if(Array.isArray(e))return table_toolbar_arrayLikeToArray(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||table_toolbar_unsupportedIterableToArray(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function table_toolbar_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return table_toolbar_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return table_toolbar_arrayLikeToArray(e,n)}}function table_toolbar_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}E.displayName="ToolbarItem";var F=(o=[{id:"all",label:"All"}].concat(table_toolbar_toConsumableArray(Array.from({length:10},function(e,n){return{id:String(n+1),label:"Option ".concat(n+1)}}))),r=new Map,o.forEach(function(e){var n=String(e.id);r.set(n,e)}),r),A=table_toolbar_toConsumableArray(F.keys()),R=table_toolbar_toConsumableArray(A.slice(0,4)),B=table_toolbar_toConsumableArray(A.slice(1)),renderDropdownOption=function(e){var n=F.get(e);return null==n?void 0:n.label},renderDropdownLabel=function(e){var n=renderDropdownOption(e);return f.createElement(f.Fragment,null,f.createElement(d.TextLabel,{mr:"2x"},"Label:"),f.createElement(d.OverflowTooltip,{label:n},n))},renderMultiselectOption=function(e){var n=F.get(e);return null==n?void 0:n.label},renderMultiselectLabel=function(e){var n=e.length,t=n===B.length;if(0===n){var o="Select";return f.createElement(f.Fragment,null,f.createElement(d.TextLabel,{mr:"2x"},"Label:"),f.createElement(d.OverflowTooltip,{label:o},o))}if(t)return f.createElement(f.Fragment,null,f.createElement(d.TextLabel,{mr:"2x"},"Label:"),f.createElement(d.OverflowTooltip,{label:"All"},"All"));var r=e.map(renderMultiselectOption).join(", ");return f.createElement(f.Fragment,null,f.createElement(d.TextLabel,{mr:"2x"},"Label:"),f.createElement(d.OverflowTooltip,{label:r},r),f.createElement(d.Text,{ml:"1x"},"(".concat(n,")")))},table_toolbar=function(){var e=table_toolbar_slicedToArray((0,d.useColorStyle)(),1)[0],n=table_toolbar_slicedToArray((0,f.useState)(R[0]),2),t=n[0],o=n[1],r=table_toolbar_slicedToArray((0,f.useState)(B),2),l=r[0],a=r[1],i=table_toolbar_slicedToArray((0,f.useState)(""),2),s=i[0],c=i[1],u=table_toolbar_slicedToArray((0,f.useState)(0),1)[0],p=(0,f.useCallback)(function(){o(R[0]),a(B),c("")},[]),m="calc(".concat(200,"px - 48px)");return f.createElement(O,null,f.createElement(E,{flexWrap:"wrap"},f.createElement(d.Button,{variant:"primary"},"Primary Action"),f.createElement(d.Divider,{orientation:"vertical"}),f.createElement(S.Z,{value:t,onChange:o,options:R,renderOption:renderDropdownOption},f.createElement(d.MenuButton,{variant:"secondary",width:200},f.createElement(d.Flex,{maxWidth:m},renderDropdownLabel(t)))),f.createElement(P.Z,{isSearchable:!0,value:l,onChange:a,options:B,renderOption:renderMultiselectOption},f.createElement(d.MenuButton,{variant:"secondary",width:200},f.createElement(d.Flex,{maxWidth:m},renderMultiselectLabel(l)))),f.createElement(d.SearchInput,{placeholder:"Search",onChange:function(e){c(e.target.value)},onClearInput:function(){c("")},value:s}),f.createElement(d.Button,{variant:"ghost",onClick:function(){return p()},sx:{color:e.color.info,_focus:{color:e.color.info},columnGap:"1x",mr:"3x"}},f.createElement(d.Icon,{icon:"close-s"})," ",f.createElement(d.Text,null,"Clear")),f.createElement(d.Flex,{columnGap:"1x"},f.createElement(d.TextLabel,null,"Matched results:"),u)),f.createElement(E,{flexWrap:"nowrap"},f.createElement(d.Tooltip,{label:"Export"},f.createElement(d.Button,{variant:"ghost"},f.createElement(d.Icon,{icon:"export"}))),f.createElement(d.Tooltip,{label:"Refresh"},f.createElement(d.Button,{variant:"ghost"},f.createElement(d.Icon,{icon:"refresh"})))))},_=t(76635),L=t.n(_);function TablePagination_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return TablePagination_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return TablePagination_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function TablePagination_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var components_TablePagination=function(e){var n=e.count,t=e.defaultPage,o=void 0===t?1:t,r=e.defaultRowsPerPage,l=e.onPageChange,a=e.onRowsPerPageChange,i=e.page,s=e.rowsPerPage,c=e.rowsPerPageOptions,u=void 0===c?[10,25,50,100]:c;e.showFirstButton,e.showLastButton;var p=TablePagination_slicedToArray((0,d.useColorMode)(),1)[0],m=TablePagination_slicedToArray((0,d.useColorStyle)({colorMode:p}),1)[0],h=null!=r?r:(0,w.rY)(u)[0],g=TablePagination_slicedToArray((0,f.useState)(null!=i?i:o),2),b=g[0],x=g[1],y=TablePagination_slicedToArray((0,f.useState)(null!=s?s:h),2),v=y[0],T=y[1];(0,f.useEffect)(function(){void 0!==i&&x(i)},[i]),(0,f.useEffect)(function(){void 0!==s&&T(s)},[s]);var S=(0,f.useCallback)(function(e){void 0!==i||x(e),"function"==typeof l&&l(e)},[i,l]),C=(0,f.useCallback)(function(e){void 0!==s||T(e),"function"==typeof a&&a(e)},[s,a]),M=Math.ceil(n/v),P=b>1,I=b<M;return f.createElement(d.Flex,{alignItems:"center",justifyContent:"flex-end",backgroundColor:m.background.secondary,px:"6x",py:"3x"},f.createElement(d.Text,{mr:"2x"},"Total: ",n),f.createElement(d.Divider,{orientation:"vertical",height:"6x"}),f.createElement(d.Menu,null,f.createElement(d.MenuButton,{variant:"ghost"},v," per page"),f.createElement(d.MenuList,{onClick:function(e){var n=(0,w.q9)(e.target.value);n>0&&(S(1),C(n))},width:"100%"},u.map(function(e){return f.createElement(d.MenuItem,{key:e,value:e},e)}))),f.createElement(d.Divider,{orientation:"vertical",height:"6x"}),f.createElement(d.Space,{width:"2x"}),f.createElement(d.Input,{width:"10x",px:0,textAlign:"center",onChange:function(e){var n=(0,w.q9)(e.target.value);n<=1?S(1):n>=M?S(M):S(n)},value:b}),f.createElement(d.Space,{width:"2x"}),f.createElement(d.Text,null,"/"),f.createElement(d.Space,{width:"2x"}),f.createElement(d.Text,null,M),f.createElement(d.Space,{width:"2x"}),f.createElement(d.ButtonGroup,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},f.createElement(d.Button,{width:"8x",disabled:!P,onClick:function(e){S(b-1)}},f.createElement(d.Icon,{icon:"angle-left"})),f.createElement(d.Button,{width:"8x",disabled:!I,onClick:function(e){S(b+1)}},f.createElement(d.Icon,{icon:"angle-right"}))))};function table_display_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||table_display_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function table_display_toConsumableArray(e){return function(e){if(Array.isArray(e))return table_display_arrayLikeToArray(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||table_display_unsupportedIterableToArray(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function table_display_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return table_display_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return table_display_arrayLikeToArray(e,n)}}function table_display_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var D=(l=[{id:"all",label:"All"}].concat(table_display_toConsumableArray(Array.from({length:10},function(e,n){return{id:String(n+1),label:"Option ".concat(n+1)}}))),a=new Map,l.forEach(function(e){var n=String(e.id);a.set(n,e)}),a),z=table_display_toConsumableArray(D.keys()),j=table_display_toConsumableArray(z.slice(0,4)),V=table_display_toConsumableArray(z.slice(1)),table_display_renderDropdownOption=function(e){var n=D.get(e);return null==n?void 0:n.label},table_display_renderDropdownLabel=function(e){var n=table_display_renderDropdownOption(e);return f.createElement(f.Fragment,null,f.createElement(d.TextLabel,{mr:"2x"},"Label:"),f.createElement(d.OverflowTooltip,{label:n},n))},table_display_renderMultiselectOption=function(e){var n=D.get(e);return null==n?void 0:n.label},table_display_renderMultiselectLabel=function(e){var n=e.length,t=n===V.length;if(0===n){var o="Select";return f.createElement(f.Fragment,null,f.createElement(d.TextLabel,{mr:"2x"},"Label:"),f.createElement(d.OverflowTooltip,{label:o},o))}if(t)return f.createElement(f.Fragment,null,f.createElement(d.TextLabel,{mr:"2x"},"Label:"),f.createElement(d.OverflowTooltip,{label:"All"},"All"));var r=e.map(table_display_renderMultiselectOption).join(", ");return f.createElement(f.Fragment,null,f.createElement(d.TextLabel,{mr:"2x"},"Label:"),f.createElement(d.OverflowTooltip,{label:r},r),f.createElement(d.Text,{ml:"1x"},"(".concat(n,")")))},W=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],N=L().range(360).map(function(e){var n=L().sampleSize(W,L().random(0,W.length)),t=new Date(Date.now()-L().random(0,2592e6));return{id:e+1,endpoint:"Endpoint ".concat(e+1),detections:n,lastSeen:t}}),table_display=function(){var e=table_display_slicedToArray((0,d.useColorStyle)(),1)[0],n=table_display_slicedToArray((0,f.useState)(j[0]),2),t=n[0],o=n[1],r=table_display_slicedToArray((0,f.useState)(V),2),l=r[0],a=r[1],i=table_display_slicedToArray((0,f.useState)(""),2),s=i[0],c=i[1],p=table_display_slicedToArray((0,f.useState)(0),1)[0],m=(0,f.useCallback)(function(){o(j[0]),a(V),c("")},[]),h=(0,f.useMemo)(function(){return[{id:"selection",header:function(e){var n=e.table;return f.createElement(d.Checkbox,{checked:n.getIsAllRowsSelected(),indeterminate:n.getIsSomeRowsSelected(),onChange:n.getToggleAllRowsSelectedHandler()})},cell:function(e){var n=e.row;return f.createElement(d.Checkbox,{checked:n.getIsSelected(),disabled:!n.getCanSelect(),indeterminate:n.getIsSomeSelected(),onChange:n.getToggleSelectedHandler()})},size:48},{header:"Endpoint",cell:function(e){var n=e.getValue;return f.createElement(d.Truncate,null,n())},accessorKey:"endpoint",size:"auto"},{header:"Detections",accessorKey:"detections",cell:function(e){return table_display_toConsumableArray((0,e.getValue)()).length},size:150},{header:"Last Seen",accessorKey:"lastSeen",cell:function(e){return(0,e.getValue)().toISOString()},size:200}]},[]),g=(0,f.useRef)(),x=table_display_slicedToArray((0,f.useState)({}),2),y=x[0],v=x[1],T=table_display_slicedToArray((0,f.useState)(N.length),2),C=T[0],M=T[1],I=(0,f.useMemo)(function(){return{defaultColumn:{minSize:48},state:{rowSelection:y},getPaginationRowModel:(0,u.G_)(),enableRowSelection:function(e){return!0},onRowSelectionChange:v}},[y]);(0,f.useEffect)(function(){var e=g.current;M(e?e.getCoreRowModel().rows.length:0)},[]);var k="calc(".concat(200,"px - 48px)");return f.createElement(d.Flex,{flexDirection:"column",height:600},f.createElement(d.Box,{flex:"none",mb:"2x"},f.createElement(O,null,f.createElement(E,{flexWrap:"wrap"},f.createElement(d.Button,{variant:"primary"},"Primary Action"),f.createElement(d.Divider,{orientation:"vertical"}),f.createElement(S.Z,{value:t,onChange:o,options:j,renderOption:table_display_renderDropdownOption},f.createElement(d.MenuButton,{variant:"secondary",width:200},f.createElement(d.Flex,{maxWidth:k},table_display_renderDropdownLabel(t)))),f.createElement(P.Z,{isSearchable:!0,value:l,onChange:a,options:V,renderOption:table_display_renderMultiselectOption},f.createElement(d.MenuButton,{variant:"secondary",width:200},f.createElement(d.Flex,{maxWidth:k},table_display_renderMultiselectLabel(l)))),f.createElement(d.SearchInput,{placeholder:"Search",onChange:function(e){c(e.target.value)},onClearInput:function(){c("")},value:s}),f.createElement(d.Button,{variant:"ghost",onClick:function(){return m()},sx:{color:e.color.info,_focus:{color:e.color.info},columnGap:"1x",mr:"3x"}},f.createElement(d.Icon,{icon:"close-s"})," ",f.createElement(d.Text,null,"Clear")),f.createElement(d.Flex,{columnGap:"1x"},f.createElement(d.TextLabel,null,"Matched results:"),p)),f.createElement(E,{flexWrap:"nowrap"},f.createElement(d.Tooltip,{label:"Export"},f.createElement(d.Button,{variant:"ghost"},f.createElement(d.Icon,{icon:"export"}))),f.createElement(d.Tooltip,{label:"Refresh"},f.createElement(d.Button,{variant:"ghost"},f.createElement(d.Icon,{icon:"refresh"})))))),f.createElement(d.Box,{flex:"auto"},f.createElement(b,{layout:"flexbox",variant:"default",columns:h,data:N,tableOptions:I,tableRef:g})),f.createElement(d.Box,{flex:"none"},f.createElement(components_TablePagination,{count:C,onPageChange:function(e){var n=Math.max((0,w.q9)(e)-1,0);g.current.setPageIndex(n)},onRowsPerPageChange:function(e){var n=Math.max((0,w.q9)(e),1);g.current.setPageSize(n)}})))};function _createMdxContent(e){var n=Object.assign({div:"div",h1:"h1",h2:"h2",a:"a",svg:"svg",use:"use",p:"p",ul:"ul",li:"li",h3:"h3"},(0,s.ah)(),e.components);return(0,i.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n",(0,i.jsx)(n.h1,{id:"table-display",children:"Table Display"}),"\n",(0,i.jsxs)(n.h2,{id:"overview",children:["Overview",(0,i.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#overview",children:(0,i.jsx)(n.svg,{children:(0,i.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(n.p,{children:"Table display is used for presenting data in a structured manner and typically consists of three main parts:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Toolbar"}),"\n",(0,i.jsx)(n.li,{children:"Data"}),"\n",(0,i.jsx)(n.li,{children:"Footer"}),"\n"]}),"\n",(0,i.jsx)(c.Z,{component:table_display,file:{data:"import {\n  getPaginationRowModel,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Divider,\n  Flex,\n  Icon,\n  MenuButton,\n  OverflowTooltip,\n  SearchInput,\n  Text,\n  TextLabel,\n  Tooltip,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureNumber } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport BaseTable from '@/components/BaseTable';\nimport Dropdown from '@/components/Dropdown';\nimport Multiselect from '@/components/Multiselect';\nimport TablePagination from '@/components/TablePagination';\nimport Toolbar from '@/components/Toolbar';\nimport ToolbarItem from '@/components/ToolbarItem';\n\nconst filterMap = (() => {\n  const filterData = [\n    { id: 'all', label: 'All' },\n    ...Array.from({ length: 10 }, (_, i) => ({\n      id: String(i + 1),\n      label: `Option ${i + 1}`,\n    })),\n  ];\n\n  const map = new Map();\n  filterData.forEach((filter) => {\n    // Use the policy ID as the key and ensure it's a string rather than a number\n    const key = String(filter.id);\n    map.set(key, filter);\n  });\n  return map;\n})();\n\nconst filterItems = [...filterMap.keys()];\n\nconst dropdownOptions = [\n  ...filterItems.slice(0, 4),\n];\n\nconst multiselectOptions = [\n  ...filterItems.slice(1),\n];\n\nconst renderDropdownOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};\n\nconst renderDropdownLabel = (value) => {\n  const selectionText = renderDropdownOption(value);\n  return (\n    <>\n      <TextLabel mr=\"2x\">\n        {'Label:'}\n      </TextLabel>\n      <OverflowTooltip label={selectionText}>\n        {selectionText}\n      </OverflowTooltip>\n    </>\n  );\n};\n\nconst renderMultiselectOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};\n\nconst renderMultiselectLabel = (value) => {\n  const selectionCount = value.length;\n  const isNoneSelected = selectionCount === 0;\n  const isAllSelected = selectionCount === multiselectOptions.length;\n\n  if (isNoneSelected) {\n    const selectionText = 'Select';\n    return (\n      <>\n        <TextLabel mr=\"2x\">\n          {'Label:'}\n        </TextLabel>\n        <OverflowTooltip label={selectionText}>\n          {selectionText}\n        </OverflowTooltip>\n      </>\n    );\n  }\n\n  if (isAllSelected) {\n    const selectionText = 'All'; \n    return (\n      <>\n        <TextLabel mr=\"2x\">\n          {'Label:'}\n        </TextLabel>\n        <OverflowTooltip label={selectionText}>\n          {selectionText}\n        </OverflowTooltip>\n      </>\n    );\n  }\n\n  const selectionText = value.map(renderMultiselectOption).join(', ');\n  return (\n    <>\n      <TextLabel mr=\"2x\">\n        {'Label:'}\n      </TextLabel>\n      <OverflowTooltip label={selectionText}>\n        {selectionText}\n      </OverflowTooltip>\n      <Text ml=\"1x\">\n        {`(${selectionCount})`}\n      </Text>\n    </>\n  );\n};\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [dropdownValue, setDropdownValue] = useState(dropdownOptions[0]);\n  const [multiselectValue, setMultiselectValue] = useState(multiselectOptions);\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const [matchedResults] = useState(0);\n\n  const clearFilters = useCallback(() => {\n    setDropdownValue(dropdownOptions[0]);\n    setMultiselectValue(multiselectOptions);\n    setSearchInputValue('');\n  }, []);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 48,\n    },\n    {\n      header: 'Endpoint',\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      accessorKey: 'endpoint',\n      size: 'auto',\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 150,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => {\n        return getValue().toISOString();\n      },\n      size: 200,\n    },\n  ], []);\n\n  const tableRef = useRef();\n\n  const [rowSelection, setRowSelection] = useState({});\n  const [totalCount, setTotalCount] = useState(data.length);\n\n  const tableOptions = useMemo(() => ({\n    defaultColumn: {\n      minSize: 48,\n    },\n    state: {\n      rowSelection,\n    },\n\n    // Pagination\n    getPaginationRowModel: getPaginationRowModel(),\n\n    // Row selection\n    enableRowSelection: row => true, // enable row selection conditionally\n    onRowSelectionChange: setRowSelection,\n  }), [rowSelection]);\n\n  useEffect(() => {\n    const table = tableRef.current;\n    setTotalCount(table ? table.getCoreRowModel().rows.length : 0);\n  }, []);\n\n  const pageHeight = 600;\n\n  const menuButtonWidth = 200;\n  const maxMenuButtonWidth = typeof menuButtonWidth === 'number'\n    ? `calc(${menuButtonWidth}px - 48px)`\n    : `calc(${menuButtonWidth} - 48px)`;\n\n  return (\n    <Flex\n      flexDirection=\"column\"\n      height={pageHeight}\n    >\n      <Box flex=\"none\" mb=\"2x\">\n        <Toolbar>\n          <ToolbarItem flexWrap=\"wrap\">\n            <Button variant=\"primary\">\n              Primary Action\n            </Button>\n            <Divider orientation=\"vertical\" />\n            <Dropdown\n              value={dropdownValue}\n              onChange={setDropdownValue}\n              options={dropdownOptions}\n              renderOption={renderDropdownOption}\n            >\n              <MenuButton\n                variant=\"secondary\"\n                width={menuButtonWidth}\n              >\n                <Flex maxWidth={maxMenuButtonWidth}>\n                  {renderDropdownLabel(dropdownValue)}\n                </Flex>\n              </MenuButton>\n            </Dropdown>\n            <Multiselect\n              isSearchable={true}\n              value={multiselectValue}\n              onChange={setMultiselectValue}\n              options={multiselectOptions}\n              renderOption={renderMultiselectOption}\n            >\n              <MenuButton\n                variant=\"secondary\"\n                width={menuButtonWidth}\n              >\n                <Flex maxWidth={maxMenuButtonWidth}>\n                  {renderMultiselectLabel(multiselectValue)}\n                </Flex>\n              </MenuButton>\n            </Multiselect>\n            <SearchInput\n              placeholder=\"Search\"\n              onChange={(event) => {\n                const { value } = event.target;\n                setSearchInputValue(value);\n              }}\n              onClearInput={() => {\n                setSearchInputValue('');\n              }}\n              value={searchInputValue}\n            />\n            <Button\n              variant=\"ghost\"\n              onClick={() => clearFilters()}\n              sx={{\n                color: colorStyle.color.info,\n                _focus: {\n                  color: colorStyle.color.info,\n                },\n                columnGap: '1x',\n                mr: '3x',\n              }}\n            >\n              <Icon icon=\"close-s\" /> <Text>Clear</Text>\n            </Button>\n            <Flex columnGap=\"1x\">\n              <TextLabel>\n                Matched results:\n              </TextLabel>\n              {matchedResults}\n            </Flex>\n          </ToolbarItem>\n          <ToolbarItem flexWrap=\"nowrap\">\n            <Tooltip label=\"Export\">\n              <Button variant=\"ghost\">\n                <Icon icon=\"export\" />\n              </Button>\n            </Tooltip>\n            <Tooltip label=\"Refresh\">\n              <Button variant=\"ghost\">\n                <Icon icon=\"refresh\" />\n              </Button>\n            </Tooltip>\n          </ToolbarItem>\n        </Toolbar>\n      </Box>\n      <Box flex=\"auto\">\n        <BaseTable\n          layout={layout}\n          variant={variant}\n          columns={columns}\n          data={data}\n          tableOptions={tableOptions}\n          tableRef={tableRef}\n        />\n      </Box>\n      <Box flex=\"none\">\n        <TablePagination\n          count={totalCount}\n          onPageChange={(nextPage) => {\n            const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n            tableRef.current.setPageIndex(pageIndex);\n          }}\n          onRowsPerPageChange={(nextRowsPerPage) => {\n            const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n            tableRef.current.setPageSize(pageSize);\n          }}\n        />\n      </Box>\n    </Flex>\n  );\n};\n\nexport default App;",path:"pages/patterns/table-display/index.page.mdx"},sandbox:{files:{"src/components/BaseTable.js":"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Collapse,\n  Flex,\n  Grid,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  TextLabel,\n  useColorMode,\n  useTheme,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\n/**\n * Assign a value to a ref function or object.\n *\n * @param ref the ref to assign to\n * @param value the value\n */\nconst assignRef = (ref, value) => {\n  if (ref === null || ref === undefined) {\n    return;\n  }\n\n  if (typeof ref === 'function') {\n    ref(value);\n    return;\n  }\n\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n};\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nconst BaseTable = forwardRef((\n  {\n    columns,\n    data,\n    layout = 'flexbox', // One of: 'flexbox', 'table'\n    variant = 'default', // One of: 'default', 'outline'\n\n    // TanStack Table\n    tableOptions,\n    tableRef,\n\n    ...rest\n  },\n  ref,\n) => {\n  const [colorMode] = useColorMode();\n  const theme = useTheme();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const selectedBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.08)',\n    light: 'rgba(0, 0, 0, 0.08)',\n  }[colorMode];\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n    const entries = Object.entries(row.original);\n    const renderValue = (value) => {\n      if (Array.isArray(value)) {\n        return value.map(item => <Text key={item}>{item}</Text>);\n      }\n\n      if (typeof value === 'boolean') {\n        return value.toString();\n      }\n\n      return value;\n    };\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          <Grid\n            templateColumns=\"auto auto\"\n            columnGap=\"10x\"\n            rowGap=\"1x\"\n          >\n            {entries.map(([key, value]) => {\n              return (\n                <Fragment key={key}>\n                  <TextLabel>\n                    {key}\n                  </TextLabel>\n                  <Text>\n                    {renderValue(value)}\n                  </Text>\n                </Fragment>\n              );\n            })}\n          </Grid>\n        </Box>\n      </Flex>\n    );\n  };\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    ...tableOptions,\n  });\n\n  if (tableRef) {\n    assignRef(tableRef, table);\n  }\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size += extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0\n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  return (\n    <AutoSizer\n      onResize={({ width }) => {\n        if (tableWidth !== width) {\n          setTableWidth(width);\n        }\n      }}\n    >\n      {({ width, height }) => {\n        return (\n          <Table\n            layout={layout}\n            variant={variant}\n            width={width}\n            height={height}\n            {...rest}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n                    return (\n                      <TableHeaderCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder\n                          ? null\n                          : flexRender(header.column.columnDef.header, header.getContext())\n                        }\n                      </TableHeaderCell>\n                    );\n                  })}\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <ConditionalWrapper\n              condition={layout === 'flexbox'}\n              wrapper={children => (\n                <TableScrollbar\n                  height=\"100%\"\n                  overflow=\"visible\" // Make the scrollbar visible\n                >\n                  {children}\n                </TableScrollbar>\n              )}\n            >\n              <TableBody>\n                {table.getRowModel().rows.map(row => (\n                  <Fragment key={row.id}>\n                    <TableRow\n                      data-selected={dataAttr(row.getIsSelected())}\n                      _hover={{\n                        backgroundColor: hoverBackgroundColor,\n                      }}\n                      _selected={{\n                        backgroundColor: selectedBackgroundColor,\n                      }}\n                    >\n                      {row.getVisibleCells().map(cell => {\n                        const styleProps = {\n                          minWidth: cell.column.columnDef.minSize,\n                          width: cell.column.getSize(),\n                          ...cell.column.columnDef.style,\n                        };\n                        return (\n                          <TableCell\n                            key={cell.id}\n                            {...styleProps}\n                          >\n                            {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                    {(row.getCanExpand() && layout === 'flexbox') && (\n                      <Collapse in={row.getIsExpanded()}>\n                        {renderExpandedRow({ row })}\n                      </Collapse>\n                    )}\n                    {(row.getCanExpand() && layout === 'table') && (\n                      <TableRow>\n                        <TableCell\n                          padding={0}\n                          borderBottom={0}\n                          colSpan={row.getVisibleCells().length}\n                        >\n                          <Collapse in={row.getIsExpanded()}>\n                            {renderExpandedRow({ row })}\n                          </Collapse>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </Fragment>\n                ))}\n              </TableBody>\n            </ConditionalWrapper>\n          </Table>\n        );\n      }}\n    </AutoSizer>\n  );\n});\n\nBaseTable.displayName = 'BaseTable';\n\nexport default BaseTable;","src/components/Dropdown.js":"import {\n  Menu,\n  MenuToggle,\n  MenuItem,\n  MenuList,\n} from '@tonic-ui/react';\nimport { noop } from '@tonic-ui/utils';\nimport { ensureFunction } from 'ensure-type';\nimport React, { forwardRef, useCallback, useEffect, useState } from 'react';\n\nconst Dropdown = forwardRef((\n  {\n    children,\n    highlightSelectedOption = false,\n    options = [],\n    onChange: onChangeProp,\n    renderOption = noop,\n    value: valueProp,\n    ...rest\n  },\n  ref,\n) => {\n  const [value, setValue] = useState(valueProp ?? '');\n\n  useEffect(() => {\n    const isControlled = valueProp !== undefined;\n    if (isControlled) {\n      setValue(valueProp);\n    }\n  }, [valueProp]);\n\n  const onChange = useCallback((nextValue) => {\n    const isControlled = valueProp !== undefined;\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    ensureFunction(onChangeProp)(nextValue);\n  }, [valueProp, onChangeProp]);\n\n  const handleClickMenuItemBy = (value) => (event) => {\n    onChange(value);\n  };\n\n  return (\n    <Menu\n      ref={ref}\n      {...rest}\n    >\n      <MenuToggle>\n        {children}\n      </MenuToggle>\n      <MenuList\n        width=\"max-content\"\n      >\n        {options.map((option) => {\n          const key = option;\n          const isSelected = (value === option);\n\n          return (\n            <MenuItem\n              data-selected={highlightSelectedOption ? isSelected : undefined}\n              key={key}\n              onClick={handleClickMenuItemBy(option)}\n            >\n              {renderOption(option)}\n            </MenuItem>\n          );\n        })}\n      </MenuList>\n    </Menu>\n  );\n});\n\nDropdown.displayName = 'Dropdown';\n\nexport default Dropdown;","src/components/Multiselect.js":"import {\n  Box,\n  Checkbox,\n  CheckboxGroup,\n  LinkButton,\n  Menu,\n  MenuToggle,\n  MenuItem,\n  MenuList,\n  Scrollbar,\n  SearchInput,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { noop } from '@tonic-ui/utils';\nimport { ensureArray, ensureFunction, ensureString } from 'ensure-type';\nimport React, { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\nimport Highlight from 'react-highlight-words';\n\nconst Multiselect = forwardRef((\n  {\n    children,\n    highlightSelectedOption = false,\n    isSearchable = false,\n    options = [],\n    onChange: onChangeProp,\n    renderOption = noop,\n    shouldSelectAllIfNoneSelected = false,\n    value: valueProp,\n    ...rest\n  },\n  ref,\n) => {\n  const searchInputRef = useRef();\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const { colors } = useTheme();\n  const [value, setValue] = useState(ensureArray(valueProp));\n  const [searchString, setSearchString] = useState('');\n\n  useEffect(() => {\n    const isControlled = valueProp !== undefined;\n    if (isControlled) {\n      setValue(ensureArray(valueProp));\n    }\n  }, [valueProp]);\n\n  const onCheckboxGroupChange = useCallback((nextValue) => {\n    setValue(nextValue);\n  }, []);\n\n  const isAllSelected = value.length === options.length;\n  const isNoneSelected = value.length === 0;\n  const handleClickToggle = (event) => {\n    const nextValue = isAllSelected ? [] : options;\n    setValue(nextValue);\n  };\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      const el = event.currentTarget.querySelector('input');\n      if (el) {\n        const nextValue = [...value];\n        nextValue.indexOf(el.value) === -1\n          ? nextValue.push(el.value) // add\n          : nextValue.splice(nextValue.indexOf(el.value), 1); // remove\n        setValue(nextValue);\n      }\n    }\n  }\n\n  const normalizedSearchString = ensureString(searchString).trim().toLowerCase();\n  const filteredOptions = options.filter(option => {\n    if (!normalizedSearchString) {\n      return true;\n    }\n    const normalizedItemString = renderOption(option).trim().toLowerCase();\n    return normalizedItemString.includes(normalizedSearchString);\n  });\n\n  return (\n    <Menu\n      ref={ref}\n      closeOnSelect={false}\n      defaultActiveIndex={0}\n      onClose={() => {\n        if (isNoneSelected && shouldSelectAllIfNoneSelected) {\n          // Automatically reset all the options when the menu loses focus\n          setValue(options);\n          ensureFunction(onChangeProp)(options);\n        } else {\n          ensureFunction(onChangeProp)(value);\n        }\n      }}\n      {...rest}\n    >\n      <MenuToggle>\n        {children}\n      </MenuToggle>\n      <MenuList\n        width=\"max-content\"\n      >\n        {isSearchable && (\n          <Box\n            px=\"3x\"\n            mb=\"2x\"\n          >\n            <SearchInput\n              inputProps={{\n                role: 'menuitem', // Specify \"menuitem\" role for keyboard navigation\n                onKeyDown: (event) => {\n                  const input = event.target;\n                  const {\n                    selectionStart, // the position where the character will be inserted\n                    selectionEnd, // if has a selection this value will be different than the previous\n                    value, // this is the value before the key is added\n                  } = input;\n                  const isAtStart = (selectionStart === 0 && selectionEnd === 0);\n                  const isAtEnd = (selectionStart === value.length && selectionEnd === value.length);\n\n                  if (isAtStart && ['ArrowUp', 'Home'].includes(event.key)) {\n                    return;\n                  }\n                  if (isAtEnd && ['ArrowDown', 'End'].includes(event.key)) {\n                    return;\n                  }\n\n                  // Stop event propagation to menu for specific keys\n                  event.stopPropagation();\n                },\n              }}\n              ref={searchInputRef}\n              value={searchString}\n              onClearInput={(event) => {\n                setSearchString('');\n              }}\n              onChange={(event) => {\n                const value = event.target.value;\n                setSearchString(value);\n              }}\n            />\n          </Box>\n        )}\n        <CheckboxGroup\n          size=\"sm\"\n          value={value}\n          onChange={onCheckboxGroupChange}\n        >\n          {!normalizedSearchString && (\n            <Box\n              px=\"3x\"\n              mb=\"2x\"\n            >\n              <LinkButton\n                key=\"toggle\"\n                onClick={handleClickToggle}\n              >\n                {isAllSelected ? ('Clear all') : ('Select all')}\n              </LinkButton>\n            </Box>\n          )}\n          <Scrollbar\n            maxHeight={250}\n            overflowY=\"auto\"\n          >\n            {filteredOptions.map((option) => {\n              const key = option;\n              const isSelected = value.includes(option);\n\n              return (\n                <MenuItem\n                  data-selected={highlightSelectedOption ? isSelected : undefined}\n                  key={key}\n                  onKeyDown={handleKeyDown}\n                >\n                  <Checkbox\n                    value={option}\n                    width=\"100%\" // Fill the entire width of the menu item to make it easier to click\n                  >\n                    <Highlight\n                      searchWords={[normalizedSearchString]}\n                      textToHighlight={renderOption(option)}\n                      highlightStyle={{\n                        backgroundColor: colors[colorStyle.text.highlight],\n                        color: colors['gray:100'],\n                      }}\n                    />\n                  </Checkbox>\n                </MenuItem>\n              );\n            })}\n          </Scrollbar>\n        </CheckboxGroup>\n      </MenuList>\n    </Menu>\n  );\n});\n\nMultiselect.displayName = 'Multiselect';\n\nexport default Multiselect;","src/components/TablePagination.js":'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Icon,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Space,\n  Text,\n  useColorMode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { ensureArray, ensureNumber } from \'ensure-type\';\nimport React, { useCallback, useEffect, useState } from \'react\';\n\nconst TablePagination = ({\n  count,\n  defaultPage = 1,\n  defaultRowsPerPage: defaultRowsPerPageProp,\n  onPageChange: onPageChangeProp,\n  onRowsPerPageChange: onRowsPerPageChangeProp,\n  page: pageProp,\n  rowsPerPage: rowsPerPageProp,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  showFirstButton = false,\n  showLastButton = false,\n}) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const defaultRowsPerPage = defaultRowsPerPageProp ?? ensureArray(rowsPerPageOptions)[0];\n  const [page, setPage] = useState(pageProp ?? defaultPage);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageProp ?? defaultRowsPerPage);\n\n  useEffect(() => {\n    const isControlled = (pageProp !== undefined);\n    if (isControlled) {\n      setPage(pageProp);\n    }\n  }, [pageProp]);\n\n  useEffect(() => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (isControlled) {\n      setRowsPerPage(rowsPerPageProp);\n    }\n  }, [rowsPerPageProp]);\n\n  const onPageChange = useCallback((nextPage) => {\n    const isControlled = (pageProp !== undefined);\n    if (!isControlled) {\n      setPage(nextPage);\n    }\n\n    if (typeof onPageChangeProp === \'function\') {\n      onPageChangeProp(nextPage);\n    }\n  }, [pageProp, onPageChangeProp]);\n\n  const onRowsPerPageChange = useCallback((nextRowsPerPage) => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (!isControlled) {\n      setRowsPerPage(nextRowsPerPage);\n    }\n\n    if (typeof onRowsPerPageChangeProp === \'function\') {\n      onRowsPerPageChangeProp(nextRowsPerPage);\n    }\n  }, [rowsPerPageProp, onRowsPerPageChangeProp]);\n\n  const totalPages = Math.ceil(count / rowsPerPage);\n  const handlePageChange = (event) => {\n    const nextPage = ensureNumber(event.target.value);\n    if (nextPage <= 1) {\n      onPageChange(1);\n    } else if (nextPage >= totalPages) {\n      onPageChange(totalPages);\n    } else {\n      onPageChange(nextPage);\n    }\n  };\n  const handleRowsPerPageChange = (event) => {\n    const nextRowsPerPage = ensureNumber(event.target.value);\n    if (nextRowsPerPage > 0) {\n      onPageChange(1);\n      onRowsPerPageChange(nextRowsPerPage);\n    }\n  };\n  const canPreviousPage = (page > 1);\n  const canNextPage = (page < totalPages);\n\n  return (\n    <Flex\n      alignItems="center"\n      justifyContent="flex-end"\n      backgroundColor={colorStyle.background.secondary}\n      px="6x"\n      py="3x"\n    >\n      <Text mr="2x">\n        Total: {count}\n      </Text>\n      <Divider\n        orientation="vertical"\n        height="6x"\n      />\n      <Menu>\n        <MenuButton variant="ghost">\n          {rowsPerPage} per page\n        </MenuButton>\n        <MenuList\n          onClick={handleRowsPerPageChange}\n          width="100%"\n        >\n          {rowsPerPageOptions.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n            >\n              {option}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      <Divider\n        orientation="vertical"\n        height="6x"\n      />\n      <Space width="2x" />\n      <Input\n        width="10x"\n        px={0}\n        textAlign="center"\n        onChange={handlePageChange}\n        value={page}\n      />\n      <Space width="2x" />\n      <Text>/</Text>\n      <Space width="2x" />\n      <Text>{totalPages}</Text>\n      <Space width="2x" />\n      <ButtonGroup\n        variant="secondary"\n        sx={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button\n          width="8x"\n          disabled={!canPreviousPage}\n          onClick={(event) => {\n            onPageChange(page - 1);\n          }}\n        >\n          <Icon icon="angle-left" />\n        </Button>\n        <Button\n          width="8x"\n          disabled={!canNextPage}\n          onClick={(event) => {\n            onPageChange(page + 1);\n          }}\n        >\n          <Icon icon="angle-right" />\n        </Button>\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nexport default TablePagination;',"src/components/Toolbar.js":"import {\n  Flex,\n} from '@tonic-ui/react';\nimport React, { forwardRef } from 'react';\n\nconst Toolbar = forwardRef((props, ref) => {\n  const styleProps = {\n    alignItems: 'flex-start',\n    justifyContent: 'space-between',\n    columnGap: '6x',\n  };\n\n  return (\n    <Flex\n      ref={ref}\n      {...styleProps}\n      {...props}\n    />\n  );\n});\n\nToolbar.displayName = 'Toolbar';\n\nexport default Toolbar;","src/components/ToolbarItem.js":"import {\n  Flex,\n} from '@tonic-ui/react';\nimport React, { forwardRef } from 'react';\n\nconst ToolbarItem = forwardRef((props, ref) => {\n  const styleProps = {\n    alignItems: 'center',\n    columnGap: '2x',\n    rowGap: '3x',\n  };\n\n  return (\n    <Flex\n      ref={ref}\n      {...styleProps}\n      {...props}\n    />\n  );\n});\n\nToolbarItem.displayName = 'ToolbarItem';\n\nexport default ToolbarItem;"},raw:"import {\n  getPaginationRowModel,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Divider,\n  Flex,\n  Icon,\n  MenuButton,\n  OverflowTooltip,\n  SearchInput,\n  Text,\n  TextLabel,\n  Tooltip,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureNumber } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport BaseTable from '@/components/BaseTable';\nimport Dropdown from '@/components/Dropdown';\nimport Multiselect from '@/components/Multiselect';\nimport TablePagination from '@/components/TablePagination';\nimport Toolbar from '@/components/Toolbar';\nimport ToolbarItem from '@/components/ToolbarItem';\n\nconst filterMap = (() => {\n  const filterData = [\n    { id: 'all', label: 'All' },\n    ...Array.from({ length: 10 }, (_, i) => ({\n      id: String(i + 1),\n      label: `Option ${i + 1}`,\n    })),\n  ];\n\n  const map = new Map();\n  filterData.forEach((filter) => {\n    // Use the policy ID as the key and ensure it's a string rather than a number\n    const key = String(filter.id);\n    map.set(key, filter);\n  });\n  return map;\n})();\n\nconst filterItems = [...filterMap.keys()];\n\nconst dropdownOptions = [\n  ...filterItems.slice(0, 4),\n];\n\nconst multiselectOptions = [\n  ...filterItems.slice(1),\n];\n\nconst renderDropdownOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};\n\nconst renderDropdownLabel = (value) => {\n  const selectionText = renderDropdownOption(value);\n  return (\n    <>\n      <TextLabel mr=\"2x\">\n        {'Label:'}\n      </TextLabel>\n      <OverflowTooltip label={selectionText}>\n        {selectionText}\n      </OverflowTooltip>\n    </>\n  );\n};\n\nconst renderMultiselectOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};\n\nconst renderMultiselectLabel = (value) => {\n  const selectionCount = value.length;\n  const isNoneSelected = selectionCount === 0;\n  const isAllSelected = selectionCount === multiselectOptions.length;\n\n  if (isNoneSelected) {\n    const selectionText = 'Select';\n    return (\n      <>\n        <TextLabel mr=\"2x\">\n          {'Label:'}\n        </TextLabel>\n        <OverflowTooltip label={selectionText}>\n          {selectionText}\n        </OverflowTooltip>\n      </>\n    );\n  }\n\n  if (isAllSelected) {\n    const selectionText = 'All'; \n    return (\n      <>\n        <TextLabel mr=\"2x\">\n          {'Label:'}\n        </TextLabel>\n        <OverflowTooltip label={selectionText}>\n          {selectionText}\n        </OverflowTooltip>\n      </>\n    );\n  }\n\n  const selectionText = value.map(renderMultiselectOption).join(', ');\n  return (\n    <>\n      <TextLabel mr=\"2x\">\n        {'Label:'}\n      </TextLabel>\n      <OverflowTooltip label={selectionText}>\n        {selectionText}\n      </OverflowTooltip>\n      <Text ml=\"1x\">\n        {`(${selectionCount})`}\n      </Text>\n    </>\n  );\n};\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [dropdownValue, setDropdownValue] = useState(dropdownOptions[0]);\n  const [multiselectValue, setMultiselectValue] = useState(multiselectOptions);\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const [matchedResults] = useState(0);\n\n  const clearFilters = useCallback(() => {\n    setDropdownValue(dropdownOptions[0]);\n    setMultiselectValue(multiselectOptions);\n    setSearchInputValue('');\n  }, []);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 48,\n    },\n    {\n      header: 'Endpoint',\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      accessorKey: 'endpoint',\n      size: 'auto',\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 150,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => {\n        return getValue().toISOString();\n      },\n      size: 200,\n    },\n  ], []);\n\n  const tableRef = useRef();\n\n  const [rowSelection, setRowSelection] = useState({});\n  const [totalCount, setTotalCount] = useState(data.length);\n\n  const tableOptions = useMemo(() => ({\n    defaultColumn: {\n      minSize: 48,\n    },\n    state: {\n      rowSelection,\n    },\n\n    // Pagination\n    getPaginationRowModel: getPaginationRowModel(),\n\n    // Row selection\n    enableRowSelection: row => true, // enable row selection conditionally\n    onRowSelectionChange: setRowSelection,\n  }), [rowSelection]);\n\n  useEffect(() => {\n    const table = tableRef.current;\n    setTotalCount(table ? table.getCoreRowModel().rows.length : 0);\n  }, []);\n\n  const pageHeight = 600;\n\n  const menuButtonWidth = 200;\n  const maxMenuButtonWidth = typeof menuButtonWidth === 'number'\n    ? `calc(${menuButtonWidth}px - 48px)`\n    : `calc(${menuButtonWidth} - 48px)`;\n\n  return (\n    <Flex\n      flexDirection=\"column\"\n      height={pageHeight}\n    >\n      <Box flex=\"none\" mb=\"2x\">\n        <Toolbar>\n          <ToolbarItem flexWrap=\"wrap\">\n            <Button variant=\"primary\">\n              Primary Action\n            </Button>\n            <Divider orientation=\"vertical\" />\n            <Dropdown\n              value={dropdownValue}\n              onChange={setDropdownValue}\n              options={dropdownOptions}\n              renderOption={renderDropdownOption}\n            >\n              <MenuButton\n                variant=\"secondary\"\n                width={menuButtonWidth}\n              >\n                <Flex maxWidth={maxMenuButtonWidth}>\n                  {renderDropdownLabel(dropdownValue)}\n                </Flex>\n              </MenuButton>\n            </Dropdown>\n            <Multiselect\n              isSearchable={true}\n              value={multiselectValue}\n              onChange={setMultiselectValue}\n              options={multiselectOptions}\n              renderOption={renderMultiselectOption}\n            >\n              <MenuButton\n                variant=\"secondary\"\n                width={menuButtonWidth}\n              >\n                <Flex maxWidth={maxMenuButtonWidth}>\n                  {renderMultiselectLabel(multiselectValue)}\n                </Flex>\n              </MenuButton>\n            </Multiselect>\n            <SearchInput\n              placeholder=\"Search\"\n              onChange={(event) => {\n                const { value } = event.target;\n                setSearchInputValue(value);\n              }}\n              onClearInput={() => {\n                setSearchInputValue('');\n              }}\n              value={searchInputValue}\n            />\n            <Button\n              variant=\"ghost\"\n              onClick={() => clearFilters()}\n              sx={{\n                color: colorStyle.color.info,\n                _focus: {\n                  color: colorStyle.color.info,\n                },\n                columnGap: '1x',\n                mr: '3x',\n              }}\n            >\n              <Icon icon=\"close-s\" /> <Text>Clear</Text>\n            </Button>\n            <Flex columnGap=\"1x\">\n              <TextLabel>\n                Matched results:\n              </TextLabel>\n              {matchedResults}\n            </Flex>\n          </ToolbarItem>\n          <ToolbarItem flexWrap=\"nowrap\">\n            <Tooltip label=\"Export\">\n              <Button variant=\"ghost\">\n                <Icon icon=\"export\" />\n              </Button>\n            </Tooltip>\n            <Tooltip label=\"Refresh\">\n              <Button variant=\"ghost\">\n                <Icon icon=\"refresh\" />\n              </Button>\n            </Tooltip>\n          </ToolbarItem>\n        </Toolbar>\n      </Box>\n      <Box flex=\"auto\">\n        <BaseTable\n          layout={layout}\n          variant={variant}\n          columns={columns}\n          data={data}\n          tableOptions={tableOptions}\n          tableRef={tableRef}\n        />\n      </Box>\n      <Box flex=\"none\">\n        <TablePagination\n          count={totalCount}\n          onPageChange={(nextPage) => {\n            const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n            tableRef.current.setPageIndex(pageIndex);\n          }}\n          onRowsPerPageChange={(nextRowsPerPage) => {\n            const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n            tableRef.current.setPageSize(pageSize);\n          }}\n        />\n      </Box>\n    </Flex>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,i.jsxs)(n.h2,{id:"how-it-works",children:["How It Works",(0,i.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-it-works",children:(0,i.jsx)(n.svg,{children:(0,i.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(n.h3,{id:"toolbar",children:["Toolbar",(0,i.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#toolbar",children:(0,i.jsx)(n.svg,{children:(0,i.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(n.p,{children:"The table toolbar provides a set of actions that users can perform on the table. The available actions may vary depending on the data type. The toolbar items are displayed from left to right."}),"\n",(0,i.jsx)(n.p,{children:"The toolbar should never display a vertical scrollbar. The position and width of the right-sided toolbar are fixed."}),"\n",(0,i.jsx)(n.p,{children:"In cases where the screen width is limited, the left-sided toolbar items can wrap to another row. These items may include, but are not limited to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Primary action"}),"\n",(0,i.jsx)(n.li,{children:"Filter"}),"\n",(0,i.jsx)(n.li,{children:"Search input"}),"\n",(0,i.jsx)(n.li,{children:"Reset (optional)"}),"\n",(0,i.jsx)(n.li,{children:"Matched results (optional)"}),"\n"]}),"\n",(0,i.jsx)(c.Z,{component:table_toolbar,file:{data:"import {\n  Button,\n  Divider,\n  Flex,\n  Icon,\n  MenuButton,\n  OverflowTooltip,\n  SearchInput,\n  Text,\n  TextLabel,\n  Tooltip,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useCallback, useState } from 'react';\nimport Dropdown from '@/components/Dropdown';\nimport Multiselect from '@/components/Multiselect';\nimport Toolbar from '@/components/Toolbar';\nimport ToolbarItem from '@/components/ToolbarItem';\n\nconst filterMap = (() => {\n  const filterData = [\n    { id: 'all', label: 'All' },\n    ...Array.from({ length: 10 }, (_, i) => ({\n      id: String(i + 1),\n      label: `Option ${i + 1}`,\n    })),\n  ];\n\n  const map = new Map();\n  filterData.forEach((filter) => {\n    // Use the policy ID as the key and ensure it's a string rather than a number\n    const key = String(filter.id);\n    map.set(key, filter);\n  });\n  return map;\n})();\n\nconst filterItems = [...filterMap.keys()];\n\nconst dropdownOptions = [\n  ...filterItems.slice(0, 4),\n];\n\nconst multiselectItems = [\n  ...filterItems.slice(1),\n];\n\nconst renderDropdownOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};\n\nconst renderDropdownLabel = (value) => {\n  const selectionText = renderDropdownOption(value);\n  return (\n    <>\n      <TextLabel mr=\"2x\">\n        {'Label:'}\n      </TextLabel>\n      <OverflowTooltip label={selectionText}>\n        {selectionText}\n      </OverflowTooltip>\n    </>\n  );\n};\n\nconst renderMultiselectOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};\n\nconst renderMultiselectLabel = (value) => {\n  const selectionCount = value.length;\n  const isNoneSelected = selectionCount === 0;\n  const isAllSelected = selectionCount === multiselectItems.length;\n\n  if (isNoneSelected) {\n    const selectionText = 'Select';\n    return (\n      <>\n        <TextLabel mr=\"2x\">\n          {'Label:'}\n        </TextLabel>\n        <OverflowTooltip label={selectionText}>\n          {selectionText}\n        </OverflowTooltip>\n      </>\n    );\n  }\n\n  if (isAllSelected) {\n    const selectionText = 'All'; \n    return (\n      <>\n        <TextLabel mr=\"2x\">\n          {'Label:'}\n        </TextLabel>\n        <OverflowTooltip label={selectionText}>\n          {selectionText}\n        </OverflowTooltip>\n      </>\n    );\n  }\n\n  const selectionText = value.map(renderMultiselectOption).join(', ');\n  return (\n    <>\n      <TextLabel mr=\"2x\">\n        {'Label:'}\n      </TextLabel>\n      <OverflowTooltip label={selectionText}>\n        {selectionText}\n      </OverflowTooltip>\n      <Text ml=\"1x\">\n        {`(${selectionCount})`}\n      </Text>\n    </>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [dropdownValue, setDropdownValue] = useState(dropdownOptions[0]);\n  const [multiselectValue, setMultiselectValue] = useState(multiselectItems);\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const [matchedResults] = useState(0);\n\n  const clearFilters = useCallback(() => {\n    setDropdownValue(dropdownOptions[0]);\n    setMultiselectValue(multiselectItems);\n    setSearchInputValue('');\n  }, []);\n\n  const menuButtonWidth = 200;\n  const maxMenuButtonWidth = typeof menuButtonWidth === 'number'\n    ? `calc(${menuButtonWidth}px - 48px)`\n    : `calc(${menuButtonWidth} - 48px)`;\n\n  return (\n    <Toolbar>\n      <ToolbarItem flexWrap=\"wrap\">\n        <Button variant=\"primary\">\n          Primary Action\n        </Button>\n        <Divider orientation=\"vertical\" />\n        <Dropdown\n          value={dropdownValue}\n          onChange={setDropdownValue}\n          options={dropdownOptions}\n          renderOption={renderDropdownOption}\n        >\n          <MenuButton\n            variant=\"secondary\"\n            width={menuButtonWidth}\n          >\n            <Flex maxWidth={maxMenuButtonWidth}>\n              {renderDropdownLabel(dropdownValue)}\n            </Flex>\n          </MenuButton>\n        </Dropdown>\n        <Multiselect\n          isSearchable={true}\n          value={multiselectValue}\n          onChange={setMultiselectValue}\n          options={multiselectItems}\n          renderOption={renderMultiselectOption}\n        >\n          <MenuButton\n            variant=\"secondary\"\n            width={menuButtonWidth}\n          >\n            <Flex maxWidth={maxMenuButtonWidth}>\n              {renderMultiselectLabel(multiselectValue)}\n            </Flex>\n          </MenuButton>\n        </Multiselect>\n        <SearchInput\n          placeholder=\"Search\"\n          onChange={(event) => {\n            const { value } = event.target;\n            setSearchInputValue(value);\n          }}\n          onClearInput={() => {\n            setSearchInputValue('');\n          }}\n          value={searchInputValue}\n        />\n        <Button\n          variant=\"ghost\"\n          onClick={() => clearFilters()}\n          sx={{\n            color: colorStyle.color.info,\n            _focus: {\n              color: colorStyle.color.info,\n            },\n            columnGap: '1x',\n            mr: '3x',\n          }}\n        >\n          <Icon icon=\"close-s\" /> <Text>Clear</Text>\n        </Button>\n        <Flex columnGap=\"1x\">\n          <TextLabel>\n            Matched results:\n          </TextLabel>\n          {matchedResults}\n        </Flex>\n      </ToolbarItem>\n      <ToolbarItem flexWrap=\"nowrap\">\n        <Tooltip label=\"Export\">\n          <Button variant=\"ghost\">\n            <Icon icon=\"export\" />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Refresh\">\n          <Button variant=\"ghost\">\n            <Icon icon=\"refresh\" />\n          </Button>\n        </Tooltip>\n      </ToolbarItem>\n    </Toolbar>\n  );\n};\n\nexport default App;",path:"pages/patterns/table-display/index.page.mdx"},sandbox:{files:{"src/components/Dropdown.js":"import {\n  Menu,\n  MenuToggle,\n  MenuItem,\n  MenuList,\n} from '@tonic-ui/react';\nimport { noop } from '@tonic-ui/utils';\nimport { ensureFunction } from 'ensure-type';\nimport React, { forwardRef, useCallback, useEffect, useState } from 'react';\n\nconst Dropdown = forwardRef((\n  {\n    children,\n    highlightSelectedOption = false,\n    options = [],\n    onChange: onChangeProp,\n    renderOption = noop,\n    value: valueProp,\n    ...rest\n  },\n  ref,\n) => {\n  const [value, setValue] = useState(valueProp ?? '');\n\n  useEffect(() => {\n    const isControlled = valueProp !== undefined;\n    if (isControlled) {\n      setValue(valueProp);\n    }\n  }, [valueProp]);\n\n  const onChange = useCallback((nextValue) => {\n    const isControlled = valueProp !== undefined;\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    ensureFunction(onChangeProp)(nextValue);\n  }, [valueProp, onChangeProp]);\n\n  const handleClickMenuItemBy = (value) => (event) => {\n    onChange(value);\n  };\n\n  return (\n    <Menu\n      ref={ref}\n      {...rest}\n    >\n      <MenuToggle>\n        {children}\n      </MenuToggle>\n      <MenuList\n        width=\"max-content\"\n      >\n        {options.map((option) => {\n          const key = option;\n          const isSelected = (value === option);\n\n          return (\n            <MenuItem\n              data-selected={highlightSelectedOption ? isSelected : undefined}\n              key={key}\n              onClick={handleClickMenuItemBy(option)}\n            >\n              {renderOption(option)}\n            </MenuItem>\n          );\n        })}\n      </MenuList>\n    </Menu>\n  );\n});\n\nDropdown.displayName = 'Dropdown';\n\nexport default Dropdown;","src/components/Multiselect.js":"import {\n  Box,\n  Checkbox,\n  CheckboxGroup,\n  LinkButton,\n  Menu,\n  MenuToggle,\n  MenuItem,\n  MenuList,\n  Scrollbar,\n  SearchInput,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { noop } from '@tonic-ui/utils';\nimport { ensureArray, ensureFunction, ensureString } from 'ensure-type';\nimport React, { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\nimport Highlight from 'react-highlight-words';\n\nconst Multiselect = forwardRef((\n  {\n    children,\n    highlightSelectedOption = false,\n    isSearchable = false,\n    options = [],\n    onChange: onChangeProp,\n    renderOption = noop,\n    shouldSelectAllIfNoneSelected = false,\n    value: valueProp,\n    ...rest\n  },\n  ref,\n) => {\n  const searchInputRef = useRef();\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const { colors } = useTheme();\n  const [value, setValue] = useState(ensureArray(valueProp));\n  const [searchString, setSearchString] = useState('');\n\n  useEffect(() => {\n    const isControlled = valueProp !== undefined;\n    if (isControlled) {\n      setValue(ensureArray(valueProp));\n    }\n  }, [valueProp]);\n\n  const onCheckboxGroupChange = useCallback((nextValue) => {\n    setValue(nextValue);\n  }, []);\n\n  const isAllSelected = value.length === options.length;\n  const isNoneSelected = value.length === 0;\n  const handleClickToggle = (event) => {\n    const nextValue = isAllSelected ? [] : options;\n    setValue(nextValue);\n  };\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      const el = event.currentTarget.querySelector('input');\n      if (el) {\n        const nextValue = [...value];\n        nextValue.indexOf(el.value) === -1\n          ? nextValue.push(el.value) // add\n          : nextValue.splice(nextValue.indexOf(el.value), 1); // remove\n        setValue(nextValue);\n      }\n    }\n  }\n\n  const normalizedSearchString = ensureString(searchString).trim().toLowerCase();\n  const filteredOptions = options.filter(option => {\n    if (!normalizedSearchString) {\n      return true;\n    }\n    const normalizedItemString = renderOption(option).trim().toLowerCase();\n    return normalizedItemString.includes(normalizedSearchString);\n  });\n\n  return (\n    <Menu\n      ref={ref}\n      closeOnSelect={false}\n      defaultActiveIndex={0}\n      onClose={() => {\n        if (isNoneSelected && shouldSelectAllIfNoneSelected) {\n          // Automatically reset all the options when the menu loses focus\n          setValue(options);\n          ensureFunction(onChangeProp)(options);\n        } else {\n          ensureFunction(onChangeProp)(value);\n        }\n      }}\n      {...rest}\n    >\n      <MenuToggle>\n        {children}\n      </MenuToggle>\n      <MenuList\n        width=\"max-content\"\n      >\n        {isSearchable && (\n          <Box\n            px=\"3x\"\n            mb=\"2x\"\n          >\n            <SearchInput\n              inputProps={{\n                role: 'menuitem', // Specify \"menuitem\" role for keyboard navigation\n                onKeyDown: (event) => {\n                  const input = event.target;\n                  const {\n                    selectionStart, // the position where the character will be inserted\n                    selectionEnd, // if has a selection this value will be different than the previous\n                    value, // this is the value before the key is added\n                  } = input;\n                  const isAtStart = (selectionStart === 0 && selectionEnd === 0);\n                  const isAtEnd = (selectionStart === value.length && selectionEnd === value.length);\n\n                  if (isAtStart && ['ArrowUp', 'Home'].includes(event.key)) {\n                    return;\n                  }\n                  if (isAtEnd && ['ArrowDown', 'End'].includes(event.key)) {\n                    return;\n                  }\n\n                  // Stop event propagation to menu for specific keys\n                  event.stopPropagation();\n                },\n              }}\n              ref={searchInputRef}\n              value={searchString}\n              onClearInput={(event) => {\n                setSearchString('');\n              }}\n              onChange={(event) => {\n                const value = event.target.value;\n                setSearchString(value);\n              }}\n            />\n          </Box>\n        )}\n        <CheckboxGroup\n          size=\"sm\"\n          value={value}\n          onChange={onCheckboxGroupChange}\n        >\n          {!normalizedSearchString && (\n            <Box\n              px=\"3x\"\n              mb=\"2x\"\n            >\n              <LinkButton\n                key=\"toggle\"\n                onClick={handleClickToggle}\n              >\n                {isAllSelected ? ('Clear all') : ('Select all')}\n              </LinkButton>\n            </Box>\n          )}\n          <Scrollbar\n            maxHeight={250}\n            overflowY=\"auto\"\n          >\n            {filteredOptions.map((option) => {\n              const key = option;\n              const isSelected = value.includes(option);\n\n              return (\n                <MenuItem\n                  data-selected={highlightSelectedOption ? isSelected : undefined}\n                  key={key}\n                  onKeyDown={handleKeyDown}\n                >\n                  <Checkbox\n                    value={option}\n                    width=\"100%\" // Fill the entire width of the menu item to make it easier to click\n                  >\n                    <Highlight\n                      searchWords={[normalizedSearchString]}\n                      textToHighlight={renderOption(option)}\n                      highlightStyle={{\n                        backgroundColor: colors[colorStyle.text.highlight],\n                        color: colors['gray:100'],\n                      }}\n                    />\n                  </Checkbox>\n                </MenuItem>\n              );\n            })}\n          </Scrollbar>\n        </CheckboxGroup>\n      </MenuList>\n    </Menu>\n  );\n});\n\nMultiselect.displayName = 'Multiselect';\n\nexport default Multiselect;","src/components/Toolbar.js":"import {\n  Flex,\n} from '@tonic-ui/react';\nimport React, { forwardRef } from 'react';\n\nconst Toolbar = forwardRef((props, ref) => {\n  const styleProps = {\n    alignItems: 'flex-start',\n    justifyContent: 'space-between',\n    columnGap: '6x',\n  };\n\n  return (\n    <Flex\n      ref={ref}\n      {...styleProps}\n      {...props}\n    />\n  );\n});\n\nToolbar.displayName = 'Toolbar';\n\nexport default Toolbar;","src/components/ToolbarItem.js":"import {\n  Flex,\n} from '@tonic-ui/react';\nimport React, { forwardRef } from 'react';\n\nconst ToolbarItem = forwardRef((props, ref) => {\n  const styleProps = {\n    alignItems: 'center',\n    columnGap: '2x',\n    rowGap: '3x',\n  };\n\n  return (\n    <Flex\n      ref={ref}\n      {...styleProps}\n      {...props}\n    />\n  );\n});\n\nToolbarItem.displayName = 'ToolbarItem';\n\nexport default ToolbarItem;"},raw:"import {\n  Button,\n  Divider,\n  Flex,\n  Icon,\n  MenuButton,\n  OverflowTooltip,\n  SearchInput,\n  Text,\n  TextLabel,\n  Tooltip,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useCallback, useState } from 'react';\nimport Dropdown from '@/components/Dropdown';\nimport Multiselect from '@/components/Multiselect';\nimport Toolbar from '@/components/Toolbar';\nimport ToolbarItem from '@/components/ToolbarItem';\n\nconst filterMap = (() => {\n  const filterData = [\n    { id: 'all', label: 'All' },\n    ...Array.from({ length: 10 }, (_, i) => ({\n      id: String(i + 1),\n      label: `Option ${i + 1}`,\n    })),\n  ];\n\n  const map = new Map();\n  filterData.forEach((filter) => {\n    // Use the policy ID as the key and ensure it's a string rather than a number\n    const key = String(filter.id);\n    map.set(key, filter);\n  });\n  return map;\n})();\n\nconst filterItems = [...filterMap.keys()];\n\nconst dropdownOptions = [\n  ...filterItems.slice(0, 4),\n];\n\nconst multiselectItems = [\n  ...filterItems.slice(1),\n];\n\nconst renderDropdownOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};\n\nconst renderDropdownLabel = (value) => {\n  const selectionText = renderDropdownOption(value);\n  return (\n    <>\n      <TextLabel mr=\"2x\">\n        {'Label:'}\n      </TextLabel>\n      <OverflowTooltip label={selectionText}>\n        {selectionText}\n      </OverflowTooltip>\n    </>\n  );\n};\n\nconst renderMultiselectOption = (value) => {\n  const filter = filterMap.get(value);\n  return filter?.label;\n};\n\nconst renderMultiselectLabel = (value) => {\n  const selectionCount = value.length;\n  const isNoneSelected = selectionCount === 0;\n  const isAllSelected = selectionCount === multiselectItems.length;\n\n  if (isNoneSelected) {\n    const selectionText = 'Select';\n    return (\n      <>\n        <TextLabel mr=\"2x\">\n          {'Label:'}\n        </TextLabel>\n        <OverflowTooltip label={selectionText}>\n          {selectionText}\n        </OverflowTooltip>\n      </>\n    );\n  }\n\n  if (isAllSelected) {\n    const selectionText = 'All'; \n    return (\n      <>\n        <TextLabel mr=\"2x\">\n          {'Label:'}\n        </TextLabel>\n        <OverflowTooltip label={selectionText}>\n          {selectionText}\n        </OverflowTooltip>\n      </>\n    );\n  }\n\n  const selectionText = value.map(renderMultiselectOption).join(', ');\n  return (\n    <>\n      <TextLabel mr=\"2x\">\n        {'Label:'}\n      </TextLabel>\n      <OverflowTooltip label={selectionText}>\n        {selectionText}\n      </OverflowTooltip>\n      <Text ml=\"1x\">\n        {`(${selectionCount})`}\n      </Text>\n    </>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [dropdownValue, setDropdownValue] = useState(dropdownOptions[0]);\n  const [multiselectValue, setMultiselectValue] = useState(multiselectItems);\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const [matchedResults] = useState(0);\n\n  const clearFilters = useCallback(() => {\n    setDropdownValue(dropdownOptions[0]);\n    setMultiselectValue(multiselectItems);\n    setSearchInputValue('');\n  }, []);\n\n  const menuButtonWidth = 200;\n  const maxMenuButtonWidth = typeof menuButtonWidth === 'number'\n    ? `calc(${menuButtonWidth}px - 48px)`\n    : `calc(${menuButtonWidth} - 48px)`;\n\n  return (\n    <Toolbar>\n      <ToolbarItem flexWrap=\"wrap\">\n        <Button variant=\"primary\">\n          Primary Action\n        </Button>\n        <Divider orientation=\"vertical\" />\n        <Dropdown\n          value={dropdownValue}\n          onChange={setDropdownValue}\n          options={dropdownOptions}\n          renderOption={renderDropdownOption}\n        >\n          <MenuButton\n            variant=\"secondary\"\n            width={menuButtonWidth}\n          >\n            <Flex maxWidth={maxMenuButtonWidth}>\n              {renderDropdownLabel(dropdownValue)}\n            </Flex>\n          </MenuButton>\n        </Dropdown>\n        <Multiselect\n          isSearchable={true}\n          value={multiselectValue}\n          onChange={setMultiselectValue}\n          options={multiselectItems}\n          renderOption={renderMultiselectOption}\n        >\n          <MenuButton\n            variant=\"secondary\"\n            width={menuButtonWidth}\n          >\n            <Flex maxWidth={maxMenuButtonWidth}>\n              {renderMultiselectLabel(multiselectValue)}\n            </Flex>\n          </MenuButton>\n        </Multiselect>\n        <SearchInput\n          placeholder=\"Search\"\n          onChange={(event) => {\n            const { value } = event.target;\n            setSearchInputValue(value);\n          }}\n          onClearInput={() => {\n            setSearchInputValue('');\n          }}\n          value={searchInputValue}\n        />\n        <Button\n          variant=\"ghost\"\n          onClick={() => clearFilters()}\n          sx={{\n            color: colorStyle.color.info,\n            _focus: {\n              color: colorStyle.color.info,\n            },\n            columnGap: '1x',\n            mr: '3x',\n          }}\n        >\n          <Icon icon=\"close-s\" /> <Text>Clear</Text>\n        </Button>\n        <Flex columnGap=\"1x\">\n          <TextLabel>\n            Matched results:\n          </TextLabel>\n          {matchedResults}\n        </Flex>\n      </ToolbarItem>\n      <ToolbarItem flexWrap=\"nowrap\">\n        <Tooltip label=\"Export\">\n          <Button variant=\"ghost\">\n            <Icon icon=\"export\" />\n          </Button>\n        </Tooltip>\n        <Tooltip label=\"Refresh\">\n          <Button variant=\"ghost\">\n            <Icon icon=\"refresh\" />\n          </Button>\n        </Tooltip>\n      </ToolbarItem>\n    </Toolbar>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,i.jsx)(n.p,{children:'When there are more than 5 filters, consider using an "Advanced filter" option. The filter options can be modified by clicking the corresponding icon. Stacked filter tags should be used when the screen width is limited.'}),"\n",(0,i.jsx)(c.Z,{component:advanced_filter,file:{data:"import {\n  Button,\n  Flex,\n  Icon,\n  Menu,\n  MenuToggle,\n  MenuItem,\n  MenuList,\n  SearchInput,\n  Text,\n} from '@tonic-ui/react';\nimport React, { Fragment, useCallback, useMemo, useState } from 'react';\nimport FilterButton from './components/FilterButton';\nimport DropdownFilterTag from './components/DropdownFilterTag';\nimport MultiselectFilterTag from './components/MultiselectFilterTag';\nimport InputFilterTag from './components/InputFilterTag';\n\nconst App = () => {\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const allFilters = useMemo(() => [\n    {\n      id: 'deviceType',\n      name: 'Device type',\n      render: (props) => (\n        <DropdownFilterTag\n          {...props}\n          label={'Device type:'}\n          options={[\n            { value: 'desktop', label: 'Desktop' },\n            { value: 'server', label: 'Server' },\n          ]}\n        />\n      ),\n    },\n    {\n      id: 'displayName',\n      name: 'Display name',\n      render: (props) => (\n        <InputFilterTag\n          {...props}\n          label={'Display name:'}\n          inputProps={{\n            placeholder: 'Specify display name',\n            maxLength: 256,\n          }}\n        />\n      ),\n    },\n    {\n      id: 'osType',\n      name: 'OS type',\n      render: (props) => (\n        <MultiselectFilterTag\n          {...props}\n          label={'OS type:'}\n          options={[\n            { value: 'windows', label: 'Windows' },\n            { value: 'macos', label: 'macOS' },\n            { value: 'linux', label: 'Linux' },\n          ]}\n        />\n      ),\n    },\n  ], []);\n\n  const [selectedFilters, setSelectedFilters] = useState([]);\n  const unselectedFilters = useMemo(() => {\n    const selectedFilterIds = selectedFilters.map(({ id }) => id);\n    return allFilters.filter((filter) => !selectedFilterIds.includes(filter.id));\n  }, [allFilters, selectedFilters]);\n\n  const clearSelectedFilters = useCallback(() => {\n    setSelectedFilters([]);\n  }, []);\n\n  return (\n    <Flex\n      flexWrap=\"wrap\"\n      alignItems=\"center\"\n      columnGap=\"2x\"\n      rowGap=\"3x\"\n    >\n      <SearchInput\n        placeholder=\"Search\"\n        onChange={(event) => {\n          const { value } = event.target;\n          setSearchInputValue(value);\n        }}\n        onClearInput={() => {\n          setSearchInputValue('');\n        }}\n        value={searchInputValue}\n      />\n      <Menu\n        returnFocusOnClose={false}\n      >\n        <MenuToggle\n          disabled={unselectedFilters.length === 0}\n        >\n          {({ getMenuToggleProps }) => (\n            <Button\n              {...getMenuToggleProps()}\n              variant=\"secondary\"\n              width=\"8x\"\n              height=\"8x\"\n            >\n              <Icon icon=\"filter\" />\n            </Button>\n          )}\n        </MenuToggle>\n        <MenuList width=\"max-content\">\n          {unselectedFilters.map((filter) => (\n            <MenuItem\n              key={filter.id}\n              onClick={() => {\n                setSelectedFilters((prevSelectedFilters) => {\n                  return [...prevSelectedFilters, filter];\n                });\n              }}\n            >\n              {filter.name}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      {selectedFilters.map((filter) => {\n        return (\n          <Fragment key={filter.id}>\n            {filter.render({\n              value: filter.value,\n              onChange: (value) => {\n                setSelectedFilters((prevSelectedFilters) => {\n                  return prevSelectedFilters.map(prevSelectedFilter => {\n                    if (prevSelectedFilter.id !== filter.id) {\n                      return prevSelectedFilter;\n                    }\n                    return {\n                      ...prevSelectedFilter,\n                      value: value,\n                    };\n                  });\n                });\n              },\n              onClose: () => {\n                setSelectedFilters((prevSelectedFilters) => {\n                  return prevSelectedFilters.filter(\n                    (prevSelectedFilter) => prevSelectedFilter.id !== filter.id\n                  );\n                });\n              },\n            })}\n          </Fragment>\n        );\n      })}\n      {(selectedFilters.length > 0) && (\n        <FilterButton\n          columnGap=\"1x\"\n          onClick={() => clearSelectedFilters()}\n        >\n          <Icon icon=\"filter-delete\" /> <Text>Clear</Text>\n        </FilterButton>\n      )}\n    </Flex>\n  );\n};\n\nexport default App;",path:"pages/patterns/table-display/index.page.mdx"},sandbox:{files:{"src/pages/patterns/table-display/components/FilterButton.js":"import {\n  Button,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { forwardRef } from 'react';\n\nconst FilterButton = forwardRef((props, ref) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      sx={{\n        color: colorStyle.color.info,\n        _focus: {\n          color: colorStyle.color.info,\n        },\n      }}\n      {...props}\n    />\n  );\n});\n\nFilterButton.displayName = 'FilterButton';\n\nexport default FilterButton;","src/pages/patterns/table-display/components/DropdownFilterTag.js":"import {\n  Flex,\n  OverflowTooltip,\n  Text,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureFunction } from 'ensure-type';\nimport React, { useMemo, useRef } from 'react';\nimport Dropdown from '@/components/Dropdown';\nimport FilterTag from '@/pages/patterns/table-display/components/FilterTag';\n\nconst DropdownFilterTag = ({\n  label,\n  options: optionsProp,\n  value: valueProp = null,\n  onChange: onChangeProp,\n  onClose: onCloseProp,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const hasChangedValueRef = useRef(false);\n  const options = useMemo(() => {\n    return optionsProp.map(option => option.value);\n  }, [optionsProp]);\n  const optionMap = useMemo(() => {\n    return optionsProp.reduce((acc, option) => {\n      acc[option.value] = option;\n      return acc;\n    }, {});\n  }, [optionsProp]);\n\n  return (\n    <Dropdown\n      defaultIsOpen={!valueProp}\n      options={options}\n      offset={[0, 4]}\n      onChange={(value) => {\n        // The onChange callback will only be triggered when an option is selected\n        hasChangedValueRef.current = !!value;\n        onChangeProp(value);\n      }}\n      onClose={() => {\n        if (!valueProp && !hasChangedValueRef.current) {\n          ensureFunction(onCloseProp)();\n        }\n        hasChangedValueRef.current = false;\n      }}\n      renderOption={(value) => optionMap[value]?.label}\n      value={valueProp}\n    >\n      <FilterTag\n        onClose={(event) => {\n          event.stopPropagation();\n          ensureFunction(onCloseProp)();\n        }}\n      >\n        <Flex columnGap=\"1x\">\n          <Text color={colorStyle.color.secondary}>\n            {label}\n          </Text>\n          <OverflowTooltip label={valueProp}>\n            {valueProp}\n          </OverflowTooltip>\n        </Flex>\n      </FilterTag>\n    </Dropdown>\n  );\n};\n\nDropdownFilterTag.displayName = 'DropdownFilterTag';\n\nexport default DropdownFilterTag;","src/components/Dropdown.js":"import {\n  Menu,\n  MenuToggle,\n  MenuItem,\n  MenuList,\n} from '@tonic-ui/react';\nimport { noop } from '@tonic-ui/utils';\nimport { ensureFunction } from 'ensure-type';\nimport React, { forwardRef, useCallback, useEffect, useState } from 'react';\n\nconst Dropdown = forwardRef((\n  {\n    children,\n    highlightSelectedOption = false,\n    options = [],\n    onChange: onChangeProp,\n    renderOption = noop,\n    value: valueProp,\n    ...rest\n  },\n  ref,\n) => {\n  const [value, setValue] = useState(valueProp ?? '');\n\n  useEffect(() => {\n    const isControlled = valueProp !== undefined;\n    if (isControlled) {\n      setValue(valueProp);\n    }\n  }, [valueProp]);\n\n  const onChange = useCallback((nextValue) => {\n    const isControlled = valueProp !== undefined;\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    ensureFunction(onChangeProp)(nextValue);\n  }, [valueProp, onChangeProp]);\n\n  const handleClickMenuItemBy = (value) => (event) => {\n    onChange(value);\n  };\n\n  return (\n    <Menu\n      ref={ref}\n      {...rest}\n    >\n      <MenuToggle>\n        {children}\n      </MenuToggle>\n      <MenuList\n        width=\"max-content\"\n      >\n        {options.map((option) => {\n          const key = option;\n          const isSelected = (value === option);\n\n          return (\n            <MenuItem\n              data-selected={highlightSelectedOption ? isSelected : undefined}\n              key={key}\n              onClick={handleClickMenuItemBy(option)}\n            >\n              {renderOption(option)}\n            </MenuItem>\n          );\n        })}\n      </MenuList>\n    </Menu>\n  );\n});\n\nDropdown.displayName = 'Dropdown';\n\nexport default Dropdown;","src/pages/patterns/table-display/components/FilterTag.js":"import {\n  Tag,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React, { forwardRef } from 'react';\n\nconst FilterTag = forwardRef((\n  {\n    disabled,\n    ...rest\n  },\n  ref,\n) => {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'gray:60',\n    light: 'gray:40',\n  }[colorMode];\n  const styleProps = {\n    borderRadius: '.75rem',\n    cursor: 'pointer',\n    _hover: {\n      backgroundColor: hoverBackgroundColor,\n    },\n    _disabled: {\n      cursor: 'not-allowed',\n      userSelect: 'none',\n    },\n  };\n\n  return (\n    <Tag\n      disabled={disabled}\n      isClosable\n      tabIndex={disabled ? undefined : 0}\n      sx={styleProps}\n      {...rest}\n    />\n  );\n});\n\nFilterTag.displayName = 'FilterTag';\n\nexport default FilterTag;","src/pages/patterns/table-display/components/MultiselectFilterTag.js":"import {\n  Flex,\n  OverflowTooltip,\n  Text,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureFunction } from 'ensure-type';\nimport React, { useMemo } from 'react';\nimport Multiselect from '@/components/Multiselect';\nimport FilterTag from '@/pages/patterns/table-display/components/FilterTag';\n\nconst MultiselectFilterTag = ({\n  label,\n  options: optionsProp,\n  value: valueProp = null,\n  onChange: onChangeProp,\n  onClose: onCloseProp,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const options = useMemo(() => {\n    return optionsProp.map(option => option.value);\n  }, [optionsProp]);\n  const optionMap = useMemo(() => {\n    return optionsProp.reduce((acc, option) => {\n      acc[option.value] = option;\n      return acc;\n    }, {});\n  }, [optionsProp]);\n\n  return (\n    <Multiselect\n      isSearchable\n      defaultIsOpen={Array.isArray(valueProp) ? valueProp.length === 0 : !valueProp}\n      options={options}\n      offset={[0, 4]}\n      onChange={(value) => {\n        // The onChange callback will be triggered every time, regardless of whether an option was selected or not\n        onChangeProp(value);\n\n        if (value.length === 0) {\n          ensureFunction(onCloseProp)();\n        }\n      }}\n      renderOption={(value) => optionMap[value]?.label}\n      shouldSelectAllIfNoneSelected={false}\n      value={valueProp}\n    >\n      <FilterTag\n        onClose={(event) => {\n          event.stopPropagation();\n          ensureFunction(onCloseProp)();\n        }}\n      >\n        <Flex columnGap=\"1x\">\n          <Text color={colorStyle.color.secondary}>\n            {label}\n          </Text>\n          <OverflowTooltip label={valueProp}>\n            {Array.isArray(valueProp) ? valueProp.map(value => optionMap[value]?.label).join(', ') : optionMap[valueProp]}\n          </OverflowTooltip>\n        </Flex>\n      </FilterTag>\n    </Multiselect>\n  );\n};\n\nMultiselectFilterTag.displayName = 'MultiselectFilterTag';\n\nexport default MultiselectFilterTag;","src/components/Multiselect.js":"import {\n  Box,\n  Checkbox,\n  CheckboxGroup,\n  LinkButton,\n  Menu,\n  MenuToggle,\n  MenuItem,\n  MenuList,\n  Scrollbar,\n  SearchInput,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { noop } from '@tonic-ui/utils';\nimport { ensureArray, ensureFunction, ensureString } from 'ensure-type';\nimport React, { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\nimport Highlight from 'react-highlight-words';\n\nconst Multiselect = forwardRef((\n  {\n    children,\n    highlightSelectedOption = false,\n    isSearchable = false,\n    options = [],\n    onChange: onChangeProp,\n    renderOption = noop,\n    shouldSelectAllIfNoneSelected = false,\n    value: valueProp,\n    ...rest\n  },\n  ref,\n) => {\n  const searchInputRef = useRef();\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const { colors } = useTheme();\n  const [value, setValue] = useState(ensureArray(valueProp));\n  const [searchString, setSearchString] = useState('');\n\n  useEffect(() => {\n    const isControlled = valueProp !== undefined;\n    if (isControlled) {\n      setValue(ensureArray(valueProp));\n    }\n  }, [valueProp]);\n\n  const onCheckboxGroupChange = useCallback((nextValue) => {\n    setValue(nextValue);\n  }, []);\n\n  const isAllSelected = value.length === options.length;\n  const isNoneSelected = value.length === 0;\n  const handleClickToggle = (event) => {\n    const nextValue = isAllSelected ? [] : options;\n    setValue(nextValue);\n  };\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      const el = event.currentTarget.querySelector('input');\n      if (el) {\n        const nextValue = [...value];\n        nextValue.indexOf(el.value) === -1\n          ? nextValue.push(el.value) // add\n          : nextValue.splice(nextValue.indexOf(el.value), 1); // remove\n        setValue(nextValue);\n      }\n    }\n  }\n\n  const normalizedSearchString = ensureString(searchString).trim().toLowerCase();\n  const filteredOptions = options.filter(option => {\n    if (!normalizedSearchString) {\n      return true;\n    }\n    const normalizedItemString = renderOption(option).trim().toLowerCase();\n    return normalizedItemString.includes(normalizedSearchString);\n  });\n\n  return (\n    <Menu\n      ref={ref}\n      closeOnSelect={false}\n      defaultActiveIndex={0}\n      onClose={() => {\n        if (isNoneSelected && shouldSelectAllIfNoneSelected) {\n          // Automatically reset all the options when the menu loses focus\n          setValue(options);\n          ensureFunction(onChangeProp)(options);\n        } else {\n          ensureFunction(onChangeProp)(value);\n        }\n      }}\n      {...rest}\n    >\n      <MenuToggle>\n        {children}\n      </MenuToggle>\n      <MenuList\n        width=\"max-content\"\n      >\n        {isSearchable && (\n          <Box\n            px=\"3x\"\n            mb=\"2x\"\n          >\n            <SearchInput\n              inputProps={{\n                role: 'menuitem', // Specify \"menuitem\" role for keyboard navigation\n                onKeyDown: (event) => {\n                  const input = event.target;\n                  const {\n                    selectionStart, // the position where the character will be inserted\n                    selectionEnd, // if has a selection this value will be different than the previous\n                    value, // this is the value before the key is added\n                  } = input;\n                  const isAtStart = (selectionStart === 0 && selectionEnd === 0);\n                  const isAtEnd = (selectionStart === value.length && selectionEnd === value.length);\n\n                  if (isAtStart && ['ArrowUp', 'Home'].includes(event.key)) {\n                    return;\n                  }\n                  if (isAtEnd && ['ArrowDown', 'End'].includes(event.key)) {\n                    return;\n                  }\n\n                  // Stop event propagation to menu for specific keys\n                  event.stopPropagation();\n                },\n              }}\n              ref={searchInputRef}\n              value={searchString}\n              onClearInput={(event) => {\n                setSearchString('');\n              }}\n              onChange={(event) => {\n                const value = event.target.value;\n                setSearchString(value);\n              }}\n            />\n          </Box>\n        )}\n        <CheckboxGroup\n          size=\"sm\"\n          value={value}\n          onChange={onCheckboxGroupChange}\n        >\n          {!normalizedSearchString && (\n            <Box\n              px=\"3x\"\n              mb=\"2x\"\n            >\n              <LinkButton\n                key=\"toggle\"\n                onClick={handleClickToggle}\n              >\n                {isAllSelected ? ('Clear all') : ('Select all')}\n              </LinkButton>\n            </Box>\n          )}\n          <Scrollbar\n            maxHeight={250}\n            overflowY=\"auto\"\n          >\n            {filteredOptions.map((option) => {\n              const key = option;\n              const isSelected = value.includes(option);\n\n              return (\n                <MenuItem\n                  data-selected={highlightSelectedOption ? isSelected : undefined}\n                  key={key}\n                  onKeyDown={handleKeyDown}\n                >\n                  <Checkbox\n                    value={option}\n                    width=\"100%\" // Fill the entire width of the menu item to make it easier to click\n                  >\n                    <Highlight\n                      searchWords={[normalizedSearchString]}\n                      textToHighlight={renderOption(option)}\n                      highlightStyle={{\n                        backgroundColor: colors[colorStyle.text.highlight],\n                        color: colors['gray:100'],\n                      }}\n                    />\n                  </Checkbox>\n                </MenuItem>\n              );\n            })}\n          </Scrollbar>\n        </CheckboxGroup>\n      </MenuList>\n    </Menu>\n  );\n});\n\nMultiselect.displayName = 'Multiselect';\n\nexport default Multiselect;","src/pages/patterns/table-display/components/InputFilterTag.js":"import {\n  Box,\n  Button,\n  Flex,\n  Input,\n  OverflowTooltip,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  Text,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  callEventHandlers,\n} from '@tonic-ui/utils';\nimport { ensureFunction } from 'ensure-type';\nimport FilterTag from '@/pages/patterns/table-display/components/FilterTag';\nimport React, { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\n\nconst InputFilterTag = forwardRef((\n  {\n    label,\n    value: valueProp = '',\n    onChange: onChangeProp,\n    onClose: onCloseProp,\n    inputProps,\n    ...rest\n  },\n  ref,\n) => {\n  const isApplyButtonClickedRef = useRef(false);\n  const inputRef = useRef(null);\n  const [inputValue, setInputValue] = useState(valueProp ?? '');\n  const [colorStyle] = useColorStyle();\n\n  const handleInputChange = useCallback((event) => {\n    setInputValue(event.target.value);\n  }, []);\n\n  const handleClickApplyButton = useCallback(() => {\n    ensureFunction(onChangeProp)(inputValue);\n\n    isApplyButtonClickedRef.current = true;\n\n    // Remove the focus from activeElement to close the popover\n    if (document.activeElement) {\n      document.activeElement.blur();\n    }\n  }, [inputValue, onChangeProp]);\n\n  useEffect(() => {\n    // Ensure the input field is focused when it is displayed\n    const timeoutId = setTimeout(() => {\n      const el = inputRef.current;\n      el && el.focus();\n    }, 100);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, []);\n\n  return (\n    <Popover\n      arrow={false}\n      defaultIsOpen={!valueProp}\n      initialFocusRef={inputRef}\n      offset={[0, 4]}\n      onClose={() => {\n        // Handle the case when the user never clicked the apply button\n        if (!isApplyButtonClickedRef.current) {\n          if (!valueProp) {\n            // If the valueProp is empty, then we should close the popover\n            ensureFunction(onCloseProp)();\n          } else {\n            // If the valueProp is not empty, then we should reset the input value\n            setInputValue(valueProp);\n          }\n        }\n\n        isApplyButtonClickedRef.current = false;\n      }}\n      returnFocusOnClose={false}\n    >\n      <PopoverTrigger\n        shouldWrapChildren\n      >\n        <FilterTag\n          onClose={(event) => {\n            event.stopPropagation();\n            ensureFunction(onCloseProp)();\n          }}\n        >\n          <Flex columnGap=\"1x\">\n            <Text color={colorStyle.color.secondary}>\n              {label}\n            </Text>\n            <OverflowTooltip label={valueProp}>\n              {valueProp}\n            </OverflowTooltip>\n          </Flex>\n        </FilterTag>\n      </PopoverTrigger>\n      <PopoverContent\n        PopperProps={{\n          usePortal: true,\n        }}\n      >\n        <Box mb=\"2x\">\n          <Input\n            {...inputProps}\n            ref={inputRef}\n            value={inputValue}\n            onChange={callEventHandlers(inputProps.onChange, handleInputChange)}\n          />\n        </Box>\n        <Box>\n          <Button\n            disabled={!inputValue}\n            variant=\"primary\"\n            size=\"sm\"\n            onClick={handleClickApplyButton}\n          >\n            Apply\n          </Button>\n        </Box>\n      </PopoverContent>\n    </Popover>\n  );\n});\n\nInputFilterTag.displayName = 'InputFilterTag';\n\nexport default InputFilterTag;"},raw:"import {\n  Button,\n  Flex,\n  Icon,\n  Menu,\n  MenuToggle,\n  MenuItem,\n  MenuList,\n  SearchInput,\n  Text,\n} from '@tonic-ui/react';\nimport React, { Fragment, useCallback, useMemo, useState } from 'react';\nimport FilterButton from '@/pages/patterns/table-display/components/FilterButton';\nimport DropdownFilterTag from '@/pages/patterns/table-display/components/DropdownFilterTag';\nimport MultiselectFilterTag from '@/pages/patterns/table-display/components/MultiselectFilterTag';\nimport InputFilterTag from '@/pages/patterns/table-display/components/InputFilterTag';\n\nconst App = () => {\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const allFilters = useMemo(() => [\n    {\n      id: 'deviceType',\n      name: 'Device type',\n      render: (props) => (\n        <DropdownFilterTag\n          {...props}\n          label={'Device type:'}\n          options={[\n            { value: 'desktop', label: 'Desktop' },\n            { value: 'server', label: 'Server' },\n          ]}\n        />\n      ),\n    },\n    {\n      id: 'displayName',\n      name: 'Display name',\n      render: (props) => (\n        <InputFilterTag\n          {...props}\n          label={'Display name:'}\n          inputProps={{\n            placeholder: 'Specify display name',\n            maxLength: 256,\n          }}\n        />\n      ),\n    },\n    {\n      id: 'osType',\n      name: 'OS type',\n      render: (props) => (\n        <MultiselectFilterTag\n          {...props}\n          label={'OS type:'}\n          options={[\n            { value: 'windows', label: 'Windows' },\n            { value: 'macos', label: 'macOS' },\n            { value: 'linux', label: 'Linux' },\n          ]}\n        />\n      ),\n    },\n  ], []);\n\n  const [selectedFilters, setSelectedFilters] = useState([]);\n  const unselectedFilters = useMemo(() => {\n    const selectedFilterIds = selectedFilters.map(({ id }) => id);\n    return allFilters.filter((filter) => !selectedFilterIds.includes(filter.id));\n  }, [allFilters, selectedFilters]);\n\n  const clearSelectedFilters = useCallback(() => {\n    setSelectedFilters([]);\n  }, []);\n\n  return (\n    <Flex\n      flexWrap=\"wrap\"\n      alignItems=\"center\"\n      columnGap=\"2x\"\n      rowGap=\"3x\"\n    >\n      <SearchInput\n        placeholder=\"Search\"\n        onChange={(event) => {\n          const { value } = event.target;\n          setSearchInputValue(value);\n        }}\n        onClearInput={() => {\n          setSearchInputValue('');\n        }}\n        value={searchInputValue}\n      />\n      <Menu\n        returnFocusOnClose={false}\n      >\n        <MenuToggle\n          disabled={unselectedFilters.length === 0}\n        >\n          {({ getMenuToggleProps }) => (\n            <Button\n              {...getMenuToggleProps()}\n              variant=\"secondary\"\n              width=\"8x\"\n              height=\"8x\"\n            >\n              <Icon icon=\"filter\" />\n            </Button>\n          )}\n        </MenuToggle>\n        <MenuList width=\"max-content\">\n          {unselectedFilters.map((filter) => (\n            <MenuItem\n              key={filter.id}\n              onClick={() => {\n                setSelectedFilters((prevSelectedFilters) => {\n                  return [...prevSelectedFilters, filter];\n                });\n              }}\n            >\n              {filter.name}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      {selectedFilters.map((filter) => {\n        return (\n          <Fragment key={filter.id}>\n            {filter.render({\n              value: filter.value,\n              onChange: (value) => {\n                setSelectedFilters((prevSelectedFilters) => {\n                  return prevSelectedFilters.map(prevSelectedFilter => {\n                    if (prevSelectedFilter.id !== filter.id) {\n                      return prevSelectedFilter;\n                    }\n                    return {\n                      ...prevSelectedFilter,\n                      value: value,\n                    };\n                  });\n                });\n              },\n              onClose: () => {\n                setSelectedFilters((prevSelectedFilters) => {\n                  return prevSelectedFilters.filter(\n                    (prevSelectedFilter) => prevSelectedFilter.id !== filter.id\n                  );\n                });\n              },\n            })}\n          </Fragment>\n        );\n      })}\n      {(selectedFilters.length > 0) && (\n        <FilterButton\n          columnGap=\"1x\"\n          onClick={() => clearSelectedFilters()}\n        >\n          <Icon icon=\"filter-delete\" /> <Text>Clear</Text>\n        </FilterButton>\n      )}\n    </Flex>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,i.jsxs)(n.h3,{id:"data",children:["Data",(0,i.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#data",children:(0,i.jsx)(n.svg,{children:(0,i.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(n.p,{children:"It is recommended to display all columns of the table. However, in certain scenarios, vertical scrolling may be necessary. For tables with rich data columns, you can utilize expandable table rows to accommodate the additional content."}),"\n",(0,i.jsx)(c.Z,{component:expandable_table_rows,file:{data:"import {\n  getExpandedRowModel,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  ButtonBase,\n  Divider,\n  Icon,\n  Text,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  createTransitionStyle,\n  getEnterTransitionProps,\n  getExitTransitionProps,\n  transitionEasing,\n} from '@tonic-ui/utils';\nimport React, { forwardRef, useEffect, useMemo, useRef } from 'react';\nimport BaseTable from '@/components/BaseTable';\n\nconst data = [\n  {\n    endpointId: '0d4523d9-ceed-4a9a-b3d0-056814ee8811',\n    endpointHostname: 'endpoint-1',\n    endpointIPs: ['fe80::c5a0:6dd9:1002:5760','10.1.136.130'],\n    endpointMAC: '00:50:56:9c:3c:5a',\n    eventId: 1,\n    eventSourceType: 1,\n    firstSeen: '2023-06-07T02:31:48Z',\n    lastSeen: '2023-06-07T02:31:48Z',\n    objectFirstSeen: '2023-06-07T02:27:34Z',\n    objectLastSeen: '2023-06-07T02:32:04Z',\n    objectIPs: [\n      '192.8.82.3',\n      '199.7.83.46',\n      '192.113.5.32',\n    ],\n    osDescription: 'Windows 10 Enterprise (64-bit) build 19044',\n    osType: '0x00000007',\n    osVer: '10.0.19044',\n    processCmd: 'C:\\\\Windows\\\\System32\\\\svchost.exe -k NetworkService -p -s NlaSvc',\n    processFileCreation: '2023-06-05T10:07:28Z',\n    processFileHashMD5: 'b7f884c1b74a263f746ee12a5f7c9f6a',\n    processFileHashSHA1: '1bc5066ddf693fc034d6514618854e26a84fd0d1',\n    processFileHashSHA256: 'add683a6910abbbf0e28b557fad0ba998166394932ae2aca069d9aa19ea8fe88',\n    processFileModifiedTime: '2023-06-05T10:07:28Z',\n    processFileSize: 55320,\n    processLaunchTime: '2023-06-06T09:42:15Z',\n    processName: 'C:\\\\Windows\\\\System32\\\\svchost.exe',\n    processId: 1408,\n    processSigner: 'Microsoft Windows Publisher',\n    processSignerValid: true,\n    processUser: 'NETWORK SERVICE',\n    processUserDomain: 'NT AUTHORITY',\n    productCode: 'dummy',\n    productVersion: 'x.y.z',\n    sessionId: 0,\n    timezone: 'Pacific Standard Time',\n  },\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n  const columns = useMemo(() => [\n    {\n      id: 'toggle-expanded',\n      header: () => null,\n      cell: ({ row }) => {\n        const canExpand = row.getCanExpand();\n        const isExpanded = row.getIsExpanded();\n\n        if (!canExpand) {\n          return null;\n        }\n\n        return (\n          <TableRowToggleIcon\n            isExpanded={isExpanded}\n            onClick={row.getToggleExpandedHandler()}\n          />\n        );\n      },\n      size: 48,\n    },\n    {\n      header: 'Logged',\n      accessorKey: 'firstSeen',\n      size: 180,\n      cell: ({ row }) => {\n        return (\n          <Truncate>\n            {row.original?.firstSeen}\n          </Truncate>\n        );\n      },\n    },\n    {\n      id: 'details',\n      cell: ({ row }) => {\n        const entries = Object.entries(row.original);\n\n        return (\n          <Truncate\n            as=\"pre\"\n            fontFamily=\"mono\"\n            m={0}\n            sx={{\n              '--truncate-line-clamp': 3,\n              wordBreak: 'break-all',\n              whiteSpace: 'normal',\n              display: '-webkit-box',\n              WebkitBoxOrient: 'vertical',\n              WebkitLineClamp: 'var(--truncate-line-clamp)',\n            }}\n          >\n            {entries.map((item, index) => {\n              const [key, value] = item;\n              return (\n                <Box\n                  key={key}\n                  display=\"inline\"\n                >\n                  {key}: <Text display=\"inline\" color={colorStyle.color.tertiary}>{Array.isArray(value) ? value.join(',') : value}</Text>\n                  {(index < entries.length - 1) && (\n                    <Divider display=\"inline\" orientation=\"vertical\" mx=\"2x\" />\n                  )}\n                </Box>\n              );\n            })}\n          </Truncate>\n        );\n      },\n      size: 'auto',\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  ], [colorMode, colorStyle]); // Include both colorMode and colorStyle as dependencies to prevent memoization when the color mode changes\n  const tableOptions = useMemo(() => ({\n    defaultColumn: {\n      minSize: 48,\n    },\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowCanExpand: () => true,\n  }), []);\n  const tableRef = useRef(null);\n\n  useEffect(() => {\n    if (tableRef.current) {\n      // Toggles the expanded state for all rows\n      tableRef.current.toggleAllRowsExpanded(true);\n    }\n  }, []);\n\n  return (\n    <Box height={500}>\n      <BaseTable\n        layout={layout}\n        variant={variant}\n        columns={columns}\n        data={data}\n        tableOptions={tableOptions}\n        tableRef={tableRef}\n      />\n    </Box>\n  );\n};\n\nconst TableRowToggleIcon = forwardRef((\n  {\n    isExpanded,\n    ...rest\n  },\n  ref,\n) => {\n  const timeout = isExpanded\n    ? Math.floor(133 * 0.7) // exit\n    : 133; // enter\n  const easing = transitionEasing.easeOut;\n  const transitionProps = isExpanded\n    ? getEnterTransitionProps({ timeout, easing })\n    : getExitTransitionProps({ timeout, easing });\n  const styleProps = {\n    transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',\n    transition: createTransitionStyle('transform', transitionProps),\n  };\n\n  return (\n    <ButtonBase {...rest}>\n      <Icon icon=\"angle-right\" size=\"4x\" {...styleProps} />\n    </ButtonBase>\n  );\n});\nTableRowToggleIcon.displayName = 'TableRowToggleIcon';\n\nexport default App;",path:"pages/patterns/table-display/index.page.mdx"},sandbox:{files:{"src/components/BaseTable.js":"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Collapse,\n  Flex,\n  Grid,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  TextLabel,\n  useColorMode,\n  useTheme,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\n/**\n * Assign a value to a ref function or object.\n *\n * @param ref the ref to assign to\n * @param value the value\n */\nconst assignRef = (ref, value) => {\n  if (ref === null || ref === undefined) {\n    return;\n  }\n\n  if (typeof ref === 'function') {\n    ref(value);\n    return;\n  }\n\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n};\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nconst BaseTable = forwardRef((\n  {\n    columns,\n    data,\n    layout = 'flexbox', // One of: 'flexbox', 'table'\n    variant = 'default', // One of: 'default', 'outline'\n\n    // TanStack Table\n    tableOptions,\n    tableRef,\n\n    ...rest\n  },\n  ref,\n) => {\n  const [colorMode] = useColorMode();\n  const theme = useTheme();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const selectedBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.08)',\n    light: 'rgba(0, 0, 0, 0.08)',\n  }[colorMode];\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n    const entries = Object.entries(row.original);\n    const renderValue = (value) => {\n      if (Array.isArray(value)) {\n        return value.map(item => <Text key={item}>{item}</Text>);\n      }\n\n      if (typeof value === 'boolean') {\n        return value.toString();\n      }\n\n      return value;\n    };\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          <Grid\n            templateColumns=\"auto auto\"\n            columnGap=\"10x\"\n            rowGap=\"1x\"\n          >\n            {entries.map(([key, value]) => {\n              return (\n                <Fragment key={key}>\n                  <TextLabel>\n                    {key}\n                  </TextLabel>\n                  <Text>\n                    {renderValue(value)}\n                  </Text>\n                </Fragment>\n              );\n            })}\n          </Grid>\n        </Box>\n      </Flex>\n    );\n  };\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    ...tableOptions,\n  });\n\n  if (tableRef) {\n    assignRef(tableRef, table);\n  }\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size += extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0\n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  return (\n    <AutoSizer\n      onResize={({ width }) => {\n        if (tableWidth !== width) {\n          setTableWidth(width);\n        }\n      }}\n    >\n      {({ width, height }) => {\n        return (\n          <Table\n            layout={layout}\n            variant={variant}\n            width={width}\n            height={height}\n            {...rest}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n                    return (\n                      <TableHeaderCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder\n                          ? null\n                          : flexRender(header.column.columnDef.header, header.getContext())\n                        }\n                      </TableHeaderCell>\n                    );\n                  })}\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <ConditionalWrapper\n              condition={layout === 'flexbox'}\n              wrapper={children => (\n                <TableScrollbar\n                  height=\"100%\"\n                  overflow=\"visible\" // Make the scrollbar visible\n                >\n                  {children}\n                </TableScrollbar>\n              )}\n            >\n              <TableBody>\n                {table.getRowModel().rows.map(row => (\n                  <Fragment key={row.id}>\n                    <TableRow\n                      data-selected={dataAttr(row.getIsSelected())}\n                      _hover={{\n                        backgroundColor: hoverBackgroundColor,\n                      }}\n                      _selected={{\n                        backgroundColor: selectedBackgroundColor,\n                      }}\n                    >\n                      {row.getVisibleCells().map(cell => {\n                        const styleProps = {\n                          minWidth: cell.column.columnDef.minSize,\n                          width: cell.column.getSize(),\n                          ...cell.column.columnDef.style,\n                        };\n                        return (\n                          <TableCell\n                            key={cell.id}\n                            {...styleProps}\n                          >\n                            {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                    {(row.getCanExpand() && layout === 'flexbox') && (\n                      <Collapse in={row.getIsExpanded()}>\n                        {renderExpandedRow({ row })}\n                      </Collapse>\n                    )}\n                    {(row.getCanExpand() && layout === 'table') && (\n                      <TableRow>\n                        <TableCell\n                          padding={0}\n                          borderBottom={0}\n                          colSpan={row.getVisibleCells().length}\n                        >\n                          <Collapse in={row.getIsExpanded()}>\n                            {renderExpandedRow({ row })}\n                          </Collapse>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </Fragment>\n                ))}\n              </TableBody>\n            </ConditionalWrapper>\n          </Table>\n        );\n      }}\n    </AutoSizer>\n  );\n});\n\nBaseTable.displayName = 'BaseTable';\n\nexport default BaseTable;"},raw:"import {\n  getExpandedRowModel,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  ButtonBase,\n  Divider,\n  Icon,\n  Text,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  createTransitionStyle,\n  getEnterTransitionProps,\n  getExitTransitionProps,\n  transitionEasing,\n} from '@tonic-ui/utils';\nimport React, { forwardRef, useEffect, useMemo, useRef } from 'react';\nimport BaseTable from '@/components/BaseTable';\n\nconst data = [\n  {\n    endpointId: '0d4523d9-ceed-4a9a-b3d0-056814ee8811',\n    endpointHostname: 'endpoint-1',\n    endpointIPs: ['fe80::c5a0:6dd9:1002:5760','10.1.136.130'],\n    endpointMAC: '00:50:56:9c:3c:5a',\n    eventId: 1,\n    eventSourceType: 1,\n    firstSeen: '2023-06-07T02:31:48Z',\n    lastSeen: '2023-06-07T02:31:48Z',\n    objectFirstSeen: '2023-06-07T02:27:34Z',\n    objectLastSeen: '2023-06-07T02:32:04Z',\n    objectIPs: [\n      '192.8.82.3',\n      '199.7.83.46',\n      '192.113.5.32',\n    ],\n    osDescription: 'Windows 10 Enterprise (64-bit) build 19044',\n    osType: '0x00000007',\n    osVer: '10.0.19044',\n    processCmd: 'C:\\\\Windows\\\\System32\\\\svchost.exe -k NetworkService -p -s NlaSvc',\n    processFileCreation: '2023-06-05T10:07:28Z',\n    processFileHashMD5: 'b7f884c1b74a263f746ee12a5f7c9f6a',\n    processFileHashSHA1: '1bc5066ddf693fc034d6514618854e26a84fd0d1',\n    processFileHashSHA256: 'add683a6910abbbf0e28b557fad0ba998166394932ae2aca069d9aa19ea8fe88',\n    processFileModifiedTime: '2023-06-05T10:07:28Z',\n    processFileSize: 55320,\n    processLaunchTime: '2023-06-06T09:42:15Z',\n    processName: 'C:\\\\Windows\\\\System32\\\\svchost.exe',\n    processId: 1408,\n    processSigner: 'Microsoft Windows Publisher',\n    processSignerValid: true,\n    processUser: 'NETWORK SERVICE',\n    processUserDomain: 'NT AUTHORITY',\n    productCode: 'dummy',\n    productVersion: 'x.y.z',\n    sessionId: 0,\n    timezone: 'Pacific Standard Time',\n  },\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n  const columns = useMemo(() => [\n    {\n      id: 'toggle-expanded',\n      header: () => null,\n      cell: ({ row }) => {\n        const canExpand = row.getCanExpand();\n        const isExpanded = row.getIsExpanded();\n\n        if (!canExpand) {\n          return null;\n        }\n\n        return (\n          <TableRowToggleIcon\n            isExpanded={isExpanded}\n            onClick={row.getToggleExpandedHandler()}\n          />\n        );\n      },\n      size: 48,\n    },\n    {\n      header: 'Logged',\n      accessorKey: 'firstSeen',\n      size: 180,\n      cell: ({ row }) => {\n        return (\n          <Truncate>\n            {row.original?.firstSeen}\n          </Truncate>\n        );\n      },\n    },\n    {\n      id: 'details',\n      cell: ({ row }) => {\n        const entries = Object.entries(row.original);\n\n        return (\n          <Truncate\n            as=\"pre\"\n            fontFamily=\"mono\"\n            m={0}\n            sx={{\n              '--truncate-line-clamp': 3,\n              wordBreak: 'break-all',\n              whiteSpace: 'normal',\n              display: '-webkit-box',\n              WebkitBoxOrient: 'vertical',\n              WebkitLineClamp: 'var(--truncate-line-clamp)',\n            }}\n          >\n            {entries.map((item, index) => {\n              const [key, value] = item;\n              return (\n                <Box\n                  key={key}\n                  display=\"inline\"\n                >\n                  {key}: <Text display=\"inline\" color={colorStyle.color.tertiary}>{Array.isArray(value) ? value.join(',') : value}</Text>\n                  {(index < entries.length - 1) && (\n                    <Divider display=\"inline\" orientation=\"vertical\" mx=\"2x\" />\n                  )}\n                </Box>\n              );\n            })}\n          </Truncate>\n        );\n      },\n      size: 'auto',\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  ], [colorMode, colorStyle]); // Include both colorMode and colorStyle as dependencies to prevent memoization when the color mode changes\n  const tableOptions = useMemo(() => ({\n    defaultColumn: {\n      minSize: 48,\n    },\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowCanExpand: () => true,\n  }), []);\n  const tableRef = useRef(null);\n\n  useEffect(() => {\n    if (tableRef.current) {\n      // Toggles the expanded state for all rows\n      tableRef.current.toggleAllRowsExpanded(true);\n    }\n  }, []);\n\n  return (\n    <Box height={500}>\n      <BaseTable\n        layout={layout}\n        variant={variant}\n        columns={columns}\n        data={data}\n        tableOptions={tableOptions}\n        tableRef={tableRef}\n      />\n    </Box>\n  );\n};\n\nconst TableRowToggleIcon = forwardRef((\n  {\n    isExpanded,\n    ...rest\n  },\n  ref,\n) => {\n  const timeout = isExpanded\n    ? Math.floor(133 * 0.7) // exit\n    : 133; // enter\n  const easing = transitionEasing.easeOut;\n  const transitionProps = isExpanded\n    ? getEnterTransitionProps({ timeout, easing })\n    : getExitTransitionProps({ timeout, easing });\n  const styleProps = {\n    transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',\n    transition: createTransitionStyle('transform', transitionProps),\n  };\n\n  return (\n    <ButtonBase {...rest}>\n      <Icon icon=\"angle-right\" size=\"4x\" {...styleProps} />\n    </ButtonBase>\n  );\n});\nTableRowToggleIcon.displayName = 'TableRowToggleIcon';\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,i.jsxs)(n.h3,{id:"footer",children:["Footer",(0,i.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#footer",children:(0,i.jsx)(n.svg,{children:(0,i.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(n.p,{children:"The footer should be fixed at the bottom of the screen to ensure consistent positioning."}),"\n",(0,i.jsxs)(n.h2,{id:"see-also",children:["See Also",(0,i.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#see-also",children:(0,i.jsx)(n.svg,{children:(0,i.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(d.Flex,{children:(0,i.jsxs)(d.Grid,{templateColumns:"1fr",columnGap:"18x",rowGap:"4x",children:[(0,i.jsx)(d.TextLabel,{children:"React Components"}),(0,i.jsx)(d.Box,{children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../components/table",children:"Table"})}),"\n"]})})]})})]})}var index_page=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,s.ah)(),e.components).wrapper;return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(_createMdxContent,e)})):_createMdxContent(e)}},4254:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/patterns/table-display",function(){return t(24713)}])}},function(e){e.O(0,[5220,4858,9774,2888,179],function(){return e(e.s=4254)}),_N_E=e.O()}]);