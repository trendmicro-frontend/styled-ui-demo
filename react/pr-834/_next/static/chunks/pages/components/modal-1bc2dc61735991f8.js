(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4157],{55100:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return index_page}});var o=t(52322),l=t(45392),a=t(83449),r=t(55459),i=t(26636),s=t(21400),c=t(68130),d=t(52235),u=t(35358),m=t(76168),h=t(49857),x=t(65019),p=t(2784);function _slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,l=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=l){var a=[],r=!0,i=!1;try{for(l=l.call(e);!(r=(t=l.next()).done)&&(a.push(t.value),!n||a.length!==n);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(i)throw o}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return _arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var nested_modals=function(){var e=_slicedToArray((0,x.Z)(!1),2),n=e[0],t=e[1],o=_slicedToArray((0,x.Z)(!1),2),l=o[0],a=o[1];return p.createElement(p.Fragment,null,p.createElement(r.Z,{onClick:function(){return t(!0)}},"Launch modal"),p.createElement(i.Z,{closeOnEsc:!0,closeOnOutsideClick:!0,isClosable:!0,isOpen:n,onClose:function(){return t(!1)},size:"sm"},p.createElement(s.Z,null),p.createElement(c.Z,null,p.createElement(d.Z,null,"Modal"),p.createElement(u.Z,null,"Modal body text goes here."),p.createElement(m.Z,{justifyContent:"space-between"},p.createElement(r.Z,{disabled:l,variant:"primary",onClick:function(){return a(!0)}},"Launch nested modal"),p.createElement(h.Z,null,p.createElement(r.Z,{onClick:function(){return t(!1)},minWidth:"20x"},"Close"))))),p.createElement(i.Z,{closeOnEsc:!0,closeOnOutsideClick:!0,isClosable:!0,isOpen:l,onClose:function(){return a(!1)},size:"xs"},p.createElement(s.Z,null),p.createElement(c.Z,null,p.createElement(d.Z,null,"Nested Modal"),p.createElement(u.Z,null,"Modal body text goes here."),p.createElement(m.Z,{columnGap:"2x"},p.createElement(r.Z,{variant:"primary",onClick:function(){return a(!1)},minWidth:"20x"},"Yes"),p.createElement(r.Z,{onClick:function(){return a(!1)},minWidth:"20x"},"No")))))},g=t(28165),f=t(40596),y=t(85017),b=t(82139),C=t(72448),T=t(70758),M=t(78366),j=t(67622),B=t(73645),k=t(62368),v=t(39256),E=t(96007),F=t(68010),w=t(83873),S=t(52571),Z=t(99113),O=t(97273),G=t(52842),L=t(56098),I=t(6194),A=t(3398),H=t(20548);function _extends(){return(_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function usage_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,l=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=l){var a=[],r=!0,i=!1;try{for(l=l.call(e);!(r=(t=l.next()).done)&&(a.push(t.value),!n||a.length!==n);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(i)throw o}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return usage_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return usage_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function usage_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var CodeBlock=function(e){var n=usage_slicedToArray((0,f.Z)(),1)[0],t=usage_slicedToArray((0,y.Z)({colorMode:n}),1)[0];return p.createElement(h.Z,_extends({backgroundColor:t.background.secondary,border:1,borderColor:t.divider,fontFamily:"mono",py:"3x",px:"3x",whiteSpace:"pre"},e))},FormGroup=function(e){return p.createElement(h.Z,_extends({mb:"4x"},e))},useSelection=function(e){var n=usage_slicedToArray((0,p.useState)(e),2),t=n[0],o=n[1];return[t,function(e){return function(){return o(e)}}]},P="\n// import\nimport { Global } from '@emotion/react';\n\n// example\n<Modal>\n  <Global\n    styles={css`\n      body {\n        overflow: hidden;\n      }\n    `}\n  />\n  <ModalOverlay />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody />\n    <ModalFooter />\n  </ModalContent>\n</Modal>\n".trim(),N={name:"1sy9iaq",styles:"body{overflow:hidden;}"},usage=function(){var e=(0,p.useRef)(),n=usage_slicedToArray((0,f.Z)(),1)[0],t=usage_slicedToArray((0,y.Z)({colorMode:n}),1)[0],o=t.color.tertiary,l=usage_slicedToArray((0,x.Z)(!1),2),a=l[0],V=l[1],_=usage_slicedToArray(useSelection("auto"),2),z=_[0],R=_[1],W=usage_slicedToArray(useSelection("inside"),2),D=W[0],U=W[1],$=usage_slicedToArray(useSelection("default"),2),K=$[0],Y=$[1],q=usage_slicedToArray(useSelection("default"),2),J=q[0],X=q[1],Q=usage_slicedToArray((0,x.Z)(!0),2),ee=Q[0],en=Q[1],et=usage_slicedToArray((0,x.Z)(!0),2),eo=et[0],el=et[1],ea=usage_slicedToArray((0,x.Z)(!0),2),er=ea[0],ei=ea[1],es=usage_slicedToArray((0,x.Z)(!0),2),ec=es[0],ed=es[1],eu=usage_slicedToArray((0,x.Z)(!0),2),em=eu[0],eh=eu[1],ex=usage_slicedToArray((0,x.Z)(!0),2),ep=ex[0],eg=ex[1],ef=usage_slicedToArray((0,x.Z)(!0),2),ey=ef[0],eb=ef[1],eC=usage_slicedToArray((0,x.Z)(!0),2),eT=eC[0],eM=eC[1],ej=usage_slicedToArray((0,x.Z)(!0),2),eB=ej[0],ek=ej[1],ev=usage_slicedToArray((0,x.Z)(!0),2),eE=ev[0],eF=ev[1],ew=usage_slicedToArray((0,x.Z)(!0),2),eS=ew[0],eZ=ew[1],eO=usage_slicedToArray((0,x.Z)(!0),2),eG=eO[0],eL=eO[1],eI={},eA={};return"full"!==z&&("default"!==J&&(eI.py=J),"default"!==K&&(eA["inside"===D?"height":"minHeight"]=K)),p.createElement(p.Fragment,null,p.createElement(h.Z,null,p.createElement(b.Z,{label:"Click to launch modal",openOnFocus:!1},p.createElement(r.Z,{onClick:function(){return V(!0)}},"Launch modal"))),p.createElement(C.Z,{my:"4x"}),p.createElement(h.Z,{mb:"4x"},p.createElement(T.Z,{fontSize:"lg",lineHeight:"lg"},"Modal props")),p.createElement(FormGroup,null,p.createElement(h.Z,{mb:"2x"},p.createElement(b.Z,{placement:"right",label:p.createElement(p.Fragment,null,p.createElement(T.Z,{mb:"2x"},"Use the ",p.createElement(M.Z,null,"scrollBehavior")," prop to control how scrolling should behave:"),p.createElement(h.Z,{as:"ul",my:"2x"},p.createElement("li",null,"If set to ",p.createElement(M.Z,null,"inside"),", only the ",p.createElement(M.Z,null,"ModalBody")," will scroll."),p.createElement("li",null,"If set to ",p.createElement(M.Z,null,"outside"),", the entire ",p.createElement(M.Z,null,"ModalContent")," will scroll within the viewport.")))},p.createElement(j.Z,{display:"inline-block"},p.createElement(B.Z,{alignItems:"center",columnGap:"2x"},"scrollBehavior",p.createElement(k.Z,{icon:"info-o"}))))),p.createElement(v.Z,{variant:"secondary",css:(0,g.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["inside","outside"].map(function(e){return p.createElement(r.Z,{key:e,selected:e===D,onClick:U(e),minWidth:"15x"},e)}))),p.createElement(FormGroup,null,p.createElement(h.Z,{mb:"2x"},p.createElement(j.Z,null,"size")),p.createElement(v.Z,{variant:"secondary",css:(0,g.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["auto","xs","sm","md","lg","xl","full"].map(function(e){return p.createElement(r.Z,{key:e,selected:e===z,onClick:R(e),minWidth:"15x"},e)}))),p.createElement(FormGroup,null,p.createElement(j.Z,{display:"flex",alignItems:"center"},p.createElement(E.Z,{checked:ee,disabled:!ec,onChange:function(){return en()}}),p.createElement(F.Z,{width:"2x"}),p.createElement(T.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"autoFocus"))),p.createElement(FormGroup,null,p.createElement(j.Z,{display:"flex",alignItems:"center"},p.createElement(E.Z,{checked:eo,disabled:!em&&!er,onChange:function(){return el()}}),p.createElement(F.Z,{width:"2x"}),p.createElement(T.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"closeOnEsc"))),p.createElement(FormGroup,null,p.createElement(j.Z,{display:"flex",alignItems:"center"},p.createElement(E.Z,{checked:er,disabled:!em&&!eo,onChange:function(){return ei()}}),p.createElement(F.Z,{width:"2x"}),p.createElement(T.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"closeOnOutsideClick"))),p.createElement(FormGroup,null,p.createElement(j.Z,{display:"flex",alignItems:"center"},p.createElement(E.Z,{checked:ec,onChange:function(){return ed()}}),p.createElement(F.Z,{width:"2x"}),p.createElement(T.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"ensureFocus"))),p.createElement(FormGroup,null,p.createElement(j.Z,{display:"flex",alignItems:"center"},p.createElement(E.Z,{checked:em,disabled:!eo&&!er,onChange:function(){return eh()}}),p.createElement(F.Z,{width:"2x"}),p.createElement(T.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"isClosable"))),p.createElement(FormGroup,null,p.createElement(j.Z,{display:"flex",alignItems:"center"},p.createElement(E.Z,{checked:ep,disabled:!ec,onChange:function(){return eg()}}),p.createElement(F.Z,{width:"2x"}),p.createElement(T.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"returnFocusOnClose"))),p.createElement(C.Z,{my:"4x"}),p.createElement(h.Z,{mb:"4x"},p.createElement(T.Z,{fontSize:"lg",lineHeight:"lg"},"Modal style props")),p.createElement(FormGroup,null,p.createElement(h.Z,{mb:"2x"},p.createElement(j.Z,null,"Initial content height")),p.createElement(v.Z,{variant:"secondary",css:(0,g.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["default","stretch"].map(function(e){return p.createElement(r.Z,{disabled:"full"===z,key:e,selected:e===K,onClick:Y(e),minWidth:"15x"},e)}))),p.createElement(FormGroup,null,p.createElement(h.Z,{mb:"2x"},p.createElement(j.Z,null,"Vertical padding")),p.createElement(v.Z,{variant:"secondary",css:(0,g.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["default","3rem"].map(function(e){return p.createElement(r.Z,{disabled:"full"===z,key:e,selected:e===J,onClick:X(e),minWidth:"15x"},e)}))),p.createElement(FormGroup,null,p.createElement(h.Z,{mb:"2x"},p.createElement(j.Z,null,"Pass below props to ModalContent for settings initial height and vertical margins. Note that the props are different when ",p.createElement(M.Z,null,"scrollBehavior")," changes.")),p.createElement(CodeBlock,null,"const modalStyleProps = ".concat(JSON.stringify(eI,null,2),";\nconst modalContentStyleProps = ").concat(JSON.stringify(eA,null,2),';\n\n// example\n<Modal\n  scrollBehavior="').concat(D,'"\n  {...modalStyleProps}\n>\n  <ModalOverlay />\n  <ModalContent {...contentStyleProps}>\n    <ModalHeader />\n    <ModalBody />\n    <ModalFooter />\n  </ModalContent>\n</Modal>'))),p.createElement(C.Z,{my:"4x"}),p.createElement(h.Z,{mb:"4x"},p.createElement(T.Z,{fontSize:"lg",lineHeight:"lg"},"Modal composition")),p.createElement(FormGroup,null,p.createElement(j.Z,{display:"flex",alignItems:"center"},p.createElement(E.Z,{checked:ey,onChange:function(){return eb()}}),p.createElement(F.Z,{width:"2x"}),p.createElement(T.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"ModalOverlay"))),p.createElement(FormGroup,null,p.createElement(j.Z,{display:"flex",alignItems:"center"},p.createElement(E.Z,{checked:eT,onChange:function(){return eM()}}),p.createElement(F.Z,{width:"2x"}),p.createElement(T.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"ModalHeader"))),p.createElement(FormGroup,null,p.createElement(j.Z,{display:"flex",alignItems:"center"},p.createElement(E.Z,{checked:eB,onChange:function(){return ek()}}),p.createElement(F.Z,{width:"2x"}),p.createElement(T.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"ModalBody"))),p.createElement(FormGroup,null,p.createElement(j.Z,{display:"flex",alignItems:"center"},p.createElement(E.Z,{checked:eE,onChange:function(){return eF()}}),p.createElement(F.Z,{width:"2x"}),p.createElement(T.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"ModalFooter"))),p.createElement(C.Z,{my:"4x"}),p.createElement(h.Z,{mb:"4x"},p.createElement(T.Z,{fontSize:"lg",lineHeight:"lg"},"Extra modal setup")),p.createElement(FormGroup,null,p.createElement(j.Z,{display:"flex",alignItems:"center",mb:"3x"},p.createElement(E.Z,{checked:eG,onChange:function(){return eL()}}),p.createElement(F.Z,{width:"2x"}),p.createElement(T.Z,null,"Enable body scroll locking")),p.createElement(h.Z,{ml:"6x"},p.createElement(h.Z,{mb:"4x"},p.createElement(T.Z,{mb:"2x"},"When setting ",p.createElement(M.Z,null,'scrollBehavior="outside"')," to enable outside scrolling, you should also use ",p.createElement("strong",null,"Body Scroll Locking")," to prevent the user from scrolling the page while the modal is open."),p.createElement(T.Z,{mb:"2x"},p.createElement("strong",null,"Body Scroll Locking")," is currently not available with default setup, you can follow the instructions below to append global styles to the body to prevent scrolling.")),p.createElement(CodeBlock,null,P))),p.createElement(i.Z,_extends({TransitionComponent:null,autoFocus:ee,closeOnEsc:eo,closeOnOutsideClick:er,ensureFocus:ec,initialFocusRef:e,isClosable:em,isOpen:a,onClose:function(){return V(!1)},returnFocusOnClose:ep,scrollBehavior:D,size:z},eI),eG&&p.createElement(g.xB,{styles:N}),ey&&p.createElement(s.Z,null),p.createElement(c.Z,eA,eT&&p.createElement(d.Z,null,"auto"===z&&p.createElement(T.Z,null,"Auto-sized Modal"),"xs"===z&&p.createElement(T.Z,null,"Extra Small Modal"),"sm"===z&&p.createElement(T.Z,null,"Small Modal"),"md"===z&&p.createElement(T.Z,null,"Medium Modal"),"lg"===z&&p.createElement(T.Z,null,"Large Modal"),"xl"===z&&p.createElement(T.Z,null,"Extra Large Modal"),"full"===z&&p.createElement(T.Z,null,"Full-width Modal")),eB&&p.createElement(u.Z,null,eS&&p.createElement(w.Z,{variant:"outline",severity:"info",mb:"4x",isClosable:!0,onClose:function(){return eZ()}},p.createElement(T.Z,null,"This is an info alert")),p.createElement(S.Z,null,p.createElement(Z.Z,{mb:"4x"},p.createElement(O.Z,null,"Tab 1"),p.createElement(O.Z,null,"Tab 2")),p.createElement(G.Z,null,p.createElement(L.Z,null,p.createElement(H.Z,{mb:"4x"}),p.createElement(I.Z,{templateColumns:"auto 1fr",rowGap:"2x",columnGap:"3x",alignItems:"center",mb:"4x"},p.createElement(k.Z,{icon:"user",color:o}),p.createElement(A.Z,{ref:e,placeholder:"User name"}),p.createElement(k.Z,{icon:"email",color:o}),p.createElement(A.Z,{placeholder:"Email address"}))),p.createElement(L.Z,null,p.createElement(h.Z,{backgroundColor:t.background.tertiary,minHeight:1e3,px:"3x",py:"2x"},p.createElement(T.Z,null,"This is a very long content that will overflow the modal")))))),eE&&p.createElement(m.Z,null,p.createElement(I.Z,{templateColumns:"1fr 1fr",columnGap:"2x"},p.createElement(r.Z,{variant:"primary"},"OK"),p.createElement(r.Z,{onClick:function(){return V(!1)}},"Cancel"))))))},V=t(61619),overview=function(){return p.createElement(V.Z,{direction:"column",spacing:"4x"},p.createElement(c.Z,{width:480},p.createElement(d.Z,null,"Modal Title"),p.createElement(u.Z,null,p.createElement(w.Z,{variant:"outline",severity:"warning",mb:"4x"},p.createElement(T.Z,null,"This is a warning alert")),p.createElement(T.Z,{mb:"4x"},"Modal body text goes here."),p.createElement(H.Z,null)),p.createElement(m.Z,null,p.createElement(r.Z,{variant:"primary",minWidth:"20x"},"Save Changes"),p.createElement(F.Z,{width:"2x"}),p.createElement(r.Z,{minWidth:"20x"},"Cancel"))),p.createElement(c.Z,{width:480},p.createElement(u.Z,null,p.createElement(T.Z,{mb:"4x"},"Modal body text goes here."),p.createElement(H.Z,null)),p.createElement(m.Z,null,p.createElement(r.Z,{variant:"primary",minWidth:"20x"},"Save Changes"),p.createElement(F.Z,{width:"2x"}),p.createElement(r.Z,{minWidth:"20x"},"Cancel"))),p.createElement(c.Z,{width:480},p.createElement(u.Z,null,p.createElement(T.Z,{mb:"4x"},"Modal body text goes here."),p.createElement(H.Z,null))),p.createElement(c.Z,{width:480},p.createElement(h.Z,{px:"4x",py:"4x"},"You can create a custom modal with any sort of content.")))};function _createMdxContent(e){var n=Object.assign({div:"div",h1:"h1",p:"p",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",code:"code",h3:"h3",h4:"h4",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,l.ah)(),e.components);return(0,o.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n",(0,o.jsx)(n.h1,{id:"modal",children:"Modal"}),"\n",(0,o.jsx)(n.p,{children:"Modal dialogs are used to inform users about a task and can contain critical information, require decisions, or involve multiple tasks. Modal dialogs disable app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken."}),"\n",(0,o.jsxs)(n.h2,{id:"import",children:["Import",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  ModalCloseButton,\n  useModal,\n} from '@tonic-ui/react';\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"modal-components",children:["Modal components",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modal-components",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:"Below is a static modal example, including modal header (optional), modal body (required when padding is necessary), and modal footer (optional)."}),"\n",(0,o.jsx)(n.p,{children:"You can also compose your modal components when customization is needed."}),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:overview,file:{data:'import {\n  Alert,\n  Box,\n  Button,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  Space,\n  Stack,\n  Text,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\nimport SkeletonBlock from \'@/components/SkeletonBlock\';\n\nconst App = () => {\n  return (\n    <Stack direction="column" spacing="4x">\n      <ModalContent width={480}>\n        <ModalHeader>\n          Modal Title\n        </ModalHeader>\n        <ModalBody>\n          <Alert variant="outline" severity="warning" mb="4x">\n            <Text>This is a warning alert</Text>\n          </Alert>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBlock />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant="primary" minWidth="20x">Save Changes</Button>\n          <Space width="2x" />\n          <Button minWidth="20x">Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n      <ModalContent width={480}>\n        <ModalBody>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBlock />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant="primary" minWidth="20x">Save Changes</Button>\n          <Space width="2x" />\n          <Button minWidth="20x">Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n      <ModalContent width={480}>\n        <ModalBody>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBlock />\n        </ModalBody>\n      </ModalContent>\n      <ModalContent width={480}>\n        <Box px="4x" py="4x">\n          You can create a custom modal with any sort of content.\n        </Box>\n      </ModalContent>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/components/modal/index.page.mdx"},sandbox:{files:{"src/components/SkeletonBlock.js":'import {\n  Flex,\n  Skeleton,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst SkeletonBlock = (props) => (\n  <Flex {...props}>\n    <Flex flex="none" mr="4x" alignItems="center">\n      <Skeleton variant="circle" width="10x" height="10x" />\n    </Flex>\n    <Flex flex="auto" flexDirection="column" rowGap="2x">\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </Flex>\n  </Flex>\n);\n\nexport default SkeletonBlock;'},raw:'import {\n  Alert,\n  Box,\n  Button,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  Space,\n  Stack,\n  Text,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\nimport SkeletonBlock from \'@/components/SkeletonBlock\';\n\nconst App = () => {\n  return (\n    <Stack direction="column" spacing="4x">\n      <ModalContent width={480}>\n        <ModalHeader>\n          Modal Title\n        </ModalHeader>\n        <ModalBody>\n          <Alert variant="outline" severity="warning" mb="4x">\n            <Text>This is a warning alert</Text>\n          </Alert>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBlock />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant="primary" minWidth="20x">Save Changes</Button>\n          <Space width="2x" />\n          <Button minWidth="20x">Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n      <ModalContent width={480}>\n        <ModalBody>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBlock />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant="primary" minWidth="20x">Save Changes</Button>\n          <Space width="2x" />\n          <Button minWidth="20x">Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n      <ModalContent width={480}>\n        <ModalBody>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBlock />\n        </ModalBody>\n      </ModalContent>\n      <ModalContent width={480}>\n        <Box px="4x" py="4x">\n          You can create a custom modal with any sort of content.\n        </Box>\n      </ModalContent>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h2,{id:"usage",children:["Usage",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:"Click the button below to toggle a modal. The modal will show up in the center of the screen."}),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:usage,file:{data:'import { Global, css } from \'@emotion/react\';\nimport {\n  Alert,\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Grid,\n  Icon,\n  Input,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Space,\n  Tab,\n  Tabs,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Text,\n  TextLabel,\n  Tooltip,\n  useColorMode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  useToggle,\n} from \'@tonic-ui/react-hooks\';\nimport React, { useRef, useState } from \'react\';\nimport SkeletonBlock from \'@/components/SkeletonBlock\';\n\nconst CodeBlock = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Box\n      backgroundColor={colorStyle.background.secondary}\n      border={1}\n      borderColor={colorStyle.divider}\n      fontFamily="mono"\n      py="3x"\n      px="3x"\n      whiteSpace="pre"\n      {...props}\n    />\n  );\n};\n\nconst FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst bodyScrollLockCode = `\n// import\nimport { Global } from \'@emotion/react\';\n\n// example\n<Modal>\n  <Global\n    styles={css\\`\n      body {\n        overflow: hidden;\n      }\n    \\`}\n  />\n  <ModalOverlay />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody />\n    <ModalFooter />\n  </ModalContent>\n</Modal>\n`.trim();\n\nconst App = () => {\n  const initialFocusRef = useRef();\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const iconColor = colorStyle.color.tertiary;\n  const [isOpen, toggleModal] = useToggle(false);\n  const [size, changeSizeBy] = useSelection(\'auto\');\n  const [scrollBehavior, changeScrollBehaviorBy] = useSelection(\'inside\');\n  const [initialContentHeight, changeInitialContentHeightBy] = useSelection(\'default\');\n  const [verticalPadding, changeVerticalPaddingBy] = useSelection(\'default\');\n  const [autoFocus, toggleAutoFocus] = useToggle(true);\n  const [closeOnEsc, toggleCloseOnEsc] = useToggle(true);\n  const [closeOnOutsideClick, toggleCloseOnOutsideClick] = useToggle(true);\n  const [ensureFocus, toggleEnsureFocus] = useToggle(true);\n  const [isClosable, toggleIsCloseButtonVisible] = useToggle(true);\n  const [returnFocusOnClose, toggleReturnFocusOnClose] = useToggle(true);\n  const [isOverlayVisible, toggleIsOverlayVisible] = useToggle(true);\n  const [isHeaderVisible, toggleIsHeaderVisible] = useToggle(true);\n  const [isBodyVisible, toggleIsBodyVisible] = useToggle(true);\n  const [isFooterVisible, toggleIsFooterVisible] = useToggle(true);\n  const [isAlertVisible, toggleIsAlertVisible] = useToggle(true);\n  const [enableBodyScrollLock, toggleBodyScrollLock] = useToggle(true);\n  const modalStyleProps = {};\n  const modalContentStyleProps = {};\n\n  if (size !== \'full\') {\n    if (verticalPadding !== \'default\') {\n      modalStyleProps.py = verticalPadding;\n    }\n\n    if (initialContentHeight !== \'default\') {\n      const propKey = (scrollBehavior === \'inside\') ? \'height\' : \'minHeight\';\n      modalContentStyleProps[propKey] = initialContentHeight;\n    }\n  }\n\n  return (\n    <>\n      <Box>\n        <Tooltip label="Click to launch modal" openOnFocus={false}>\n          <Button onClick={() => toggleModal(true)}>\n            Launch modal\n          </Button>\n        </Tooltip>\n      </Box>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <Tooltip\n            placement="right"\n            label={(\n              <>\n                <Text mb="2x">\n                  Use the <Code>scrollBehavior</Code> prop to control how scrolling should behave:\n                </Text>\n                <Box as="ul" my="2x">\n                  <li>If set to <Code>inside</Code>, only the <Code>ModalBody</Code> will scroll.</li>\n                  <li>If set to <Code>outside</Code>, the entire <Code>ModalContent</Code> will scroll within the viewport.</li>\n                </Box>\n              </>\n            )}\n          >\n            <TextLabel display="inline-block">\n              <Flex alignItems="center" columnGap="2x">\n                scrollBehavior\n                <Icon icon="info-o" />\n              </Flex>\n            </TextLabel>\n          </Tooltip>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'inside\', \'outside\'].map(value => (\n            <Button\n              key={value}\n              selected={value === scrollBehavior}\n              onClick={changeScrollBehaviorBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'auto\', \'xs\', \'sm\', \'md\', \'lg\', \'xl\', \'full\'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={autoFocus}\n            disabled={!ensureFocus}\n            onChange={() => toggleAutoFocus()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">autoFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnEsc}\n            disabled={!isClosable && !closeOnOutsideClick}\n            onChange={() => toggleCloseOnEsc()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnEsc</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnOutsideClick}\n            disabled={!isClosable && !closeOnEsc}\n            onChange={() => toggleCloseOnOutsideClick()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnOutsideClick</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={ensureFocus}\n            onChange={() => toggleEnsureFocus()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ensureFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={isClosable}\n            disabled={!closeOnEsc && !closeOnOutsideClick}\n            onChange={() => toggleIsCloseButtonVisible()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">isClosable</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={returnFocusOnClose}\n            disabled={!ensureFocus}\n            onChange={() => toggleReturnFocusOnClose()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">returnFocusOnClose</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal style props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Initial content height\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'default\', \'stretch\'].map(value => (\n            <Button\n              disabled={size === \'full\'}\n              key={value}\n              selected={value === initialContentHeight}\n              onClick={changeInitialContentHeightBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Vertical padding\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'default\', \'3rem\'].map(value => (\n            <Button\n              disabled={size === \'full\'}\n              key={value}\n              selected={value === verticalPadding}\n              onClick={changeVerticalPaddingBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Pass below props to ModalContent for settings initial height and vertical margins. Note that the props are different when <Code>scrollBehavior</Code> changes.\n          </TextLabel>\n        </Box>\n        <CodeBlock>\n          {`const modalStyleProps = ${JSON.stringify(modalStyleProps, null, 2)};\\nconst modalContentStyleProps = ${JSON.stringify(modalContentStyleProps, null, 2)};\\n\\n// example\\n<Modal\\n  scrollBehavior="${scrollBehavior}"\\n  {...modalStyleProps}\\n>\\n  <ModalOverlay />\\n  <ModalContent {...contentStyleProps}>\\n    <ModalHeader />\\n    <ModalBody />\\n    <ModalFooter />\\n  </ModalContent>\\n</Modal>`}\n        </CodeBlock>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isOverlayVisible} onChange={() => toggleIsOverlayVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalOverlay</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isHeaderVisible} onChange={() => toggleIsHeaderVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isBodyVisible} onChange={() => toggleIsBodyVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isFooterVisible} onChange={() => toggleIsFooterVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalFooter</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Extra modal setup\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center" mb="3x">\n          <Checkbox\n            checked={enableBodyScrollLock}\n            onChange={() => toggleBodyScrollLock()}\n          />\n          <Space width="2x" />\n          <Text>\n            Enable body scroll locking\n          </Text>\n        </TextLabel>\n        <Box ml="6x">\n          <Box mb="4x">\n            <Text mb="2x">\n              When setting <Code>{\'scrollBehavior="outside"\'}</Code> to enable outside scrolling, you should also use <strong>Body Scroll Locking</strong> to prevent the user from scrolling the page while the modal is open.\n            </Text>\n            <Text mb="2x">\n              <strong>Body Scroll Locking</strong> is currently not available with default setup, you can follow the instructions below to append global styles to the body to prevent scrolling.\n            </Text>\n          </Box>\n          <CodeBlock>\n            {bodyScrollLockCode}\n          </CodeBlock>\n        </Box>\n      </FormGroup>\n      <Modal\n        TransitionComponent={null}\n        autoFocus={autoFocus}\n        closeOnEsc={closeOnEsc}\n        closeOnOutsideClick={closeOnOutsideClick}\n        ensureFocus={ensureFocus}\n        initialFocusRef={initialFocusRef}\n        isClosable={isClosable}\n        isOpen={isOpen}\n        onClose={() => toggleModal(false)}\n        returnFocusOnClose={returnFocusOnClose}\n        scrollBehavior={scrollBehavior}\n        size={size}\n        {...modalStyleProps}\n      >\n        {enableBodyScrollLock && (\n          <Global\n            styles={css`\n              body {\n                overflow: hidden;\n              }\n            `}\n          />\n        )}\n        {isOverlayVisible && (\n          <ModalOverlay />\n        )}\n        <ModalContent\n          {...modalContentStyleProps}\n        >\n          {isHeaderVisible && (\n            <ModalHeader>\n              {size === \'auto\' && <Text>Auto-sized Modal</Text>}\n              {size === \'xs\' && <Text>Extra Small Modal</Text>}\n              {size === \'sm\' && <Text>Small Modal</Text>}\n              {size === \'md\' && <Text>Medium Modal</Text>}\n              {size === \'lg\' && <Text>Large Modal</Text>}\n              {size === \'xl\' && <Text>Extra Large Modal</Text>}\n              {size === \'full\' && <Text>Full-width Modal</Text>}\n            </ModalHeader>\n          )}\n          {isBodyVisible && (\n            <ModalBody>\n              {isAlertVisible && (\n                <Alert variant="outline" severity="info" mb="4x" isClosable onClose={() => toggleIsAlertVisible()}>\n                  <Text>This is an info alert</Text>\n                </Alert>\n              )}\n              <Tabs>\n                <TabList mb="4x">\n                  <Tab>Tab 1</Tab>\n                  <Tab>Tab 2</Tab>\n                </TabList>\n                <TabPanels>\n                  <TabPanel>\n                    <SkeletonBlock mb="4x" />\n                    <Grid\n                      templateColumns="auto 1fr"\n                      rowGap="2x"\n                      columnGap="3x"\n                      alignItems="center"\n                      mb="4x"\n                    >\n                      <Icon icon="user" color={iconColor} />\n                      <Input ref={initialFocusRef} placeholder="User name" />\n                      <Icon icon="email" color={iconColor} />\n                      <Input placeholder="Email address" />\n                    </Grid>\n                  </TabPanel>\n                  <TabPanel>\n                    <Box\n                      backgroundColor={colorStyle.background.tertiary}\n                      minHeight={1000}\n                      px="3x"\n                      py="2x"\n                    >\n                      <Text>\n                        This is a very long content that will overflow the modal\n                      </Text>\n                    </Box>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs>\n            </ModalBody>\n          )}\n          {isFooterVisible && (\n            <ModalFooter>\n              <Grid\n                templateColumns="1fr 1fr"\n                columnGap="2x"\n              >\n                <Button variant="primary">\n                  OK\n                </Button>\n                <Button onClick={() => toggleModal(false)}>\n                  Cancel\n                </Button>\n              </Grid>\n            </ModalFooter>\n          )}\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/modal/index.page.mdx"},sandbox:{files:{"src/components/SkeletonBlock.js":'import {\n  Flex,\n  Skeleton,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst SkeletonBlock = (props) => (\n  <Flex {...props}>\n    <Flex flex="none" mr="4x" alignItems="center">\n      <Skeleton variant="circle" width="10x" height="10x" />\n    </Flex>\n    <Flex flex="auto" flexDirection="column" rowGap="2x">\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </Flex>\n  </Flex>\n);\n\nexport default SkeletonBlock;'},raw:'import { Global, css } from \'@emotion/react\';\nimport {\n  Alert,\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Grid,\n  Icon,\n  Input,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Space,\n  Tab,\n  Tabs,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Text,\n  TextLabel,\n  Tooltip,\n  useColorMode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  useToggle,\n} from \'@tonic-ui/react-hooks\';\nimport React, { useRef, useState } from \'react\';\nimport SkeletonBlock from \'@/components/SkeletonBlock\';\n\nconst CodeBlock = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Box\n      backgroundColor={colorStyle.background.secondary}\n      border={1}\n      borderColor={colorStyle.divider}\n      fontFamily="mono"\n      py="3x"\n      px="3x"\n      whiteSpace="pre"\n      {...props}\n    />\n  );\n};\n\nconst FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst bodyScrollLockCode = `\n// import\nimport { Global } from \'@emotion/react\';\n\n// example\n<Modal>\n  <Global\n    styles={css\\`\n      body {\n        overflow: hidden;\n      }\n    \\`}\n  />\n  <ModalOverlay />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody />\n    <ModalFooter />\n  </ModalContent>\n</Modal>\n`.trim();\n\nconst App = () => {\n  const initialFocusRef = useRef();\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const iconColor = colorStyle.color.tertiary;\n  const [isOpen, toggleModal] = useToggle(false);\n  const [size, changeSizeBy] = useSelection(\'auto\');\n  const [scrollBehavior, changeScrollBehaviorBy] = useSelection(\'inside\');\n  const [initialContentHeight, changeInitialContentHeightBy] = useSelection(\'default\');\n  const [verticalPadding, changeVerticalPaddingBy] = useSelection(\'default\');\n  const [autoFocus, toggleAutoFocus] = useToggle(true);\n  const [closeOnEsc, toggleCloseOnEsc] = useToggle(true);\n  const [closeOnOutsideClick, toggleCloseOnOutsideClick] = useToggle(true);\n  const [ensureFocus, toggleEnsureFocus] = useToggle(true);\n  const [isClosable, toggleIsCloseButtonVisible] = useToggle(true);\n  const [returnFocusOnClose, toggleReturnFocusOnClose] = useToggle(true);\n  const [isOverlayVisible, toggleIsOverlayVisible] = useToggle(true);\n  const [isHeaderVisible, toggleIsHeaderVisible] = useToggle(true);\n  const [isBodyVisible, toggleIsBodyVisible] = useToggle(true);\n  const [isFooterVisible, toggleIsFooterVisible] = useToggle(true);\n  const [isAlertVisible, toggleIsAlertVisible] = useToggle(true);\n  const [enableBodyScrollLock, toggleBodyScrollLock] = useToggle(true);\n  const modalStyleProps = {};\n  const modalContentStyleProps = {};\n\n  if (size !== \'full\') {\n    if (verticalPadding !== \'default\') {\n      modalStyleProps.py = verticalPadding;\n    }\n\n    if (initialContentHeight !== \'default\') {\n      const propKey = (scrollBehavior === \'inside\') ? \'height\' : \'minHeight\';\n      modalContentStyleProps[propKey] = initialContentHeight;\n    }\n  }\n\n  return (\n    <>\n      <Box>\n        <Tooltip label="Click to launch modal" openOnFocus={false}>\n          <Button onClick={() => toggleModal(true)}>\n            Launch modal\n          </Button>\n        </Tooltip>\n      </Box>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <Tooltip\n            placement="right"\n            label={(\n              <>\n                <Text mb="2x">\n                  Use the <Code>scrollBehavior</Code> prop to control how scrolling should behave:\n                </Text>\n                <Box as="ul" my="2x">\n                  <li>If set to <Code>inside</Code>, only the <Code>ModalBody</Code> will scroll.</li>\n                  <li>If set to <Code>outside</Code>, the entire <Code>ModalContent</Code> will scroll within the viewport.</li>\n                </Box>\n              </>\n            )}\n          >\n            <TextLabel display="inline-block">\n              <Flex alignItems="center" columnGap="2x">\n                scrollBehavior\n                <Icon icon="info-o" />\n              </Flex>\n            </TextLabel>\n          </Tooltip>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'inside\', \'outside\'].map(value => (\n            <Button\n              key={value}\n              selected={value === scrollBehavior}\n              onClick={changeScrollBehaviorBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'auto\', \'xs\', \'sm\', \'md\', \'lg\', \'xl\', \'full\'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={autoFocus}\n            disabled={!ensureFocus}\n            onChange={() => toggleAutoFocus()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">autoFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnEsc}\n            disabled={!isClosable && !closeOnOutsideClick}\n            onChange={() => toggleCloseOnEsc()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnEsc</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnOutsideClick}\n            disabled={!isClosable && !closeOnEsc}\n            onChange={() => toggleCloseOnOutsideClick()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnOutsideClick</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={ensureFocus}\n            onChange={() => toggleEnsureFocus()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ensureFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={isClosable}\n            disabled={!closeOnEsc && !closeOnOutsideClick}\n            onChange={() => toggleIsCloseButtonVisible()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">isClosable</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={returnFocusOnClose}\n            disabled={!ensureFocus}\n            onChange={() => toggleReturnFocusOnClose()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">returnFocusOnClose</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal style props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Initial content height\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'default\', \'stretch\'].map(value => (\n            <Button\n              disabled={size === \'full\'}\n              key={value}\n              selected={value === initialContentHeight}\n              onClick={changeInitialContentHeightBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Vertical padding\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'default\', \'3rem\'].map(value => (\n            <Button\n              disabled={size === \'full\'}\n              key={value}\n              selected={value === verticalPadding}\n              onClick={changeVerticalPaddingBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Pass below props to ModalContent for settings initial height and vertical margins. Note that the props are different when <Code>scrollBehavior</Code> changes.\n          </TextLabel>\n        </Box>\n        <CodeBlock>\n          {`const modalStyleProps = ${JSON.stringify(modalStyleProps, null, 2)};\\nconst modalContentStyleProps = ${JSON.stringify(modalContentStyleProps, null, 2)};\\n\\n// example\\n<Modal\\n  scrollBehavior="${scrollBehavior}"\\n  {...modalStyleProps}\\n>\\n  <ModalOverlay />\\n  <ModalContent {...contentStyleProps}>\\n    <ModalHeader />\\n    <ModalBody />\\n    <ModalFooter />\\n  </ModalContent>\\n</Modal>`}\n        </CodeBlock>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isOverlayVisible} onChange={() => toggleIsOverlayVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalOverlay</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isHeaderVisible} onChange={() => toggleIsHeaderVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isBodyVisible} onChange={() => toggleIsBodyVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isFooterVisible} onChange={() => toggleIsFooterVisible()} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalFooter</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Extra modal setup\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center" mb="3x">\n          <Checkbox\n            checked={enableBodyScrollLock}\n            onChange={() => toggleBodyScrollLock()}\n          />\n          <Space width="2x" />\n          <Text>\n            Enable body scroll locking\n          </Text>\n        </TextLabel>\n        <Box ml="6x">\n          <Box mb="4x">\n            <Text mb="2x">\n              When setting <Code>{\'scrollBehavior="outside"\'}</Code> to enable outside scrolling, you should also use <strong>Body Scroll Locking</strong> to prevent the user from scrolling the page while the modal is open.\n            </Text>\n            <Text mb="2x">\n              <strong>Body Scroll Locking</strong> is currently not available with default setup, you can follow the instructions below to append global styles to the body to prevent scrolling.\n            </Text>\n          </Box>\n          <CodeBlock>\n            {bodyScrollLockCode}\n          </CodeBlock>\n        </Box>\n      </FormGroup>\n      <Modal\n        TransitionComponent={null}\n        autoFocus={autoFocus}\n        closeOnEsc={closeOnEsc}\n        closeOnOutsideClick={closeOnOutsideClick}\n        ensureFocus={ensureFocus}\n        initialFocusRef={initialFocusRef}\n        isClosable={isClosable}\n        isOpen={isOpen}\n        onClose={() => toggleModal(false)}\n        returnFocusOnClose={returnFocusOnClose}\n        scrollBehavior={scrollBehavior}\n        size={size}\n        {...modalStyleProps}\n      >\n        {enableBodyScrollLock && (\n          <Global\n            styles={css`\n              body {\n                overflow: hidden;\n              }\n            `}\n          />\n        )}\n        {isOverlayVisible && (\n          <ModalOverlay />\n        )}\n        <ModalContent\n          {...modalContentStyleProps}\n        >\n          {isHeaderVisible && (\n            <ModalHeader>\n              {size === \'auto\' && <Text>Auto-sized Modal</Text>}\n              {size === \'xs\' && <Text>Extra Small Modal</Text>}\n              {size === \'sm\' && <Text>Small Modal</Text>}\n              {size === \'md\' && <Text>Medium Modal</Text>}\n              {size === \'lg\' && <Text>Large Modal</Text>}\n              {size === \'xl\' && <Text>Extra Large Modal</Text>}\n              {size === \'full\' && <Text>Full-width Modal</Text>}\n            </ModalHeader>\n          )}\n          {isBodyVisible && (\n            <ModalBody>\n              {isAlertVisible && (\n                <Alert variant="outline" severity="info" mb="4x" isClosable onClose={() => toggleIsAlertVisible()}>\n                  <Text>This is an info alert</Text>\n                </Alert>\n              )}\n              <Tabs>\n                <TabList mb="4x">\n                  <Tab>Tab 1</Tab>\n                  <Tab>Tab 2</Tab>\n                </TabList>\n                <TabPanels>\n                  <TabPanel>\n                    <SkeletonBlock mb="4x" />\n                    <Grid\n                      templateColumns="auto 1fr"\n                      rowGap="2x"\n                      columnGap="3x"\n                      alignItems="center"\n                      mb="4x"\n                    >\n                      <Icon icon="user" color={iconColor} />\n                      <Input ref={initialFocusRef} placeholder="User name" />\n                      <Icon icon="email" color={iconColor} />\n                      <Input placeholder="Email address" />\n                    </Grid>\n                  </TabPanel>\n                  <TabPanel>\n                    <Box\n                      backgroundColor={colorStyle.background.tertiary}\n                      minHeight={1000}\n                      px="3x"\n                      py="2x"\n                    >\n                      <Text>\n                        This is a very long content that will overflow the modal\n                      </Text>\n                    </Box>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs>\n            </ModalBody>\n          )}\n          {isFooterVisible && (\n            <ModalFooter>\n              <Grid\n                templateColumns="1fr 1fr"\n                columnGap="2x"\n              >\n                <Button variant="primary">\n                  OK\n                </Button>\n                <Button onClick={() => toggleModal(false)}>\n                  Cancel\n                </Button>\n              </Grid>\n            </ModalFooter>\n          )}\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"how-to-close-a-modal",children:["How to close a modal",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-to-close-a-modal",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h4,{id:"using-the-isclosable-prop",children:["Using the ",(0,o.jsx)(n.code,{children:"isClosable"})," prop",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#using-the-isclosable-prop",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"isClosable"})," prop is used to make a modal closable by adding a close button to it. By default, the value of ",(0,o.jsx)(n.code,{children:"isClosable"})," is false. To make a modal closable, set ",(0,o.jsx)(n.code,{children:"isClosable"})," to true."]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:"<Modal isOpen={isOpen} isClosable onClose={onClose}>\n  <ModalOverlay />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody />\n    <ModalFooter />\n  </ModalContent>\n</Modal>\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"using-the-modalclosebutton-component",children:["Using the ",(0,o.jsx)(n.code,{children:"ModalCloseButton"})," component",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#using-the-modalclosebutton-component",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ModalCloseButton"})," component provides an easy way to add a close button to a modal. This button is specifically designed to handle closing the modal, so you don't need to write any additional code to handle it. If you use ",(0,o.jsx)(n.code,{children:"ModalCloseButton"}),", you can omit the ",(0,o.jsx)(n.code,{children:"isClosable"})," prop in the ",(0,o.jsx)(n.code,{children:"Modal"})," component."]}),"\n",(0,o.jsxs)(n.p,{children:["Besides the default functionality of the ",(0,o.jsx)(n.code,{children:"ModalCloseButton"}),", you can also pass additional props, such as ",(0,o.jsx)(n.code,{children:"data-test"})," or ",(0,o.jsx)(n.code,{children:"data-tracking"})," attributes, to the ",(0,o.jsx)(n.code,{children:"ModalCloseButton"})," component as needed."]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:'<Modal isOpen={isOpen} onClose={onClose}>\n  <ModalOverlay />\n  <ModalContent>\n    <ModalHeader />\n    <ModalBody />\n    <ModalFooter />\n    <ModalCloseButton data-test="modal-close-button" />\n  </ModalContent>\n</Modal>\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"nested-modals",children:["Nested modals",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#nested-modals",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:"In some cases, you may need to open a modal that is positioned relative to its parent modal, especially when a confirmation is required."}),"\n",(0,o.jsx)(n.p,{children:"To achieve this, you can create a nested modal. A nested modal is simply a modal that is opened from within another modal. This way, the nested modal is positioned relative to its parent modal."}),"\n",(0,o.jsxs)(n.p,{children:["One way to implement a nested modal is to use the ",(0,o.jsx)(n.code,{children:"useToggle"})," hook to control modal visibility. This hook can be used to toggle the state of a modal between open and closed, allowing you to easily show and hide nested modals."]}),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:nested_modals,file:{data:'import {\n  Box,\n  Button,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n} from \'@tonic-ui/react\';\nimport { useToggle } from \'@tonic-ui/react-hooks\';\nimport React from \'react\';\n\nconst App = () => {\n  const [isOpen, toggleModal] = useToggle(false);\n  const [isNestedOpen, toggleNestedModal] = useToggle(false);\n\n  return (\n    <>\n      <Button onClick={() => toggleModal(true)}>Launch modal</Button>\n      <Modal\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isOpen}\n        onClose={() => toggleModal(false)}\n        size="sm"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Modal\n          </ModalHeader>\n          <ModalBody>\n            Modal body text goes here.\n          </ModalBody>\n          <ModalFooter justifyContent="space-between">\n            <Button\n              disabled={isNestedOpen}\n              variant="primary"\n              onClick={() => toggleNestedModal(true)}\n            >\n              Launch nested modal\n            </Button>\n            <Box>\n              <Button onClick={() => toggleModal(false)} minWidth="20x">\n                Close\n              </Button>\n            </Box>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <Modal\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isNestedOpen}\n        onClose={() => toggleNestedModal(false)}\n        size="xs"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Nested Modal\n          </ModalHeader>\n          <ModalBody>\n            Modal body text goes here.\n          </ModalBody>\n          <ModalFooter columnGap="2x">\n            <Button variant="primary" onClick={() => toggleNestedModal(false)} minWidth="20x">\n              Yes\n            </Button>\n            <Button onClick={() => toggleNestedModal(false)} minWidth="20x">\n              No\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/modal/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Box,\n  Button,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n} from \'@tonic-ui/react\';\nimport { useToggle } from \'@tonic-ui/react-hooks\';\nimport React from \'react\';\n\nconst App = () => {\n  const [isOpen, toggleModal] = useToggle(false);\n  const [isNestedOpen, toggleNestedModal] = useToggle(false);\n\n  return (\n    <>\n      <Button onClick={() => toggleModal(true)}>Launch modal</Button>\n      <Modal\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isOpen}\n        onClose={() => toggleModal(false)}\n        size="sm"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Modal\n          </ModalHeader>\n          <ModalBody>\n            Modal body text goes here.\n          </ModalBody>\n          <ModalFooter justifyContent="space-between">\n            <Button\n              disabled={isNestedOpen}\n              variant="primary"\n              onClick={() => toggleNestedModal(true)}\n            >\n              Launch nested modal\n            </Button>\n            <Box>\n              <Button onClick={() => toggleModal(false)} minWidth="20x">\n                Close\n              </Button>\n            </Box>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <Modal\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isNestedOpen}\n        onClose={() => toggleNestedModal(false)}\n        size="xs"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Nested Modal\n          </ModalHeader>\n          <ModalBody>\n            Modal body text goes here.\n          </ModalBody>\n          <ModalFooter columnGap="2x">\n            <Button variant="primary" onClick={() => toggleNestedModal(false)} minWidth="20x">\n              Yes\n            </Button>\n            <Button onClick={() => toggleNestedModal(false)} minWidth="20x">\n              No\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h2,{id:"props",children:["Props",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h3,{id:"modal-1",children:["Modal",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modal-1",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"autoFocus"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"false"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", the modal will automatically set focus on the first focusable element inside the modal when it is opened.",(0,o.jsx)("br",{}),"⚠️ This only works if ",(0,o.jsx)(n.code,{children:"initialFocusRef"})," is not defined and ",(0,o.jsx)(n.code,{children:"ensureFocus"})," is set to ",(0,o.jsx)(n.code,{children:"true"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsxs)(n.td,{align:"left",children:["ReactNode | ",(0,o.jsx)(n.code,{children:"(context) => ReactNode"})]}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"A function child can be used intead of a React element. This function is called with the context object."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"closeOnEsc"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"false"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", close the modal when the ",(0,o.jsx)(n.code,{children:"esc"})," key is pressed."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"closeOnOutsideClick"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"false"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", close the modal when click outside of the modal."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"ensureFocus"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"false"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", it ensures that the user's focus remains within the modal when it is open, preventing them from interacting with elements outside the modal."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"finalFocusRef"}),(0,o.jsx)(n.td,{align:"left",children:"RefObject"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsxs)(n.td,{align:"left",children:["The ",(0,o.jsx)(n.code,{children:"ref"})," of the element that should receive focus when the modal closes.",(0,o.jsx)("br",{}),"⚠️ This only works if ",(0,o.jsx)(n.code,{children:"ensureFocus"})," is set to ",(0,o.jsx)(n.code,{children:"true"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"initialFocusRef"}),(0,o.jsx)(n.td,{align:"left",children:"RefObject"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsxs)(n.td,{align:"left",children:["The ",(0,o.jsx)(n.code,{children:"ref"})," of the element that should receive focus when the modal opens.",(0,o.jsx)("br",{}),"⚠️ This only works if ",(0,o.jsx)(n.code,{children:"ensureFocus"})," is set to ",(0,o.jsx)(n.code,{children:"true"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"isClosable"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"false"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", a close button will appear on the right side."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"isOpen"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"false"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", the modal is shown."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"onClose"}),(0,o.jsx)(n.td,{align:"left",children:"function"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"Callback fired when the modal closes."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"returnFocusOnClose"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"true"}),(0,o.jsxs)(n.td,{align:"left",children:["If ",(0,o.jsx)(n.code,{children:"true"}),", the focus will be restored to the element that was focused on when the modal was initially opened.",(0,o.jsx)("br",{}),"⚠️ This only works if ",(0,o.jsx)(n.code,{children:"ensureFocus"})," is set to ",(0,o.jsx)(n.code,{children:"true"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"size"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'auto'"}),(0,o.jsx)(n.td,{align:"left",children:"Change the size of the modal. One of: 'auto', 'xs', 'sm', 'md', 'lg', 'xl', 'full'"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"scrollBehavior"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'inside'"}),(0,o.jsx)(n.td,{align:"left",children:"Control the scroll behavior of the modal if the content overflows. One of: 'inside', 'outside'"})]})]})]}),"\n",(0,o.jsxs)(n.h3,{id:"modaloverlay",children:["ModalOverlay",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modaloverlay",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,o.jsx)(n.td,{align:"left",children:"ElementType"}),(0,o.jsx)(n.td,{align:"left",children:"Fade"}),(0,o.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,o.jsx)(n.td,{align:"left",children:"object"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,o.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"TransitionProps.appear"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"true"}),(0,o.jsx)(n.td,{align:"left"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})]})]}),"\n",(0,o.jsxs)(n.h3,{id:"modalcontent",children:["ModalContent",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modalcontent",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,o.jsx)(n.td,{align:"left",children:"ElementType"}),(0,o.jsx)(n.td,{align:"left",children:"Fade"}),(0,o.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,o.jsx)(n.td,{align:"left",children:"object"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,o.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"TransitionProps.appear"}),(0,o.jsx)(n.td,{align:"left",children:"boolean"}),(0,o.jsx)(n.td,{align:"left",children:"true"}),(0,o.jsx)(n.td,{align:"left"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})]})]}),"\n",(0,o.jsxs)(n.h3,{id:"modalheader",children:["ModalHeader",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modalheader",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"modalbody",children:["ModalBody",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modalbody",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"modalfooter",children:["ModalFooter",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modalfooter",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"modalclosebutton",children:["ModalCloseButton",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#modalclosebutton",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]})]})}var index_page=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,l.ah)(),e.components).wrapper;return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(_createMdxContent,e)})):_createMdxContent(e)}},83449:function(e,n,t){"use strict";t.d(n,{Z:function(){return j}});var o=t(40596),l=t(49857),a=t(73645),r=t(82139),i=t(62368),s=t(62272),c=t(14594),d=t(65019),u=t(5632),m=t(2784),h=t(65245),x=t(82821),p=t(90622),g=t(52057),f=t(63651),y=t(95530),b=["size"];function _extends(){return(_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var C=(0,m.forwardRef)(function(e,n){var t=e.size,o=function(e,n){if(null==e)return{};var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}(e,b);return m.createElement(y.Z,_extends({size:t,viewBox:"0 0 1024 1024"},o),m.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});C.displayName="CodeSandboxIcon";var T=t(94981),M=["component","defaultExpanded","expanded","file","sandbox"];function _slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,l=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=l){var a=[],r=!0,i=!1;try{for(l=l.call(e);!(r=(t=l.next()).done)&&(a.push(t.value),!n||a.length!==n);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(i)throw o}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return _arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var Demo=function(e){var n=e.component,t=e.defaultExpanded,y=void 0!==t&&t,b=e.expanded,j=e.file,B=e.sandbox;!function(e,n){if(null!=e){var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}}}(e,M);var k=(0,u.useRouter)(),v=_slicedToArray((0,m.useReducer)(function(e){return!e},!1),2),E=v[0],F=v[1],w=_slicedToArray((0,o.Z)(),1)[0],S={dark:p.y,light:p.q}[w],Z=_slicedToArray((0,d.Z)(null!=b?b:y),2),O=Z[0],G=Z[1],L=(0,x.Z)(null==j?void 0:j.data),I=L.onCopy,A=L.hasCopied,H=(0,m.useCallback)(function(){I()},[I]),P=(0,m.useCallback)(function(){(0,g.b)(B)},[B]),N=(0,m.useCallback)(function(){F(),G(!1)},[F,G]);return(0,m.useEffect)(function(){void 0!==b&&b!==O&&G(b)},[b,O,G]),m.createElement(h.nu,{code:null==j?void 0:j.data,disabled:!0,language:"jsx",theme:S},m.createElement(l.Z,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[w],p:"4x"},m.createElement(l.Z,{fontSize:"sm",lineHeight:"sm"},m.createElement(m.Fragment,{key:E},m.createElement(n,null)))),m.createElement(a.Z,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},m.createElement(T.Z,{"data-track":O?"CodeBlock|hide_source|".concat((0,f.Z)({path:k.pathname})):"CodeBlock|show_source|".concat((0,f.Z)({path:k.pathname})),onClick:G},m.createElement(r.Z,{label:O?"Hide the source":"Show the source"},m.createElement(i.Z,{icon:"code"}))),m.createElement(T.Z,{"data-track":"CodeBlock|copy_source|".concat((0,f.Z)({path:k.pathname})),onClick:H},m.createElement(r.Z,{label:A?"Copied":"Copy the source"},m.createElement(i.Z,{icon:"file-copy-o"}))),m.createElement(T.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(k.pathname),onClick:P},m.createElement(r.Z,{label:"Edit in CodeSandbox"},m.createElement(C,null))),m.createElement(T.Z,{"data-track":"CodeBlock|reset|".concat(k.pathname),onClick:N},m.createElement(r.Z,{label:"Reset the demo"},m.createElement(i.Z,{icon:"redo"})))),m.createElement(s.Z,{in:O},m.createElement(c.Z,{in:O,unmountOnExit:!0},m.createElement(l.Z,{as:h.uz,sx:{fontFamily:"mono",fontSize:"sm","& > .prism-code":{overflowX:"auto"}}}))))};Demo.displayName="Demo";var j=Demo},20548:function(e,n,t){"use strict";var o=t(73645),l=t(57861),a=t(2784);n.Z=function(e){return a.createElement(o.Z,e,a.createElement(o.Z,{flex:"none",mr:"4x",alignItems:"center"},a.createElement(l.Z,{variant:"circle",width:"10x",height:"10x"})),a.createElement(o.Z,{flex:"auto",flexDirection:"column",rowGap:"2x"},a.createElement(l.Z,null),a.createElement(l.Z,null),a.createElement(l.Z,null)))}},40891:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/modal",function(){return t(55100)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=40891)}),_N_E=e.O()}]);