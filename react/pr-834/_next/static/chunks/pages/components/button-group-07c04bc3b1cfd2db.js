(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6689],{10973:function(n,t,e){"use strict";e.r(t),e.d(t,{default:function(){return index_page}});var o=e(52322),r=e(45392),i=e(83449),a=e(28165),l=e(40596),c=e(73645),u=e(49857),s=e(67622),d=e(39256),m=e(55459),h=e(62368),p=e(72448),v=e(2784);function _slicedToArray(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var i=[],a=!0,l=!1;try{for(r=r.call(n);!(a=(e=r.next()).done)&&(i.push(e.value),!t||i.length!==t);a=!0);}catch(n){l=!0,o=n}finally{try{a||null==r.return||r.return()}finally{if(l)throw o}}return i}}(n,t)||function(n,t){if(n){if("string"==typeof n)return _arrayLikeToArray(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return _arrayLikeToArray(n,t)}}(n,t)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var states=function(){var n=_slicedToArray((0,l.Z)(),1)[0],t={dark:"red:80",light:"red:80"}[n],e={dark:"blue:80",light:"blue:80"}[n],o={dark:"gray:70",light:"gray:30"}[n],r={dark:"gray:60",light:"gray:20"}[n],i=["chart-pie","chart-line","chart-table","chart-bar"],B=i.length-1,f=_slicedToArray((0,v.useState)("chart-pie"),2),g=f[0],y=f[1],x=_slicedToArray((0,v.useState)("chart-pie"),2),k=x[0],b=x[1],E=_slicedToArray((0,v.useState)("chart-pie"),2),Z=E[0],C=E[1],D=_slicedToArray((0,v.useState)("chart-pie"),2),T=D[0],G=D[1],j=_slicedToArray((0,v.useState)("chart-pie"),2),w=j[0],L=j[1],I=_slicedToArray((0,v.useState)("chart-pie"),2),A=I[0],S=I[1];return v.createElement(c.Z,{direction:"column",rowGap:"4x"},v.createElement(u.Z,null,v.createElement(u.Z,{mb:"2x"},v.createElement(s.Z,null,"Emphasis")),v.createElement(d.Z,{variant:"emphasis"},i.map(function(n,e){return v.createElement(v.Fragment,{key:n},v.createElement(m.Z,{disabled:e===B,selected:g===n,onClick:function(t){y(n),t.currentTarget.blur()},width:"8x"},v.createElement(h.Z,{icon:n})),e!==B&&v.createElement(p.Z,{orientation:"vertical",color:t}))}))),v.createElement(u.Z,null,v.createElement(u.Z,{mb:"2x"},v.createElement(s.Z,null,"Primary")),v.createElement(d.Z,{variant:"primary"},i.map(function(n,t){return v.createElement(v.Fragment,{key:n},v.createElement(m.Z,{disabled:t===B,selected:k===n,onClick:function(t){b(n),t.currentTarget.blur()},width:"8x"},v.createElement(h.Z,{icon:n})),t!==B&&v.createElement(p.Z,{orientation:"vertical",color:e}))}))),v.createElement(u.Z,null,v.createElement(u.Z,{mb:"2x"},v.createElement(s.Z,null,"Default")),v.createElement(d.Z,{variant:"default"},i.map(function(n,t){return v.createElement(v.Fragment,{key:n},v.createElement(m.Z,{disabled:t===B,selected:Z===n,onClick:function(t){C(n),t.currentTarget.blur()},width:"8x"},v.createElement(h.Z,{icon:n})),t!==B&&v.createElement(p.Z,{orientation:"vertical",color:o}))}))),v.createElement(u.Z,null,v.createElement(u.Z,{mb:"2x"},v.createElement(s.Z,null,"Secondary")),v.createElement(d.Z,{variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},i.map(function(n,t){return v.createElement(v.Fragment,{key:n},v.createElement(m.Z,{disabled:t===B,selected:T===n,onClick:function(t){G(n),t.currentTarget.blur()},width:"8x"},v.createElement(h.Z,{icon:n})))}))),v.createElement(u.Z,null,v.createElement(u.Z,{mb:"2x"},v.createElement(s.Z,null,"Ghost")),v.createElement(d.Z,{variant:"ghost"},i.map(function(n,t){return v.createElement(v.Fragment,{key:n},v.createElement(m.Z,{disabled:t===B,selected:w===n,onClick:function(t){L(n),t.currentTarget.blur()},width:"8x"},v.createElement(h.Z,{icon:n})),t!==B&&v.createElement(p.Z,{orientation:"vertical",color:r}))}))),v.createElement(u.Z,null,v.createElement(u.Z,{mb:"2x"},v.createElement(s.Z,null,"Ghost (w/o ButtonGroup)")),v.createElement(c.Z,null,i.map(function(n,t){return v.createElement(v.Fragment,{key:n},v.createElement(m.Z,{disabled:t===B,selected:A===n,onClick:function(t){S(n),t.currentTarget.blur()},variant:"ghost",width:"8x"},v.createElement(h.Z,{icon:n})))}))))},B=e(61619);function orientation_arrayLikeToArray(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var orientation=function(){var n,t=(function(n){if(Array.isArray(n))return n}(n=(0,l.Z)())||function(n,t){var e,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var i=[],a=!0,l=!1;try{for(r=r.call(n);!(a=(e=r.next()).done)&&(i.push(e.value),!t||i.length!==t);a=!0);}catch(n){l=!0,o=n}finally{try{a||null==r.return||r.return()}finally{if(l)throw o}}return i}}(n,1)||function(n,t){if(n){if("string"==typeof n)return orientation_arrayLikeToArray(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return orientation_arrayLikeToArray(n,t)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],e={dark:"gray:70",light:"gray:30"}[t],o={dark:"gray:60",light:"gray:20"}[t];return v.createElement(B.Z,{direction:"row",spacing:"4x"},v.createElement(B.Z,{spacing:"4x",alignItems:"center"},v.createElement(d.Z,null,v.createElement(m.Z,null,"One"),v.createElement(p.Z,{orientation:"vertical",color:e}),v.createElement(m.Z,null,"Two"),v.createElement(p.Z,{orientation:"vertical",color:e}),v.createElement(m.Z,null,"Three")),v.createElement(d.Z,{orientation:"vertical"},v.createElement(m.Z,null,"One"),v.createElement(p.Z,{color:e}),v.createElement(m.Z,null,"Two"),v.createElement(p.Z,{color:e}),v.createElement(m.Z,null,"Three"))),v.createElement(B.Z,{spacing:"4x",alignItems:"center"},v.createElement(d.Z,{variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},v.createElement(m.Z,null,"One"),v.createElement(m.Z,null,"Two"),v.createElement(m.Z,null,"Three")),v.createElement(d.Z,{orientation:"vertical",variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginTop:-1}},"","")},v.createElement(m.Z,null,"One"),v.createElement(m.Z,null,"Two"),v.createElement(m.Z,null,"Three"))),v.createElement(B.Z,{spacing:"4x",alignItems:"center"},v.createElement(d.Z,{variant:"ghost",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},v.createElement(m.Z,null,"One"),v.createElement(p.Z,{orientation:"vertical",color:o}),v.createElement(m.Z,null,"Two"),v.createElement(p.Z,{orientation:"vertical",color:o}),v.createElement(m.Z,null,"Three")),v.createElement(d.Z,{orientation:"vertical",variant:"ghost",css:(0,a.iv)({"> *:not(:first-of-type)":{marginTop:-1}},"","")},v.createElement(m.Z,null,"One"),v.createElement(p.Z,{color:o}),v.createElement(m.Z,null,"Two"),v.createElement(p.Z,{color:o}),v.createElement(m.Z,null,"Three"))))};function sizes_arrayLikeToArray(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var sizes=function(){var n,t=(function(n){if(Array.isArray(n))return n}(n=(0,l.Z)())||function(n,t){var e,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var i=[],a=!0,l=!1;try{for(r=r.call(n);!(a=(e=r.next()).done)&&(i.push(e.value),!t||i.length!==t);a=!0);}catch(n){l=!0,o=n}finally{try{a||null==r.return||r.return()}finally{if(l)throw o}}return i}}(n,1)||function(n,t){if(n){if("string"==typeof n)return sizes_arrayLikeToArray(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return sizes_arrayLikeToArray(n,t)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],e={dark:"gray:70",light:"gray:30"}[t],o={dark:"gray:60",light:"gray:20"}[t];return v.createElement(B.Z,{direction:"row",spacing:"4x"},v.createElement(B.Z,{spacing:"4x",alignItems:"flex-start"},v.createElement(d.Z,{size:"sm"},v.createElement(m.Z,null,"Left"),v.createElement(p.Z,{orientation:"vertical",color:e}),v.createElement(m.Z,null,"Middle"),v.createElement(p.Z,{orientation:"vertical",color:e}),v.createElement(m.Z,null,"Right")),v.createElement(d.Z,{size:"md"},v.createElement(m.Z,null,"Left"),v.createElement(p.Z,{orientation:"vertical",color:e}),v.createElement(m.Z,null,"Middle"),v.createElement(p.Z,{orientation:"vertical",color:e}),v.createElement(m.Z,null,"Right")),v.createElement(d.Z,{size:"lg"},v.createElement(m.Z,null,"Left"),v.createElement(p.Z,{orientation:"vertical",color:e}),v.createElement(m.Z,null,"Middle"),v.createElement(p.Z,{orientation:"vertical",color:e}),v.createElement(m.Z,null,"Right"))),v.createElement(B.Z,{spacing:"4x",alignItems:"flex-start"},v.createElement(d.Z,{size:"sm",variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},v.createElement(m.Z,null,"Left"),v.createElement(m.Z,null,"Middle"),v.createElement(m.Z,null,"Right")),v.createElement(d.Z,{size:"md",variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},v.createElement(m.Z,null,"Left"),v.createElement(m.Z,null,"Middle"),v.createElement(m.Z,null,"Right")),v.createElement(d.Z,{size:"lg",variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},v.createElement(m.Z,null,"Left"),v.createElement(m.Z,null,"Middle"),v.createElement(m.Z,null,"Right"))),v.createElement(B.Z,{spacing:"4x",alignItems:"flex-start"},v.createElement(d.Z,{size:"sm",variant:"ghost",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},v.createElement(m.Z,null,"Left"),v.createElement(p.Z,{orientation:"vertical",color:o}),v.createElement(m.Z,null,"Middle"),v.createElement(p.Z,{orientation:"vertical",color:o}),v.createElement(m.Z,null,"Right")),v.createElement(d.Z,{size:"md",variant:"ghost",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},v.createElement(m.Z,null,"Left"),v.createElement(p.Z,{orientation:"vertical",color:o}),v.createElement(m.Z,null,"Middle"),v.createElement(p.Z,{orientation:"vertical",color:o}),v.createElement(m.Z,null,"Right")),v.createElement(d.Z,{size:"lg",variant:"ghost",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},v.createElement(m.Z,null,"Left"),v.createElement(p.Z,{orientation:"vertical",color:o}),v.createElement(m.Z,null,"Middle"),v.createElement(p.Z,{orientation:"vertical",color:o}),v.createElement(m.Z,null,"Right"))))};function variants_arrayLikeToArray(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var variants=function(){var n,t=(function(n){if(Array.isArray(n))return n}(n=(0,l.Z)())||function(n,t){var e,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var i=[],a=!0,l=!1;try{for(r=r.call(n);!(a=(e=r.next()).done)&&(i.push(e.value),!t||i.length!==t);a=!0);}catch(n){l=!0,o=n}finally{try{a||null==r.return||r.return()}finally{if(l)throw o}}return i}}(n,1)||function(n,t){if(n){if("string"==typeof n)return variants_arrayLikeToArray(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return variants_arrayLikeToArray(n,t)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],e={dark:"red:80",light:"red:80"}[t],o={dark:"blue:80",light:"blue:80"}[t],r={dark:"gray:70",light:"gray:30"}[t],i={dark:"gray:60",light:"gray:20"}[t];return v.createElement(B.Z,{direction:"column",spacing:"3x"},v.createElement(d.Z,{variant:"emphasis"},v.createElement(m.Z,null,"One"),v.createElement(p.Z,{orientation:"vertical",color:e}),v.createElement(m.Z,null,"Two"),v.createElement(p.Z,{orientation:"vertical",color:e}),v.createElement(m.Z,null,"Three")),v.createElement(d.Z,{variant:"primary"},v.createElement(m.Z,null,"One"),v.createElement(p.Z,{orientation:"vertical",color:o}),v.createElement(m.Z,null,"Two"),v.createElement(p.Z,{orientation:"vertical",color:o}),v.createElement(m.Z,null,"Three")),v.createElement(d.Z,{variant:"default"},v.createElement(m.Z,null,"One"),v.createElement(p.Z,{orientation:"vertical",color:r}),v.createElement(m.Z,null,"Two"),v.createElement(p.Z,{orientation:"vertical",color:r}),v.createElement(m.Z,null,"Three")),v.createElement(d.Z,{variant:"secondary",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},v.createElement(m.Z,null,"One"),v.createElement(m.Z,null,"Two"),v.createElement(m.Z,null,"Three")),v.createElement(d.Z,{variant:"ghost",css:(0,a.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},v.createElement(m.Z,null,"One"),v.createElement(p.Z,{orientation:"vertical",color:i}),v.createElement(m.Z,null,"Two"),v.createElement(p.Z,{orientation:"vertical",color:i}),v.createElement(m.Z,null,"Three")))};function basic_arrayLikeToArray(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var basic=function(){var n,t={dark:"gray:70",light:"gray:30"}[(function(n){if(Array.isArray(n))return n}(n=(0,l.Z)())||function(n,t){var e,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var i=[],a=!0,l=!1;try{for(r=r.call(n);!(a=(e=r.next()).done)&&(i.push(e.value),!t||i.length!==t);a=!0);}catch(n){l=!0,o=n}finally{try{a||null==r.return||r.return()}finally{if(l)throw o}}return i}}(n,1)||function(n,t){if(n){if("string"==typeof n)return basic_arrayLikeToArray(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return basic_arrayLikeToArray(n,t)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]];return v.createElement(d.Z,null,v.createElement(m.Z,null,"One"),v.createElement(p.Z,{orientation:"vertical",color:t}),v.createElement(m.Z,null,"Two"),v.createElement(p.Z,{orientation:"vertical",color:t}),v.createElement(m.Z,null,"Three"))};function _createMdxContent(n){var t=Object.assign({div:"div",h1:"h1",p:"p",code:"code",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",h3:"h3",ul:"ul",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,r.ah)(),n.components);return(0,o.jsxs)(t.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n",(0,o.jsx)(t.h1,{id:"buttongroup",children:"ButtonGroup"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"ButtonGroup"})," is used to group related buttons."]}),"\n",(0,o.jsxs)(t.h2,{id:"import",children:["Import",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { ButtonGroup } from '@tonic-ui/react';\n"})}),"\n",(0,o.jsxs)(t.h2,{id:"usage",children:["Usage",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(t.h3,{id:"basic-button-group",children:["Basic button group",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-button-group",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(i.Z,{component:basic,file:{data:"import {\n  Button,\n  ButtonGroup,\n  Divider,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React from 'react';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const dividerColor ={\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n\n  return (\n    <ButtonGroup>\n      <Button>One</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Two</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Three</Button>\n    </ButtonGroup>\n  );\n};\n\nexport default App;",path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Button,\n  ButtonGroup,\n  Divider,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React from 'react';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const dividerColor ={\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n\n  return (\n    <ButtonGroup>\n      <Button>One</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Two</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Three</Button>\n    </ButtonGroup>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(t.h3,{id:"group-variants",children:["Group variants",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#group-variants",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Use the ",(0,o.jsx)(t.code,{children:"variant"})," prop to change the visual style of every button in a group. You can set the value to ",(0,o.jsx)(t.code,{children:"emphasis"}),", ",(0,o.jsx)(t.code,{children:"primary"}),", ",(0,o.jsx)(t.code,{children:"default"}),", ",(0,o.jsx)(t.code,{children:"secondary"})," and ",(0,o.jsx)(t.code,{children:"ghost"}),"."]}),"\n",(0,o.jsx)(i.Z,{component:variants,file:{data:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor ={\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor ={\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="column" spacing="3x">\n      <ButtonGroup variant="emphasis">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="primary">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="default">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="secondary"\n        css={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Button>Two</Button>\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="ghost"\n        css={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor ={\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor ={\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="column" spacing="3x">\n      <ButtonGroup variant="emphasis">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="primary">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="default">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="secondary"\n        css={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Button>Two</Button>\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="ghost"\n        css={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(t.h3,{id:"group-sizes",children:["Group sizes",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#group-sizes",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Use the ",(0,o.jsx)(t.code,{children:"size"})," prop to change the size of the ",(0,o.jsx)(t.code,{children:"ButtonGroup"}),". You can set the value to ",(0,o.jsx)(t.code,{children:"sm"}),", ",(0,o.jsx)(t.code,{children:"md"}),", or ",(0,o.jsx)(t.code,{children:"lg"}),"."]}),"\n",(0,o.jsx)(i.Z,{component:sizes,file:{data:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup size="sm">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="md">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="lg">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup size="sm">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="md">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="lg">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(t.h3,{id:"group-orientation",children:["Group orientation",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#group-orientation",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Make a set of buttons appear vertically stacked rather than horizontally, by adding ",(0,o.jsx)(t.code,{children:'orientation="vertical"'})," to the ",(0,o.jsx)(t.code,{children:"ButtonGroup"})," component."]}),"\n",(0,o.jsx)(i.Z,{component:orientation,file:{data:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup>\n          <Button>One</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup orientation="vertical">\n          <Button>One</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Stack,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup>\n          <Button>One</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup orientation="vertical">\n          <Button>One</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(t.h3,{id:"group-states",children:["Group states",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#group-states",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(t.p,{children:"The following example shows different states (i.e. normal, disabled, and selected states) when composing a group of buttons."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Use the ",(0,o.jsx)(t.code,{children:"disabled"})," prop to make the ",(0,o.jsx)(t.code,{children:"Button"})," appear disabled."]}),"\n",(0,o.jsxs)(t.li,{children:["Use the ",(0,o.jsx)(t.code,{children:"selected"})," prop to make the ",(0,o.jsx)(t.code,{children:"Button"})," appear selected."]}),"\n"]}),"\n",(0,o.jsx)(i.Z,{component:states,file:{data:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Icon,\n  TextLabel,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React, { Fragment, useState } from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor = {\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor = {\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor = {\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor = {\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  const icons = [\'chart-pie\', \'chart-line\', \'chart-table\', \'chart-bar\'];\n  const lastIconIndex = icons.length - 1;\n  const [activeButton1, setActiveButton1] = useState(\'chart-pie\');\n  const [activeButton2, setActiveButton2] = useState(\'chart-pie\');\n  const [activeButton3, setActiveButton3] = useState(\'chart-pie\');\n  const [activeButton4, setActiveButton4] = useState(\'chart-pie\');\n  const [activeButton5, setActiveButton5] = useState(\'chart-pie\');\n  const [activeButton6, setActiveButton6] = useState(\'chart-pie\');\n\n  const handleClick1 = (button) => (e) => {\n    setActiveButton1(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick2 = (button) => (e) => {\n    setActiveButton2(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick3 = (button) => (e) => {\n    setActiveButton3(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick4 = (button) => (e) => {\n    setActiveButton4(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick5 = (button) => (e) => {\n    setActiveButton5(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick6 = (button) => (e) => {\n    setActiveButton6(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n\n  return (\n    <Flex direction="column" rowGap="4x">\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Emphasis\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="emphasis">\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton1 === key}\n                onClick={handleClick1(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={emphasisDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Primary\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="primary">\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton2 === key}\n                onClick={handleClick2(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={primaryDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Default\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="default">\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton3 === key}\n                onClick={handleClick3(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={defaultDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Secondary\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton4 === key}\n                onClick={handleClick4(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Ghost\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="ghost"\n        >\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton5 === key}\n                onClick={handleClick5(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={ghostDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Ghost (w/o ButtonGroup)\n          </TextLabel>\n        </Box>\n        <Flex>\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton6 === key}\n                onClick={handleClick6(key)}\n                variant="ghost"\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n            </Fragment>\n          ))}\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default App;',path:"pages/components/button-group/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Icon,\n  TextLabel,\n  useColorMode,\n} from \'@tonic-ui/react\';\nimport React, { Fragment, useState } from \'react\';\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor = {\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor = {\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor = {\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor = {\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  const icons = [\'chart-pie\', \'chart-line\', \'chart-table\', \'chart-bar\'];\n  const lastIconIndex = icons.length - 1;\n  const [activeButton1, setActiveButton1] = useState(\'chart-pie\');\n  const [activeButton2, setActiveButton2] = useState(\'chart-pie\');\n  const [activeButton3, setActiveButton3] = useState(\'chart-pie\');\n  const [activeButton4, setActiveButton4] = useState(\'chart-pie\');\n  const [activeButton5, setActiveButton5] = useState(\'chart-pie\');\n  const [activeButton6, setActiveButton6] = useState(\'chart-pie\');\n\n  const handleClick1 = (button) => (e) => {\n    setActiveButton1(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick2 = (button) => (e) => {\n    setActiveButton2(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick3 = (button) => (e) => {\n    setActiveButton3(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick4 = (button) => (e) => {\n    setActiveButton4(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick5 = (button) => (e) => {\n    setActiveButton5(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick6 = (button) => (e) => {\n    setActiveButton6(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n\n  return (\n    <Flex direction="column" rowGap="4x">\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Emphasis\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="emphasis">\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton1 === key}\n                onClick={handleClick1(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={emphasisDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Primary\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="primary">\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton2 === key}\n                onClick={handleClick2(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={primaryDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Default\n          </TextLabel>\n        </Box>\n        <ButtonGroup variant="default">\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton3 === key}\n                onClick={handleClick3(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={defaultDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Secondary\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton4 === key}\n                onClick={handleClick4(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Ghost\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="ghost"\n        >\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton5 === key}\n                onClick={handleClick5(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={ghostDividerColor} />\n              )}\n            </Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <Box mb="2x">\n          <TextLabel>\n            Ghost (w/o ButtonGroup)\n          </TextLabel>\n        </Box>\n        <Flex>\n          {icons.map((key, index) => (\n            <Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton6 === key}\n                onClick={handleClick6(key)}\n                variant="ghost"\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n            </Fragment>\n          ))}\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(t.h2,{id:"props",children:["Props",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(t.h3,{id:"buttongroup-1",children:["ButtonGroup",(0,o.jsx)(t.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#buttongroup-1",children:(0,o.jsx)(t.svg,{children:(0,o.jsx)(t.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{align:"left",children:"Name"}),(0,o.jsx)(t.th,{align:"left",children:"Type"}),(0,o.jsx)(t.th,{align:"left",children:"Default"}),(0,o.jsx)(t.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"children"}),(0,o.jsxs)(t.td,{align:"left",children:["ReactNode | ",(0,o.jsx)(t.code,{children:"(context) => ReactNode"})]}),(0,o.jsx)(t.td,{align:"left"}),(0,o.jsx)(t.td,{align:"left",children:"A function child can be used intead of a React element. This function is called with the context object."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"orientation"}),(0,o.jsx)(t.td,{align:"left",children:"string"}),(0,o.jsx)(t.td,{align:"left",children:"'horizontal'"}),(0,o.jsx)(t.td,{align:"left",children:"The orientation of the button group. One of: 'horizontal', 'vertical'"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"size"}),(0,o.jsx)(t.td,{align:"left",children:"string"}),(0,o.jsx)(t.td,{align:"left",children:"'md'"}),(0,o.jsx)(t.td,{align:"left",children:"The size of the button group. One of: 'sm', 'md', 'lg'"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"variant"}),(0,o.jsx)(t.td,{align:"left",children:"string"}),(0,o.jsx)(t.td,{align:"left",children:"'default'"}),(0,o.jsx)(t.td,{align:"left",children:"The variant of the button group. One of: 'emphasis', 'primary', 'default', 'secondary', 'ghost'"})]})]})]})]})}var index_page=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},(0,r.ah)(),n.components).wrapper;return t?(0,o.jsx)(t,Object.assign({},n,{children:(0,o.jsx)(_createMdxContent,n)})):_createMdxContent(n)}},83449:function(n,t,e){"use strict";e.d(t,{Z:function(){return E}});var o=e(40596),r=e(49857),i=e(73645),a=e(82139),l=e(62368),c=e(62272),u=e(14594),s=e(65019),d=e(5632),m=e(2784),h=e(65245),p=e(82821),v=e(90622),B=e(52057),f=e(63651),g=e(95530),y=["size"];function _extends(){return(_extends=Object.assign?Object.assign.bind():function(n){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o])}return n}).apply(this,arguments)}var x=(0,m.forwardRef)(function(n,t){var e=n.size,o=function(n,t){if(null==n)return{};var e,o,r=function(n,t){if(null==n)return{};var e,o,r={},i=Object.keys(n);for(o=0;o<i.length;o++)e=i[o],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(o=0;o<i.length;o++)e=i[o],!(t.indexOf(e)>=0)&&Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}(n,y);return m.createElement(g.Z,_extends({size:e,viewBox:"0 0 1024 1024"},o),m.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});x.displayName="CodeSandboxIcon";var k=e(94981);function _slicedToArray(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var i=[],a=!0,l=!1;try{for(r=r.call(n);!(a=(e=r.next()).done)&&(i.push(e.value),!t||i.length!==t);a=!0);}catch(n){l=!0,o=n}finally{try{a||null==r.return||r.return()}finally{if(l)throw o}}return i}}(n,t)||function(n,t){if(n){if("string"==typeof n)return _arrayLikeToArray(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if("Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e)return Array.from(n);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return _arrayLikeToArray(n,t)}}(n,t)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,o=Array(t);e<t;e++)o[e]=n[e];return o}var b={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},Demo=function(n){var t=n.component,e=n.file,g=n.sandbox,y=(0,d.useRouter)(),E=_slicedToArray((0,m.useReducer)(function(n){return!n},!1),2),Z=E[0],C=E[1],D=_slicedToArray((0,o.Z)(),1)[0],T={dark:v.y,light:v.q}[D],G=_slicedToArray((0,s.Z)(!1),2),j=G[0],w=G[1],L=(0,p.Z)(null==e?void 0:e.data),I=L.onCopy,A=L.hasCopied,S=(0,m.useCallback)(function(){I()},[I]),M=(0,m.useCallback)(function(){(0,B.b)(g)},[g]),O=(0,m.useCallback)(function(){C(),w(!1)},[C,w]);return m.createElement(h.nu,{code:null==e?void 0:e.data,disabled:!0,language:"jsx",theme:T},m.createElement(r.Z,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[D],p:"4x"},m.createElement(r.Z,{fontSize:"sm",lineHeight:"sm"},m.createElement(m.Fragment,{key:Z},m.createElement(t,null)))),m.createElement(i.Z,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},m.createElement(k.Z,{"data-track":j?"CodeBlock|hide_source|".concat((0,f.Z)({path:y.pathname})):"CodeBlock|show_source|".concat((0,f.Z)({path:y.pathname})),onClick:w},m.createElement(a.Z,{label:j?"Hide the source":"Show the source"},m.createElement(l.Z,{icon:"code"}))),m.createElement(k.Z,{"data-track":"CodeBlock|copy_source|".concat((0,f.Z)({path:y.pathname})),onClick:S},m.createElement(a.Z,{label:A?"Copied":"Copy the source"},m.createElement(l.Z,{icon:"file-copy-o"}))),m.createElement(k.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(y.pathname),onClick:M},m.createElement(a.Z,{label:"Edit in CodeSandbox"},m.createElement(x,null))),m.createElement(k.Z,{"data-track":"CodeBlock|reset|".concat(y.pathname),onClick:O},m.createElement(a.Z,{label:"Reset the demo"},m.createElement(l.Z,{icon:"redo"})))),m.createElement(c.Z,{in:j},m.createElement(u.Z,{in:j,unmountOnExit:!0},m.createElement(h.uz,{style:b}))))};Demo.displayName="Demo";var E=Demo},69388:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/button-group",function(){return e(10973)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=69388)}),_N_E=n.O()}]);