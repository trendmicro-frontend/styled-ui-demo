(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3172],{11349:function(e,n,o){"use strict";o.r(n),o.d(n,{default:function(){return index_page}});var t,r,l,d,a,i,c,s,u=o(52322),h=o(45392),b=o(68314),p=o(40596),f=o(85017),m=o(73645),g=o(78366),x=o(49857),N=o(743),y=o(10636),v=o(70828),I=o(29970),T=o(5081),S=o(76635),w=o.n(S),C=o(2784),k=o(28846),E=o(52797),j=JSON.parse('[{"id":"1","label":"Node 1","children":[{"id":"1.1","label":"Node 2","children":[{"id":"1.1.1","label":"Node 3","children":[{"id":"1.1.1.1","label":"Node 4"}]},{"id":"1.1.2","label":"Node 5","children":[{"id":"1.1.2.1","label":"Node 6"}]},{"id":"1.1.3","label":"Node 7","children":[{"id":"1.1.3.1","label":"Node 8"},{"id":"1.1.3.2","label":"Node 9"},{"id":"1.1.3.3","label":"Node 10"}]},{"id":"1.1.4","label":"Node 11"},{"id":"1.1.5","label":"Node 12"}]},{"id":"1.2","label":"Node 13","children":[{"id":"1.2.1","label":"Node 14","children":[{"id":"1.2.1.1","label":"Node 15"}]}]},{"id":"1.3","label":"Node 16","children":[{"id":"1.3.1","label":"Node 17"},{"id":"1.3.2","label":"Node 18"},{"id":"1.3.3","label":"Node 19"},{"id":"1.3.4","label":"Node 20","children":[{"id":"1.3.4.1","label":"Node 21"},{"id":"1.3.4.2","label":"Node 22"},{"id":"1.3.4.3","label":"Node 23"}]},{"id":"1.3.5","label":"Node 24"}]},{"id":"1.4","label":"Node 25","children":[{"id":"1.4.1","label":"Node 26"},{"id":"1.4.2","label":"Node 27"},{"id":"1.4.3","label":"Node 28"}]}]},{"id":"2","label":"Node 29","children":[{"id":"2.1","label":"Node 30","children":[{"id":"2.1.1","label":"Node 31"},{"id":"2.1.2","label":"Node 32"},{"id":"2.1.3","label":"Node 33"}]},{"id":"2.2","label":"Node 34"},{"id":"2.3","label":"Node 35","children":[{"id":"2.3.1","label":"Node 36","children":[{"id":"2.3.1.1","label":"Node 37"},{"id":"2.3.1.2","label":"Node 38"}]}]},{"id":"2.4","label":"Node 39"}]},{"id":"3","label":"Node 40","children":[{"id":"3.1","label":"Node 41","children":[{"id":"3.1.1","label":"Node 42"},{"id":"3.1.2","label":"Node 43","children":[{"id":"3.1.2.1","label":"Node 44"},{"id":"3.1.2.2","label":"Node 45"},{"id":"3.1.2.3","label":"Node 46"},{"id":"3.1.2.4","label":"Node 47"}]},{"id":"3.1.3","label":"Node 48"}]},{"id":"3.2","label":"Node 49","children":[{"id":"3.2.1","label":"Node 50"},{"id":"3.2.2","label":"Node 51"}]},{"id":"3.3","label":"Node 52","children":[{"id":"3.3.1","label":"Node 53"},{"id":"3.3.2","label":"Node 54","children":[{"id":"3.3.2.1","label":"Node 55"}]}]},{"id":"3.4","label":"Node 56"},{"id":"3.5","label":"Node 57","children":[{"id":"3.5.1","label":"Node 58"},{"id":"3.5.2","label":"Node 59","children":[{"id":"3.5.2.1","label":"Node 60"},{"id":"3.5.2.2","label":"Node 61"}]}]}]},{"id":"4","label":"Node 62","children":[{"id":"4.1","label":"Node 63","children":[{"id":"4.1.1","label":"Node 64","children":[{"id":"4.1.1.1","label":"Node 65"},{"id":"4.1.1.2","label":"Node 66"}]},{"id":"4.1.2","label":"Node 67"},{"id":"4.1.3","label":"Node 68"},{"id":"4.1.4","label":"Node 69"}]}]},{"id":"5","label":"Node 70","children":[{"id":"5.1","label":"Node 71","children":[{"id":"5.1.1","label":"Node 72"},{"id":"5.1.2","label":"Node 73"},{"id":"5.1.3","label":"Node 74","children":[{"id":"5.1.3.1","label":"Node 75"}]},{"id":"5.1.4","label":"Node 76","children":[{"id":"5.1.4.1","label":"Node 77"},{"id":"5.1.4.2","label":"Node 78"}]}]},{"id":"5.2","label":"Node 79"},{"id":"5.3","label":"Node 80","children":[{"id":"5.3.1","label":"Node 81"}]},{"id":"5.4","label":"Node 82","children":[{"id":"5.4.1","label":"Node 83","children":[{"id":"5.4.1.1","label":"Node 84"}]},{"id":"5.4.2","label":"Node 85"}]},{"id":"5.5","label":"Node 86"}]},{"id":"6","label":"Node 87","children":[{"id":"6.1","label":"Node 88"},{"id":"6.2","label":"Node 89"},{"id":"6.3","label":"Node 90","children":[{"id":"6.3.1","label":"Node 91"},{"id":"6.3.2","label":"Node 92"},{"id":"6.3.3","label":"Node 93"}]},{"id":"6.4","label":"Node 94"}]},{"id":"7","label":"Node 95","children":[{"id":"7.1","label":"Node 96","children":[{"id":"7.1.1","label":"Node 97"},{"id":"7.1.2","label":"Node 98","children":[{"id":"7.1.2.1","label":"Node 99"},{"id":"7.1.2.2","label":"Node 100"}]}]}]}]'),buildTreeNodes=function(){return JSON.parse(JSON.stringify(j))},buildTreeMap=function(e){var n=new Map;return!function traverse(e){(0,T.rY)(e).forEach(function(e){n.set(e.id,e),traverse(e.children)})}(e),n},findExpandableNodeIds=function(e){var n=[];return!function traverse(e){(0,T.rY)(e).forEach(function(e){Array.isArray(e.children)&&e.children.length>0&&(n.push(e.id),traverse(e.children))})}(e),n},A=o(95412),D=o(73705),Z=o(27216),R=o(1847),O=o(53310),_=o(30514),P=o(75715),M=o(98306),z=o(24909),F=o(15345),L=o(63433),B=o(58614),W=o(17179),H=o(86851),U=o(31222),Y=o(95530),V=o(56818),G=o(6738),$=o(89114),dnd_ConditionalWrapper=function(e){var n=e.children,o=e.condition,t=e.wrapper;return o?t(n):n},X=o(92843),K=o(84153);function _arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var dnd_Draggable=function(e){var n,o=e.canDrag,t=e.children,r=e.item,l=e.type,d=function(e){if(Array.isArray(e))return e}(n=(0,X.c)({type:void 0===l?"dnd":l,item:r,canDrag:o,collect:function(e){return{isDragging:e.isDragging()}}}))||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(n,3)||function(e,n){if(e){if("string"==typeof e)return _arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return _arrayLikeToArray(e,n)}}(n,3)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),a=d[0],i=d[1],c=d[2];return(0,C.useEffect)(function(){c((0,K.r)(),{captureDraggingState:!0})},[c]),t({dragRef:i,isDragging:a.isDragging})};function _extends(){return(_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}var drag=function(e){return C.createElement("svg",_extends({xmlns:"http://www.w3.org/2000/svg",width:8,height:16,fill:"currentColor"},e),t||(t=C.createElement("circle",{cx:2,cy:2,r:1})),r||(r=C.createElement("circle",{cx:2,cy:6,r:1})),l||(l=C.createElement("circle",{cx:2,cy:10,r:1})),d||(d=C.createElement("circle",{cx:2,cy:14,r:1})),a||(a=C.createElement("circle",{cx:6,cy:2,r:1})),i||(i=C.createElement("circle",{cx:6,cy:6,r:1})),c||(c=C.createElement("circle",{cx:6,cy:10,r:1})),s||(s=C.createElement("circle",{cx:6,cy:14,r:1})))},Q=["node","data"];function TableView_extends(){return(TableView_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function ownKeys(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),o.push.apply(o,t)}return o}function _objectSpread(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?ownKeys(Object(o),!0).forEach(function(n){var t;t=o[n],n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):ownKeys(Object(o)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))})}return e}function TableView_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(e,n)||TableView_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function TableView_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return TableView_arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return TableView_arrayLikeToArray(e,n)}}function TableView_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var getTextWidth=function getTextWidth(e,n){var o=(getTextWidth.canvas||(getTextWidth.canvas=document.createElement("canvas"))).getContext("2d");return o.font=n,o.measureText(e).width||0},TableView=function(e){var n=e.node,o=e.data,t=function(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)o=l[t],!(n.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}(e,Q),r=TableView_slicedToArray((0,p.Z)(),1)[0],l=TableView_slicedToArray((0,f.Z)({colorMode:r}),1)[0],d=(0,Z.u)(),a={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[r],i={dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"}[r],c=n.label,s=TableView_slicedToArray((0,C.useState)([{id:"endpoint",desc:!1}]),2),u=s[0],h=s[1],b=TableView_slicedToArray((0,C.useState)({}),2),g=b[0],N=b[1],y=(0,C.useMemo)(function(){return[{id:"selection",header:function(e){var n=e.table;return C.createElement(R.Z,{checked:n.getIsAllRowsSelected(),indeterminate:n.getIsSomeRowsSelected(),onChange:n.getToggleAllRowsSelectedHandler()})},cell:function(e){var n=e.row;return C.createElement(R.Z,{checked:n.getIsSelected(),disabled:!n.getCanSelect(),indeterminate:n.getIsSomeSelected(),onChange:n.getToggleSelectedHandler()})},size:40},{header:function(){return C.createElement(O.Z,{label:"Endpoint"},"Endpoint")},accessorKey:"endpoint",cell:function(e){var n=e.getValue;e.row;var o=n();return C.createElement(O.Z,{label:o},o)},size:"auto"},{header:function(){return C.createElement(O.Z,{label:"Detections"},"Detections")},accessorKey:"detections",cell:function(e){var n,o=(function(e){if(Array.isArray(e))return TableView_arrayLikeToArray(e)}(n=(0,e.getValue)())||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||TableView_unsupportedIterableToArray(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).length;return C.createElement(O.Z,{label:o},o)},size:"auto"},{header:function(){return C.createElement(O.Z,{label:"Last Seen"},"Last Seen")},accessorKey:"lastSeen",cell:function(e){var n=(0,e.getValue)().toISOString();return C.createElement(O.Z,{label:n},n)},size:"auto"}]},[]),v=(0,A.b7)({data:(0,T.rY)(o),columns:y,defaultColumn:{minSize:40},state:{rowSelection:g,sorting:u},enableRowSelection:!0,enableSorting:!0,enableSortingRemoval:!0,onRowSelectionChange:N,getCoreRowModel:(0,D.sC)(),getPaginationRowModel:(0,D.G_)(),getSortedRowModel:(0,D.tj)(),onSortingChange:function(e){h(e)}}),I=TableView_slicedToArray((0,C.useState)(0),2),S=I[0],k=I[1];(0,C.useEffect)(function(){v.resetRowSelection(),v.resetPagination()},[o,v]),(0,C.useEffect)(function(){if(S){var e=[d.fontWeights.semibold,d.fontSizes.sm,d.fonts.base].join(" "),n=v.getAllColumns().filter(function(e){return"auto"!==e.columnDef.size}).map(function(n){var o=n.id,t=n.columnDef,r=t.minSize,l=t.size;if("number"==typeof l)return{id:o,size:l};if("string"==typeof l&&l.endsWith("%")){var d="string"==typeof t.header?getTextWidth(t.header,e):0;return{id:o,size:Math.max(S*parseFloat(l)/100,d+24,r)}}return{id:o,size:r}}),o=v.getAllColumns().filter(function(e){return"auto"===e.columnDef.size}).map(function(n){var o=n.id,t=n.columnDef,r=t.minSize;return{id:o,size:Math.max(("string"==typeof t.header?getTextWidth(t.header,e):0)+24,r)}}),t=n.reduce(function(e,n){return e+n.size},0),r=o.reduce(function(e,n){return e+n.size},0),l=S-t-12;if(0===o.length&&l>0){var a=l/n.length;n.forEach(function(e){e.size=e.size+a}),l=0}o.length>0&&l>r&&o.forEach(function(e,n){e.size=Math.max(l/(o.length-n),e.size),l-=e.size});for(var i={},c=0;c<n.length;c++){var s=n[c];i[s.id]=s.size}for(var u=0;u<o.length;u++){var h=o[u];i[h.id]=h.size}v.setColumnSizing(i)}},[y,v,S,d]);var E=v.getCoreRowModel().rows.length;return C.createElement(m.Z,TableView_extends({flexDirection:"column"},t),C.createElement(x.Z,{flex:"none",px:"3x",py:"2x"},c),C.createElement(x.Z,{flex:"auto"},C.createElement(G.ZP,{disableHeight:!0,onResize:function(e){var n=e.width;S!==n&&k(n)}},function(e){var o=e.width;return C.createElement(_.Z,{layout:"flexbox",variant:"default",sx:{visibility:w().isEmpty(v.getState().columnSizing)?"hidden":"visible",height:452,width:o}},C.createElement(P.Z,null,v.getHeaderGroups().map(function(e){return C.createElement(M.Z,{key:e.id},C.createElement(z.Z,{sx:{width:"2x",pl:"3x",pr:0}}),e.headers.map(function(e){var n,o=_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return e.column.getCanSort()&&(o=_objectSpread(_objectSpread({},o),{},{cursor:"pointer",userSelect:"none",_hover:{backgroundColor:a}})),e.column.getIsSorted()&&(o=_objectSpread(_objectSpread({},o),{},{color:l.color.emphasis})),C.createElement(z.Z,TableView_extends({key:e.id,onClick:e.column.getToggleSortingHandler()},o),e.isPlaceholder?null:C.createElement(m.Z,{alignItems:"center"},(0,A.ie)(e.column.columnDef.header,e.getContext()),null!==(n=({asc:C.createElement(H.Z,{size:20,ml:"1x"}),desc:C.createElement(U.Z,{size:20,ml:"1x"})})[e.column.getIsSorted()])&&void 0!==n?n:null))}))})),C.createElement(dnd_ConditionalWrapper,{condition:!0,wrapper:function(e){return C.createElement(F.Z,{height:"100%",overflow:"visible"},e)}},C.createElement(L.Z,null,v.getRowModel().rows.map(function(e){return C.createElement(dnd_Draggable,{key:e.id,item:function(){return{source:n.id,data:v.getSelectedRowModel().rows.map(function(e){return e.original.id})}}},function(n){var o=n.dragRef;n.isDragging;var t=e.getIsSelected();return C.createElement(B.Z,{"data-selected":(0,V.PB)(e.getIsSelected()),sx:{position:"relative",_hover:{backgroundColor:a},_selected:{backgroundColor:i}}},C.createElement(W.Z,{ref:o,sx:{width:"2x",pl:"3x",pr:0,zIndex:t?1:void 0}},C.createElement(Y.Z,{alt:"draggable",as:drag,sx:{cursor:"move",visibility:e.getIsSelected()?"visible":"hidden",width:"2x",height:"4x"}})),e.getVisibleCells().map(function(e){var n=_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return C.createElement(W.Z,TableView_extends({key:e.id},n),(0,A.ie)(e.column.columnDef.cell,e.getContext()))}))})}))),C.createElement($.Z,{count:E,onPageChange:function(e){var n=Math.max((0,T.q9)(e)-1,0);v.setPageIndex(n)},onRowsPerPageChange:function(e){var n=Math.max((0,T.q9)(e),1);v.setPageSize(n)}}))})))},q=o(53860),J=o(20325),useTreeItemContentStyle=function(e){var n=e.isDisabled,o=e.isSelected,t=e.tabIndex,r=(0,p.Z)(),l=(0,q.ZQ)(r,1)[0];return{backgroundColor:o?({dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"})[l]:void 0,color:n?({dark:"white:disabled",light:"black:disabled"})[l]:({dark:"white:primary",light:"black:primary"})[l],cursor:n?"not-allowed":"pointer",display:"flex",textDecoration:"none",alignItems:"center",outline:t<0?0:void 0,px:"3x",py:"2x",userSelect:"none",width:"100%",_hover:{backgroundColor:n?void 0:({dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"})[l]},_focusVisible:{outlineColor:({dark:"blue:60",light:"blue:60"})[l],outlineOffset:"-1h",outlineStyle:"solid",outlineWidth:"1h"}}},useTreeItemToggleIconStyle=function(e){var n=e.disabled,o=(0,p.Z)(),t=(0,q.ZQ)(o,1)[0],r={dark:"white:disabled",light:"black:disabled"}[t];return{display:"inline-flex",color:n?r:({dark:"white:secondary",light:"black:secondary"})[t],_hover:{color:n?r:({dark:"white:primary",light:"black:primary"})[t]}}},ee=(0,C.createContext)(),en=(0,C.createContext)(),useTree$1=function(){if(!C.useContext)throw Error("The `useContext` hook is not available with your React version.");return(0,C.useContext)(ee)},useTreeItem$1=function(){if(!C.useContext)throw Error("The `useContext` hook is not available with your React version.");return(0,C.useContext)(en)},eo=o(52903),et=["onClick","onMouseDown","style"],er=(0,C.forwardRef)(function(e,n){var o=e.onClick,t=e.onMouseDown,r=e.style,l=(0,q.Kd)(e,et),d=(0,Z.u)().sizes,a=useTree$1().multiSelect,i=useTreeItem$1(),c=(0,q.Zj)({},i),s=c.contentRef,u=c.isDisabled,h=c.isSelected,b=c.nodeDepth,p=c.select,f=c.selectRange,m=c.toggleSelection,g=(0,J.Z)(s,n),N=(0,C.useCallback)(function(e){var n=e.ctrlKey,o=e.metaKey,t=e.shiftKey;if(a&&t){f();return}if(a&&(n||o)){m();return}p()},[a,p,f,m]),y=(0,C.useCallback)(function(e){var n=e.ctrlKey,o=e.metaKey,t=e.shiftKey;(n||o||t||u)&&e.preventDefault()},[u]),v=(0,q.Zj)({paddingLeft:"calc(".concat(b," * ").concat(d["6x"]," + ").concat(d["3x"],")")},r),I=useTreeItemContentStyle({isDisabled:u,isSelected:h,tabIndex:-1});return(0,eo.tZ)(x.Z,(0,q.Zj)((0,q.Zj)({ref:g,onClick:(0,V.N)(o,N),onMouseDown:(0,V.N)(t,y),style:v,tabIndex:-1},I),l))});er.displayName="TreeItemContent";var el=o(83513),ed=["children","disabled","onClick"],ea=(0,C.forwardRef)(function(e,n){var o=e.children,t=e.disabled,r=e.onClick,l=(0,q.Kd)(e,ed),d=useTreeItem$1(),a=d.isExpanded,i=d.toggleExpansion,c={display:"inline-flex",backgroundColor:"transparent"},s=(0,C.useCallback)(function(e){e.stopPropagation(),i()},[i]),getTreeItemToggleProps=function(){return(0,q.Zj)((0,q.Zj)({"aria-disabled":(0,V.Qm)(t),"aria-expanded":(0,V.Qm)(a),disabled:t,onClick:(0,V.N)(r,s),ref:n,role:"button",tabIndex:0},c),l)};return"function"==typeof o?o({getTreeItemToggleProps:getTreeItemToggleProps}):(0,eo.tZ)(el.Z,(0,q.Zj)((0,q.Zj)({},getTreeItemToggleProps()),{},{children:o}))});ea.displayName="TreeItemToggle";var ei=o(45795),ec=o(83377),es=o(33558),eu=o(41759),eh=["appear","children","disabled","easing","nodeId","style","timeout"],mapStateToVariantStyle=function(e,n){var o={entering:function(e){return{transform:"rotate(90deg)"}},entered:function(e){return{transform:"rotate(90deg)"}},exiting:function(e){return{transform:"rotate(0deg)"}},exited:function(e){return{transform:"rotate(0deg)"}}}[e];return"function"==typeof o?o(n):o},eb={enter:ec.YU.easeOut,exit:ec.YU.easeOut},ep={enter:133,exit:Math.floor(93.1)},ef=(0,C.forwardRef)(function(e,n){var o=e.appear,t=e.children,r=e.disabled,l=e.easing,d=void 0===l?eb:l;e.nodeId;var a=e.style,i=e.timeout,c=void 0===i?ep:i,s=(0,q.Kd)(e,eh),u=useTreeItem$1(),h=(0,C.useRef)(null),b=(0,J.Z)(h,n),p=(0,T.pr)(null==u?void 0:u.isExpanded),f=useTreeItemToggleIconStyle({disabled:r});return(0,C.useEffect)(function(){if(p){var e=h.current;(0,es.nq)(e)}},[p]),(0,eo.tZ)(eu.ZP,(0,q.Zj)((0,q.Zj)({appear:void 0!==o&&o,in:p,nodeRef:h,timeout:c},s),{},{children:function(e,n){var o=p?(0,ec.c)({style:a,timeout:c,easing:d}):(0,ec.Zk)({style:a,timeout:c,easing:d}),l=(0,ec.zx)("transform",o),i=mapStateToVariantStyle(e,{}),s=(0,q.Zj)((0,q.Zj)((0,q.Zj)({},f),i),{},{"aria-disabled":(0,V.Qm)(r),transition:l});return"function"==typeof t?t(e,(0,q.Zj)((0,q.Zj)({},n),{},{ref:b,style:(0,q.Zj)((0,q.Zj)({},s),a)})):(0,eo.tZ)(x.Z,(0,q.Zj)((0,q.Zj)((0,q.Zj)({ref:b},s),n),{},{style:a,children:null!=t?t:(0,eo.tZ)(ei.Z,{size:"4x"})}))}}))});ef.displayName="TreeItemToggleIcon";var em=o(62368),eg=o(13409),ex=o(92307),eN=o.n(ex),ey=o(14594),ev=(0,C.createContext)(),eI=eN()(function(e){return(0,q.Zj)({},e)}),binaryFindElement=function(e,n){for(var o=0,t=e.length-1;o<=t;){var r=Math.floor((o+t)/2);if(e[r].element===n)return r;e[r].element.compareDocumentPosition(n)&Node.DOCUMENT_POSITION_PRECEDING?t=r-1:o=r+1}return o},Descendant=function(e){var n=e.children,o=e.depth,t=e.id,r=(0,C.useState)([]),l=(0,q.ZQ)(r,2),d=l[0],a=l[1],i=eI({descendants:d,depth:o,id:t,registerDescendant:(0,C.useCallback)(function(e){return a(function(n){if(0===n.length)return[{element:e,index:0}];var o,t=binaryFindElement(n,e);return n[t]&&n[t].element===e?o=n:(o=n.slice()).splice(t,0,{element:e,index:t}),o.forEach(function(e,n){e.index=n}),o}),e},[]),unregisterDescendant:(0,C.useCallback)(function(e){a(function(n){return n.filter(function(n){return e!==n.element})})},[])});return(0,eo.tZ)(ev.Provider,{value:i,children:n})};Descendant.displayName="Descendant";var eT=o(25013),eS=o(68338),useDescendant$1=function(e){var n=(0,C.useState)(),o=(0,q.ZQ)(n,2)[1],t=(0,C.useContext)(ev),r=t.descendants,l=void 0===r?[]:r,d=t.depth,a=t.id,i=t.registerDescendant,c=void 0===i?V.ZT:i,s=t.unregisterDescendant,u=void 0===s?V.ZT:s,h=l.findIndex(function(n){return n.element===e}),b=(0,eT.Z)(l),p=l.some(function(e,n){return b&&b[n]&&b[n].element!==e.element});return(0,eS.Z)(function(){if(e)return c(e),function(){u(e)};o({})},[e,c,u,h,p]),{index:h,parentDepth:void 0===d?0:d,parentId:void 0===a?null:a}},ew=["TransitionComponent","TransitionProps","children","disabled","id","nodeId","render"],eC=eN()(function(e){return(0,q.Zj)({},e)}),ek=(0,C.forwardRef)(function(e,n){var o=e.TransitionComponent,t=void 0===o?ey.Z:o,r=e.TransitionProps,l=e.children,d=e.disabled,a=e.id,i=e.nodeId,c=e.render,s=(0,q.Kd)(e,ew),u=useTree$1(),h=u.focusNode,b=u.getIsNodeDisabled,p=u.getIsNodeExpanded,f=u.getIsNodeFocused,m=u.getIsNodeSelected,g=u.registerNode,N=u.selectNode,y=u.selectRange,v=u.toggleSelection,I=u.toggleExpansion,S=u.treeId,w=u.unregisterNode,k=(0,C.useRef)(),E=(0,C.useState)(null),j=(0,q.ZQ)(E,2),A=j[0],D=j[1],Z=(0,J.Z)(D,n),R=(0,C.useMemo)(function(){return(0,eg.Rw)(a)?S&&i?"".concat(S,"-").concat(i):null:a},[a,S,i]),O=useDescendant$1(A),_=O.index,P=O.parentDepth,M=O.parentId,z=(0,T.q9)(P)+1,F=C.Children.toArray(l).filter(function(e){return(0,C.isValidElement)(e)||"string"==typeof e||"number"==typeof e}).length>0,L=!!b&&b(i),B=!!p&&p(i),W=!!f&&f(i),H=!!m&&m(i);(0,C.useEffect)(function(){if("function"==typeof g&&"function"==typeof w&&-1!==_)return g({depth:z,focus:function(){requestAnimationFrame(function(){var e=k.current;e&&e.focus()})},id:i,idAttr:R,isDisabled:!!d,isExpandable:F,parentId:M}),function(){w(i)}},[g,w,_,z,i,R,d,F,M]);var U=(0,C.useCallback)(function(){var e=b(i),n=f(i);e||(n||h(i),N(i))},[i,b,f,h,N]),Y=(0,C.useCallback)(function(){var e=b(i),n=f(i);e||(n||h(i),y({end:i}))},[i,b,f,h,y]),G=(0,C.useCallback)(function(){b(i)||I(i)},[i,b,I]),$=(0,C.useCallback)(function(){var e=b(i),n=f(i);e||(n||h(i),v(i))},[i,b,f,h,v]),X=eC({contentRef:k,isDisabled:L,isExpandable:F,isExpanded:B,isFocused:W,isSelected:H,nodeId:i,nodeDepth:z,select:U,selectRange:Y,toggleExpansion:G,toggleSelection:$});return(0,eo.tZ)(en.Provider,{value:X,children:(0,eo.BX)(x.Z,(0,q.Zj)((0,q.Zj)((0,q.Zj)({ref:Z,"aria-disabled":(0,V.Qm)(L),"aria-expanded":(0,V.Qm)(B),"aria-selected":(0,V.Qm)(H),id:R,role:"treeitem"},{}),s),{},{children:[(0,V.Pu)(c,X),!!F&&(0,eo.tZ)(Descendant,{depth:z,id:i,children:(0,eo.tZ)(t,(0,q.Zj)((0,q.Zj)({appear:!1,in:B,role:"group",unmountOnExit:!0},r),{},{children:l}))})]}))})});ek.displayName="TreeItem";var eE=o(20655),ej=["defaultExpanded","defaultSelected","expanded","id","isSelectable","isUnselectable","multiSelect","onBlur","onFocus","onKeyDown","onNodeFocus","onNodeSelect","onNodeToggle","selected"],eA=eN()(function(e){return(0,q.Zj)({},e)}),eD=(0,C.forwardRef)(function(e,n){var o=e.defaultExpanded,t=e.defaultSelected,r=e.expanded,l=e.id,d=e.isSelectable,a=void 0!==d&&d,i=e.isUnselectable,c=void 0!==i&&i,s=e.multiSelect,u=void 0!==s&&s,h=e.onBlur,b=e.onFocus,p=e.onKeyDown,f=e.onNodeFocus,m=e.onNodeSelect,g=e.onNodeToggle,N=e.selected,y=(0,q.Kd)(e,ej),v=(0,eE.Z)(l),S=(0,C.useState)(null),w=(0,q.ZQ)(S,2),k=w[0],E=w[1],j=(0,C.useState)((0,T.rY)(null!=r?r:void 0===o?[]:o)),A=(0,q.ZQ)(j,2),D=A[0],Z=A[1],R=(0,C.useState)((0,T.rY)(null!=N?N:void 0===t?[]:t)),O=(0,q.ZQ)(R,2),_=O[0],P=O[1],M=(0,I.Z)(function(){return new Map}),z=M.get(k)?M.get(k).idAttr:null,F=(0,C.useRef)(null),L=(0,C.useRef)(!1),B=(0,C.useRef)([]);(0,C.useEffect)(function(){void 0!==r&&Z((0,T.rY)(r))},[r]),(0,C.useEffect)(function(){void 0!==N&&P((0,T.rY)(N))},[N]);var W=(0,C.useCallback)(function(e){var n=M.get(e);if(!n)return!1;if(n.isDisabled)return!0;for(;!(0,eg.Rw)(n.parentId);)if((n=M.get(n.parentId)).isDisabled)return!0;return!1},[M]),H=(0,C.useCallback)(function(e){var n;return!!(null!==(n=M.get(e))&&void 0!==n&&n.isExpandable)},[M]),U=(0,C.useCallback)(function(e){return -1!==D.indexOf(e)},[D]),Y=(0,C.useCallback)(function(e){return k===e},[k]),G=(0,C.useCallback)(function(e){return a&&!W(e)},[W,a]),$=(0,C.useCallback)(function(e){return -1!==_.indexOf(e)},[_]),X=(0,C.useCallback)(function(e){return Array.from(M.values()).filter(function(n){return n.parentId===e}).sort(function(e,n){return e.index-n.index}).map(function(e){return e.id})},[M]),K=(0,C.useCallback)(function(e){return X(e).filter(function(e){return!W(e)})},[X,W]),Q=(0,C.useCallback)(function(e){if(U(e)&&K(e).length>0)return K(e)[0];for(var n=M.get(e);!(0,eg.Rw)(n);){var o=K(n.parentId),t=o[o.indexOf(n.id)+1];if(t)return t;n=M.get(n.parentId)}return null},[U,K,M]),J=(0,C.useCallback)(function(e){var n=M.get(e),o=K(n.parentId),t=o.indexOf(e);if(0===t)return n.parentId;for(var r=o[t-1];U(r)&&K(r).length>0;)r=K(r).pop();return r},[U,K,M]),en=(0,C.useCallback)(function(){return K(null)[0]},[K]),et=(0,C.useCallback)(function(){for(var e=K(null).pop();U(e);){var n=K(e);if(0===n.length)break;e=n.pop()}return e},[U,K]),er=(0,C.useCallback)(function(e){return M.get(e).parentId},[M]),el=(0,C.useCallback)(function(e,n){if(e===n)return[e,n];var o=M.get(e),t=M.get(n);if(o.parentId===t.id||t.parentId===o.id)return t.parentId===o.id?[o.id,t.id]:[t.id,o.id];for(var r=[o.id],l=[t.id],d=o.parentId,a=t.parentId,i=-1!==l.indexOf(d),c=-1!==r.indexOf(a),s=!0,u=!0;!c&&!i;)s&&(r.push(d),i=-1!==l.indexOf(d),s=null!==d,!i&&s&&(d=M.get(d).parentId)),u&&!i&&(l.push(a),c=-1!==r.indexOf(a),u=null!==a,!c&&u&&(a=M.get(a).parentId));var h=i?d:a,b=X(h),p=r[r.indexOf(h)-1],f=l[l.indexOf(h)-1];return b.indexOf(p)<b.indexOf(f)?[e,n]:[n,e]},[X,M]),ed=(0,C.useCallback)(function(e,n){for(var o=el(e,n),t=(0,q.ZQ)(o,2),r=t[0],l=t[1],d=[r],a=r;a!==l;)d.push(a=Q(a));return d},[el,Q]),ea=(0,C.useCallback)(function(e){e&&(E(e),M.get(e).focus(),"function"==typeof f&&f(e))},[M,f]),ei=(0,C.useCallback)(function(e){ea(Q(e))},[ea,Q]),ec=(0,C.useCallback)(function(e){ea(J(e))},[ea,J]),es=(0,C.useCallback)(function(e){ea(en())},[ea,en]),eu=(0,C.useCallback)(function(e){ea(et())},[ea,et]),eh=(0,C.useCallback)(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:k,n=arguments.length>1?arguments[1]:void 0;if(!e||!H(e))return!1;var o=("boolean"==typeof n?n:!U(e))?D.concat(e):D.filter(function(n){return n!==e});return"function"==typeof g&&g(o),Z(o),!0},[D,k,H,U,g]),eb=(0,C.useCallback)(function(e,n){if(!e||!G(e))return!1;var o=("boolean"==typeof n?n:!$(e))?_.concat(e):_.filter(function(n){return n!==e});return"function"==typeof m&&m(o),P(o),F.current=e,L.current=!1,B.current=[],!0},[G,$,m,_]),ep=(0,C.useCallback)(function(e){if(!e||!G(e))return!1;var n=c&&$(e)&&1===_.length?[]:[e];return"function"==typeof m&&m(n),P(n),F.current=e,L.current=!1,B.current=[],!0},[G,$,c,m,_]),ef=(0,C.useCallback)(function(e){var n=e.start,o=void 0===n?F.current:n,t=e.current,r=e.end;if(!a||(0,eg.Rw)(o)||(0,eg.Rw)(r))return!1;if((0,eg.Rw)(t)){var l=L.current?_.filter(function(e){return -1===B.current.indexOf(e)}):_.slice(),d=ed(o,r).filter(function(e){return!W(e)});B.current=d;var i=l.concat(d);i=i.filter(function(e,n){return i.indexOf(e)===n}),"function"==typeof m&&m(i),P(i)}else{var c=_.slice();-1===B.current.indexOf(t)&&(B.current=[]),L.current?-1!==B.current.indexOf(r)?(c=c.filter(function(e){return e===o||e!==t}),B.current=B.current.filter(function(e){return e===o||e!==t})):(c.push(r),B.current.push(r)):(c.push(r),B.current.push(t,r)),"function"==typeof m&&m(c),P(c)}return L.current=!0,!0},[W,ed,a,m,_]),em=(0,C.useCallback)(function(e){F.current||(F.current=e),ef({start:L.current?F.current:e,end:en()})},[en,ef]),ex=(0,C.useCallback)(function(e){F.current||(F.current=e),ef({start:L.current?F.current:e,end:et()})},[et,ef]),eN=(0,C.useCallback)(function(e){var n=Q(e);W(n)||ef({start:F.current,current:e,end:n})},[W,Q,ef]),ey=(0,C.useCallback)(function(e){var n=J(e);W(n)||ef({start:F.current,current:e,end:n})},[W,J,ef]),ev=(0,C.useCallback)(function(){ef({start:en(),end:et()})},[en,et,ef]),eI=(0,C.useCallback)(function(e){var n=e.id;return["focus","id","idAttr","isDisabled","isExpandable","parentId"].every(function(n){return Object.prototype.hasOwnProperty.call(e,n)})||console.error("Error: `nodeProps` is missing some required fields.",e),M.set(n,e),n},[M]),eT=(0,C.useCallback)(function(e){M.delete(e)},[M]),eS=eA({focusNode:ea,getIsNodeDisabled:W,getIsNodeExpandable:H,getIsNodeExpanded:U,getIsNodeFocused:Y,getIsNodeSelectable:G,getIsNodeSelected:$,isSelectable:a,multiSelect:u,nodeMap:M,registerNode:eI,selectNode:ep,selectRange:ef,toggleExpansion:eh,toggleSelection:eb,treeId:v,unregisterNode:eT});return(0,eo.tZ)(ee.Provider,{value:eS,children:(0,eo.tZ)(Descendant,{depth:-1,children:(0,eo.tZ)(x.Z,(0,q.Zj)((0,q.Zj)({ref:n,"aria-activedescendant":z,"aria-multiselectable":(0,V.Qm)(u),id:v,role:"tree",onBlur:(0,V.N)(h,function(e){var n=e.relatedTarget;e.currentTarget&&e.currentTarget.contains(n)||E(null)}),onFocus:(0,V.N)(b,function(e){var n=e.target,o=e.relatedTarget;if(!(e.currentTarget!==n||e.currentTarget.contains(o))){var t=_[0];t?ea(t):es()}}),onKeyDown:(0,V.N)(p,function(e){var n=!1,o=e.key;if(!e.altKey&&k){var t=e.ctrlKey||e.metaKey,r=e.shiftKey;switch(o){case" ":W(k)||(u&&r?(ef({start:F.current,end:k}),n=!0):n=u?eb(k):ep(k)),e.stopPropagation();break;case"Enter":W(k)||(H(k)?(eh(k),n=!0):n=u?eb(k):ep(k)),e.stopPropagation();break;case"ArrowDown":u&&r&&eN(k),ei(k),n=!0;break;case"ArrowUp":u&&r&&ey(k),ec(k),n=!0;break;case"ArrowRight":H(k)&&(U(k)?(ei(k),n=!0):W(k)||(eh(k),n=!0));break;case"ArrowLeft":if(U(k)&&!W(k))eh(k),n=!0;else{var l=er(k);l&&(ea(l),n=!0)}break;case"Home":u&&t&&r&&!W(k)&&em(k),es(),n=!0;break;case"End":u&&t&&r&&!W(k)&&ex(k),eu(),n=!0;break;default:u&&t&&"a"===o.toLowerCase()&&(ev(),n=!0)}n&&(e.preventDefault(),e.stopPropagation())}}),tabIndex:0},{outline:0}),y))})})});eD.displayName="Tree";var eZ=o(98484),eR=o(38241),eO=o(20103);function Droppable_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var dnd_Droppable=function(e){var n,o=e.accept,t=e.canDrop,r=e.children,l=e.onDrop,d=function(e){if(Array.isArray(e))return e}(n=(0,eO.L)({accept:void 0===o?"dnd":o,drop:l,canDrop:t,collect:function(e){return{isOver:e.isOver()}}}))||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(n,2)||function(e,n){if(e){if("string"==typeof e)return Droppable_arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return Droppable_arrayLikeToArray(e,n)}}(n,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),a=d[0];return r({dropRef:d[1],isOver:a.isOver})},e_=["data","onNodeDrop","onNodeSelect"];function TreeView_extends(){return(TreeView_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function TreeView_ownKeys(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),o.push.apply(o,t)}return o}function TreeView_objectSpread(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?TreeView_ownKeys(Object(o),!0).forEach(function(n){var t;t=o[n],n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):TreeView_ownKeys(Object(o)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))})}return e}function TreeView_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var TreeItemRender=function TreeItemRender(e){var n,o=e.node,t=e.nodeDepth,r=void 0===t?0:t,l=e.onNodeDrop,d=(function(e){if(Array.isArray(e))return e}(n=(0,f.Z)())||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(n,1)||function(e,n){if(e){if("string"==typeof e)return TreeView_arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return TreeView_arrayLikeToArray(e,n)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],a=o.id,i=o.label,c=(0,C.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,t=e.isSelected,c=o?eZ.Z:eR.Z;return C.createElement(dnd_Droppable,{onDrop:function(e,n){"function"==typeof l&&l(TreeView_objectSpread(TreeView_objectSpread({},e),{},{target:a}))}},function(e){var o=e.dropRef,l=e.isOver;return C.createElement(er,{ref:o,sx:{backgroundColor:l?d.background.highlighted:void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:d.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},C.createElement(m.Z,{flex:"none",width:"6x"},n&&C.createElement(ea,null,C.createElement(ef,null))),C.createElement(em.Z,{as:c,color:"yellow:50",mr:"2x"}),C.createElement(O.Z,{label:i},function(e){var n=e.ref,o=e.style;return C.createElement(x.Z,TreeView_extends({ref:n},o,{flex:"auto",fontWeight:t?"semibold":"normal"}),i)}))})},[d,a,r,i,l]);return C.createElement(ek,{nodeId:a,render:c},(0,T.rY)(o.children).map(function(e){return C.createElement(TreeItemRender,{key:e.id,node:e,nodeDepth:r+1,onNodeDrop:l})}))},dnd_TreeView=function(e){var n,o,t=e.data,r=e.onNodeDrop,l=e.onNodeSelect,d=function(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)o=l[t],!(n.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}(e,e_),a=null!==(n=null===(o=(0,T.rY)(t)[0])||void 0===o?void 0:o.id)&&void 0!==n?n:null,i=(0,C.useCallback)(function(e){"function"==typeof r&&r(e)},[r]),c=(0,C.useCallback)(function(e){"function"==typeof l&&l(e)},[l]);return C.createElement(eD,TreeView_extends({"aria-label":"dnd",isSelectable:!0,isUnselectable:!1,defaultSelected:a,onNodeSelect:c},d),(0,T.rY)(t).map(function(e){return C.createElement(TreeItemRender,{key:e.id,node:e,onNodeDrop:i})}))},eP=o(98533),dnd_DragLayer=function(e){var n=e.children,o=(0,eP.f)(function(e){return{isDragging:e.isDragging(),item:e.getItem(),itemType:e.getItemType(),initialSourceClientOffset:e.getInitialSourceClientOffset(),sourceClientOffset:e.getSourceClientOffset()}}),t=o.isDragging,r=o.initialSourceClientOffset,l=o.sourceClientOffset;if(!t||!r||!l)return null;var d=(0,T.Nu)(null==l?void 0:l.x),a=(0,T.Nu)(null==l?void 0:l.y);return C.createElement(x.Z,{sx:{pointerEvents:"none",position:"fixed",inset:0,zIndex:"fixed"}},C.createElement(x.Z,{style:{transform:"translate(".concat(d,"px, ").concat(a,"px)")}},"function"==typeof n?n(o):n))};function useRefresh_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var dnd_useRefresh=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,C.useState)())||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(e,2)||function(e,n){if(e){if("string"==typeof e)return useRefresh_arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return useRefresh_arrayLikeToArray(e,n)}}(e,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[1];return(0,C.useCallback)(function(){n({})},[])};function dnd_toConsumableArray(e){return function(e){if(Array.isArray(e))return dnd_arrayLikeToArray(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||dnd_unsupportedIterableToArray(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function dnd_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(e,n)||dnd_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function dnd_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return dnd_arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return dnd_arrayLikeToArray(e,n)}}function dnd_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var getTreeNodes=function(){var e=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],n=buildTreeNodes();return!function traverse(n){(0,T.rY)(n).map(function(n){var o;n.parent=null!==(o=n.parent)&&void 0!==o?o:null,n.children=(0,T.rY)(n.children).map(function(e){return e.parent=n,e}),n.data={data:w().range(15).map(function(o){var t=dnd_slicedToArray((0,T.rY)(String(n.label).match(/\d+/)),1)[0],r="Endpoint ".concat(void 0===t?"":t,"_").concat(o+1),l=w().sampleSize(e,w().random(0,e.length)),d=new Date(Date.now()-w().random(0,2592e6));return{id:"".concat(n.id,"_").concat(o+1),endpoint:r,detections:l,lastSeen:d}})},traverse(n.children)})}(n),n},dnd=function(){var e,n,o,t=(0,I.Z)(function(){return getTreeNodes()}),r=(0,C.useMemo)(function(){return buildTreeMap(t)},[t]),l=dnd_useRefresh(),d=dnd_slicedToArray((0,C.useState)(!1),2),a=d[0],i=d[1],c=dnd_slicedToArray((0,p.Z)(),1)[0],s=dnd_slicedToArray((0,f.Z)(),1)[0],u={dark:"gray:50",light:"gray:50"}[c],h=(0,C.useRef)(),b=(0,C.useRef)(),S=dnd_slicedToArray((0,C.useState)(null===(e=(0,T.rY)(t)[0])||void 0===e?void 0:e.id),2),j=S[0],A=S[1],D=null===(n=r.get(j))||void 0===n?void 0:null===(o=n.data)||void 0===o?void 0:o.data,Z=(0,C.useCallback)(function(e){var n=e.source,o=e.target,t=e.data,d=r.get(n),a=r.get(o),i=d.data.data.filter(function(e){return w().includes(t,e.id)});d.data.data=w().differenceBy(d.data.data,i,"id"),a.data.data=w().uniqBy([].concat(dnd_toConsumableArray((0,T.rY)(a.data.data)),dnd_toConsumableArray(i)),"id"),l()},[l,r]),R=(0,C.useCallback)(function(e){A(e[0])},[]);return C.createElement(k.W,{backend:E.PD},C.createElement(dnd_DragLayer,null,function(e){var n=e.item,o=(0,T.rY)(n.data).length;return C.createElement(m.Z,{alignItems:"center",columnGap:"1x"},C.createElement(v.Z,null),C.createElement(g.Z,null,o))}),C.createElement(m.Z,{ref:h,sx:{boxShadow:s.shadow.thick,cursor:a?"col-resize":"default"}},C.createElement(x.Z,{ref:b,sx:{flex:"none",width:300}},C.createElement(N.Z,{height:"100%",overflowX:"hidden",overflowY:"auto"},C.createElement(dnd_TreeView,{data:t,onNodeDrop:Z,onNodeSelect:R}))),C.createElement(m.Z,{sx:{flex:"auto",position:"relative"}},C.createElement(y.Z,{onResizeStart:function(){i(!0)},onResizeEnd:function(){i(!1)},onResize:function(e){var n=e.clientX,o=b.current;if(o){var t=h.current.getBoundingClientRect(),r=t.left,l=t.width;n-r>=160&&n-r<=.4*l&&(o.style.width="".concat(n-r,"px"))}},sx:{position:"absolute",left:0,top:0,bottom:0,borderLeft:1,borderLeftColor:a?u:({dark:"gray:70",light:"gray:30"})[c],_hover:{borderLeftColor:u},zIndex:1}}),C.createElement(TableView,{key:j,node:r.get(j),data:D,width:"100%"}))))},eM=o(42744);function resizable_extends(){return(resizable_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function resizable_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return resizable_arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return resizable_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function resizable_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var resizable_TreeItemRender=function TreeItemRender(e){var n=e.node,o=e.nodeDepth,t=void 0===o?0:o,r=resizable_slicedToArray((0,f.Z)(),1)[0],l=n.id,d=n.label,a=(0,C.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,l=e.isSelected,a=n?o?eZ.Z:eR.Z:eM.Z,i=n?"yellow:50":"currentColor";return C.createElement(er,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*t-.5,width:1}}}},C.createElement(m.Z,{flex:"none",width:"6x"},n&&C.createElement(ea,null,C.createElement(ef,null))),C.createElement(em.Z,{as:a,color:i,mr:"2x"}),C.createElement(O.Z,{label:d},function(e){var n=e.ref,o=e.style;return C.createElement(x.Z,resizable_extends({ref:n},o,{flex:"auto",fontWeight:l?"semibold":"normal"}),d)}))},[r,t,d]);return C.createElement(ek,{nodeId:l,render:a},(0,T.rY)(n.children).map(function(e){return C.createElement(TreeItemRender,{key:e.id,node:e,nodeDepth:t+1})}))},resizable=function(){var e,n=resizable_slicedToArray((0,p.Z)(),1)[0],o=resizable_slicedToArray((0,f.Z)(),1)[0],t=(0,I.Z)(function(){return buildTreeNodes()}),r=(0,C.useMemo)(function(){return buildTreeMap(t)},[t]),l=(0,C.useMemo)(function(){return findExpandableNodeIds(t)},[t]),d=(0,C.useMemo)(function(){return Array.from(r.keys())},[r]),a=resizable_slicedToArray((0,C.useState)(d[0]),2),i=a[0],c=a[1],s=resizable_slicedToArray((0,C.useState)(!1),2),u=s[0],h=s[1],b=(0,C.useRef)(),g=(0,C.useRef)(),v={dark:"gray:50",light:"gray:50"}[n],S=(0,C.useCallback)(function(e){c(e[0])},[]);return C.createElement(m.Z,{ref:b,sx:{boxShadow:o.shadow.thick,cursor:u?"col-resize":"default"}},C.createElement(x.Z,{ref:g,sx:{flex:"none",width:300}},C.createElement(N.Z,{height:240,overflowX:"hidden",overflowY:"auto"},C.createElement(eD,{"aria-label":"resizable",defaultExpanded:l,isSelectable:!0,isUnselectable:!1,selected:i,onNodeSelect:S},(0,T.rY)(t).map(function(e){return C.createElement(resizable_TreeItemRender,{key:e.id,node:e})})))),C.createElement(m.Z,{sx:{flex:"auto",px:"3x",py:"2x",position:"relative"}},C.createElement(y.Z,{onResizeStart:function(){h(!0)},onResizeEnd:function(){h(!1)},onResize:function(e){var n=e.clientX,o=g.current;if(o){var t=b.current.getBoundingClientRect(),r=t.left,l=t.width;n-r>=160&&n-r<=.4*l&&(o.style.width="".concat(n-r,"px"))}},sx:{position:"absolute",left:0,top:0,bottom:0,borderLeft:1,borderLeftColor:u?v:({dark:"gray:70",light:"gray:30"})[n],_hover:{borderLeftColor:v}}}),C.createElement(x.Z,null,null===(e=r.get(i))||void 0===e?void 0:e.label)))},ez=o(35306);function load_on_demand_extends(){return(load_on_demand_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function load_on_demand_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return load_on_demand_arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return load_on_demand_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function load_on_demand_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var load_on_demand_TreeItemRender=function TreeItemRender(e){var n=e.node,o=e.nodeDepth,t=void 0===o?0:o,r=load_on_demand_slicedToArray((0,f.Z)(),1)[0],l=useTree$1().getIsNodeExpanded,d=n.id,a=n.label,i=load_on_demand_slicedToArray((0,C.useState)((0,T.rY)(n.children)),2),c=i[0],s=i[1],u=load_on_demand_slicedToArray((0,C.useState)(!1),2),h=u[0],b=u[1],p=l(d),g=n.loadOnDemand&&0===c.length,N=(0,C.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,l=e.isSelected;e.select;var d=n?o?eZ.Z:eR.Z:eM.Z,i=n?"yellow:50":"currentColor";return C.createElement(er,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*t-.5,width:1}}}},C.createElement(m.Z,{flex:"none",width:"6x"},n&&C.createElement(ea,null,h?C.createElement(ez.Z,{size:"xs"}):C.createElement(ef,null))),C.createElement(em.Z,{as:d,color:i,mr:"2x"}),C.createElement(O.Z,{label:a},function(e){var n=e.ref,o=e.style;return C.createElement(x.Z,load_on_demand_extends({ref:n},o,{flex:"auto",fontWeight:l?"semibold":"normal"}),a)}))},[r,h,t,a]);return(0,C.useEffect)(function(){var e=null;return p&&g&&(b(!0),e=setTimeout(function(){var e=[{id:"".concat(d,".1"),label:"".concat(a,".1"),loadOnDemand:t<2},{id:"".concat(d,".2"),label:"".concat(a,".2")}];s(e),b(!1),n.children=e,n.loadOnDemand=!1},500)),function(){e&&clearTimeout(e)}},[p,g,n,d,a,t]),C.createElement(ek,{nodeId:d,render:N},g?C.createElement(x.Z,{key:"stub"}):c.map(function(e){return C.createElement(TreeItemRender,{key:e.id,node:e,nodeDepth:t+1})}))},load_on_demand=function(){var e=load_on_demand_slicedToArray((0,f.Z)(),1)[0],n=(0,I.Z)(function(){return Array.from({length:5},function(e,n){var o=n+1;return{id:"".concat(o),label:"Node ".concat(o),children:[],loadOnDemand:!0}})});return C.createElement(x.Z,{sx:{boxShadow:e.shadow.thick}},C.createElement(N.Z,{height:240,overflowY:"auto"},C.createElement(eD,{"aria-label":"load on demand",isSelectable:!0,isUnselectable:!0},(0,T.rY)(n).map(function(e){return C.createElement(load_on_demand_TreeItemRender,{key:e.id,node:e})}))))},eF=o(15192),eL=o(12226),eB=o(87888),eW=o(94829),eH=o(53284),eU=o(17168);function dropdown_extends(){return(dropdown_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function dropdown_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return dropdown_arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return dropdown_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function dropdown_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var dropdown_TreeItemRender=function TreeItemRender(e){var n=e.node,o=e.nodeDepth,t=void 0===o?0:o,r=dropdown_slicedToArray((0,f.Z)(),1)[0],l=n.id,d=n.label,a=(0,C.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,l=e.isSelected,a=n?o?eZ.Z:eR.Z:eM.Z,i=n?"yellow:50":"currentColor";return C.createElement(er,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*t-.5,width:1}}}},C.createElement(m.Z,{flex:"none",width:"6x"},n&&C.createElement(ea,null,C.createElement(ef,null))),C.createElement(em.Z,{as:a,color:i,mr:"2x"}),C.createElement(O.Z,{label:d},function(e){var n=e.ref,o=e.style;return C.createElement(x.Z,dropdown_extends({ref:n},o,{flex:"auto",fontWeight:l?"semibold":"normal"}),d)}),C.createElement(m.Z,{flex:"none",ml:"2x"},C.createElement(eF.Z,null,C.createElement(eL.Z,{onClick:function(e){},sx:{color:r.color.secondary,":hover":{color:r.color.info}}},C.createElement(eH.Z,null)),C.createElement(eB.Z,{width:"max-content"},C.createElement(eW.Z,null,C.createElement(m.Z,{alignItems:"center",columnGap:"2x"},C.createElement(eU.Z,null)," List item")),C.createElement(eW.Z,null,C.createElement(m.Z,{alignItems:"center",columnGap:"2x"},C.createElement(eU.Z,null)," List item"))))))},[r,t,d]);return C.createElement(ek,{nodeId:l,render:a},(0,T.rY)(n.children).map(function(e){return C.createElement(TreeItemRender,{key:e.id,node:e,nodeDepth:t+1})}))},dropdown=function(){var e=dropdown_slicedToArray((0,f.Z)(),1)[0],n=(0,I.Z)(function(){return buildTreeNodes()}),o=(0,C.useMemo)(function(){return findExpandableNodeIds(n)},[n]);return C.createElement(x.Z,{sx:{boxShadow:e.shadow.thick}},C.createElement(N.Z,{height:240,overflowY:"auto"},C.createElement(eD,{"aria-label":"dropdown",defaultExpanded:o,isSelectable:!0,isUnselectable:!0},(0,T.rY)(n).map(function(e){return C.createElement(dropdown_TreeItemRender,{key:e.id,node:e})}))))},eY=o(39256),eV=o(62080),eG=o(72448),e$=o(61619),eX=o(70758);function controlled_extends(){return(controlled_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function controlled_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return controlled_arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return controlled_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function controlled_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var controlled_TreeItemRender=function TreeItemRender(e){var n=e.node,o=e.nodeDepth,t=void 0===o?0:o,r=controlled_slicedToArray((0,f.Z)(),1)[0],l=n.id,d=n.label,a=(0,C.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,l=e.isSelected,a=e.select,i=n?o?eZ.Z:eR.Z:eM.Z,c=n?"yellow:50":"currentColor";return C.createElement(er,{sx:{backgroundColor:l?"transparent":void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*t-.5,width:1}}}},C.createElement(m.Z,{flex:"none",width:"6x"},n&&C.createElement(ea,null,C.createElement(ef,null))),C.createElement(m.Z,{onClick:function(e){e.stopPropagation()},mr:"2x"},C.createElement(R.Z,{checked:l,onChange:function(){a()}})),C.createElement(em.Z,{as:i,color:c,mr:"2x"}),C.createElement(O.Z,{label:d},function(e){var n=e.ref,o=e.style;return C.createElement(x.Z,controlled_extends({ref:n},o,{flex:"auto",fontWeight:l?"semibold":"normal"}),d)}))},[r,t,d]);return C.createElement(ek,{nodeId:l,render:a},(0,T.rY)(n.children).map(function(e){return C.createElement(TreeItemRender,{key:e.id,node:e,nodeDepth:t+1})}))},controlled=function(){var e=controlled_slicedToArray((0,f.Z)(),1)[0],n=(0,I.Z)(function(){return buildTreeNodes()}),o=(0,C.useMemo)(function(){return buildTreeMap(n)},[n]),t=(0,C.useMemo)(function(){return findExpandableNodeIds(n)},[n]),r=(0,C.useMemo)(function(){return Array.from(o.keys())},[o]),l=controlled_slicedToArray((0,C.useState)([]),2),d=l[0],a=l[1],i=controlled_slicedToArray((0,C.useState)([]),2),c=i[0],s=i[1],u=(0,C.useCallback)(function(e){a(e)},[]),h=(0,C.useCallback)(function(e){s(e)},[]),b=(0,C.useCallback)(function(e){a(t)},[t]),p=(0,C.useCallback)(function(e){a([])},[]),y=(0,C.useCallback)(function(e){s(r)},[r]),v=(0,C.useCallback)(function(e){s([])},[]);return C.createElement(C.Fragment,null,C.createElement(eY.Z,{variant:"secondary",columnGap:"2x",mb:"4x"},C.createElement(eV.Z,{variant:"secondary",disabled:d.length===t.length,onClick:b},"Expand all"),C.createElement(eV.Z,{variant:"secondary",disabled:0===d.length,onClick:p},"Collapse all"),C.createElement(eV.Z,{variant:"secondary",disabled:c.length===r.length,onClick:y},"Select all"),C.createElement(eV.Z,{variant:"secondary",disabled:0===c.length,onClick:v},"Unselect all")),C.createElement(x.Z,{sx:{boxShadow:e.shadow.thick}},C.createElement(N.Z,{height:240,overflowY:"auto"},C.createElement(eD,{"aria-label":"controlled",isSelectable:!0,isUnselectable:!0,multiSelect:!0,expanded:d,selected:c,onNodeToggle:u,onNodeSelect:h},(0,T.rY)(n).map(function(e){return C.createElement(controlled_TreeItemRender,{key:e.id,node:e})})))),C.createElement(eG.Z,{my:"4x"}),C.createElement(e$.Z,null,C.createElement(m.Z,{alignItems:"flex-start",columnGap:"2x"},C.createElement(eX.Z,{whiteSpace:"nowrap"},"Expanded nodes:"),C.createElement(m.Z,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},d.map(function(e){var n;return C.createElement(g.Z,{key:e,whiteSpace:"nowrap"},null===(n=o.get(e))||void 0===n?void 0:n.label)}))),C.createElement(m.Z,{alignItems:"flex-start",columnGap:"2x"},C.createElement(eX.Z,{whiteSpace:"nowrap"},"Selected nodes:"),C.createElement(m.Z,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},c.map(function(e){var n;return C.createElement(g.Z,{key:e,whiteSpace:"nowrap"},null===(n=o.get(e))||void 0===n?void 0:n.label)})))))};function multi_selection_checkboxes_extends(){return(multi_selection_checkboxes_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function multi_selection_checkboxes_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return multi_selection_checkboxes_arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return multi_selection_checkboxes_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function multi_selection_checkboxes_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var multi_selection_checkboxes_TreeItemRender=function TreeItemRender(e){var n=e.node,o=e.nodeDepth,t=void 0===o?0:o,r=multi_selection_checkboxes_slicedToArray((0,f.Z)(),1)[0],l=n.id,d=n.label,a=(0,C.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,l=e.isSelected,a=e.select,i=n?o?eZ.Z:eR.Z:eM.Z,c=n?"yellow:50":"currentColor";return C.createElement(er,{sx:{backgroundColor:l?"transparent":void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*t-.5,width:1}}}},C.createElement(m.Z,{flex:"none",width:"6x"},n&&C.createElement(ea,null,C.createElement(ef,null))),C.createElement(m.Z,{onClick:function(e){e.stopPropagation()},mr:"2x"},C.createElement(R.Z,{checked:l,onChange:function(){a()}})),C.createElement(em.Z,{as:i,color:c,mr:"2x"}),C.createElement(O.Z,{label:d},function(e){var n=e.ref,o=e.style;return C.createElement(x.Z,multi_selection_checkboxes_extends({ref:n},o,{flex:"auto",fontWeight:l?"semibold":"normal"}),d)}))},[r,t,d]);return C.createElement(ek,{nodeId:l,render:a},(0,T.rY)(n.children).map(function(e){return C.createElement(TreeItemRender,{key:e.id,node:e,nodeDepth:t+1})}))},multi_selection_checkboxes=function(){var e=multi_selection_checkboxes_slicedToArray((0,f.Z)(),1)[0],n=(0,I.Z)(function(){return buildTreeNodes()}),o=(0,C.useMemo)(function(){return findExpandableNodeIds(n)},[n]);return C.createElement(x.Z,{sx:{boxShadow:e.shadow.thick}},C.createElement(N.Z,{height:240,overflowY:"auto"},C.createElement(eD,{"aria-label":"multi-selection with checkboxes",defaultExpanded:o,isSelectable:!0,isUnselectable:!0,multiSelect:!0},(0,T.rY)(n).map(function(e){return C.createElement(multi_selection_checkboxes_TreeItemRender,{key:e.id,node:e})}))))};function multi_selection_extends(){return(multi_selection_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function multi_selection_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return multi_selection_arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return multi_selection_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function multi_selection_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var multi_selection_TreeItemRender=function TreeItemRender(e){var n=e.node,o=e.nodeDepth,t=void 0===o?0:o,r=multi_selection_slicedToArray((0,f.Z)(),1)[0],l=n.id,d=n.label,a=(0,C.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,l=e.isSelected,a=n?o?eZ.Z:eR.Z:eM.Z,i=n?"yellow:50":"currentColor";return C.createElement(er,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*t-.5,width:1}}}},C.createElement(m.Z,{flex:"none",width:"6x"},n&&C.createElement(ea,null,C.createElement(ef,null))),C.createElement(em.Z,{as:a,color:i,mr:"2x"}),C.createElement(O.Z,{label:d},function(e){var n=e.ref,o=e.style;return C.createElement(x.Z,multi_selection_extends({ref:n},o,{flex:"auto",fontWeight:l?"semibold":"normal"}),d)}))},[r,t,d]);return C.createElement(ek,{nodeId:l,render:a},(0,T.rY)(n.children).map(function(e){return C.createElement(TreeItemRender,{key:e.id,node:e,nodeDepth:t+1})}))},multi_selection=function(){var e=multi_selection_slicedToArray((0,f.Z)(),1)[0],n=(0,I.Z)(function(){return buildTreeNodes()}),o=(0,C.useMemo)(function(){return findExpandableNodeIds(n)},[n]);return C.createElement(x.Z,{sx:{boxShadow:e.shadow.thick}},C.createElement(N.Z,{height:240,overflowY:"auto"},C.createElement(eD,{"aria-label":"multi-selection",defaultExpanded:o,isSelectable:!0,isUnselectable:!0,multiSelect:!0},(0,T.rY)(n).map(function(e){return C.createElement(multi_selection_TreeItemRender,{key:e.id,node:e})}))))};function selection_extends(){return(selection_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}function selection_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return selection_arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return selection_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function selection_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}var selection_TreeItemRender=function TreeItemRender(e){var n=e.node,o=e.nodeDepth,t=void 0===o?0:o,r=selection_slicedToArray((0,f.Z)(),1)[0],l=n.id,d=n.label,a=(0,C.useCallback)(function(e){var n=e.isExpandable,o=e.isExpanded,l=e.isSelected,a=n?o?eZ.Z:eR.Z:eM.Z,i=n?"yellow:50":"currentColor";return C.createElement(er,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:r.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*t-.5,width:1}}}},C.createElement(m.Z,{flex:"none",width:"6x"},n&&C.createElement(ea,null,C.createElement(ef,null))),C.createElement(em.Z,{as:a,color:i,mr:"2x"}),C.createElement(O.Z,{label:d},function(e){var n=e.ref,o=e.style;return C.createElement(x.Z,selection_extends({ref:n},o,{flex:"auto",fontWeight:l?"semibold":"normal"}),d)}))},[r,t,d]);return C.createElement(ek,{nodeId:l,render:a},(0,T.rY)(n.children).map(function(e){return C.createElement(TreeItemRender,{key:e.id,node:e,nodeDepth:t+1})}))},selection=function(){var e=selection_slicedToArray((0,f.Z)(),1)[0],n=(0,I.Z)(function(){return buildTreeNodes()}),o=(0,C.useMemo)(function(){return findExpandableNodeIds(n)},[n]);return C.createElement(x.Z,{sx:{boxShadow:e.shadow.thick}},C.createElement(N.Z,{height:240,overflowY:"auto"},C.createElement(eD,{"aria-label":"basic tree",defaultExpanded:o,isSelectable:!0,isUnselectable:!0},(0,T.rY)(n).map(function(e){return C.createElement(selection_TreeItemRender,{key:e.id,node:e})}))))},basic=function(){return C.createElement(eD,{defaultExpanded:["1"]},C.createElement(ek,{nodeId:"1",render:function(e){var n=e.isExpandable;return C.createElement(er,null,C.createElement(m.Z,{flex:"none",width:"6x"},n&&C.createElement(ea,null,C.createElement(ef,null))),C.createElement(eX.Z,null,"Node 1"))}},C.createElement(ek,{nodeId:"1.1",render:function(){return C.createElement(er,null,C.createElement(m.Z,{flex:"none",width:"6x"}),C.createElement(eX.Z,null,"Node 1.1"))}})),C.createElement(ek,{nodeId:"2",render:function(){return C.createElement(er,null,C.createElement(m.Z,{flex:"none",width:"6x"}),C.createElement(eX.Z,null,"Node 2"))}}))};function _createMdxContent(e){var n=Object.assign({div:"div",h1:"h1",p:"p",code:"code",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",h3:"h3",ul:"ul",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,h.ah)(),e.components);return(0,u.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,u.jsx)(n.h1,{id:"tree",children:"Tree"}),"\n",(0,u.jsxs)(n.p,{children:["The ",(0,u.jsx)(n.code,{children:"Tree"})," component allows you to present information in a hierarchical, nested list format. It is particularly useful for visualizing structures like files and folders in a file system, categories and items in a list, or any other kind of nested arrangement that requires exploration."]}),"\n",(0,u.jsxs)(n.h2,{id:"import",children:["Import",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-js",children:"import {\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  useTree,\n  useTreeItem,\n} from '@tonic-ui/react';\n"})}),"\n",(0,u.jsxs)(n.h2,{id:"usage",children:["Usage",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(n.h3,{id:"basic-tree",children:["Basic tree",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-tree",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(n.p,{children:["To render a tree, you'll need to use the ",(0,u.jsx)(n.code,{children:"Tree"})," component along with one or more ",(0,u.jsx)(n.code,{children:"TreeItem"})," components as its children. You can nest ",(0,u.jsx)(n.code,{children:"TreeItem"})," components to create a tree structure."]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:basic,file:{data:'import {\n  Flex,\n  Text,\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  return (\n    <Tree defaultExpanded={[\'1\']}>\n      <TreeItem\n        nodeId="1"\n        render={({ isExpandable }) => (\n          <TreeItemContent>\n            <Flex flex="none" width="6x">\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Text>Node 1</Text>\n          </TreeItemContent>\n        )}\n      >\n        <TreeItem\n          nodeId="1.1"\n          render={() => (\n            <TreeItemContent>\n              <Flex flex="none" width="6x" />\n              <Text>Node 1.1</Text>\n            </TreeItemContent>\n          )}\n        />\n      </TreeItem>\n      <TreeItem\n        nodeId="2"\n        render={() => (\n          <TreeItemContent>\n            <Flex flex="none" width="6x" />\n            <Text>Node 2</Text>\n          </TreeItemContent>\n        )}\n      />\n    </Tree>\n  );\n};\n\nexport default App;',path:"pages/components/tree/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Flex,\n  Text,\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n} from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst App = () => {\n  return (\n    <Tree defaultExpanded={[\'1\']}>\n      <TreeItem\n        nodeId="1"\n        render={({ isExpandable }) => (\n          <TreeItemContent>\n            <Flex flex="none" width="6x">\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Text>Node 1</Text>\n          </TreeItemContent>\n        )}\n      >\n        <TreeItem\n          nodeId="1.1"\n          render={() => (\n            <TreeItemContent>\n              <Flex flex="none" width="6x" />\n              <Text>Node 1.1</Text>\n            </TreeItemContent>\n          )}\n        />\n      </TreeItem>\n      <TreeItem\n        nodeId="2"\n        render={() => (\n          <TreeItemContent>\n            <Flex flex="none" width="6x" />\n            <Text>Node 2</Text>\n          </TreeItemContent>\n        )}\n      />\n    </Tree>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,u.jsxs)(n.p,{children:["The ",(0,u.jsx)(n.code,{children:"TreeItem"})," component requires two props: ",(0,u.jsx)(n.code,{children:"nodeId"})," and ",(0,u.jsx)(n.code,{children:"render"}),"."]}),"\n",(0,u.jsx)(n.pre,{disabled:!0,children:(0,u.jsx)(n.code,{className:"language-jsx",children:"<TreeItem nodeId={nodeId} render={render} />\n"})}),"\n",(0,u.jsxs)(n.ul,{children:["\n",(0,u.jsxs)(n.li,{children:["The ",(0,u.jsx)(n.code,{children:"nodeId"})," prop accepts a string value that uniquely identifies the node. This prop is required for the tree to work properly."]}),"\n",(0,u.jsxs)(n.li,{children:["The ",(0,u.jsx)(n.code,{children:"render"})," prop is a function that returns a React element. It receives an object with properties like ",(0,u.jsx)(n.code,{children:"nodeDepth"}),", ",(0,u.jsx)(n.code,{children:"nodeId"}),", ",(0,u.jsx)(n.code,{children:"isDisabled"}),", ",(0,u.jsx)(n.code,{children:"isExpandable"}),", ",(0,u.jsx)(n.code,{children:"isExpanded"}),", ",(0,u.jsx)(n.code,{children:"isFocused"}),", ",(0,u.jsx)(n.code,{children:"isSelected"}),", and various functions for interacting with the node."]}),"\n"]}),"\n",(0,u.jsxs)(n.p,{children:["In the render function, you can use the provided ",(0,u.jsx)(n.code,{children:"TreeItemContent"}),", ",(0,u.jsx)(n.code,{children:"TreeItemToggle"}),", and ",(0,u.jsx)(n.code,{children:"TreeItemToggleIcon"})," components to structure the content of the tree node."]}),"\n",(0,u.jsx)(n.p,{children:"Here is the recommended structure for rendering a tree node:"}),"\n",(0,u.jsx)(n.pre,{disabled:!0,children:(0,u.jsx)(n.code,{className:"language-jsx",children:'function render({ isExpanded }) {\n  return (\n    <TreeItemContent>\n      <Flex flex="none" width="6x">\n        {isExpandable && (\n          <TreeItemToggle>\n            <TreeItemToggleIcon />\n          </TreeItemToggle>\n        )}\n      </Flex>\n      <OverflowTooltip label="Node label">\n        Node label\n      </OverflowTooltip>\n    </TreeItemContent>\n  );\n}\n'})}),"\n",(0,u.jsxs)(n.h3,{id:"selection",children:["Selection",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#selection",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(n.p,{children:["You can enable node selection and unselection by setting the ",(0,u.jsx)(n.code,{children:"isSelectable"})," and ",(0,u.jsx)(n.code,{children:"isUnselectable"})," props to ",(0,u.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:selection,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n          </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"basic tree\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n          </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"basic tree\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(n.h3,{id:"multi-selection",children:["Multi-selection",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#multi-selection",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(n.p,{children:["To enable the selection of multiple nodes, use the ",(0,u.jsx)(n.code,{children:"multiSelect"})," prop. You can use keyboard shortcuts for efficient navigation and selection."]}),"\n",(0,u.jsxs)(n.ul,{children:["\n",(0,u.jsx)(n.li,{children:"Use arrow keys to navigate between nodes."}),"\n",(0,u.jsxs)(n.li,{children:["Press the ",(0,u.jsx)(n.code,{children:"Space"})," key to toggle the selection of a node."]}),"\n",(0,u.jsxs)(n.li,{children:["Hold down ",(0,u.jsx)(n.code,{children:"Ctrl"})," and click to select/unselect nodes."]}),"\n",(0,u.jsxs)(n.li,{children:["Hold down ",(0,u.jsx)(n.code,{children:"Shift"})," and click to select a range of nodes."]}),"\n"]}),"\n",(0,u.jsxs)(n.p,{children:["Refer to the ",(0,u.jsx)(n.a,{href:"#accessibility",children:"Accessibility"})," section for more keyboard shortcuts."]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:multi_selection,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsx)(n.p,{children:"For checkboxes used in multi-selection, consider enhancing accessibility by adjusting the background color when the checkbox is selected."}),"\n",(0,u.jsx)(n.pre,{disabled:!0,children:(0,u.jsx)(n.code,{className:"language-jsx",children:"const render = ({ isExpanded, isSelected }) => {\n  return (\n    <TreeItemContent\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        backgroundColor: isSelected ? 'transparent' : undefined,\n      }}\n    >\n      {/* ... */}\n    </TreeItemContent>\n  );\n};\n"})}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:multi_selection_checkboxes,file:{data:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? 'transparent' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          onClick={(event) => {\n            // Prevent event propagation when clicking the checkbox\n            event.stopPropagation();\n          }}\n          mr=\"2x\"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={() => {\n              select();\n            }}\n          />\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection with checkboxes\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? 'transparent' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          onClick={(event) => {\n            // Prevent event propagation when clicking the checkbox\n            event.stopPropagation();\n          }}\n          mr=\"2x\"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={() => {\n              select();\n            }}\n          />\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"multi-selection with checkboxes\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(n.h3,{id:"controlled",children:["Controlled",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#controlled",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:controlled,file:{data:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Icon,\n  Flex,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  useConst,\n} from \'@tonic-ui/react-hooks\';\nimport { FolderIcon, FolderOpenIcon, ServerIcon } from \'@tonic-ui/react-icons\';\nimport { ensureArray } from \'ensure-type\';\nimport React, { useCallback, useMemo, useState } from \'react\';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from \'./utils\';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? \'yellow:50\' : \'currentColor\';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? \'transparent\' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          \':hover + [role="group"]\': {\n            position: \'relative\',\n            \'::before\': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: \'""\',\n              position: \'absolute\',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex="none"\n          width="6x"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          onClick={(event) => {\n            // Prevent event propagation when clicking the checkbox\n            event.stopPropagation();\n          }}\n          mr="2x"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={() => {\n              select();\n            }}\n          />\n        </Flex>\n        <Icon as={icon} color={iconColor} mr="2x" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex="auto"\n              fontWeight={isSelected ? \'semibold\' : \'normal\'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const treeMap = useMemo(() => buildTreeMap(treeNodes), [treeNodes]);\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n  const allNodes = useMemo(() => Array.from(treeMap.keys()), [treeMap]);\n  const [expandedNodeIds, setExpandedNodeIds] = useState([]);\n  const [selectedNodeIds, setSelectedNodeIds] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodeIds(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodeIds(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodeIds(expandableNodeIds);\n  }, [expandableNodeIds]);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodeIds([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodeIds(allNodes);\n  }, [allNodes]);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodeIds([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="4x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodeIds.length === expandableNodeIds.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodeIds.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodeIds.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodeIds.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Box\n        sx={{\n          //minWidth: 160,\n          //maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="auto"\n        >\n          <Tree\n            aria-label="controlled"\n            isSelectable\n            isUnselectable\n            multiSelect\n            expanded={expandedNodeIds}\n            selected={selectedNodeIds}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </Tree>\n        </Scrollbar>\n      </Box>\n      <Divider my="4x" />\n      <Stack>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodeIds.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.label}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodeIds.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.label}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Icon,\n  Flex,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  useConst,\n} from \'@tonic-ui/react-hooks\';\nimport { FolderIcon, FolderOpenIcon, ServerIcon } from \'@tonic-ui/react-icons\';\nimport { ensureArray } from \'ensure-type\';\nimport React, { useCallback, useMemo, useState } from \'react\';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from \'@/pages/components/tree/utils\';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? \'yellow:50\' : \'currentColor\';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? \'transparent\' : undefined,\n\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          \':hover + [role="group"]\': {\n            position: \'relative\',\n            \'::before\': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: \'""\',\n              position: \'absolute\',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex="none"\n          width="6x"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Flex\n          onClick={(event) => {\n            // Prevent event propagation when clicking the checkbox\n            event.stopPropagation();\n          }}\n          mr="2x"\n        >\n          <Checkbox\n            checked={isSelected}\n            onChange={() => {\n              select();\n            }}\n          />\n        </Flex>\n        <Icon as={icon} color={iconColor} mr="2x" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex="auto"\n              fontWeight={isSelected ? \'semibold\' : \'normal\'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const treeMap = useMemo(() => buildTreeMap(treeNodes), [treeNodes]);\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n  const allNodes = useMemo(() => Array.from(treeMap.keys()), [treeMap]);\n  const [expandedNodeIds, setExpandedNodeIds] = useState([]);\n  const [selectedNodeIds, setSelectedNodeIds] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodeIds(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodeIds(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodeIds(expandableNodeIds);\n  }, [expandableNodeIds]);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodeIds([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodeIds(allNodes);\n  }, [allNodes]);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodeIds([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="4x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodeIds.length === expandableNodeIds.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodeIds.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodeIds.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodeIds.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Box\n        sx={{\n          //minWidth: 160,\n          //maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="auto"\n        >\n          <Tree\n            aria-label="controlled"\n            isSelectable\n            isUnselectable\n            multiSelect\n            expanded={expandedNodeIds}\n            selected={selectedNodeIds}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </Tree>\n        </Scrollbar>\n      </Box>\n      <Divider my="4x" />\n      <Stack>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodeIds.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.label}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodeIds.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.label}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,u.jsxs)(n.h3,{id:"dropdown",children:["Dropdown",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#dropdown",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:dropdown,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  Menu,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  EditIcon,\n  FolderIcon,\n  FolderOpenIcon,\n  MoreIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n        <Flex\n          flex=\"none\"\n          ml=\"2x\"\n        >\n          <Menu>\n            <MenuToggle\n              onClick={(event) => {\n                // Uncomment the following line to prevent the tree node from being selected\n                //event.stopPropagation();\n              }}\n              sx={{\n                color: colorStyle.color.secondary,\n                ':hover': {\n                  color: colorStyle.color.info,\n                },\n              }}\n            >\n              <MoreIcon />\n            </MenuToggle>\n            <MenuList\n              width=\"max-content\"\n            >\n              <MenuItem>\n                <Flex alignItems=\"center\" columnGap=\"2x\">\n                  <EditIcon /> List item\n                </Flex>\n              </MenuItem>\n              <MenuItem>\n                <Flex alignItems=\"center\" columnGap=\"2x\">\n                  <EditIcon /> List item\n                </Flex>\n              </MenuItem>\n            </MenuList>\n          </Menu>\n        </Flex>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"dropdown\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  Menu,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  EditIcon,\n  FolderIcon,\n  FolderOpenIcon,\n  MoreIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n        <Flex\n          flex=\"none\"\n          ml=\"2x\"\n        >\n          <Menu>\n            <MenuToggle\n              onClick={(event) => {\n                // Uncomment the following line to prevent the tree node from being selected\n                //event.stopPropagation();\n              }}\n              sx={{\n                color: colorStyle.color.secondary,\n                ':hover': {\n                  color: colorStyle.color.info,\n                },\n              }}\n            >\n              <MoreIcon />\n            </MenuToggle>\n            <MenuList\n              width=\"max-content\"\n            >\n              <MenuItem>\n                <Flex alignItems=\"center\" columnGap=\"2x\">\n                  <EditIcon /> List item\n                </Flex>\n              </MenuItem>\n              <MenuItem>\n                <Flex alignItems=\"center\" columnGap=\"2x\">\n                  <EditIcon /> List item\n                </Flex>\n              </MenuItem>\n            </MenuList>\n          </Menu>\n        </Flex>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"dropdown\"\n          defaultExpanded={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(n.h3,{id:"load-on-demand",children:["Load on demand",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#load-on-demand",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:load_on_demand,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Spinner,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n  useTree,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nconst buildLoadOnDemandTreeNodes = (count) => {\n  const treeNodes = Array.from({ length: count }, (_, index) => {\n    const nodeId = index + 1;\n\n    return {\n      id: `${nodeId}`,\n      label: `Node ${nodeId}`,\n      children: [],\n      loadOnDemand: true,\n    };\n  });\n\n  return treeNodes;\n};\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const {\n    getIsNodeExpanded,\n  } = useTree();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n  const [childNodes, setChildNodes] = useState(ensureArray(node.children));\n  const [isLoading, setIsLoading] = useState(false);\n  const isExpanded = getIsNodeExpanded(nodeId);\n  const loadOnDemand = node.loadOnDemand && childNodes.length === 0;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              {isLoading ? <Spinner size=\"xs\" /> : <TreeItemToggleIcon />}\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, isLoading, nodeDepth, nodeLabel]);\n\n  useEffect(() => {\n    let timer = null;\n\n    if (isExpanded && loadOnDemand) {\n      setIsLoading(true);\n      timer = setTimeout(() => {\n        const childNodes = [\n          {\n            id: `${nodeId}.1`,\n            label: `${nodeLabel}.1`,\n            loadOnDemand: (nodeDepth < 2),\n          },\n          {\n            id: `${nodeId}.2`,\n            label: `${nodeLabel}.2`,\n          },\n        ];\n\n        setChildNodes(childNodes);\n        setIsLoading(false);\n\n        // The following code is to update the node with the new children.\n        // You can remove it if you don't want to update the node.\n        node.children = childNodes;\n        node.loadOnDemand = false;\n      }, 500);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isExpanded, loadOnDemand, node, nodeId, nodeLabel, nodeDepth]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {loadOnDemand\n        ? <Box key=\"stub\" />\n        : childNodes.map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n              nodeDepth={nodeDepth + 1}\n            />\n          ))\n      }\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildLoadOnDemandTreeNodes(5));\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"load on demand\"\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Spinner,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorStyle,\n  useTree,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nconst buildLoadOnDemandTreeNodes = (count) => {\n  const treeNodes = Array.from({ length: count }, (_, index) => {\n    const nodeId = index + 1;\n\n    return {\n      id: `${nodeId}`,\n      label: `Node ${nodeId}`,\n      children: [],\n      loadOnDemand: true,\n    };\n  });\n\n  return treeNodes;\n};\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const {\n    getIsNodeExpanded,\n  } = useTree();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n  const [childNodes, setChildNodes] = useState(ensureArray(node.children));\n  const [isLoading, setIsLoading] = useState(false);\n  const isExpanded = getIsNodeExpanded(nodeId);\n  const loadOnDemand = node.loadOnDemand && childNodes.length === 0;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected, select }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              {isLoading ? <Spinner size=\"xs\" /> : <TreeItemToggleIcon />}\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, isLoading, nodeDepth, nodeLabel]);\n\n  useEffect(() => {\n    let timer = null;\n\n    if (isExpanded && loadOnDemand) {\n      setIsLoading(true);\n      timer = setTimeout(() => {\n        const childNodes = [\n          {\n            id: `${nodeId}.1`,\n            label: `${nodeLabel}.1`,\n            loadOnDemand: (nodeDepth < 2),\n          },\n          {\n            id: `${nodeId}.2`,\n            label: `${nodeLabel}.2`,\n          },\n        ];\n\n        setChildNodes(childNodes);\n        setIsLoading(false);\n\n        // The following code is to update the node with the new children.\n        // You can remove it if you don't want to update the node.\n        node.children = childNodes;\n        node.loadOnDemand = false;\n      }, 500);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isExpanded, loadOnDemand, node, nodeId, nodeLabel, nodeDepth]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {loadOnDemand\n        ? <Box key=\"stub\" />\n        : childNodes.map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n              nodeDepth={nodeDepth + 1}\n            />\n          ))\n      }\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildLoadOnDemandTreeNodes(5));\n\n  return (\n    <Box\n      sx={{\n        //minWidth: 160,\n        //maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <Tree\n          aria-label=\"load on demand\"\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </Tree>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(n.h3,{id:"resizable",children:["Resizable",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#resizable",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(n.p,{children:["You can resize the tree with a minimum width of ",(0,u.jsx)(n.code,{children:"160px"})," and a maximum width of ",(0,u.jsx)(n.code,{children:"40%"})," of the display area to match your design and layout requirements."]}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:resizable,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from './utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const treeMap = useMemo(() => buildTreeMap(treeNodes), [treeNodes]);\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n  const allNodes = useMemo(() => Array.from(treeMap.keys()), [treeMap]);\n  const [selectedNodeId, setSelectedNodeId] = useState(allNodes[0]);\n  const [isResizing, setIsResizing] = useState(false);\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n\n  const handleSelect = useCallback((nodeIds) => {\n    const nodeId = nodeIds[0];\n    setSelectedNodeId(nodeId);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 300,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"auto\"\n        >\n          <Tree\n            aria-label=\"resizable\"\n            defaultExpanded={expandableNodeIds}\n            isSelectable\n            isUnselectable={false}\n            selected={selectedNodeId}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </Tree>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodeId)?.label}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]'},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  Tree,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n  ServerIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n  findExpandableNodeIds,\n} from '@/pages/components/tree/utils';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = (() => {\n      if (isExpandable) {\n        return isExpanded ? FolderOpenIcon : FolderIcon;\n      }\n      return ServerIcon;\n    })();\n    const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n    return (\n      <TreeItemContent\n        sx={{\n          // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n          ':hover + [role=\"group\"]': {\n            position: 'relative',\n            '::before': {\n              backgroundColor: colorStyle.background.highlighted,\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n              width: 1,\n            },\n          },\n        }}\n      >\n        <Flex\n          flex=\"none\"\n          width=\"6x\"\n        >\n          {isExpandable && (\n            <TreeItemToggle>\n              <TreeItemToggleIcon />\n            </TreeItemToggle>\n          )}\n        </Flex>\n        <Icon as={icon} color={iconColor} mr=\"2x\" />\n        <OverflowTooltip label={nodeLabel}>\n          {({ ref, style }) => (\n            <Box\n              ref={ref}\n              {...style}\n              flex=\"auto\"\n              fontWeight={isSelected ? 'semibold' : 'normal'}\n            >\n              {nodeLabel}\n            </Box>\n          )}\n        </OverflowTooltip>\n      </TreeItemContent>\n    );\n  }, [colorStyle, nodeDepth, nodeLabel]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const treeNodes = useConst(() => buildTreeNodes());\n  const treeMap = useMemo(() => buildTreeMap(treeNodes), [treeNodes]);\n  const expandableNodeIds = useMemo(() => findExpandableNodeIds(treeNodes), [treeNodes]);\n  const allNodes = useMemo(() => Array.from(treeMap.keys()), [treeMap]);\n  const [selectedNodeId, setSelectedNodeId] = useState(allNodes[0]);\n  const [isResizing, setIsResizing] = useState(false);\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n\n  const handleSelect = useCallback((nodeIds) => {\n    const nodeId = nodeIds[0];\n    setSelectedNodeId(nodeId);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 300,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"auto\"\n        >\n          <Tree\n            aria-label=\"resizable\"\n            defaultExpanded={expandableNodeIds}\n            isSelectable\n            isUnselectable={false}\n            selected={selectedNodeId}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </Tree>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodeId)?.label}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(n.h3,{id:"moving-items-via-drag-and-drop-dnd",children:["Moving items via Drag and Drop (DnD)",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#moving-items-via-drag-and-drop-dnd",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsx)(n.p,{children:"Select items and move them to a tree node using drag-and-drop (DnD) interaction."}),"\n",(0,u.jsx)(b.Z,Object.assign({},{component:dnd,file:{data:"import { Box, Code, Flex, ResizeHandle, Scrollbar, useColorMode, useColorStyle } from '@tonic-ui/react';\nimport { FileArrowOIcon } from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n} from '../utils';\nimport TableView from './TableView';\nimport TreeView from './TreeView';\nimport DragLayer from './DragLayer';\nimport useRefresh from './useRefresh';\n\nconst getTreeNodes = () => {\n  const threatTypes = [\n    'Virus/Malware',\n    'Spyware/Grayware',\n    'URL Filtering',\n    'Web Reputation',\n    'Network Virus',\n    'Application Control',\n  ];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).map(node => {\n      node.parent = node.parent ?? null;\n      node.children = ensureArray(node.children).map(child => {\n        child.parent = node;\n        return child;\n      });\n      node.data = {\n        data: _.range(15).map((i) => {\n          const [nodeIndex = ''] = ensureArray(String(node.label).match(/\\d+/));\n\n          const endpoint = `Endpoint ${nodeIndex}_${i+1}`;\n\n          // Randomly pick a subset of threat types\n          const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n\n          // Generate a random date within the past 30 days\n          const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n\n          return {\n            id: `${node.id}_${i+1}`,\n            endpoint,\n            detections,\n            lastSeen,\n          };\n        }),\n      };\n\n      traverse(node.children);\n    });\n  };\n\n  const treeNodes = buildTreeNodes();\n  traverse(treeNodes);\n\n  return treeNodes;\n};\n\nconst App = () => {\n  const treeNodes = useConst(() => getTreeNodes());\n  const treeMap = useMemo(() => {\n    return buildTreeMap(treeNodes);\n  }, [treeNodes]);\n  const refresh = useRefresh();\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodeId, setSelectedNodeId] = useState(ensureArray(treeNodes)[0]?.id);\n  const tableData = treeMap.get(selectedNodeId)?.data?.data;\n  const handleNodeDrop = useCallback((context) => {\n    const { source, target, data } = context;\n\n    const sourceNode = treeMap.get(source);\n    const targetNode = treeMap.get(target);\n\n    const movedData = sourceNode.data.data.filter(x => _.includes(data, x.id));\n\n    sourceNode.data.data = _.differenceBy(sourceNode.data.data, movedData, 'id');\n    targetNode.data.data = _.uniqBy([\n      ...ensureArray(targetNode.data.data),\n      ...movedData,\n    ], 'id');\n\n    // Force re-render\n    refresh();\n  }, [refresh, treeMap]);\n  const handleNodeSelect = useCallback((nodeIds) => {\n    setSelectedNodeId(nodeIds[0]);\n  }, []);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <DragLayer>\n        {({ item }) => {\n          // Drag layer is not rendered when nothing is being dragged\n          const movedItemCount = ensureArray(item.data).length;\n          return (\n            <Flex alignItems=\"center\" columnGap=\"1x\">\n              <FileArrowOIcon />\n              <Code>{movedItemCount}</Code>\n            </Flex>\n          );\n        }}\n      </DragLayer>\n      <Flex\n        ref={containerRef}\n        sx={{\n          boxShadow: colorStyle.shadow.thick,\n          cursor: isResizing ? 'col-resize' : 'default',\n        }}\n      >\n        <Box\n          ref={resizableRef}\n          sx={{\n            flex: 'none',\n            width: 300,\n          }}\n        >\n          <Scrollbar\n            height=\"100%\"\n            overflowX=\"hidden\"\n            overflowY=\"auto\"\n          >\n            <TreeView\n              data={treeNodes}\n              onNodeDrop={handleNodeDrop}\n              onNodeSelect={handleNodeSelect}\n            />\n          </Scrollbar>\n        </Box>\n        <Flex\n          sx={{\n            flex: 'auto',\n            position: 'relative',\n          }}\n        >\n          <ResizeHandle\n            onResizeStart={() => {\n              setIsResizing(true);\n            }}\n            onResizeEnd={() => {\n              setIsResizing(false);\n            }}\n            onResize={({ clientX }) => {\n              const el = resizableRef.current;\n              if (!el) {\n                return;\n              }\n\n              const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n              const minWidth = 160;\n              const maxWidth = parentWidth * 0.4;\n              const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n              if (canDrag) {\n                const nextWidth = clientX - parentLeft;\n                el.style.width = `${nextWidth}px`;\n              }\n            }}\n            sx={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              bottom: 0,\n              borderLeft: 1,\n              borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n              _hover: {\n                borderLeftColor: highlightedDividerColor,\n              },\n              zIndex: 1,\n            }}\n          />\n          <TableView\n            key={selectedNodeId} // Force re-render when selected node changes\n            node={treeMap.get(selectedNodeId)}\n            data={tableData}\n            width=\"100%\"\n          />\n        </Flex>\n      </Flex>\n    </DndProvider>\n  );\n};\n\nexport default App;",path:"pages/components/tree/index.page.mdx"},sandbox:{files:{"src/pages/components/tree/utils.js":"import { ensureArray } from 'ensure-type';\nimport defaultTreeNodes from '@/pages/components/tree/data/tree-nodes.json';\n\nexport const buildTreeNodes = () => {\n  return JSON.parse(JSON.stringify(defaultTreeNodes));\n};\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};","src/pages/components/tree/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "label": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "label": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "label": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "label": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "label": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "label": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "label": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "label": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "label": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "label": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "label": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "label": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "label": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "label": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "label": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "label": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "label": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "label": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "label": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "label": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "label": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "label": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "label": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "label": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "label": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "label": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "label": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "label": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "label": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "label": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "label": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "label": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "label": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "label": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "label": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "label": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "label": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "label": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "label": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "label": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "label": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "label": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "label": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "label": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "label": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "label": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "label": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "label": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "label": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "label": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "label": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "label": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "label": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "label": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "label": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "label": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "label": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "label": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "label": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "label": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "label": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "label": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "label": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "label": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "label": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "label": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "label": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "label": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "label": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "label": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "label": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "label": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "label": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "label": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "label": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "label": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "label": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "label": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "label": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "label": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "label": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "label": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "label": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "label": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "label": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "label": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "label": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "label": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "label": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "label": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "label": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "label": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "label": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "label": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "label": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "label": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "label": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "label": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "label": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "label": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree/dnd/TableView.js":"import {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Flex,\n  OverflowTooltip,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { SVGIcon, SortUpIcon, SortDownIcon } from '@tonic-ui/react-icons';\nimport {\n  dataAttr,\n} from '@tonic-ui/utils';\nimport { ensureArray, ensureNumber } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport TablePagination from '@/components/TablePagination';\nimport ConditionalWrapper from '@/pages/components/tree/dnd/ConditionalWrapper';\nimport Draggable from '@/pages/components/tree/dnd/Draggable';\nimport DragIcon from '@/pages/components/tree/dnd/icons/drag.svg';\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst Component = ({\n  node,\n  data,\n  ...rest\n}) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const theme = useTheme();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const selectedBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.08)',\n    light: 'rgba(0, 0, 0, 0.08)',\n  }[colorMode];\n\n  const nodeLabel = node.label;\n\n  const [sorting, setSorting] = useState([\n    { id: 'endpoint', desc: false },\n  ]);\n\n  const [rowSelection, setRowSelection] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 40,\n    },\n    {\n      header: () => (\n        <OverflowTooltip label=\"Endpoint\">\n          Endpoint\n        </OverflowTooltip>\n      ),\n      accessorKey: 'endpoint',\n      cell: ({ getValue, row }) => {\n        const value = getValue();\n        return (\n          <OverflowTooltip label={value}>\n            {value}\n          </OverflowTooltip>\n        );\n      },\n      size: 'auto',\n    },\n    {\n      header: () => (\n        <OverflowTooltip label=\"Detections\">\n          Detections\n        </OverflowTooltip>\n      ),\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        const value = detections.length;\n        return (\n          <OverflowTooltip label={value}>\n            {value}\n          </OverflowTooltip>\n        );\n      },\n      size: 'auto',\n    },\n    {\n      header: () => (\n        <OverflowTooltip label=\"Last Seen\">\n          Last Seen\n        </OverflowTooltip>\n      ),\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => {\n        const value = getValue().toISOString();\n        return (\n          <OverflowTooltip label={value}>\n            {value}\n          </OverflowTooltip>\n        );\n      },\n      size: 'auto',\n    },\n  ], []);\n\n  const table = useReactTable({\n    data: ensureArray(data),\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      rowSelection,\n      sorting,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval: true, // Enables/Disables the ability to remove sorting for the table\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    table.resetRowSelection();\n    table.resetPagination();\n  }, [data, table]);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n    const resizerWidth = 12; // Width of the resizer element between the tree and the table\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize - resizerWidth;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n  const isTableScrollingEnabled = layout !== 'table';\n  const totalCount = table.getCoreRowModel().rows.length;\n  const getTableHeight = () => {\n    if (isTableScrollingEnabled) {\n      const headerHeight = 36;\n      const cellHeight = 36;\n      const footerHeight = 56;\n      const rowsToDisplay = 10;\n      return (headerHeight + rowsToDisplay * cellHeight + footerHeight);\n    }\n    return 'auto';\n  };\n\n  return (\n    <Flex\n      flexDirection=\"column\"\n      {...rest}\n    >\n      <Box flex=\"none\" px=\"3x\" py=\"2x\">\n        {nodeLabel}\n      </Box>\n      <Box flex=\"auto\">\n        <AutoSizer\n          disableHeight\n          onResize={({ width }) => {\n            if (tableWidth !== width) {\n              setTableWidth(width);\n            }\n          }}\n        >\n          {({ width }) => (\n            <Table\n              layout={layout}\n              variant={variant}\n              sx={{\n                // Hide the table if there is no column sizing state\n                visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n                height: getTableHeight(),\n                width,\n              }}\n            >\n              <TableHeader>\n                {table.getHeaderGroups().map(headerGroup => (\n                  <TableHeaderRow\n                    key={headerGroup.id}\n                  >\n                    <TableHeaderCell\n                      sx={{\n                        width: '2x',\n                        pl: '3x',\n                        pr: 0,\n                      }}\n                    />\n                   {headerGroup.headers.map(header => {\n                      let styleProps = {\n                        minWidth: header.column.columnDef.minSize,\n                        width: header.getSize(),\n                        ...header.column.columnDef.style,\n                      };\n                      if (header.column.getCanSort()) {\n                        styleProps = {\n                          ...styleProps,\n                          cursor: 'pointer',\n                          userSelect: 'none',\n                          _hover: {\n                            backgroundColor: hoverBackgroundColor,\n                          },\n                        };\n                      }\n                      if (header.column.getIsSorted()) {\n                        styleProps = {\n                          ...styleProps,\n                          color: colorStyle.color.emphasis,\n                        };\n                      }\n\n                      return (\n                        <TableHeaderCell\n                          key={header.id}\n                          onClick={header.column.getToggleSortingHandler()}\n                          {...styleProps}\n                        >\n                          {header.isPlaceholder ? null : (\n                            <Flex alignItems=\"center\">\n                              {flexRender(header.column.columnDef.header, header.getContext())}\n                              {{\n                                asc: (<SortUpIcon size={20} ml=\"1x\" />),\n                                desc: (<SortDownIcon size={20} ml=\"1x\" />),\n                              }[header.column.getIsSorted()] ?? null}\n                            </Flex>\n                          )}\n                        </TableHeaderCell>\n                      );\n                    })}\n                  </TableHeaderRow>\n                ))}\n              </TableHeader>\n              <ConditionalWrapper\n                condition={isTableScrollingEnabled}\n                wrapper={children => (\n                  <TableScrollbar\n                    height=\"100%\"\n                    overflow=\"visible\" // Make the scrollbar visible\n                  >\n                    {children}\n                  </TableScrollbar>\n                )}\n              >\n                <TableBody>\n                  {table.getRowModel().rows.map(row => {\n                    return (\n                      <Draggable\n                        key={row.id}\n                        item={() => {\n                          const sourceNodeId = node.id;\n                          const selectedRows = table.getSelectedRowModel().rows;\n                          const rowIds = selectedRows.map(row => row.original.id);\n\n                          return {\n                            source: sourceNodeId,\n                            data: rowIds,\n                          };\n                        }}\n                      >\n                        {({ dragRef, isDragging }) => {\n                          const canDrag = row.getIsSelected();\n\n                          return (\n                            <TableRow\n                              data-selected={dataAttr(row.getIsSelected())}\n                              sx={{\n                                position: 'relative',\n                                _hover: {\n                                  backgroundColor: hoverBackgroundColor,\n                                },\n                                _selected: {\n                                  backgroundColor: selectedBackgroundColor,\n                                },\n                              }}\n                            >\n                              <TableCell\n                                ref={dragRef}\n                                sx={{\n                                  width: '2x',\n                                  pl: '3x',\n                                  pr: 0,\n                                  zIndex: canDrag ? 1 : undefined,\n                                }}\n                              >\n                                <SVGIcon\n                                  alt=\"draggable\"\n                                  as={DragIcon}\n                                  sx={{\n                                    cursor: 'move',\n                                    visibility: row.getIsSelected() ? 'visible' : 'hidden',\n                                    width: '2x',\n                                    height: '4x',\n                                  }}\n                                />\n                              </TableCell>\n                              {row.getVisibleCells().map(cell => {\n                                const styleProps = {\n                                  minWidth: cell.column.columnDef.minSize,\n                                  width: cell.column.getSize(),\n                                  ...cell.column.columnDef.style,\n                                };\n                                return (\n                                  <TableCell\n                                    key={cell.id}\n                                    {...styleProps}\n                                  >\n                                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                                  </TableCell>\n                                );\n                              })}\n                            </TableRow>\n                          );\n                        }}\n                      </Draggable>\n                    );\n                  })}\n                </TableBody>\n              </ConditionalWrapper>\n              <TablePagination\n                count={totalCount}\n                onPageChange={(nextPage) => {\n                  const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n                  table.setPageIndex(pageIndex);\n                }}\n                onRowsPerPageChange={(nextRowsPerPage) => {\n                  const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n                  table.setPageSize(pageSize);\n                }}\n              />\n            </Table>\n          )}\n        </AutoSizer>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Component;","src/components/TablePagination.js":'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Space,\n  Text,\n  useColorMode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport {\n  AngleLeftIcon,\n  AngleRightIcon,\n} from \'@tonic-ui/react-icons\';\nimport { ensureArray, ensureFiniteNumber } from \'ensure-type\';\nimport React, { useCallback, useEffect, useState } from \'react\';\n\nconst TablePagination = ({\n  count,\n  defaultPage = 1,\n  defaultRowsPerPage: defaultRowsPerPageProp,\n  onPageChange: onPageChangeProp,\n  onRowsPerPageChange: onRowsPerPageChangeProp,\n  page: pageProp,\n  rowsPerPage: rowsPerPageProp,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  showFirstButton = false,\n  showLastButton = false,\n}) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const defaultRowsPerPage = defaultRowsPerPageProp ?? ensureArray(rowsPerPageOptions)[0];\n  const [page, setPage] = useState(pageProp ?? defaultPage);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageProp ?? defaultRowsPerPage);\n\n  useEffect(() => {\n    const isControlled = (pageProp !== undefined);\n    if (isControlled) {\n      setPage(pageProp);\n    }\n  }, [pageProp]);\n\n  useEffect(() => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (isControlled) {\n      setRowsPerPage(rowsPerPageProp);\n    }\n  }, [rowsPerPageProp]);\n\n  const onPageChange = useCallback((nextPage) => {\n    const isControlled = (pageProp !== undefined);\n    if (!isControlled) {\n      setPage(nextPage);\n    }\n\n    if (typeof onPageChangeProp === \'function\') {\n      onPageChangeProp(nextPage);\n    }\n  }, [pageProp, onPageChangeProp]);\n\n  const onRowsPerPageChange = useCallback((nextRowsPerPage) => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (!isControlled) {\n      setRowsPerPage(nextRowsPerPage);\n    }\n\n    if (typeof onRowsPerPageChangeProp === \'function\') {\n      onRowsPerPageChangeProp(nextRowsPerPage);\n    }\n  }, [rowsPerPageProp, onRowsPerPageChangeProp]);\n\n  const totalPages = Math.ceil(count / rowsPerPage);\n  const handlePageChange = (event) => {\n    const nextPage = ensureFiniteNumber(event.target.value);\n    if (nextPage <= 1) {\n      onPageChange(1);\n    } else if (nextPage >= totalPages) {\n      onPageChange(totalPages);\n    } else {\n      onPageChange(nextPage);\n    }\n  };\n  const handleRowsPerPageChange = (event) => {\n    const nextRowsPerPage = ensureFiniteNumber(event.target.value);\n    if (nextRowsPerPage > 0) {\n      onPageChange(1);\n      onRowsPerPageChange(nextRowsPerPage);\n    }\n  };\n  const canPreviousPage = (page > 1);\n  const canNextPage = (page < totalPages);\n\n  return (\n    <Flex\n      alignItems="center"\n      justifyContent="flex-end"\n      backgroundColor={colorStyle.background.secondary}\n      px="6x"\n      py="3x"\n    >\n      <Text mr="2x">\n        Total: {count}\n      </Text>\n      <Divider\n        orientation="vertical"\n        height="6x"\n      />\n      <Menu>\n        <MenuButton variant="ghost">\n          {rowsPerPage} per page\n        </MenuButton>\n        <MenuList\n          onClick={handleRowsPerPageChange}\n          width="100%"\n        >\n          {rowsPerPageOptions.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n            >\n              {option}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      <Divider\n        orientation="vertical"\n        height="6x"\n      />\n      <Space width="2x" />\n      <Input\n        width="10x"\n        px={0}\n        textAlign="center"\n        onChange={handlePageChange}\n        value={page}\n      />\n      <Space width="2x" />\n      <Text>/</Text>\n      <Space width="2x" />\n      <Text>{totalPages}</Text>\n      <Space width="2x" />\n      <ButtonGroup\n        variant="secondary"\n        sx={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button\n          width="8x"\n          disabled={!canPreviousPage}\n          onClick={(event) => {\n            onPageChange(page - 1);\n          }}\n        >\n          <AngleLeftIcon />\n        </Button>\n        <Button\n          width="8x"\n          disabled={!canNextPage}\n          onClick={(event) => {\n            onPageChange(page + 1);\n          }}\n        >\n          <AngleRightIcon />\n        </Button>\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nexport default TablePagination;',"src/pages/components/tree/dnd/ConditionalWrapper.js":"const ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default ConditionalWrapper;","src/pages/components/tree/dnd/Draggable.js":"import { useEffect } from 'react';\nimport { useDrag } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend'\n\nconst Draggable = ({\n  canDrag: canDragProp,\n  children,\n  item: itemProp,\n  type: typeProp = 'dnd',\n}) => {\n  const [collectedProps, dragRef, dragPreviewRef] = useDrag({\n    type: typeProp,\n    item: itemProp,\n    canDrag: canDragProp,\n    collect: (monitor) => {\n      // DragSourceMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor\n      return {\n        isDragging: monitor.isDragging(),\n      };\n    },\n  });\n\n  useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: true });\n  }, [dragPreviewRef]);\n\n  return children({\n    dragRef,\n    isDragging: collectedProps.isDragging,\n  });\n};\n\nexport default Draggable;","src/pages/components/tree/dnd/icons/drag.svg":'<svg width="8" height="16" viewBox="0 0 8 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">\n  <circle cx="2" cy="2" r="1" />\n  <circle cx="2" cy="6" r="1" />\n  <circle cx="2" cy="10" r="1" />\n  <circle cx="2" cy="14" r="1" />\n  <circle cx="6" cy="2" r="1" />\n  <circle cx="6" cy="6" r="1" />\n  <circle cx="6" cy="10" r="1" />\n  <circle cx="6" cy="14" r="1" />\n</svg>',"src/pages/components/tree/dnd/TreeView.js":"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Tree,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  FolderIcon,\n  FolderOpenIcon,\n} from '@tonic-ui/react-icons';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback } from 'react';\nimport Droppable from '@/pages/components/tree/dnd/Droppable';\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n  onNodeDrop: onNodeDropProp,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const nodeId = node.id;\n  const nodeLabel = node.label;\n\n  const render = useCallback(({ isExpandable, isExpanded, isSelected }) => {\n    const icon = isExpanded ? FolderOpenIcon : FolderIcon;\n    const iconColor = 'yellow:50';\n\n    return (\n      <Droppable\n        onDrop={(item, monitor) => {\n          if (typeof onNodeDropProp === 'function') {\n            onNodeDropProp({\n              ...item,\n              target: nodeId,\n            });\n          }\n        }}\n      >\n        {({ dropRef, isOver }) => (\n          <TreeItemContent\n            ref={dropRef}\n            sx={{\n              backgroundColor: isOver ? colorStyle.background.highlighted : undefined,\n\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Icon as={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={nodeLabel}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {nodeLabel}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        )}\n      </Droppable>\n    );\n  }, [colorStyle, nodeId, nodeDepth, nodeLabel, onNodeDropProp]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={render}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n          onNodeDrop={onNodeDropProp}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst TreeView = ({\n  data,\n  onNodeDrop: onNodeDropProp,\n  onNodeSelect: onNodeSelectProp,\n  ...rest\n}) => {\n  const defaultSelectedNodeId = ensureArray(data)[0]?.id ?? null;\n  const handleNodeDrop = useCallback((item) => {\n    if (typeof onNodeDropProp === 'function') {\n      onNodeDropProp(item);\n    }\n  }, [onNodeDropProp]);\n  const handleNodeSelect = useCallback((nodeIds) => {\n    if (typeof onNodeSelectProp === 'function') {\n      onNodeSelectProp(nodeIds);\n    }\n  }, [onNodeSelectProp]);\n\n  return (\n    <Tree\n      aria-label=\"dnd\"\n      isSelectable\n      isUnselectable={false}\n      defaultSelected={defaultSelectedNodeId}\n      onNodeSelect={handleNodeSelect}\n      {...rest}\n    >\n      {ensureArray(data).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          onNodeDrop={handleNodeDrop}\n        />\n      ))}\n    </Tree>\n  );\n};\n\nexport default TreeView;","src/pages/components/tree/dnd/Droppable.js":"import { useDrop } from 'react-dnd';\n\nconst Droppable = ({\n  accept: acceptProp = 'dnd',\n  canDrop: canDropProp,\n  children,\n  onDrop: onDropProp,\n}) => {\n  const [collectedProps, dropRef] = useDrop({\n    accept: acceptProp,\n    drop: onDropProp,\n    canDrop: canDropProp,\n    collect: (monitor) => {\n      // DropTargetMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor\n      return {\n        isOver: monitor.isOver(),\n      };\n    },\n  });\n\n  return children({\n    dropRef,\n    isOver: collectedProps.isOver,\n  });\n};\n\nexport default Droppable;","src/pages/components/tree/dnd/DragLayer.js":"import {\n  Box,\n} from '@tonic-ui/react';\nimport { ensureFiniteNumber } from 'ensure-type';\nimport React from 'react';\nimport { useDragLayer } from 'react-dnd';\n\nconst DragLayer = ({\n  children,\n}) => {\n  const context = useDragLayer((monitor) => ({\n    isDragging: monitor.isDragging(),\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    initialSourceClientOffset: monitor.getInitialSourceClientOffset(),\n    sourceClientOffset: monitor.getSourceClientOffset(),\n  }));\n\n  const { isDragging, initialSourceClientOffset, sourceClientOffset } = context;\n\n  if (!isDragging || !initialSourceClientOffset || !sourceClientOffset) {\n    return null;\n  }\n\n  const offsetX = ensureFiniteNumber(sourceClientOffset?.x);\n  const offsetY = ensureFiniteNumber(sourceClientOffset?.y);\n\n  return (\n    <Box\n      sx={{\n        pointerEvents: 'none',\n        position: 'fixed',\n        inset: 0,\n        zIndex: 'fixed',\n      }}\n    >\n      <Box\n        style={{\n          transform: `translate(${offsetX}px, ${offsetY}px)`,\n        }}\n      >\n        {typeof children === 'function' ? children(context) : children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default DragLayer;","src/pages/components/tree/dnd/useRefresh.js":"import { useCallback, useState } from 'react';\n\nconst useRefresh = () => {\n  const [, rerender] = useState();\n  return useCallback(() => {\n    rerender({});\n  }, []);\n};\n\nexport default useRefresh;"},raw:"import { Box, Code, Flex, ResizeHandle, Scrollbar, useColorMode, useColorStyle } from '@tonic-ui/react';\nimport { FileArrowOIcon } from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport {\n  buildTreeMap,\n  buildTreeNodes,\n} from '@/pages/components/tree/utils';\nimport TableView from '@/pages/components/tree/dnd/TableView';\nimport TreeView from '@/pages/components/tree/dnd/TreeView';\nimport DragLayer from '@/pages/components/tree/dnd/DragLayer';\nimport useRefresh from '@/pages/components/tree/dnd/useRefresh';\n\nconst getTreeNodes = () => {\n  const threatTypes = [\n    'Virus/Malware',\n    'Spyware/Grayware',\n    'URL Filtering',\n    'Web Reputation',\n    'Network Virus',\n    'Application Control',\n  ];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).map(node => {\n      node.parent = node.parent ?? null;\n      node.children = ensureArray(node.children).map(child => {\n        child.parent = node;\n        return child;\n      });\n      node.data = {\n        data: _.range(15).map((i) => {\n          const [nodeIndex = ''] = ensureArray(String(node.label).match(/\\d+/));\n\n          const endpoint = `Endpoint ${nodeIndex}_${i+1}`;\n\n          // Randomly pick a subset of threat types\n          const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n\n          // Generate a random date within the past 30 days\n          const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n\n          return {\n            id: `${node.id}_${i+1}`,\n            endpoint,\n            detections,\n            lastSeen,\n          };\n        }),\n      };\n\n      traverse(node.children);\n    });\n  };\n\n  const treeNodes = buildTreeNodes();\n  traverse(treeNodes);\n\n  return treeNodes;\n};\n\nconst App = () => {\n  const treeNodes = useConst(() => getTreeNodes());\n  const treeMap = useMemo(() => {\n    return buildTreeMap(treeNodes);\n  }, [treeNodes]);\n  const refresh = useRefresh();\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodeId, setSelectedNodeId] = useState(ensureArray(treeNodes)[0]?.id);\n  const tableData = treeMap.get(selectedNodeId)?.data?.data;\n  const handleNodeDrop = useCallback((context) => {\n    const { source, target, data } = context;\n\n    const sourceNode = treeMap.get(source);\n    const targetNode = treeMap.get(target);\n\n    const movedData = sourceNode.data.data.filter(x => _.includes(data, x.id));\n\n    sourceNode.data.data = _.differenceBy(sourceNode.data.data, movedData, 'id');\n    targetNode.data.data = _.uniqBy([\n      ...ensureArray(targetNode.data.data),\n      ...movedData,\n    ], 'id');\n\n    // Force re-render\n    refresh();\n  }, [refresh, treeMap]);\n  const handleNodeSelect = useCallback((nodeIds) => {\n    setSelectedNodeId(nodeIds[0]);\n  }, []);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <DragLayer>\n        {({ item }) => {\n          // Drag layer is not rendered when nothing is being dragged\n          const movedItemCount = ensureArray(item.data).length;\n          return (\n            <Flex alignItems=\"center\" columnGap=\"1x\">\n              <FileArrowOIcon />\n              <Code>{movedItemCount}</Code>\n            </Flex>\n          );\n        }}\n      </DragLayer>\n      <Flex\n        ref={containerRef}\n        sx={{\n          boxShadow: colorStyle.shadow.thick,\n          cursor: isResizing ? 'col-resize' : 'default',\n        }}\n      >\n        <Box\n          ref={resizableRef}\n          sx={{\n            flex: 'none',\n            width: 300,\n          }}\n        >\n          <Scrollbar\n            height=\"100%\"\n            overflowX=\"hidden\"\n            overflowY=\"auto\"\n          >\n            <TreeView\n              data={treeNodes}\n              onNodeDrop={handleNodeDrop}\n              onNodeSelect={handleNodeSelect}\n            />\n          </Scrollbar>\n        </Box>\n        <Flex\n          sx={{\n            flex: 'auto',\n            position: 'relative',\n          }}\n        >\n          <ResizeHandle\n            onResizeStart={() => {\n              setIsResizing(true);\n            }}\n            onResizeEnd={() => {\n              setIsResizing(false);\n            }}\n            onResize={({ clientX }) => {\n              const el = resizableRef.current;\n              if (!el) {\n                return;\n              }\n\n              const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n              const minWidth = 160;\n              const maxWidth = parentWidth * 0.4;\n              const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n              if (canDrag) {\n                const nextWidth = clientX - parentLeft;\n                el.style.width = `${nextWidth}px`;\n              }\n            }}\n            sx={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              bottom: 0,\n              borderLeft: 1,\n              borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n              _hover: {\n                borderLeftColor: highlightedDividerColor,\n              },\n              zIndex: 1,\n            }}\n          />\n          <TableView\n            key={selectedNodeId} // Force re-render when selected node changes\n            node={treeMap.get(selectedNodeId)}\n            data={tableData}\n            width=\"100%\"\n          />\n        </Flex>\n      </Flex>\n    </DndProvider>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,u.jsxs)(n.h2,{id:"accessibility",children:["Accessibility",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#accessibility",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(n.p,{children:["The ",(0,u.jsx)(n.code,{children:"Tree"})," component supports both keyboard and mouse navigation and selection."]}),"\n",(0,u.jsx)(n.p,{children:"Keyboard shortcuts include:"}),"\n",(0,u.jsxs)(n.ul,{children:["\n",(0,u.jsx)(n.li,{children:"Use arrow keys to navigate."}),"\n",(0,u.jsxs)(n.li,{children:["Use ",(0,u.jsx)(n.code,{children:"Enter"})," to toggle expansion or selection."]}),"\n",(0,u.jsxs)(n.li,{children:["Use ",(0,u.jsx)(n.code,{children:"Space"})," to toggle selection."]}),"\n",(0,u.jsxs)(n.li,{children:["Use ",(0,u.jsx)(n.code,{children:"Home"})," and ",(0,u.jsx)(n.code,{children:"End"})," to quickly navigate to the first or last node."]}),"\n",(0,u.jsxs)(n.li,{children:["Hold down ",(0,u.jsx)(n.code,{children:"Ctrl"})," and click to select/unselect nodes."]}),"\n",(0,u.jsxs)(n.li,{children:["Hold down ",(0,u.jsx)(n.code,{children:"Shift"})," and click to select a range of nodes."]}),"\n",(0,u.jsxs)(n.li,{children:["Use ",(0,u.jsx)(n.code,{children:"Ctrl"})," + ",(0,u.jsx)(n.code,{children:"Shift"}),"+",(0,u.jsx)(n.code,{children:"Home"})," to select a range of nodes from the current node to the first node."]}),"\n",(0,u.jsxs)(n.li,{children:["Use ",(0,u.jsx)(n.code,{children:"Ctrl"})," + ",(0,u.jsx)(n.code,{children:"Shift"}),"+",(0,u.jsx)(n.code,{children:"End"})," to select a range of nodes from the current node to the last node."]}),"\n",(0,u.jsxs)(n.li,{children:["Use ",(0,u.jsx)(n.code,{children:"Ctrl"})," + ",(0,u.jsx)(n.code,{children:"a"})," to select all nodes."]}),"\n"]}),"\n",(0,u.jsxs)(n.h2,{id:"props",children:["Props",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(n.h3,{id:"tree-1",children:["Tree",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tree-1",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(n.table,{children:[(0,u.jsx)(n.thead,{children:(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.th,{align:"left",children:"Name"}),(0,u.jsx)(n.th,{align:"left",children:"Type"}),(0,u.jsx)(n.th,{align:"left",children:"Default"}),(0,u.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,u.jsxs)(n.tbody,{children:[(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"defaultExpanded"}),(0,u.jsx)(n.td,{align:"left",children:"array"}),(0,u.jsx)(n.td,{align:"left",children:"[]"}),(0,u.jsx)(n.td,{align:"left",children:"An array of expanded node ids for initial state (uncontrolled)."})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"defaultSelected"}),(0,u.jsx)(n.td,{align:"left",children:"array"}),(0,u.jsx)(n.td,{align:"left",children:"[]"}),(0,u.jsx)(n.td,{align:"left",children:"An array of selected node ids for initial state (uncontrolled)."})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"expanded"}),(0,u.jsx)(n.td,{align:"left",children:"array"}),(0,u.jsx)(n.td,{align:"left"}),(0,u.jsx)(n.td,{align:"left",children:"An array of expanded node ids for controlled state."})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"id"}),(0,u.jsx)(n.td,{align:"left",children:"string"}),(0,u.jsx)(n.td,{align:"left"}),(0,u.jsxs)(n.td,{align:"left",children:["The ",(0,u.jsx)(n.code,{children:"id"})," prop used for accessibility purpose. If not provided, a random id will be generated."]})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"isSelectable"}),(0,u.jsx)(n.td,{align:"left",children:"bool"}),(0,u.jsx)(n.td,{align:"left",children:"false"}),(0,u.jsx)(n.td,{align:"left",children:"Determines if the tree allows node selection."})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"isUnselectable"}),(0,u.jsx)(n.td,{align:"left",children:"bool"}),(0,u.jsx)(n.td,{align:"left",children:"false"}),(0,u.jsx)(n.td,{align:"left",children:"Determines if the tree allows node unselection."})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"multiSelect"}),(0,u.jsx)(n.td,{align:"left",children:"bool"}),(0,u.jsx)(n.td,{align:"left",children:"false"}),(0,u.jsxs)(n.td,{align:"left",children:["If true, ",(0,u.jsx)(n.code,{children:"ctrl"})," and ",(0,u.jsx)(n.code,{children:"shift"})," will trigger multiselect."]})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"onNodeFocus"}),(0,u.jsx)(n.td,{align:"left",children:"function"}),(0,u.jsx)(n.td,{align:"left"}),(0,u.jsxs)(n.td,{align:"left",children:["A callback function invoked when a tree node is focused.",(0,u.jsxs)("pre",{children:[(0,u.jsx)(n.code,{children:"function(nodeId: string) => void"}),(0,u.jsx)("br",{})," • ",(0,u.jsx)(n.code,{children:"nodeId"})," The id of the focused node."]})]})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"onNodeSelect"}),(0,u.jsx)(n.td,{align:"left",children:"function"}),(0,u.jsx)(n.td,{align:"left"}),(0,u.jsxs)(n.td,{align:"left",children:["A callback function triggered when tree nodes are selected/unselected.",(0,u.jsxs)("pre",{children:[(0,u.jsx)(n.code,{children:"function(nodeIds: Array<string>) => void"}),(0,u.jsx)("br",{})," • ",(0,u.jsx)(n.code,{children:"nodeIds"})," An array of selected node ids."]})]})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"onNodeToggle"}),(0,u.jsx)(n.td,{align:"left",children:"function"}),(0,u.jsx)(n.td,{align:"left"}),(0,u.jsxs)(n.td,{align:"left",children:["A callback function triggered when tree nodes are expanded/collapsed.",(0,u.jsxs)("pre",{children:[(0,u.jsx)(n.code,{children:"function(nodeIds: Array<string>) => void"}),(0,u.jsx)("br",{})," • ",(0,u.jsx)(n.code,{children:"nodeIds"})," An array of expanded node ids."]})]})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"selected"}),(0,u.jsx)(n.td,{align:"left",children:"array"}),(0,u.jsx)(n.td,{align:"left"}),(0,u.jsx)(n.td,{align:"left",children:"An array of selected node ids for controlled state."})]})]})]}),"\n",(0,u.jsxs)(n.h3,{id:"treeitem",children:["TreeItem",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeitem",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(n.table,{children:[(0,u.jsx)(n.thead,{children:(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.th,{align:"left",children:"Name"}),(0,u.jsx)(n.th,{align:"left",children:"Type"}),(0,u.jsx)(n.th,{align:"left",children:"Default"}),(0,u.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,u.jsxs)(n.tbody,{children:[(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,u.jsx)(n.td,{align:"left",children:"ElementType"}),(0,u.jsx)(n.td,{align:"left",children:"Collapse"}),(0,u.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,u.jsx)(n.td,{align:"left",children:"object"}),(0,u.jsx)(n.td,{align:"left"}),(0,u.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,u.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"children"}),(0,u.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,u.jsx)(n.td,{align:"left"}),(0,u.jsx)(n.td,{align:"left",children:"The children of the tree item."})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"disabled"}),(0,u.jsx)(n.td,{align:"left",children:"bool"}),(0,u.jsx)(n.td,{align:"left",children:"false"}),(0,u.jsx)(n.td,{align:"left",children:"Determines if the tree item is disabled."})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"nodeId"}),(0,u.jsx)(n.td,{align:"left",children:"string"}),(0,u.jsx)(n.td,{align:"left"}),(0,u.jsxs)(n.td,{align:"left",children:[(0,u.jsx)(n.code,{children:"REQUIRED"})," The id of the node."]})]}),(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"render"}),(0,u.jsx)(n.td,{align:"left",children:(0,u.jsx)(n.code,{children:"(context: TreeItemContext) => ReactNode"})}),(0,u.jsx)(n.td,{align:"left"}),(0,u.jsxs)(n.td,{align:"left",children:[(0,u.jsx)(n.code,{children:"REQUIRED"})," A function to render the tree item content.",(0,u.jsx)("br",{}),(0,u.jsxs)("pre",{children:["type TreeItemContext = ","{",(0,u.jsx)("br",{}),"  nodeDepth: number;",(0,u.jsx)("br",{}),"  nodeId: string;",(0,u.jsx)("br",{}),"  isDisabled: boolean;",(0,u.jsx)("br",{}),"  isExpandable: boolean;",(0,u.jsx)("br",{}),"  isExpanded: boolean;",(0,u.jsx)("br",{}),"  isFocused: boolean;",(0,u.jsx)("br",{}),"  isSelected: boolean;",(0,u.jsx)("br",{}),"  select: () => void;",(0,u.jsx)("br",{}),"  selectRange: () => void;",(0,u.jsx)("br",{}),"  toggleExpansion: () => void;",(0,u.jsx)("br",{}),"  toggleSelection: () => void;",(0,u.jsx)("br",{}),"};"]})]})]})]})]}),"\n",(0,u.jsxs)(n.h3,{id:"treeitemcontent",children:["TreeItemContent",(0,u.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeitemcontent",children:(0,u.jsx)(n.svg,{children:(0,u.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,u.jsxs)(n.table,{children:[(0,u.jsx)(n.thead,{children:(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.th,{align:"left",children:"Name"}),(0,u.jsx)(n.th,{align:"left",children:"Type"}),(0,u.jsx)(n.th,{align:"left",children:"Default"}),(0,u.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,u.jsx)(n.tbody,{children:(0,u.jsxs)(n.tr,{children:[(0,u.jsx)(n.td,{align:"left",children:"children"}),(0,u.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,u.jsx)(n.td,{align:"left"}),(0,u.jsx)(n.td,{align:"left",children:"Content of the tree item."})]})})]})]})}var index_page=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,h.ah)(),e.components).wrapper;return n?(0,u.jsx)(n,Object.assign({},e,{children:(0,u.jsx)(_createMdxContent,e)})):_createMdxContent(e)}},89114:function(e,n,o){"use strict";var t=o(40596),r=o(85017),l=o(73645),d=o(70758),a=o(72448),i=o(15192),c=o(66785),s=o(87888),u=o(94829),h=o(68010),b=o(3398),p=o(39256),f=o(62080),m=o(40809),g=o(45795),x=o(5081),N=o(2784);function _slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var o,t,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],d=!0,a=!1;try{for(r=r.call(e);!(d=(o=r.next()).done)&&(l.push(o.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==r.return||r.return()}finally{if(a)throw t}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return _arrayLikeToArray(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return _arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var o=0,t=Array(n);o<n;o++)t[o]=e[o];return t}n.Z=function(e){var n=e.count,o=e.defaultPage,y=void 0===o?1:o,v=e.defaultRowsPerPage,I=e.onPageChange,T=e.onRowsPerPageChange,S=e.page,w=e.rowsPerPage,C=e.rowsPerPageOptions,k=void 0===C?[10,25,50,100]:C;e.showFirstButton,e.showLastButton;var E=_slicedToArray((0,t.Z)(),1)[0],j=_slicedToArray((0,r.Z)({colorMode:E}),1)[0],A=null!=v?v:(0,x.rY)(k)[0],D=_slicedToArray((0,N.useState)(null!=S?S:y),2),Z=D[0],R=D[1],O=_slicedToArray((0,N.useState)(null!=w?w:A),2),_=O[0],P=O[1];(0,N.useEffect)(function(){void 0!==S&&R(S)},[S]),(0,N.useEffect)(function(){void 0!==w&&P(w)},[w]);var M=(0,N.useCallback)(function(e){void 0!==S||R(e),"function"==typeof I&&I(e)},[S,I]),z=(0,N.useCallback)(function(e){void 0!==w||P(e),"function"==typeof T&&T(e)},[w,T]),F=Math.ceil(n/_),L=Z>1,B=Z<F;return N.createElement(l.Z,{alignItems:"center",justifyContent:"flex-end",backgroundColor:j.background.secondary,px:"6x",py:"3x"},N.createElement(d.Z,{mr:"2x"},"Total: ",n),N.createElement(a.Z,{orientation:"vertical",height:"6x"}),N.createElement(i.Z,null,N.createElement(c.Z,{variant:"ghost"},_," per page"),N.createElement(s.Z,{onClick:function(e){var n=(0,x.Nu)(e.target.value);n>0&&(M(1),z(n))},width:"100%"},k.map(function(e){return N.createElement(u.Z,{key:e,value:e},e)}))),N.createElement(a.Z,{orientation:"vertical",height:"6x"}),N.createElement(h.Z,{width:"2x"}),N.createElement(b.Z,{width:"10x",px:0,textAlign:"center",onChange:function(e){var n=(0,x.Nu)(e.target.value);n<=1?M(1):n>=F?M(F):M(n)},value:Z}),N.createElement(h.Z,{width:"2x"}),N.createElement(d.Z,null,"/"),N.createElement(h.Z,{width:"2x"}),N.createElement(d.Z,null,F),N.createElement(h.Z,{width:"2x"}),N.createElement(p.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},N.createElement(f.Z,{width:"8x",disabled:!L,onClick:function(e){M(Z-1)}},N.createElement(m.Z,null)),N.createElement(f.Z,{width:"8x",disabled:!B,onClick:function(e){M(Z+1)}},N.createElement(g.Z,null))))}},63546:function(e,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/tree",function(){return o(11349)}])},17168:function(e,n,o){"use strict";o.d(n,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.BX)(r.HY,{children:[(0,r.tZ)("path",{d:"M2.050 11.12l-1.050 3.88 3.88-1.050 8.42-8.42-2.83-2.83zM4.22 13.29l-2.22 0.71 0.72-2.23z"}),(0,r.tZ)("path",{d:"M11.89 1.28l-0.71 0.72 2.82 2.82 0.71-0.71c0.18-0.181 0.291-0.43 0.291-0.705s-0.111-0.524-0.291-0.705l-1.41-1.42c-0.181-0.18-0.43-0.291-0.705-0.291s-0.524 0.111-0.705 0.291l0-0z"})]}),"EditIcon")},70828:function(e,n,o){"use strict";o.d(n,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.tZ)("path",{d:"M2 1h8v4h4v3h1v-4l-4-4h-9c-0.5 0-1 0.5-1 1v14c0 0.5 0.5 1 1 1h9v-1h-9v-14zM11 1.4l2.6 2.6h-2.6v-2.6zM12 16v-3h-4v-2h4v-3l4 4-4 4z"}),"FileArrowOIcon")},38241:function(e,n,o){"use strict";o.d(n,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.tZ)("path",{d:"M0 6h16v7.93c0 0.003 0 0.008 0 0.012 0 0.564-0.441 1.026-0.997 1.058l-0.003 0h-14c-0.559-0.033-1-0.494-1-1.058 0-0.004 0-0.008 0-0.012v0.001-7.93zM15 3h-7l-1-2h-6c-0.018-0.001-0.039-0.002-0.060-0.002-0.516 0-0.935 0.416-0.94 0.931v3.070h16v-1.070c-0.005-0.516-0.424-0.932-0.94-0.932-0.021 0-0.042 0.001-0.063 0.002l0.003-0z"}),"FolderIcon")},98484:function(e,n,o){"use strict";o.d(n,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.tZ)("path",{d:"M16 8l-2.1 6.43c-0.164 0.339-0.505 0.569-0.9 0.57h-12c-0.552 0-1-0.448-1-1v0-12c0-0.552 0.448-1 1-1v0h4l1 2h7c0.552 0 1 0.448 1 1v0 3h-10.64l-2.36 7h1l2-6h12z"}),"FolderOpenIcon")},53284:function(e,n,o){"use strict";o.d(n,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.tZ)("path",{d:"M9 4h-3v-3h3zM9 6h-3v3h3zM9 11h-3v3h3z"}),"MoreIcon")},42744:function(e,n,o){"use strict";o.d(n,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.BX)(r.HY,{children:[(0,r.tZ)("path",{d:"M0 1v4h16v-4zM7 3h-5v-1h5zM14 3h-1v-1h1z"}),(0,r.tZ)("path",{d:"M0 10h16v-4h-16zM13 7h1v1h-1zM2 7h5v1h-5z"}),(0,r.tZ)("path",{d:"M0 15h16v-4h-16zM13 12h1v1h-1zM2 12h5v1h-5z"})]}),"ServerIcon")},31222:function(e,n,o){"use strict";o.d(n,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.tZ)("path",{d:"M11 8.667l-3.5 3.333-3.5-3.333 0.7-0.667 2.3 2.19v-6.19h1v6.19l2.3-2.19z"}),"SortDownIcon")},86851:function(e,n,o){"use strict";o.d(n,{Z:function(){return l}}),o(2784);var t=o(75928),r=o(52903),l=(0,t.Z)((0,r.tZ)("path",{d:"M10.3 8l-2.3-2.19v6.19h-1v-6.19l-2.3 2.19-0.7-0.667 3.5-3.333 3.5 3.333z"}),"SortUpIcon")},39256:function(e,n,o){"use strict";o.d(n,{Z:function(){return f}});var t=o(53860),r=o(56818),l=o(92307),d=o.n(l),a=o(2784),i=o(12711),c=o(17705),s=o(52903),u=o(49857),h=["children","orientation","size","variant"],b=d()(function(e){return(0,t.Zj)({},e)}),p=(0,a.forwardRef)(function(e,n){var o=e.children,l=e.orientation,d=void 0===l?"horizontal":l,a=e.size,p=e.variant,f=(0,t.Kd)(e,h),m=(0,c.K7)({orientation:d}),g=b({orientation:d,size:void 0===a?"md":a,variant:void 0===p?"default":p});return(0,s.tZ)(i.u.Provider,{value:g,children:(0,s.tZ)(u.Z,(0,t.Zj)((0,t.Zj)((0,t.Zj)({ref:n},m),f),{},{children:(0,r.Pu)(o,g)}))})});p.displayName="ButtonGroup";var f=p},1847:function(e,n,o){"use strict";o.d(n,{Z:function(){return v}});var t=o(53860),r=o(20325),l=o(56818),d=o(13409),a=o(5081),i=o(2784),c=o(81522),s=o(40596),u=o(27216),h="blue",b=o(52903),p=o(95530),IconChecked=function(e){return(0,b.tZ)(p.Z,(0,t.Zj)((0,t.Zj)({viewBox:"0 0 16 16"},e),{},{children:(0,b.tZ)("g",{fill:"currentColor",children:(0,b.tZ)("path",{d:"M6 11.060l-3-3-1 1 4 4 9-9-1-1z"})})}))};IconChecked.displayName="IconChecked";var IconIndeterminate=function(e){return(0,b.tZ)(p.Z,(0,t.Zj)((0,t.Zj)({viewBox:"0 0 24 24"},e),{},{children:(0,b.tZ)("g",{fill:"currentColor",children:(0,b.tZ)("rect",{height:"18",width:"18",x:"3",y:"3"})})}))};IconIndeterminate.displayName="IconIndeterminate";var f=o(49857),m=["indeterminate","size","variantColor","sx"],g=(0,i.forwardRef)(function(e,n){var o,r,d,i,c,p=e.indeterminate,g=e.size,x=void 0===g?"md":g,N=e.variantColor,y=void 0===N?h:N,v=e.sx,I=(0,t.Kd)(e,m),T=(0,u.u)().sizes,S=(0,s.Z)(),w=(0,t.ZQ)(S,1)[0],C={lg:T["6x"],md:T["4x"],sm:T["3x"]}[x],getCheckboxControlBoxSelector=function(e){return'input[type="'.concat("checkbox",'"]')+(0,a.Zs)(e)+" + &"},k=(0,t.Zj)((0,t._x)((0,t._x)((0,t._x)({position:"relative",border:1,width:{lg:"6x",md:"4x",sm:"3x"}[x],height:{lg:"6x",md:"4x",sm:"3x"}[x],zIndex:0},getCheckboxControlBoxSelector()+"> *",{opacity:0}),getCheckboxControlBoxSelector(":checked")+"> *",{opacity:1}),getCheckboxControlBoxSelector("[data-indeterminate]")+"> *",{opacity:1}),p?(0,t._x)((0,t._x)((0,t._x)((0,t._x)({},getCheckboxControlBoxSelector("[data-indeterminate]"),{borderColor:{dark:"gray:50",light:"gray:40"}[w],color:{dark:"".concat(y,":60"),light:"".concat(y,":60")}[w]}),getCheckboxControlBoxSelector("[data-indeterminate]:hover:not(:disabled)"),{borderColor:{dark:"".concat(y,":50"),light:"".concat(y,":50")}[w],color:{dark:"".concat(y,":50"),light:"".concat(y,":50")}[w]}),getCheckboxControlBoxSelector("[data-indeterminate]:focus-visible"),{outlineColor:{dark:"".concat(y,":60"),light:"".concat(y,":60")}[w],outlineStyle:"solid",outlineWidth:"1h"}),getCheckboxControlBoxSelector("[data-indeterminate]:disabled"),{borderColor:{dark:"gray:60",light:"gray:40"}[w],color:{dark:"gray:60",light:"gray:40"}[w],opacity:.28}):(o=({dark:"white:emphasis",light:"white:emphasis"})[w],r="transparent",d=({dark:"".concat(y,":60"),light:"".concat(y,":60")})[w],i=({dark:"".concat(y,":50"),light:"".concat(y,":50")})[w],c=({dark:"gray:60",light:"gray:40"})[w],(0,t._x)((0,t._x)((0,t._x)((0,t._x)((0,t._x)((0,t._x)((0,t._x)((0,t._x)({backgroundColor:r,borderColor:{dark:"gray:50",light:"gray:40"}[w],color:o},getCheckboxControlBoxSelector(":hover"),{backgroundColor:r,borderColor:i,color:o}),getCheckboxControlBoxSelector(":disabled"),{backgroundColor:r,borderColor:c,color:o,opacity:.28}),getCheckboxControlBoxSelector(":focus-visible"),{outlineColor:{dark:"".concat(y,":60"),light:"".concat(y,":60")}[w],outlineStyle:"solid",outlineWidth:"1h"}),getCheckboxControlBoxSelector(":checked"),{backgroundColor:d,borderColor:{dark:"".concat(y,":60"),light:"".concat(y,":60")}[w],color:o}),getCheckboxControlBoxSelector(":checked:hover:not(:disabled)"),{backgroundColor:{dark:"".concat(y,":50"),light:"".concat(y,":50")}[w],borderColor:i,color:o}),getCheckboxControlBoxSelector(":checked:focus-visible"),{backgroundColor:"inherit",borderColor:"transparent",color:o}),getCheckboxControlBoxSelector(":checked:focus-visible")+"> div:first-of-type",{backgroundColor:d}),getCheckboxControlBoxSelector(":checked:disabled"),{backgroundColor:{dark:"gray:60",light:"gray:40"}[w],borderColor:c,color:{dark:"white:emphasis",light:"black:primary"}[w],opacity:.28})));return(0,b.tZ)(f.Z,(0,t.Zj)((0,t.Zj)((0,t.Zj)({"aria-hidden":(0,l.Qm)(!0),role:"checkbox",sx:[k].concat((0,t.u)((0,a.rY)(v)))},{display:"inline-flex",alignItems:"center",justifyContent:"center",flexShrink:0,userSelect:"none"}),I),{},{children:p?(0,b.tZ)(IconIndeterminate,{size:C}):(0,b.tZ)(IconChecked,{size:C})}))});g.displayName="CheckboxControlBox";var x=o(16301),useCheckboxGroup$1=function(){if(!i.useContext)throw Error("The `useContext` hook is not available with your React version.");return(0,i.useContext)(x.w)},N=["checked","children","defaultChecked","disabled","id","indeterminate","inputProps","inputRef","name","onBlur","onChange","onClick","onFocus","size","value","variantColor"],y=(0,i.forwardRef)(function(e,n){var o,s,u=e.checked,p=e.children,m=e.defaultChecked,x=e.disabled,y=e.id,v=e.indeterminate,I=e.inputProps,T=e.inputRef,S=e.name,w=e.onBlur,C=e.onChange,k=e.onClick,E=e.onFocus,j=e.size,A=e.value,D=e.variantColor,Z=(0,t.Kd)(e,N),R=(0,i.useRef)(),O=(0,r.Z)(T,R),_={display:"inline-flex",verticalAlign:"top",alignItems:"center",cursor:x?"not-allowed":"pointer"},P=useCheckboxGroup$1();if(P){var M,z,F,L,B=(0,t.Zj)({},P),W=B.disabled,H=B.name,U=B.size,Y=B.value,V=B.variantColor,G=B.onChange;void 0!==Y&&(u=(0,a.rY)(Y).includes(A)),x=W||x,S=null!=H?H:S,C=(0,l.PP)(C,G),j=null!==(M=null!==(z=j)&&void 0!==z?z:U)&&void 0!==M?M:"md",D=null!==(F=null!==(L=D)&&void 0!==L?L:V)&&void 0!==F?F:h}else j=null!==(o=j)&&void 0!==o?o:"md",D=null!==(s=D)&&void 0!==s?s:h;return(0,b.BX)(f.Z,(0,t.Zj)((0,t.Zj)((0,t.Zj)({as:"label",ref:n},_),Z),{},{children:[(0,b.tZ)(c.Z,(0,t.Zj)({as:"input",checked:u,"data-indeterminate":(0,l.PB)(v),defaultChecked:m,disabled:x,id:y,name:S,onBlur:w,onChange:C,onClick:k,onFocus:E,ref:O,type:"checkbox",value:A},I)),(0,b.tZ)(g,{indeterminate:v,size:j,variantColor:D}),!(0,d.Rw)(p)&&(0,b.tZ)(f.Z,{ml:"2x",userSelect:"none",opacity:x?.28:1,children:p})]}))});y.displayName="Checkbox";var v=y},16301:function(e,n,o){"use strict";o.d(n,{w:function(){return t}});var t=(0,o(2784).createContext)()},62368:function(e,n,o){"use strict";o.d(n,{Z:function(){return m}});var t,r,l=o(53860),d=o(28165),a=o(27216),i=o(95530),c=o(5081),s=o(2784),u=o(52903),h=["children","icon","spin"],b=(0,d.F4)(t||(t=(0,l.AI)(["\n  0% {\n      transform: rotate(0deg)\n  }\n  to {\n      transform: rotate(1turn)\n  }\n"]))),p=(0,d.F4)(r||(r=(0,l.AI)(["\n  0% {\n      transform: rotate(0deg)\n  }\n  to {\n      transform: rotate(-1turn)\n  }\n"]))),f=(0,s.forwardRef)(function(e,n){var o=e.children,t=e.icon,r=e.spin,d=void 0!==r&&r,s=(0,l.Kd)(e,h),f=(0,a.u)();if("string"==typeof t){var m,g=(0,c.rY)(null==f?void 0:f.icons).find(function(e){return(null==e?void 0:e[0])===t});o=null!==(m=null==g?void 0:g[1])&&void 0!==m?m:o}return(0,u.tZ)(i.Z,(0,l.Zj)((0,l.Zj)((0,l.Zj)({ref:n},{animation:"ccw"===d?"".concat(p," 2s linear infinite"):"cw"===d||!0===d?"".concat(b," 2s linear infinite"):void 0}),s),{},{children:o}))});f.displayName="Icon";var m=f},3398:function(e,n,o){"use strict";o.d(n,{Z:function(){return h}});var t=o(53860),r=o(2784),l=o(70202),d=o(28729),a=o(40374),i=o(52737),c=o(52903),s=["size","variant","css"],u=(0,r.forwardRef)(function(e,n){var o,r,u=e.size,h=e.variant,b=e.css,p=(0,t.Kd)(e,s),f=(0,a.Z)(),m=(0,t.Zj)({},f),g=m.size,x=m.variant,N=null!==(o=null!=u?u:g)&&void 0!==o?o:i.zm,y=null!==(r=null!=h?h:x)&&void 0!==r?r:i.oD,v=f?[(0,d.zM)({variant:y}),b]:b,I=(0,d.zG)({size:N,variant:y});return(0,c.tZ)(l.Z,(0,t.Zj)((0,t.Zj)({ref:n,as:"input",css:v},I),p))});u.displayName="Input";var h=u},10636:function(e,n,o){"use strict";o.d(n,{Z:function(){return u}});var t=o(53860),r=o(56818),l=o(2784),d=o(40596),useResizeHandleStyle=function(e){var n=e.isResizing,o=(0,d.Z)(),r=(0,t.ZQ)(o,1)[0];return{backgroundColor:n?({dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"})[r]:"transparent",boxSizing:n?"content-box":"border-box",cursor:"col-resize",touchAction:"none",userSelect:"none",width:n?"1x":"2x"}},getIsPassiveListenerSupported=function(){var e=null;return function(){if("boolean"==typeof e)return e;try{var noop=function(){};window.addEventListener("test",noop,{get passive(){return e=!0,!1}}),window.removeEventListener("test",noop)}catch(n){e=!1}return e}},a=o(52903),i=o(49857),c=["onMouseDown","onResize","onResizeEnd","onResizeStart","onTouchStart"],s=(0,l.forwardRef)(function(e,n){var o=e.onMouseDown,d=e.onResize,s=e.onResizeEnd,u=e.onResizeStart,h=e.onTouchStart,b=(0,t.Kd)(e,c),p=(0,l.useState)(!1),f=(0,t.ZQ)(p,2),m=f[0],g=f[1],x=useResizeHandleStyle({isResizing:m}),N=(0,l.useCallback)(function(e){var n=e.clientX,o=e.clientY;null==u||u({clientX:n,clientY:o}),g(!0);var r="mousemove",l="mouseup",a=(0,t._x)((0,t._x)({},r,function(e){var n=e.clientX,o=e.clientY;null==d||d({clientX:n,clientY:o})}),l,function(e){document.removeEventListener("mousemove",a[r]),document.removeEventListener("mouseup",a[l]),g(!1);var n=e.clientX,o=e.clientY;null==s||s({clientX:n,clientY:o})}),i=!!getIsPassiveListenerSupported()&&{passive:!1};document.addEventListener("mousemove",a[r],i),document.addEventListener("mouseup",a[l],i)},[d,s,u]),y=(0,l.useCallback)(function(e){if(!("touchstart"===e.type&&Array.isArray(e.touches)&&e.touches.length>1)){var n,o,r=Array.isArray(e.touches)?null===(n=e.touches[0])||void 0===n?void 0:n.clientX:void 0,l=Array.isArray(e.touches)?null===(o=e.touches[0])||void 0===o?void 0:o.clientY:void 0;null==u||u({clientX:r,clientY:l}),g(!0);var a="touchmove",i="touchend",c=(0,t._x)((0,t._x)({},a,function(e){e.cancelable&&(e.preventDefault(),e.stopPropagation());var n,o,t=Array.isArray(e.touches)?null===(n=e.touches[0])||void 0===n?void 0:n.clientX:void 0,r=Array.isArray(e.touches)?null===(o=e.touches[0])||void 0===o?void 0:o.clientY:void 0;return null==d||d({clientX:t,clientY:r}),!1}),i,function(e){document.removeEventListener("touchmove",c[a]),document.removeEventListener("touchend",c[i]),e.cancelable&&(e.preventDefault(),e.stopPropagation()),g(!1);var n,o,t=Array.isArray(e.touches)?null===(n=e.touches[0])||void 0===n?void 0:n.clientX:void 0,r=Array.isArray(e.touches)?null===(o=e.touches[0])||void 0===o?void 0:o.clientY:void 0;null==s||s({clientX:t,clientY:r})}),h=!!getIsPassiveListenerSupported()&&{passive:!1};document.addEventListener("touchmove",c[a],h),document.addEventListener("touchend",c[i],h)}},[d,s,u]);return(0,a.tZ)(i.Z,(0,t.Zj)((0,t.Zj)({ref:n,onMouseDown:(0,r.N)(o,N),onTouchStart:(0,r.N)(h,y)},x),b))});s.displayName="ResizeHandle";var u=s},15345:function(e,n,o){"use strict";o.d(n,{Z:function(){return s}});var t=o(53860),r=o(2784),l=o(743),d=o(60671),a=o(52903),i=["children"],c=(0,r.forwardRef)(function(e,n){var o=e.children,r=(0,t.Kd)(e,i),c=(0,d.q8)();return(0,a.tZ)(l.Z,(0,t.Zj)((0,t.Zj)({ref:n},r),{},{children:function(e){var n=e.ScrollView,r=e.HorizontalTrack,l=e.VerticalTrack,d=e.HorizontalThumb,i=e.VerticalThumb,s=e.getScrollViewProps,u=e.getHorizontalTrackProps,h=e.getVerticalTrackProps,b=e.getHorizontalThumbProps,p=e.getVerticalThumbProps;return(0,a.BX)(a.HY,{children:[(0,a.tZ)(n,(0,t.Zj)((0,t.Zj)({},s()),{},{children:o})),(0,a.tZ)(r,(0,t.Zj)((0,t.Zj)((0,t.Zj)({},u()),c),{},{children:(0,a.tZ)(d,(0,t.Zj)({},b()))})),(0,a.tZ)(l,(0,t.Zj)((0,t.Zj)((0,t.Zj)({},h()),c),{},{children:(0,a.tZ)(i,(0,t.Zj)({},p()))}))]})}}))});c.displayName="TableScrollbar";var s=c},53310:function(e,n,o){"use strict";o.d(n,{Z:function(){return h}});var t=o(53860),r=o(32502),l=o(2784),d=o(39108),a=o(59804),i=o(99870),c=o(52903),s=["children"],u=(0,l.forwardRef)(function(e,n){var o=e.children,u=(0,t.Kd)(e,s),h=(0,l.useRef)(),b=(0,l.useState)(),p=(0,t.ZQ)(b,2),f=p[0],m=p[1],g=(0,a.k)(),x=(0,l.useCallback)(function(e,n){if("width"!==n&&"height"!==n)return console.error("Invalid size property: ".concat(n,". Use 'width' or 'height'.")),!1;var o,t,r,l,d=e.style[n],a=null===(o=e.getClientRects())||void 0===o?void 0:null===(t=o[0])||void 0===t?void 0:t[n];e.style[n]="max-content";var i=null===(r=e.getClientRects())||void 0===r?void 0:null===(l=r[0])||void 0===l?void 0:l[n];return(e.style[n]=d,"width"===n)?a<i||e.scrollWidth>e.clientWidth:"height"===n&&(a<i||e.scrollHeight>e.clientHeight)},[]),N=(0,l.useCallback)(function(){return h.current},[]),y=(0,l.useCallback)(function(e){var n=e.currentTarget,o=x(n,"width"),t=x(n,"height");m(o||t)},[x]),v=(0,l.useCallback)(function(e){m(!1)},[]);return(0,r.Z)(N,"mouseenter",y),(0,r.Z)(N,"mouseleave",v),(0,c.tZ)(i.Z,(0,t.Zj)((0,t.Zj)({ref:n,disabled:!f},u),{},{children:"function"==typeof o?o({ref:h,style:g}):(0,c.tZ)(d.Z,{ref:h,children:o})}))});u.displayName="OverflowTooltip";var h=u},39108:function(e,n,o){"use strict";o.d(n,{Z:function(){return c}});var t=o(53860),r=o(2784),l=o(70758),d=o(59804),a=o(52903),i=(0,r.forwardRef)(function(e,n){var o=(0,d.k)();return(0,a.tZ)(l.Z,(0,t.Zj)((0,t.Zj)({ref:n},o),e))});i.displayName="Truncate";var c=i},59804:function(e,n,o){"use strict";o.d(n,{k:function(){return useTruncateStyle}});var useTruncateStyle=function(){return{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}}},81522:function(e,n,o){"use strict";o.d(n,{Z:function(){return i}});var t=o(53860),r=o(2784),l=o(52903),d=o(49857),a=(0,r.forwardRef)(function(e,n){return(0,l.tZ)(d.Z,(0,t.Zj)({ref:n,position:"absolute",width:1,height:1,padding:0,border:0,overflow:"hidden",clipPath:"inset(50%)",whiteSpace:"nowrap"},e))});a.displayName="VisuallyHidden";var i=a}},function(e){e.O(0,[5220,8726,9293,9285,7779,9774,2888,179],function(){return e(e.s=63546)}),_N_E=e.O()}]);