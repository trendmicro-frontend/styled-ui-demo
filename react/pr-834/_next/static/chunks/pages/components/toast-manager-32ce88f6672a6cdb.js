(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9267],{64386:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return index_page}});var a=t(52322),o=t(45392),s=t(20947),r=t(49857),c=t(78727),i=t(55459),l=t(97735),d=t(67622),p=t(73645),h=t(72448),m=t(12680),u=t(2784);function _slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,a,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var s=[],r=!0,c=!1;try{for(o=o.call(e);!(r=(t=o.next()).done)&&(s.push(t.value),!n||s.length!==n);r=!0);}catch(e){c=!0,a=e}finally{try{r||null==o.return||o.return()}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return _arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,a=Array(n);t<n;t++)a[t]=e[t];return a}function _defineProperty(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function _extends(){return(_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var FormGroup=function(e){return u.createElement(r.Z,_extends({mb:"4x"},e))},ToastApp=function(){var e=(0,u.useRef)(0),n=(0,c.Z)();return u.createElement(i.Z,{onClick:function(){var t="bottom-right",a=t.includes("top"),o=n.state[t];if(o.length>=3){var s=a?o[o.length-1]:o[0];n.close(s.id,t)}n(function(e){var n=e.data,t=e.onClose;e.placement;var o=_defineProperty(_defineProperty({},a?"pb":"pt","var(--data-toast-spacing)"),"width",320);return u.createElement(r.Z,{sx:o},u.createElement(l.Z,{isClosable:!0,onClose:t},"This is a toast message #",n.index+1))},{placement:t,duration:3e4,data:{index:e.current++}})}},"Notify Toast")},faq_control_spacing_between_toasts=function(){var e=_slicedToArray((0,u.useState)(16),2),n=e[0],t=e[1],a=_slicedToArray((0,u.useState)(16),2),o=a[0],s=a[1];return u.createElement(u.Fragment,null,u.createElement(FormGroup,null,u.createElement(r.Z,{mb:"2x"},u.createElement(d.Z,null,"The space to the edge of the screen")),u.createElement(p.Z,{alignItems:"center",columnGap:"2x",mb:"4x"},u.createElement("input",{type:"range",min:0,max:64,step:4,onChange:function(e){t(parseInt(e.target.value))},value:n}),n,"px")),u.createElement(FormGroup,null,u.createElement(r.Z,{mb:"2x"},u.createElement(d.Z,null,"The space between toasts")),u.createElement(p.Z,{alignItems:"center",columnGap:"2x",mb:"4x"},u.createElement("input",{type:"range",min:0,max:32,step:4,onChange:function(e){s(parseInt(e.target.value))},value:o}),o,"px")),u.createElement(h.Z,{my:"4x"}),u.createElement(m.Z,{TransitionProps:{sx:{"--data-toast-spacing":"".concat(o,"px"),'[data-toast-placement^="top"] > &:first-of-type':{mt:n},'[data-toast-placement^="bottom"] > &:last-of-type':{mb:n},'[data-toast-placement$="left"] > &':{ml:n},'[data-toast-placement$="right"] > &':{mr:n}}}},u.createElement(ToastApp,null)))};function _createMdxContent(e){var n=Object.assign({div:"div",h1:"h1",p:"p",code:"code",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,o.ah)(),e.components);return(0,a.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n",(0,a.jsx)(n.h1,{id:"toastmanager",children:"ToastManager"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"ToastManager"})," allows you to create and manage toasts in your React application. Toasts are small messages that appear temporarily on the screen to inform the user about important events or actions."]}),"\n",(0,a.jsxs)(n.h2,{id:"setup",children:["Setup",(0,a.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#setup",children:(0,a.jsx)(n.svg,{children:(0,a.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["To use ",(0,a.jsx)(n.code,{children:"ToastManager"}),", you should wrap your root component with it, along with the ",(0,a.jsx)(n.code,{children:"TonicProvider"})," component, as shown in the example below:"]}),"\n",(0,a.jsx)(n.pre,{disabled:!0,children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { TonicProvider, ToastManager } from '@tonic-ui/react';\n\nfunction App() {\n  return (\n    <TonicProvider>\n      <ToastManager\n        TransitionProps={{\n          sx: {\n            '[data-toast-placement^=\"top\"] > &:first-of-type': {\n              mt: '4x', // the space to the top edge of the screen\n            },\n            '[data-toast-placement^=\"bottom\"] > &:last-of-type': {\n              mb: '4x', // the space to the bottom edge of the screen\n            },\n            '[data-toast-placement$=\"left\"] > &': {\n              ml: '4x', // the space to the left edge of the screen\n            },\n            '[data-toast-placement$=\"right\"] > &': {\n              mr: '4x', // the space to the right edge of the screen\n            },\n          },\n        }}\n        placement=\"bottom-right\"\n      >\n        {/* Your app goes here */}\n      </ToastManager>\n    </TonicProvider>\n  );\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Once ",(0,a.jsx)(n.code,{children:"ToastManager"})," is set up, you can use the ",(0,a.jsx)(n.code,{children:"useToastManager"})," Hook to create and manage toasts from any component:"]}),"\n",(0,a.jsx)(n.pre,{disabled:!0,children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import { useToastManager } from '@tonic-ui/react';\n\nfunction MyComponent() {\n  const toast = useToastManager();\n  const handleClickOpenToast = () => {\n    const render = ({ onClose, placement }) => {\n      const isTop = placement.includes('top');\n      const toastSpacingKey = isTop ? 'pb' : 'pt';\n      const styleProps = {\n        [toastSpacingKey]: '2x',\n        width: 320,\n      };\n\n      return (\n        <Box sx={styleProps}>\n          <Toast isClosable onClose={onClose}>\n            This is a toast notification\n          </Toast>\n        </Box>\n      );\n    });\n    const options = {\n      placement: 'bottom-right',\n      duration: 5000,\n    };\n    toast(render, options);\n  };\n\n  return (\n    <Button onClick={handleClickOpenToast}>\n      Open Toast\n    </Button>\n  );\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"toast"})," method takes a function that returns the toast element to be displayed. The function can also receive an ",(0,a.jsx)(n.code,{children:"onClose"})," function and the ",(0,a.jsx)(n.code,{children:"placement"})," string. The ",(0,a.jsx)(n.code,{children:"onClose"})," function can be used to remove the toast when the user clicks on a close button or after a certain time period."]}),"\n",(0,a.jsx)(n.pre,{disabled:!0,children:(0,a.jsx)(n.code,{className:"language-jsx",children:"const id = toast(({ onClose, placement }) => (\n  <Toast isClosable onClose={onClose}>\n    This is a toast notification\n  </Toast>\n));\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To remove a toast, you can either call the ",(0,a.jsx)(n.code,{children:"onClose"})," function or use the ",(0,a.jsx)(n.code,{children:"toast.remove"})," method, which takes the toast's unique id as an argument."]}),"\n",(0,a.jsx)(n.pre,{disabled:!0,children:(0,a.jsx)(n.code,{className:"language-jsx",children:"toast.remove(id);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["See the ",(0,a.jsx)(n.a,{href:"./toast-manager/useToastManager",children:"useToastManager"})," Hook for detailed usage."]}),"\n",(0,a.jsxs)(n.h2,{id:"commonly-asked-questions",children:["Commonly Asked Questions",(0,a.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#commonly-asked-questions",children:(0,a.jsx)(n.svg,{children:(0,a.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,a.jsxs)(n.h3,{id:"control-the-spacing-to-the-edges-of-the-screen",children:["Control the spacing to the edges of the screen",(0,a.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#control-the-spacing-to-the-edges-of-the-screen",children:(0,a.jsx)(n.svg,{children:(0,a.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["To control the spacing to the edges of the screen, make use of the ",(0,a.jsx)(n.code,{children:"TransitionProps"})," prop in the ",(0,a.jsx)(n.code,{children:"ToastManager"}),". Pass the ",(0,a.jsx)(n.code,{children:"sx"})," prop to the transition component with your preferred spacing."]}),"\n",(0,a.jsx)(n.pre,{disabled:!0,children:(0,a.jsx)(n.code,{className:"language-jsx",children:"<ToastManager\n  TransitionProps={{\n    sx: {\n      '[data-toast-placement^=\"top\"] > &:first-of-type': {\n        mt: edgeSpacing, // the space to the top edge of the screen\n      },\n      '[data-toast-placement^=\"bottom\"] > &:last-of-type': {\n        mb: edgeSpacing, // the space to the bottom edge of the screen\n      },\n      '[data-toast-placement$=\"left\"] > &': {\n        ml: edgeSpacing, // the space to the left edge of the screen\n      },\n      '[data-toast-placement$=\"right\"] > &': {\n        mr: edgeSpacing, // the space to the right edge of the screen\n      },\n    },\n  }}\n>\n  <ToastApp />\n</ToastManager>\n"})}),"\n",(0,a.jsx)(s.Z,Object.assign({},{component:faq_control_spacing_between_toasts,file:{data:'import { Box, Button, Divider, Flex, TextLabel, Toast, ToastManager, useToastManager } from \'@tonic-ui/react\';\nimport React, { useRef, useState } from \'react\';\n\nconst FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst ToastApp = () => {\n  const counterRef = useRef(0);\n  const toast = useToastManager();\n\n  return (\n    <Button\n      onClick={() => {\n        const placement = \'bottom-right\';\n        const isTop = placement.includes(\'top\');\n        const render = ({ data, onClose, placement }) => {\n          const toastSpacingKey = isTop ? \'pb\' : \'pt\';\n          const styleProps = {\n            [toastSpacingKey]: \'var(--data-toast-spacing)\',\n            width: 320,\n          };\n          return (\n            <Box sx={styleProps}>\n              <Toast isClosable onClose={onClose}>\n                This is a toast message #{data.index + 1}\n              </Toast>\n            </Box>\n          );\n        };\n\n        // Remove the oldest toast if there are more than 3 toasts\n        const toastsOfPlacement = toast.state[placement];\n        if (toastsOfPlacement.length >= 3) {\n          const oldestToast = isTop ? toastsOfPlacement[toastsOfPlacement.length - 1] : toastsOfPlacement[0];\n          toast.close(oldestToast.id, placement);\n        }\n\n        const options = {\n          placement: placement,\n          duration: 30 * 1000,\n          data: { // user-defined data\n            index: counterRef.current++,\n          },\n        };\n        toast(render, options);\n      }}\n    >\n      Notify Toast\n    </Button>\n  );\n};\n\nconst App = () => {\n  const [edgeSpacing, setEdgeSpacing] = useState(16);\n  const [toastSpacing, setToastSpacing] = useState(16);\n\n  return (\n    <>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            The space to the edge of the screen\n          </TextLabel>\n        </Box>\n        <Flex alignItems="center" columnGap="2x" mb="4x">\n          <input\n            type="range"\n            min={0}\n            max={64}\n            step={4}\n            onChange={(event) => {\n              const value = parseInt(event.target.value);\n              setEdgeSpacing(value);\n            }}\n            value={edgeSpacing}\n          />\n          {edgeSpacing}px\n        </Flex>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            The space between toasts\n          </TextLabel>\n        </Box>\n        <Flex alignItems="center" columnGap="2x" mb="4x">\n          <input\n            type="range"\n            min={0}\n            max={32}\n            step={4}\n            onChange={(event) => {\n              const value = parseInt(event.target.value);\n              setToastSpacing(value);\n            }}\n            value={toastSpacing}\n          />\n          {toastSpacing}px\n        </Flex>\n      </FormGroup>\n      <Divider my="4x" />\n      <ToastManager\n        TransitionProps={{\n          sx: {\n            \'--data-toast-spacing\': `${toastSpacing}px`,\n            \'[data-toast-placement^="top"] > &:first-of-type\': {\n              mt: edgeSpacing, // the space to the top edge of the screen\n            },\n            \'[data-toast-placement^="bottom"] > &:last-of-type\': {\n              mb: edgeSpacing, // the space to the bottom edge of the screen\n            },\n            \'[data-toast-placement$="left"] > &\': {\n              ml: edgeSpacing, // the space to the left edge of the screen\n            },\n            \'[data-toast-placement$="right"] > &\': {\n              mr: edgeSpacing, // the space to the right edge of the screen\n            },\n          },\n        }}\n      >\n        <ToastApp />\n      </ToastManager>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/toast-manager/index.page.mdx"},sandbox:{files:{},raw:'import { Box, Button, Divider, Flex, TextLabel, Toast, ToastManager, useToastManager } from \'@tonic-ui/react\';\nimport React, { useRef, useState } from \'react\';\n\nconst FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst ToastApp = () => {\n  const counterRef = useRef(0);\n  const toast = useToastManager();\n\n  return (\n    <Button\n      onClick={() => {\n        const placement = \'bottom-right\';\n        const isTop = placement.includes(\'top\');\n        const render = ({ data, onClose, placement }) => {\n          const toastSpacingKey = isTop ? \'pb\' : \'pt\';\n          const styleProps = {\n            [toastSpacingKey]: \'var(--data-toast-spacing)\',\n            width: 320,\n          };\n          return (\n            <Box sx={styleProps}>\n              <Toast isClosable onClose={onClose}>\n                This is a toast message #{data.index + 1}\n              </Toast>\n            </Box>\n          );\n        };\n\n        // Remove the oldest toast if there are more than 3 toasts\n        const toastsOfPlacement = toast.state[placement];\n        if (toastsOfPlacement.length >= 3) {\n          const oldestToast = isTop ? toastsOfPlacement[toastsOfPlacement.length - 1] : toastsOfPlacement[0];\n          toast.close(oldestToast.id, placement);\n        }\n\n        const options = {\n          placement: placement,\n          duration: 30 * 1000,\n          data: { // user-defined data\n            index: counterRef.current++,\n          },\n        };\n        toast(render, options);\n      }}\n    >\n      Notify Toast\n    </Button>\n  );\n};\n\nconst App = () => {\n  const [edgeSpacing, setEdgeSpacing] = useState(16);\n  const [toastSpacing, setToastSpacing] = useState(16);\n\n  return (\n    <>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            The space to the edge of the screen\n          </TextLabel>\n        </Box>\n        <Flex alignItems="center" columnGap="2x" mb="4x">\n          <input\n            type="range"\n            min={0}\n            max={64}\n            step={4}\n            onChange={(event) => {\n              const value = parseInt(event.target.value);\n              setEdgeSpacing(value);\n            }}\n            value={edgeSpacing}\n          />\n          {edgeSpacing}px\n        </Flex>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            The space between toasts\n          </TextLabel>\n        </Box>\n        <Flex alignItems="center" columnGap="2x" mb="4x">\n          <input\n            type="range"\n            min={0}\n            max={32}\n            step={4}\n            onChange={(event) => {\n              const value = parseInt(event.target.value);\n              setToastSpacing(value);\n            }}\n            value={toastSpacing}\n          />\n          {toastSpacing}px\n        </Flex>\n      </FormGroup>\n      <Divider my="4x" />\n      <ToastManager\n        TransitionProps={{\n          sx: {\n            \'--data-toast-spacing\': `${toastSpacing}px`,\n            \'[data-toast-placement^="top"] > &:first-of-type\': {\n              mt: edgeSpacing, // the space to the top edge of the screen\n            },\n            \'[data-toast-placement^="bottom"] > &:last-of-type\': {\n              mb: edgeSpacing, // the space to the bottom edge of the screen\n            },\n            \'[data-toast-placement$="left"] > &\': {\n              ml: edgeSpacing, // the space to the left edge of the screen\n            },\n            \'[data-toast-placement$="right"] > &\': {\n              mr: edgeSpacing, // the space to the right edge of the screen\n            },\n          },\n        }}\n      >\n        <ToastApp />\n      </ToastManager>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,a.jsxs)(n.h2,{id:"props",children:["Props",(0,a.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,a.jsx)(n.svg,{children:(0,a.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,a.jsxs)(n.h3,{id:"toastmanager-1",children:["ToastManager",(0,a.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#toastmanager-1",children:(0,a.jsx)(n.svg,{children:(0,a.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{align:"left",children:"Name"}),(0,a.jsx)(n.th,{align:"left",children:"Type"}),(0,a.jsx)(n.th,{align:"left",children:"Default"}),(0,a.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,a.jsx)(n.td,{align:"left",children:"ElementType"}),(0,a.jsx)(n.td,{align:"left",children:"ToastTransition"}),(0,a.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,a.jsx)(n.td,{align:"left",children:"object"}),(0,a.jsx)(n.td,{align:"left"}),(0,a.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,a.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"children"}),(0,a.jsxs)(n.td,{align:"left",children:["ReactNode | ",(0,a.jsx)(n.code,{children:"(context) => ReactNode"})]}),(0,a.jsx)(n.td,{align:"left"}),(0,a.jsx)(n.td,{align:"left",children:"A function child can be used intead of a React element. This function is called with the context object."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"containerRef"}),(0,a.jsx)(n.td,{align:"left",children:"RefObject"}),(0,a.jsx)(n.td,{align:"left"}),(0,a.jsxs)(n.td,{align:"left",children:["A ",(0,a.jsx)(n.code,{children:"ref"})," to the component where the toasts will be rendered."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"placement"}),(0,a.jsx)(n.td,{align:"left",children:"string"}),(0,a.jsx)(n.td,{align:"left",children:"'bottom-right'"}),(0,a.jsx)(n.td,{align:"left",children:"The default placement to place toasts. One of: 'top', 'top-right', 'top-left', 'bottom', 'bottom-left', 'bottom-right'"})]})]})]})]})}var index_page=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,o.ah)(),e.components).wrapper;return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(_createMdxContent,e)})):_createMdxContent(e)}},20947:function(e,n,t){"use strict";var a=t(40596),o=t(49857),s=t(73645),r=t(82139),c=t(62368),i=t(62272),l=t(14594),d=t(65019),p=t(5632),h=t(2784),m=t(65245),u=t(82821),g=t(5198),f=t(90622),x=t(52057),b=t(63651),y=t(94981),T=["component","defaultExpanded","expanded","file","sandbox"];function _slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,a,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var s=[],r=!0,c=!1;try{for(o=o.call(e);!(r=(t=o.next()).done)&&(s.push(t.value),!n||s.length!==n);r=!0);}catch(e){c=!0,a=e}finally{try{r||null==o.return||o.return()}finally{if(c)throw a}}return s}}(e,n)||function(e,n){if(e){if("string"==typeof e)return _arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,a=Array(n);t<n;t++)a[t]=e[t];return a}var Demo=function(e){var n=e.component,t=e.defaultExpanded,j=void 0!==t&&t,v=e.expanded,S=e.file,C=e.sandbox;!function(e,n){if(null!=e){var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}}}(e,T);var k=(0,p.useRouter)(),E=_slicedToArray((0,h.useReducer)(function(e){return!e},!1),2),_=E[0],w=E[1],A=_slicedToArray((0,a.Z)(),1)[0],O={dark:f.y,light:f.q}[A],P=_slicedToArray((0,d.Z)(null!=v?v:j),2),Z=P[0],M=P[1],B=(0,u.Z)(null==S?void 0:S.data),F=B.onCopy,I=B.hasCopied,N=(0,h.useCallback)(function(){F()},[F]),R=(0,h.useCallback)(function(){(0,x.b)(C)},[C]),G=(0,h.useCallback)(function(){w(),M(!1)},[w,M]);return(0,h.useEffect)(function(){void 0!==v&&v!==Z&&M(v)},[v,Z,M]),h.createElement(m.nu,{code:null==S?void 0:S.data,disabled:!0,language:"jsx",theme:O},h.createElement(o.Z,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[A],p:"4x"},h.createElement(o.Z,{fontSize:"sm",lineHeight:"sm"},h.createElement(h.Fragment,{key:_},h.createElement(n,null)))),h.createElement(s.Z,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},h.createElement(y.Z,{"data-track":Z?"CodeBlock|hide_source|".concat((0,b.Z)({path:k.pathname})):"CodeBlock|show_source|".concat((0,b.Z)({path:k.pathname})),onClick:M},h.createElement(r.Z,{label:Z?"Hide the source":"Show the source"},h.createElement(c.Z,{icon:"code"}))),h.createElement(y.Z,{"data-track":"CodeBlock|copy_source|".concat((0,b.Z)({path:k.pathname})),onClick:N},h.createElement(r.Z,{label:I?"Copied":"Copy the source"},h.createElement(c.Z,{icon:"file-copy-o"}))),h.createElement(y.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(k.pathname),onClick:R},h.createElement(r.Z,{label:"Edit in CodeSandbox"},h.createElement(g.Z,null))),h.createElement(y.Z,{"data-track":"CodeBlock|reset|".concat(k.pathname),onClick:G},h.createElement(r.Z,{label:"Reset the demo"},h.createElement(c.Z,{icon:"redo"})))),h.createElement(i.Z,{in:Z},h.createElement(l.Z,{in:Z,unmountOnExit:!0},h.createElement(o.Z,{as:m.uz,sx:{fontFamily:"mono",fontSize:"sm","& > .prism-code":{overflowX:"auto"}}}))))};Demo.displayName="Demo",n.Z=Demo},37958:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/toast-manager",function(){return t(64386)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=37958)}),_N_E=e.O()}]);