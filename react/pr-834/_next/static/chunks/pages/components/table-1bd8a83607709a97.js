(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7807],{60976:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return index_page}});var o=t(52322),r=t(45392),l=t(68314),i=t(95412),a=t(73705),c=t(12225),s=t(85017),d=t(49857),u=t(70758),m=t(30514),f=t(75715),g=t(98306),h=t(24909),p=t(39108),b=t(15345),y=t(63433),x=t(58614),w=t(17179),T=t(76635),v=t.n(T),C=t(2784);function _extends(){return(_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function _unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return _arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(e,n)}}function _arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var S=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],R=v().range(360).map(function(e){var n=v().sampleSize(S,v().random(0,S.length)),t=new Date(Date.now()-v().random(0,2592e6));return{id:e+1,endpoint:"Endpoint ".concat(e+1),detections:n,lastSeen:t}}),virtualized_rows=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,s.Z)())||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,1)||_unsupportedIterableToArray(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],t=(0,C.useMemo)(function(){return[{header:"Endpoint",accessorKey:"endpoint",size:200},{header:"Detections",accessorKey:"detections",cell:function(e){var n;return(function(e){if(Array.isArray(e))return _arrayLikeToArray(e)}(n=(0,e.getValue)())||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||_unsupportedIterableToArray(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).length},size:100},{header:"Last Seen",accessorKey:"lastSeen",cell:function(e){return(0,e.getValue)().toISOString()},size:200}]},[]),o=(0,i.b7)({data:R,columns:t,defaultColumn:{minSize:40},getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}}),r=(0,C.useRef)(),l=(0,c.MG)({count:o.getRowModel().rows.length,getScrollElement:function(){var e;return null===(e=r.current)||void 0===e?void 0:e.firstChild},estimateSize:function(e){return 36},overscan:10});return C.createElement(C.Fragment,null,C.createElement(d.Z,{mb:"4x",px:"3x"},C.createElement(u.Z,null,"Total: ",o.getRowModel().rows.length)),C.createElement(m.Z,_extends({layout:"flexbox"},{height:396}),C.createElement(f.Z,null,o.getHeaderGroups().map(function(e){return C.createElement(g.Z,{key:e.id},e.headers.map(function(e){var n=_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return C.createElement(h.Z,_extends({key:e.id},n),e.isPlaceholder?null:C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),C.createElement(b.Z,{ref:r,height:"100%",overflow:"visible"},C.createElement(d.Z,{position:"relative",width:"100%",style:{height:l.getTotalSize()}},C.createElement(y.Z,null,l.getVirtualItems().map(function(e){var t=o.getRowModel().rows[e.index];return C.createElement(d.Z,{key:e.key,position:"absolute",top:0,left:0,width:"100%",style:{height:"".concat(e.size,"px"),transform:"translateY(".concat(e.start,"px)")}},t&&C.createElement(x.Z,{_hover:{backgroundColor:n.background.highlighted}},t.getVisibleCells().map(function(e){var n=_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return C.createElement(w.Z,_extends({key:e.id},n),C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))})))}))))))},z=t(40596),D=t(78366),k=t(1847),_=t(73645),P=t(68010),j=t(99870),E=t(69821),A=t(34925),I=t(41965),O=t(86851),H=t(31222),B=t(65019);function sorting_extends(){return(sorting_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function sorting_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function sorting_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?sorting_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):sorting_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function sorting_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return sorting_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return sorting_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function sorting_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var M=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],sorting=function(){var e=sorting_slicedToArray((0,z.Z)(),1)[0],n=sorting_slicedToArray((0,s.Z)(),1)[0],t=sorting_slicedToArray((0,C.useState)([{id:"eventType",desc:!1}]),2),o=t[0],r=t[1],l=sorting_slicedToArray((0,B.Z)(!1),2),c=l[0],b=l[1];(0,C.useEffect)(function(){c&&r([])},[c]);var T=(0,C.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),v=(0,i.b7)({data:M,columns:T,defaultColumn:{minSize:40},state:{sorting:o},enableSorting:!0,enableSortingRemoval:c,getCoreRowModel:(0,a.sC)(),getSortedRowModel:(0,a.tj)(),onSortingChange:function(e){r(e)},getRowId:function(e,n){return e.id}}),S=C.createElement(d.Z,{p:"1x"},C.createElement(u.Z,null,"If ",C.createElement(D.Z,null,"true")," then changing sort order will circle like: `none` → `desc` → `asc` → `none` → ..."),C.createElement(u.Z,null,"If ",C.createElement(D.Z,null,"false")," then changing sort order will circle like: `none` → `desc` → `asc` → `desc` → `asc` → ..."));return C.createElement(C.Fragment,null,C.createElement(d.Z,{mb:"4x",px:"3x"},C.createElement(k.Z,{checked:c,onChange:function(){b()}},C.createElement(_.Z,{alignItems:"center"},"Enable the ability to remove sorting for the table",C.createElement(P.Z,{width:"2x"}),C.createElement(j.Z,{label:"dark"===e?C.createElement(E.Z,null,S):C.createElement(A.Z,null,S)},C.createElement(I.Z,null))))),C.createElement(m.Z,{layout:"flexbox"},C.createElement(f.Z,null,v.getHeaderGroups().map(function(e){return C.createElement(g.Z,{key:e.id},e.headers.map(function(e){var t,o=sorting_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return e.column.getCanSort()&&(o=sorting_objectSpread(sorting_objectSpread({},o),{},{cursor:"pointer",userSelect:"none",_hover:{backgroundColor:n.background.highlighted}})),e.column.getIsSorted()&&(o=sorting_objectSpread(sorting_objectSpread({},o),{},{color:n.color.emphasis})),C.createElement(h.Z,sorting_extends({key:e.id,onClick:e.column.getToggleSortingHandler()},o),e.isPlaceholder?null:C.createElement(_.Z,{alignItems:"center"},C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())),null!==(t=({asc:C.createElement(O.Z,{size:20,ml:"1x"}),desc:C.createElement(H.Z,{size:20,ml:"1x"})})[e.column.getIsSorted()])&&void 0!==t?t:null))}))})),C.createElement(y.Z,null,v.getRowModel().rows.map(function(e){return C.createElement(x.Z,{key:e.id,_hover:{backgroundColor:n.background.highlighted}},e.getVisibleCells().map(function(e){var n=sorting_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return C.createElement(w.Z,sorting_extends({key:e.id},n),C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))}))))},Z=t(23094),V=t(66548),W=t(82851),L=t(56818),F=t(13409),G=t(95530);function icon_handle_extends(){return(icon_handle_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var icon_handle=function(e){return C.createElement(G.Z,icon_handle_extends({width:"2x",height:"4x",viewBox:"0 0 8 16"},e),C.createElement("circle",{cx:"2",cy:"2",r:"1",fill:"#5E5E5E"}),C.createElement("circle",{cx:"2",cy:"6",r:"1",fill:"#5E5E5E"}),C.createElement("circle",{cx:"2",cy:"10",r:"1",fill:"#5E5E5E"}),C.createElement("circle",{cx:"2",cy:"14",r:"1",fill:"#5E5E5E"}),C.createElement("circle",{cx:"6",cy:"2",r:"1",fill:"#5E5E5E"}),C.createElement("circle",{cx:"6",cy:"6",r:"1",fill:"#5E5E5E"}),C.createElement("circle",{cx:"6",cy:"10",r:"1",fill:"#5E5E5E"}),C.createElement("circle",{cx:"6",cy:"14",r:"1",fill:"#5E5E5E"}))},N=["sx"];function row_ordering_dnd_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function row_ordering_dnd_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?row_ordering_dnd_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):row_ordering_dnd_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function row_ordering_dnd_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,n)||row_ordering_dnd_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function row_ordering_dnd_extends(){return(row_ordering_dnd_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function row_ordering_dnd_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return row_ordering_dnd_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return row_ordering_dnd_arrayLikeToArray(e,n)}}function row_ordering_dnd_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var K=(0,C.forwardRef)(function(e,n){var t,o=e.sx,r=function(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}(e,N);return C.createElement(_.Z,row_ordering_dnd_extends({sx:[{'[role="row"]:hover > [role="cell"] &':{opacity:1},opacity:0,cursor:"move",px:"1x",width:"4x",position:"absolute",left:0}].concat(function(e){if(Array.isArray(e))return row_ordering_dnd_arrayLikeToArray(e)}(t=Array.isArray(o)?o:[o])||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||row_ordering_dnd_unsupportedIterableToArray(t)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())},r))});K.displayName="DragHandle";var SortableItem=function(e){var n=e.children,t=e.id,o=(0,V.nB)({id:t});return n({attributes:o.attributes,isDragging:o.isDragging,listeners:o.listeners,setActivatorNodeRef:o.setActivatorNodeRef,setNodeRef:o.setNodeRef,transform:o.transform,transition:o.transition})},SortableOverlay=function(e){var n=e.children,t=(0,C.useMemo)(function(){return{sideEffects:(0,Z.Ai)({styles:{active:{opacity:"0.4"}}})}},[]);return C.createElement(Z.y9,{dropAnimation:t},n)},row_ordering_dnd=function(){var e=row_ordering_dnd_slicedToArray((0,s.Z)(),1)[0],n=row_ordering_dnd_slicedToArray((0,C.useState)([{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}]),2),t=n[0],o=n[1],r=row_ordering_dnd_slicedToArray((0,C.useState)({}),2),l=r[0],c=r[1],b=(0,C.useMemo)(function(){return[{id:"selection",header:function(e){var n=e.table;return C.createElement(k.Z,{checked:n.getIsAllRowsSelected(),indeterminate:n.getIsSomeRowsSelected(),onChange:n.getToggleAllRowsSelectedHandler()})},cell:function(e){var n=e.row;return C.createElement(k.Z,{checked:n.getIsSelected(),disabled:!n.getCanSelect(),indeterminate:n.getIsSomeSelected(),onChange:n.getToggleSelectedHandler()})},size:48,style:{px:"4x"}},{accessorKey:"eventType",header:function(){return C.createElement(p.Z,null,"Event Type")},cell:function(e){var n=e.getValue;return C.createElement(p.Z,null,n())},size:240},{accessorKey:"affectedDevices",header:function(){return C.createElement(p.Z,null,"Affected Devices")},cell:function(e){var n=e.getValue;return C.createElement(p.Z,null,n())},size:150,style:{textAlign:"right"}},{accessorKey:"detections",header:function(){return C.createElement(p.Z,null,"Detections")},cell:function(e){var n=e.getValue;return C.createElement(p.Z,null,n())},size:150,style:{textAlign:"right"}}]},[]),T=(0,i.b7)({data:t,columns:b,defaultColumn:{minSize:48},state:{rowSelection:l},enableRowSelection:!0,onRowSelectionChange:c,getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}}),v=Object.keys(l).length,S=T.getRowModel().rows,R=row_ordering_dnd_slicedToArray((0,C.useState)(null),2),z=R[0],D=R[1],P=(0,Z.Dy)((0,Z.VT)(Z.MA),(0,Z.VT)(Z.we),(0,Z.VT)(Z.Lg,{coordinateGetter:V.is})),j=(0,C.useCallback)(function(e){D(e.active.id)},[]),E=(0,C.useCallback)(function(e){var n=e.over,r=e.active;if(n&&r.id!==(null==n?void 0:n.id)){var l=S.findIndex(function(e){return e.id===r.id}),i=S.findIndex(function(e){return e.id===n.id});o((0,V.Rp)(t,l,i))}D(null)},[t,S]),A=(0,C.useCallback)(function(e){D(null)},[]),I=(0,C.useCallback)(function(n){return n?C.createElement(SortableItem,{id:n.id},function(t){var o=t.attributes,r=t.isDragging,l=t.listeners,a=t.setActivatorNodeRef,c=t.setNodeRef,s=t.transform,d=t.transition,u={cursor:r?"move":void 0,_hover:{backgroundColor:r?"gray:70":e.background.highlighted},_selected:{backgroundColor:r?"gray:70":e.background.selected},opacity:r?.4:void 0,transform:W.ux.Translate.toString(s),transition:d,zIndex:r?1:0};return C.createElement(x.Z,{ref:c,"data-selected":(0,L.PB)(n.getIsSelected()),sx:u},n.getVisibleCells().map(function(e){var n=row_ordering_dnd_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return"selection"===e.column.id?C.createElement(w.Z,{key:e.id,sx:row_ordering_dnd_objectSpread(row_ordering_dnd_objectSpread({},n),{},{position:"relative"})},C.createElement(_.Z,{alignItems:"center"},C.createElement(K,row_ordering_dnd_extends({ref:a},o,l),C.createElement(icon_handle,null)),(0,i.ie)(e.column.columnDef.cell,e.getContext()))):C.createElement(w.Z,{key:e.id,sx:row_ordering_dnd_objectSpread({},n)},(0,i.ie)(e.column.columnDef.cell,e.getContext()))}))}):null},[e]);return C.createElement(C.Fragment,null,C.createElement(d.Z,{mb:"4x",px:"3x"},C.createElement(u.Z,null,v," selected")),C.createElement(Z.LB,{sensors:P,onDragStart:j,onDragEnd:E,onDragCancel:A},C.createElement(V.Fo,{items:S},C.createElement(m.Z,{layout:"flexbox"},C.createElement(f.Z,null,T.getHeaderGroups().map(function(e){return C.createElement(g.Z,{key:e.id},e.headers.map(function(e){var n=row_ordering_dnd_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return C.createElement(h.Z,row_ordering_dnd_extends({key:e.id},n),e.isPlaceholder?null:(0,i.ie)(e.column.columnDef.header,e.getContext()))}))})),C.createElement(y.Z,null,S.map(function(e){return C.createElement(C.Fragment,{key:e.id},I(e))}),C.createElement(SortableOverlay,null,(0,F.Rw)(z)?null:I(S.find(function(e){return e.id===z}))))))))};function row_selection_extends(){return(row_selection_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function row_selection_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function row_selection_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?row_selection_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):row_selection_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function row_selection_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return row_selection_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return row_selection_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function row_selection_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var U=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],row_selection=function(){var e=row_selection_slicedToArray((0,s.Z)(),1)[0],n=row_selection_slicedToArray((0,C.useState)({}),2),t=n[0],o=n[1],r=(0,C.useMemo)(function(){return[{id:"selection",header:function(e){var n=e.table;return C.createElement(k.Z,{checked:n.getIsAllRowsSelected(),indeterminate:n.getIsSomeRowsSelected(),onChange:n.getToggleAllRowsSelectedHandler()})},cell:function(e){var n=e.row;return C.createElement(k.Z,{checked:n.getIsSelected(),disabled:!n.getCanSelect(),indeterminate:n.getIsSomeSelected(),onChange:n.getToggleSelectedHandler()})},size:48,style:{px:"4x"}},{accessorKey:"eventType",header:function(){return C.createElement(p.Z,null,"Event Type")},cell:function(e){var n=e.getValue;return C.createElement(p.Z,null,n())},size:240},{accessorKey:"affectedDevices",header:function(){return C.createElement(p.Z,null,"Affected Devices")},cell:function(e){var n=e.getValue;return C.createElement(p.Z,null,n())},size:150,style:{textAlign:"right"}},{accessorKey:"detections",header:function(){return C.createElement(p.Z,null,"Detections")},cell:function(e){var n=e.getValue;return C.createElement(p.Z,null,n())},size:150,style:{textAlign:"right"}}]},[]),l=(0,i.b7)({data:U,columns:r,defaultColumn:{minSize:48},state:{rowSelection:t},enableRowSelection:!0,onRowSelectionChange:o,getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}}),c=Object.keys(t).length;return C.createElement(C.Fragment,null,C.createElement(d.Z,{mb:"4x",px:"3x"},C.createElement(u.Z,null,c," selected")),C.createElement(m.Z,{layout:"flexbox"},C.createElement(f.Z,null,l.getHeaderGroups().map(function(e){return C.createElement(g.Z,{key:e.id},e.headers.map(function(e){var n=row_selection_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return C.createElement(h.Z,row_selection_extends({key:e.id},n),e.isPlaceholder?null:(0,i.ie)(e.column.columnDef.header,e.getContext()))}))})),C.createElement(y.Z,null,l.getRowModel().rows.map(function(n){return C.createElement(x.Z,{key:n.id,"data-selected":(0,L.PB)(n.getIsSelected()),_hover:{backgroundColor:e.background.highlighted},_selected:{backgroundColor:e.background.selected}},n.getVisibleCells().map(function(e){var n=row_selection_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return C.createElement(w.Z,row_selection_extends({key:e.id},n),(0,i.ie)(e.column.columnDef.cell,e.getContext()))}))}))))},X=t(6194),Y=t(67622),$=t(14594),q=t(83513),Q=t(45795),J=t(83377),ee=["isExpanded"];function row_expanding_extends(){return(row_expanding_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function row_expanding_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function row_expanding_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?row_expanding_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):row_expanding_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function row_expanding_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return row_expanding_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return row_expanding_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function row_expanding_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var en=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],et=(0,C.forwardRef)(function(e,n){var t=e.isExpanded,o=function(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}(e,ee),r=t?Math.floor(93.1):133,l=J.YU.easeOut,i=t?(0,J.c)({timeout:r,easing:l}):(0,J.Zk)({timeout:r,easing:l}),a={transform:t?"rotate(90deg)":"rotate(0deg)",transition:(0,J.zx)("transform",i)};return C.createElement(q.Z,o,C.createElement(Q.Z,row_expanding_extends({size:"4x"},a)))});et.displayName="TableRowToggleIcon";var row_expanding=function(){var e=row_expanding_slicedToArray((0,z.Z)(),1)[0],n=row_expanding_slicedToArray((0,s.Z)(),1)[0],renderExpandedRow=function(n){var t=Object.entries(n.row.original);return C.createElement(_.Z,{borderBottom:1,borderBottomColor:{dark:"gray:70",light:"gray:30"}[e]},C.createElement(d.Z,{width:"12x",borderRight:2,borderRightColor:{dark:"gray:60",light:"gray:30"}[e]}),C.createElement(d.Z,{as:"pre",fontFamily:"mono",m:0,px:"3x",py:"2x"},C.createElement(X.Z,{templateColumns:"auto auto",columnGap:"10x",rowGap:"1x"},t.map(function(e){var n=row_expanding_slicedToArray(e,2),t=n[0],o=n[1];return C.createElement(C.Fragment,{key:t},C.createElement(Y.Z,null,t),C.createElement(u.Z,null,Array.isArray(o)?o.map(function(e){return C.createElement(u.Z,{key:e},e)}):"boolean"==typeof o?o.toString():o))}))))},t=(0,C.useMemo)(function(){return[{id:"expand",header:function(){return null},cell:function(e){var n=e.row,t=n.getCanExpand(),o=n.getIsExpanded();return t?C.createElement(et,{isExpanded:o,onClick:n.getToggleExpandedHandler()}):null},size:48},{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),o=(0,i.b7)({data:en,columns:t,defaultColumn:{minSize:40},getRowCanExpand:function(){return!0},getCoreRowModel:(0,a.sC)(),getExpandedRowModel:(0,a.rV)(),getRowId:function(e,n){return e.id}});return C.createElement(m.Z,{layout:"flexbox"},C.createElement(f.Z,null,o.getHeaderGroups().map(function(e){return C.createElement(g.Z,{key:e.id},e.headers.map(function(e){var n=row_expanding_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return C.createElement(h.Z,row_expanding_extends({key:e.id},n),e.isPlaceholder?null:C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),C.createElement(y.Z,null,o.getRowModel().rows.map(function(e){return C.createElement(C.Fragment,{key:e.id},C.createElement(x.Z,{"data-selected":(0,L.PB)(e.getIsExpanded()),_hover:{backgroundColor:n.background.highlighted},_selected:{backgroundColor:n.background.selected}},e.getVisibleCells().map(function(e){var n=row_expanding_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return C.createElement(w.Z,row_expanding_extends({key:e.id},n),C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))})),e.getCanExpand()&&C.createElement($.Z,{in:e.getIsExpanded()},renderExpandedRow({row:e})),e.getCanExpand()&&!1)})))},eo=t(72448),er=t(15192),el=t(66785),ei=t(87888),ea=t(94829),ec=t(3398),es=t(39256),ed=t(62080),eu=t(40809),em=t(5081);function pagination_extends(){return(pagination_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function pagination_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function pagination_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?pagination_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):pagination_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function pagination_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,n)||pagination_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pagination_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return pagination_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return pagination_arrayLikeToArray(e,n)}}function pagination_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var ef=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],eg=v().range(360).map(function(e){var n=v().sampleSize(ef,v().random(0,ef.length)),t=new Date(Date.now()-v().random(0,2592e6));return{id:e+1,endpoint:"Endpoint ".concat(e+1),detections:n,lastSeen:t}}),TablePagination=function(e){var n=e.count,t=e.defaultPage,o=void 0===t?1:t,r=e.defaultRowsPerPage,l=e.onPageChange,i=e.onRowsPerPageChange,a=e.page,c=e.rowsPerPage,d=e.rowsPerPageOptions,m=void 0===d?[10,25,50,100]:d;e.showFirstButton,e.showLastButton;var f=pagination_slicedToArray((0,s.Z)(),1)[0],g=null!=r?r:(0,em.rY)(m)[0],h=pagination_slicedToArray((0,C.useState)(null!=a?a:o),2),p=h[0],b=h[1],y=pagination_slicedToArray((0,C.useState)(null!=c?c:g),2),x=y[0],w=y[1];(0,C.useEffect)(function(){void 0!==a&&b(a)},[a]),(0,C.useEffect)(function(){void 0!==c&&w(c)},[c]);var T=(0,C.useCallback)(function(e){void 0!==a||b(e),"function"==typeof l&&l(e)},[a,l]),v=(0,C.useCallback)(function(e){void 0!==c||w(e),"function"==typeof i&&i(e)},[c,i]),S=Math.ceil(n/x),R=p>1,z=p<S;return C.createElement(_.Z,{alignItems:"center",justifyContent:"flex-end",backgroundColor:f.background.secondary,px:"6x",py:"3x"},C.createElement(u.Z,{mr:"2x"},"Total: ",n),C.createElement(eo.Z,{orientation:"vertical",height:"6x"}),C.createElement(er.Z,null,C.createElement(el.Z,{variant:"ghost"},x," per page"),C.createElement(ei.Z,{onClick:function(e){var n=(0,em.q9)(e.target.value);n>0&&(T(1),v(n))},width:"100%"},m.map(function(e){return C.createElement(ea.Z,{key:e,value:e},e)}))),C.createElement(eo.Z,{orientation:"vertical",height:"6x"}),C.createElement(P.Z,{width:"2x"}),C.createElement(ec.Z,{width:"10x",px:0,textAlign:"center",onChange:function(e){var n=(0,em.q9)(e.target.value);n<=1?T(1):n>=S?T(S):T(n)},value:p}),C.createElement(P.Z,{width:"2x"}),C.createElement(u.Z,null,"/"),C.createElement(P.Z,{width:"2x"}),C.createElement(u.Z,null,S),C.createElement(P.Z,{width:"2x"}),C.createElement(es.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},C.createElement(ed.Z,{width:"8x",disabled:!R,onClick:function(e){T(p-1)}},C.createElement(eu.Z,null)),C.createElement(ed.Z,{width:"8x",disabled:!z,onClick:function(e){T(p+1)}},C.createElement(Q.Z,null))))},ConditionalWrapper=function(e){var n=e.children,t=e.condition,o=e.wrapper;return t?o(n):n},pagination=function(){var e=pagination_slicedToArray((0,s.Z)(),1)[0],n=(0,C.useMemo)(function(){return[{header:"Endpoint",accessorKey:"endpoint",size:200},{header:"Detections",accessorKey:"detections",cell:function(e){var n;return(function(e){if(Array.isArray(e))return pagination_arrayLikeToArray(e)}(n=(0,e.getValue)())||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||pagination_unsupportedIterableToArray(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).length},size:150},{header:"Last Seen",accessorKey:"lastSeen",cell:function(e){return(0,e.getValue)().toISOString()},size:200}]},[]),t=(0,i.b7)({data:eg,columns:n,defaultColumn:{minSize:40},getCoreRowModel:(0,a.sC)(),getPaginationRowModel:(0,a.G_)(),getRowId:function(e,n){return e.id}}),o=t.getState().pagination.pageIndex+1,r=t.getCoreRowModel().rows.length,l={};return l={height:452},C.createElement(C.Fragment,null,C.createElement(d.Z,{mb:"4x",px:"3x"},C.createElement(u.Z,null,"Current page: ",o)),C.createElement(m.Z,pagination_extends({layout:"flexbox"},l),C.createElement(f.Z,null,t.getHeaderGroups().map(function(e){return C.createElement(g.Z,{key:e.id},e.headers.map(function(e){var n=pagination_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return C.createElement(h.Z,pagination_extends({key:e.id},n),e.isPlaceholder?null:C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),C.createElement(ConditionalWrapper,{condition:!0,wrapper:function(e){return C.createElement(b.Z,{height:"100%",overflow:"visible"},e)}},C.createElement(y.Z,null,t.getRowModel().rows.map(function(n){return C.createElement(x.Z,{key:n.id,_hover:{backgroundColor:e.background.highlighted}},n.getVisibleCells().map(function(e){var n=pagination_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return C.createElement(w.Z,pagination_extends({key:e.id},n),C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))}))),C.createElement(TablePagination,{count:r,onPageChange:function(e){var n=Math.max((0,em.q9)(e)-1,0);t.setPageIndex(n)},onRowsPerPageChange:function(e){var n=Math.max((0,em.q9)(e),1);t.setPageSize(n)}})))},eh=t(27216),ep=t(23638),eb=t(29970),ey=t(6738),ex=t(82412),ew=t(6192),eT=t(2501),ev=t(95346),eC=t(61481),eS=t(17025),eR=t(42309),ez=t(34498),eD=t.n(ez);function column_settings_drawer_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,n)||column_settings_drawer_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_settings_drawer_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return column_settings_drawer_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return column_settings_drawer_arrayLikeToArray(e,n)}}function column_settings_drawer_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}function column_settings_drawer_extends(){return(column_settings_drawer_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function column_settings_drawer_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function column_settings_drawer_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?column_settings_drawer_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):column_settings_drawer_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}var ek="UPDATE_COLUMNS",reducer=function(e,n){return n.type===ek?column_settings_drawer_objectSpread(column_settings_drawer_objectSpread({},e),{},{columns:(0,em.rY)(n.payload)}):e},e_=(0,C.forwardRef)(function(e,n){return C.createElement(_.Z,column_settings_drawer_extends({role:"presentation",sx:{alignItems:"center",cursor:"move"}},e))});e_.displayName="DragHandle";var column_settings_drawer_SortableOverlay=function(e){var n=e.children,t=(0,C.useMemo)(function(){return{sideEffects:(0,Z.Ai)({styles:{active:{opacity:"0.4"}}})}},[]);return C.createElement(Z.y9,{dropAnimation:t},n)},column_settings_drawer_SortableItem=function(e){var n=e.children,t=e.id,o=(0,V.nB)({id:t});return n({attributes:o.attributes,isDragging:o.isDragging,listeners:o.listeners,setActivatorNodeRef:o.setActivatorNodeRef,setNodeRef:o.setNodeRef,transform:o.transform,transition:o.transition})},column_settings_drawer=function(e){var n=e.columns,t=e.defaultColumnOrder,o=e.onUpdateColumns,r=e.isOpen,l=e.onClose,i=column_settings_drawer_slicedToArray((0,s.Z)(),1)[0],a=column_settings_drawer_slicedToArray((0,C.useReducer)(reducer,{columns:(0,em.rY)(n)}),2),c=a[0],u=a[1],m=c.columns.every(function(e){return!1!==e.isVisible}),f=(0,C.useCallback)(function(){var e=!m;u({type:ek,payload:c.columns.map(function(n){return n.isPinned?n:column_settings_drawer_objectSpread(column_settings_drawer_objectSpread({},n),{},{isVisible:e})})})},[m,c.columns]);(0,C.useEffect)(function(){u({type:ek,payload:n})},[n]);var g=(0,C.useCallback)(function(){u({type:ek,payload:eD()(c.columns,function(e){return t.indexOf(e.id)},["asc"]).map(function(e){var n=t.indexOf(e.id)>=0;return e.isVisible=n,e})})},[t,c.columns]),h=(0,C.useCallback)(function(){(0,em.zU)(o)(c.columns),(0,em.zU)(l)()},[l,o,c.columns]),p=column_settings_drawer_slicedToArray((0,C.useState)(null),2),b=p[0],y=p[1],x=(0,Z.Dy)((0,Z.VT)(Z.MA),(0,Z.VT)(Z.we),(0,Z.VT)(Z.Lg,{coordinateGetter:V.is})),renderColumn=function(e){return C.createElement(column_settings_drawer_SortableItem,{id:e.id},function(n){var t=n.attributes,o=n.isDragging,r=n.listeners,l=n.setNodeRef,a=n.setActivatorNodeRef,s=n.transform,m=n.transition,f={};return e.isPinned||(f={_hover:{backgroundColor:o?"gray:70":i.background.highlighted},opacity:o?.4:void 0,transform:W.ux.Translate.toString(s),transition:m,zIndex:o?"modal":void 0}),C.createElement(d.Z,{ref:l,sx:f},C.createElement(_.Z,{alignItems:"center",py:"2x"},C.createElement(_.Z,{sx:{"*:hover > &":{opacity:1},opacity:0,minWidth:"4x",px:"1x"}},!e.isPinned&&C.createElement(e_,column_settings_drawer_extends({ref:a},t,r),C.createElement(icon_handle,null))),C.createElement(k.Z,{disabled:e.isPinned,checked:e.isVisible,onChange:function(n){var t=n.target.checked;u({type:ek,payload:c.columns.map(function(n){return n.id!==e.id?n:column_settings_drawer_objectSpread(column_settings_drawer_objectSpread({},n),{},{isVisible:t})})})},sx:{width:"100%"}},e.label)))})};return C.createElement(ex.Z,{autoFocus:!0,backdrop:!0,closeOnEsc:!0,closeOnOutsideClick:!0,returnFocusOnClose:!1,ensureFocus:!0,isClosable:!0,isOpen:r,onClose:l,size:"sm"},C.createElement(ew.Z,null),C.createElement(eT.Z,null,C.createElement(ev.Z,null,"Show/Hide Columns"),C.createElement(eC.Z,null,C.createElement(d.Z,{mb:"1x"},C.createElement(ed.Z,{variant:"secondary",onClick:g},"Reset to Default")),C.createElement(d.Z,{mb:"1x"},C.createElement(eS.Z,{onClick:f},m?"Clear all":"Select all")),C.createElement(Z.LB,{sensors:x,onDragStart:function(e){y(e.active.id)},onDragEnd:function(e){var n=e.active,t=e.over;if(t&&n.id!==(null==t?void 0:t.id)){var o,r=function(e){if(Array.isArray(e))return column_settings_drawer_arrayLikeToArray(e)}(o=c.columns)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||column_settings_drawer_unsupportedIterableToArray(o)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),l=r.findIndex(function(e){return e.id===n.id}),i=r.findIndex(function(e){return e.id===t.id});u({type:ek,payload:(0,V.Rp)(r,l,i)})}y(null)},onDragCancel:function(){y(null)}},C.createElement(V.Fo,{items:c.columns},C.createElement(_.Z,{sx:{flexDirection:"column",rowGap:"1x"}},c.columns.map(function(e){return C.createElement(C.Fragment,{key:e.id},renderColumn(e))}))),C.createElement(column_settings_drawer_SortableOverlay,null,(0,F.Rw)(b)?null:renderColumn(c.columns.find(function(e){return e.id===b}))))),C.createElement(eR.Z,null,C.createElement(X.Z,{templateColumns:"repeat(2, 1fr)",columnGap:"2x"},C.createElement(ed.Z,{variant:"primary",onClick:h},"Save"),C.createElement(ed.Z,{variant:"default",onClick:l},"Cancel")))))};function column_visibility_and_order_extends(){return(column_visibility_and_order_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function column_visibility_and_order_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function column_visibility_and_order_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?column_visibility_and_order_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):column_visibility_and_order_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function column_visibility_and_order_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return column_visibility_and_order_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return column_visibility_and_order_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_visibility_and_order_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var getTextWidth=function getTextWidth(e,n){var t=(getTextWidth.canvas||(getTextWidth.canvas=document.createElement("canvas"))).getContext("2d");return t.font=n,t.measureText(e).width||0},column_visibility_and_order=function(){var e=(0,eh.u)(),n=column_visibility_and_order_slicedToArray((0,s.Z)(),1)[0],t=["priority","policy","modifiedTime","modifiedBy"],o=column_visibility_and_order_slicedToArray((0,C.useState)(t),2),r=o[0],l=o[1],c=column_visibility_and_order_slicedToArray((0,C.useState)({priority:!0,policy:!0,modifiedTime:!0,modifiedBy:!0}),2),u=c[0],b=c[1],T=(0,eb.Z)(function(){return[{id:1,priority:1,policy:"Team Managers",modifiedTime:16258752e5,modifiedBy:"admin"},{id:2,priority:2,policy:"Marketing Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:3,priority:3,policy:"Sales Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:4,priority:4,policy:"Development Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:5,priority:5,policy:"IT Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:6,priority:null,policy:"Server policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"},{id:7,priority:null,policy:"Endpoint policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"}]}),S=(0,eb.Z)(function(){return[{id:"priority",header:"Priority",accessorKey:"priority",cell:function(e){var n=(0,e.getValue)();return null!=n?n:"-"},size:80,isPinned:!0},{id:"policy",header:"Policy",accessorKey:"policy",size:"auto",isPinned:!1},{id:"modifiedTime",header:"Last Modified",accessorKey:"modifiedTime",cell:function(e){var n=(0,e.getValue)(),t=new Date(n);return"Invalid Date"===t.toString()?"-":C.createElement(p.Z,null,t.toLocaleString())},size:"auto",isPinned:!1},{id:"modifiedBy",header:"Last Editor",accessorKey:"modifiedBy",size:"auto",isPinned:!1}]}),R=(0,i.b7)({data:T,columns:S,defaultColumn:{minSize:40},state:{columnOrder:r,columnVisibility:u},onColumnVisibilityChange:b,getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}}),z=column_visibility_and_order_slicedToArray((0,C.useState)(0),2),D=z[0],k=z[1];(0,C.useEffect)(function(){if(D){var n=[e.fontWeights.semibold,e.fontSizes.sm,e.fonts.base].join(" "),t=R.getAllColumns().filter(function(e){return"auto"!==e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize,l=o.size;if("number"==typeof l)return{id:t,size:l};if("string"==typeof l&&l.endsWith("%")){var i="string"==typeof o.header?getTextWidth(o.header,n):0;return{id:t,size:Math.max(D*parseFloat(l)/100,i+24,r)}}return{id:t,size:r}}),o=R.getAllColumns().filter(function(e){return"auto"===e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize;return{id:t,size:Math.max(("string"==typeof o.header?getTextWidth(o.header,n):0)+24,r)}}),r=t.reduce(function(e,n){return e+n.size},0),l=o.reduce(function(e,n){return e+n.size},0),i=D-r;if(0===o.length&&i>0){var a=i/t.length;t.forEach(function(e){e.size=e.size+a}),i=0}o.length>0&&i>l&&o.forEach(function(e,n){e.size=Math.max(i/(o.length-n),e.size),i-=e.size});for(var c={},s=0;s<t.length;s++){var d=t[s];c[d.id]=d.size}for(var u=0;u<o.length;u++){var m=o[u];c[m.id]=m.size}R.setColumnSizing(c)}},[S,R,D,e]);var j=column_visibility_and_order_slicedToArray((0,C.useState)(!1),2),E=j[0],A=j[1],I=R.getState().columnOrder.map(function(e){var n=R.getColumn(e);return{id:e,label:n.columnDef.header,isPinned:n.columnDef.isPinned,isVisible:R.getState().columnVisibility[e]}}),O=(0,C.useCallback)(function(e){var n=e.map(function(e){return e.id}),t=e.reduce(function(e,n){return e[n.id]=n.isVisible,e},{});l(n),b(t)},[l]);return C.createElement(C.Fragment,null,C.createElement(column_settings_drawer,{columns:I,defaultColumnOrder:t,onUpdateColumns:O,isOpen:E,onClose:function(){return A(!1)}}),C.createElement(_.Z,{justifyContent:"flex-end",mb:"4x"},C.createElement(ed.Z,{variant:"secondary",onClick:function(){return A(!0)}},C.createElement(ep.Z,null),C.createElement(P.Z,{width:"2x"}),"Customize Columns")),C.createElement(d.Z,null,C.createElement(ey.ZP,{disableHeight:!0,onResize:function(e){var n=e.width;D!==n&&k(n)}},function(e){var t=e.width;return C.createElement(m.Z,{layout:"flexbox",sx:{visibility:v().isEmpty(R.getState().columnSizing)?"hidden":"visible",width:t}},C.createElement(f.Z,null,R.getHeaderGroups().map(function(e){return C.createElement(g.Z,{key:e.id},e.headers.map(function(e){var n=column_visibility_and_order_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return C.createElement(h.Z,column_visibility_and_order_extends({key:e.id},n),e.isPlaceholder?null:C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),C.createElement(y.Z,null,R.getRowModel().rows.map(function(e){return C.createElement(x.Z,{key:e.id,"data-selected":(0,L.PB)(e.getIsSelected()),_hover:{backgroundColor:n.background.highlighted},_selected:{backgroundColor:n.background.selected}},e.getVisibleCells().map(function(e){var n=column_visibility_and_order_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return C.createElement(w.Z,column_visibility_and_order_extends({key:e.id},n),C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))})))})))},eP=t(61619);function column_visibility_extends(){return(column_visibility_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function column_visibility_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function column_visibility_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?column_visibility_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):column_visibility_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function column_visibility_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return column_visibility_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return column_visibility_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_visibility_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var ej=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],column_visibility=function(){var e=column_visibility_slicedToArray((0,s.Z)(),1)[0],n=column_visibility_slicedToArray((0,C.useState)({}),2),t=n[0],o=n[1],r=(0,C.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),l=(0,i.b7)({data:ej,columns:r,defaultColumn:{minSize:40},state:{columnVisibility:t},onColumnVisibilityChange:o,getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}});return C.createElement(C.Fragment,null,C.createElement(d.Z,{mb:"4x",px:"3x"},C.createElement(_.Z,{display:"inline-flex",flexDirection:"column"},C.createElement(k.Z,{checked:l.getIsAllColumnsVisible(),indeterminate:l.getIsSomeColumnsVisible()&&!l.getIsAllColumnsVisible(),onChange:l.getToggleAllColumnsVisibilityHandler()},"Toggle All"),C.createElement(eo.Z,{my:"2x"}),C.createElement(eP.Z,{spacing:"1x"},l.getAllLeafColumns().map(function(e){return C.createElement(C.Fragment,{key:e.id},C.createElement(k.Z,{checked:e.getIsVisible(),onChange:e.getToggleVisibilityHandler()},e.columnDef.header))})))),C.createElement(m.Z,{layout:"flexbox"},C.createElement(f.Z,null,l.getHeaderGroups().map(function(e){return C.createElement(g.Z,{key:e.id},e.headers.map(function(e){var n=column_visibility_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return C.createElement(h.Z,column_visibility_extends({key:e.id},n),e.isPlaceholder?null:C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),C.createElement(y.Z,null,l.getRowModel().rows.map(function(n){return C.createElement(x.Z,{key:n.id,"data-selected":(0,L.PB)(n.getIsSelected()),_hover:{backgroundColor:e.background.highlighted},_selected:{backgroundColor:e.background.selected}},n.getVisibleCells().map(function(e){var n=column_visibility_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return C.createElement(w.Z,column_visibility_extends({key:e.id},n),C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))}))))},eE=t(10636);function column_resizing_extends(){return(column_resizing_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function column_resizing_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function column_resizing_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?column_resizing_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):column_resizing_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function column_resizing_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return column_resizing_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return column_resizing_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_resizing_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var eA=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],column_resizing=function(){var e=column_resizing_slicedToArray((0,z.Z)(),1)[0],n=column_resizing_slicedToArray((0,s.Z)(),1)[0],t=column_resizing_slicedToArray((0,C.useState)("onChange"),2),o=t[0],r=t[1],l=(0,C.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",enableResizing:!0,size:240},{header:"Affected Devices",accessorKey:"affectedDevices",enableResizing:!0,size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",enableResizing:!0,size:150,style:{textAlign:"right"}}]},[]),c=(0,C.useRef)(),u=(0,i.b7)({data:eA,columns:l,defaultColumn:{minSize:40},columnResizeMode:o,getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}});return C.createElement(C.Fragment,null,C.createElement(d.Z,{mb:"4x",px:"3x"},C.createElement(er.Z,null,C.createElement(el.Z,{variant:"secondary"},"Resize: ",o),C.createElement(ei.Z,{onClick:function(e){r(e.target.value)},width:"max-content"},C.createElement(ea.Z,{value:"onChange"},"Resize: onChange"),C.createElement(ea.Z,{value:"onEnd"},"Resize: onEnd")))),C.createElement(m.Z,{ref:c,layout:"flexbox",variant:"outline"},C.createElement(f.Z,null,u.getHeaderGroups().map(function(n){return C.createElement(g.Z,{key:n.id},n.headers.map(function(n){var t,r,l,a=column_resizing_objectSpread({position:"relative",minWidth:n.column.columnDef.minSize,width:n.getSize()},n.column.columnDef.style),s=u.getState().columnSizingInfo,d=s.isResizingColumn===n.column.id,m=null!==(r=null===(l=c.current)||void 0===l?void 0:l.clientHeight)&&void 0!==r?r:"100%",f=(t=({dark:"gray:50",light:"gray:50"})[e],{position:"absolute",top:-1,right:-1*(d?5:8),height:d?m:36,zIndex:1,borderLeft:1,borderLeftColor:d?t:({dark:"gray:70",light:"gray:30"})[e],_hover:{borderLeftColor:t},transform:"onEnd"===o&&d?"translateX(".concat(s.deltaOffset,"px)"):void 0});return C.createElement(h.Z,column_resizing_extends({key:n.id},a),n.isPlaceholder?null:C.createElement(p.Z,null,(0,i.ie)(n.column.columnDef.header,n.getContext())),!1!==n.column.columnDef.enableResizing&&C.createElement(eE.Z,{sx:f,onMouseDown:n.getResizeHandler(),onTouchStart:n.getResizeHandler(),onResize:function(e){e.clientX,e.clientY},onResizeStart:function(e){e.clientX,e.clientY},onResizeEnd:function(e){e.clientX,e.clientY}}))}))})),C.createElement(y.Z,null,u.getRowModel().rows.map(function(e){return C.createElement(x.Z,{key:e.id,_hover:{backgroundColor:n.background.highlighted}},e.getVisibleCells().map(function(e){var n=column_resizing_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return C.createElement(w.Z,column_resizing_extends({key:e.id},n),C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))}))))},eI=t(88366);function column_ordering_dnd_extends(){return(column_ordering_dnd_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function column_ordering_dnd_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function column_ordering_dnd_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?column_ordering_dnd_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):column_ordering_dnd_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function column_ordering_dnd_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return column_ordering_dnd_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return column_ordering_dnd_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_ordering_dnd_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var column_ordering_dnd_getTextWidth=function getTextWidth(e,n){var t=(getTextWidth.canvas||(getTextWidth.canvas=document.createElement("canvas"))).getContext("2d");return t.font=n,t.measureText(e).width||0},column_ordering_dnd_SortableItem=function(e){var n=e.children,t=e.id,o=(0,V.nB)({id:t});return n({attributes:o.attributes,isDragging:o.isDragging,listeners:o.listeners,setActivatorNodeRef:o.setActivatorNodeRef,setNodeRef:o.setNodeRef,transform:o.transform,transition:o.transition})},column_ordering_dnd=function(){var e=(0,eh.u)(),n=column_ordering_dnd_slicedToArray((0,s.Z)(),1)[0],t=column_ordering_dnd_slicedToArray((0,C.useState)(["priority","policy","modifiedTime","modifiedBy"]),2),o=t[0],r=t[1],l=column_ordering_dnd_slicedToArray((0,C.useState)({priority:!0,policy:!0,modifiedTime:!0,modifiedBy:!0}),2),c=l[0],d=l[1],u=(0,eb.Z)(function(){return[{id:1,priority:1,policy:"Team Managers",modifiedTime:16258752e5,modifiedBy:"admin"},{id:2,priority:2,policy:"Marketing Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:3,priority:3,policy:"Sales Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:4,priority:4,policy:"Development Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:5,priority:5,policy:"IT Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:6,priority:null,policy:"Server policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"},{id:7,priority:null,policy:"Endpoint policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"}]}),b=(0,eb.Z)(function(){return[{id:"priority",header:"Priority",accessorKey:"priority",cell:function(e){var n=(0,e.getValue)();return null!=n?n:"-"},size:80,isPinned:!0},{id:"policy",header:"Policy",accessorKey:"policy",size:"auto",isPinned:!1},{id:"modifiedTime",header:"Last Modified",accessorKey:"modifiedTime",cell:function(e){var n=(0,e.getValue)(),t=new Date(n);return"Invalid Date"===t.toString()?"-":C.createElement(p.Z,null,t.toLocaleString())},size:"auto",isPinned:!1},{id:"modifiedBy",header:"Last Editor",accessorKey:"modifiedBy",size:"auto",isPinned:!1}]}),T=(0,i.b7)({data:u,columns:b,defaultColumn:{minSize:40},state:{columnOrder:o,columnVisibility:c},onColumnVisibilityChange:d,getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}}),S=column_ordering_dnd_slicedToArray((0,C.useState)(0),2),R=S[0],z=S[1];(0,C.useEffect)(function(){if(R){var n=[e.fontWeights.semibold,e.fontSizes.sm,e.fonts.base].join(" "),t=T.getAllColumns().filter(function(e){return"auto"!==e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize,l=o.size;if("number"==typeof l)return{id:t,size:l};if("string"==typeof l&&l.endsWith("%")){var i="string"==typeof o.header?column_ordering_dnd_getTextWidth(o.header,n):0;return{id:t,size:Math.max(R*parseFloat(l)/100,i+24,r)}}return{id:t,size:r}}),o=T.getAllColumns().filter(function(e){return"auto"===e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize;return{id:t,size:Math.max(("string"==typeof o.header?column_ordering_dnd_getTextWidth(o.header,n):0)+24,r)}}),r=t.reduce(function(e,n){return e+n.size},0),l=o.reduce(function(e,n){return e+n.size},0),i=R-r;if(0===o.length&&i>0){var a=i/t.length;t.forEach(function(e){e.size=e.size+a}),i=0}o.length>0&&i>l&&o.forEach(function(e,n){e.size=Math.max(i/(o.length-n),e.size),i-=e.size});for(var c={},s=0;s<t.length;s++){var d=t[s];c[d.id]=d.size}for(var u=0;u<o.length;u++){var m=o[u];c[m.id]=m.size}T.setColumnSizing(c)}},[b,T,R,e]);var D=T.getState().columnOrder.map(function(e){var n=T.getColumn(e);return{id:e,label:n.columnDef.header,isPinned:n.columnDef.isPinned,isVisible:T.getState().columnVisibility[e]}}),k=(0,C.useCallback)(function(e){var n=e.active,t=e.over;n&&t&&n.id!==t.id&&r(function(e){var o=e.indexOf(n.id),r=e.indexOf(t.id);return(0,V.Rp)(e,o,r)})},[]),_=(0,Z.Dy)((0,Z.VT)(Z.MA),(0,Z.VT)(Z.LO),(0,Z.VT)(Z.Lg,{coordinateGetter:V.is}));return C.createElement(Z.LB,{collisionDetection:Z.pE,modifiers:[eI.K7],onDragEnd:k,sensors:_},C.createElement(ey.ZP,{disableHeight:!0,onResize:function(e){var n=e.width;R!==n&&z(n)}},function(e){var t=e.width;return C.createElement(m.Z,{layout:"flexbox",sx:{visibility:v().isEmpty(T.getState().columnSizing)?"hidden":"visible",width:t}},C.createElement(f.Z,null,T.getHeaderGroups().map(function(e){return C.createElement(g.Z,{key:e.id},C.createElement(V.Fo,{items:D,strategy:V.PG},e.headers.map(function(e){return C.createElement(column_ordering_dnd_SortableItem,{key:e.id,id:e.column.id},function(n){var t=n.isDragging,o=(n.setActivatorNodeRef,n.setNodeRef),r=n.attributes,l=n.listeners,a=n.transform,c=n.transition,s=e.column.columnDef.isPinned,d=[column_ordering_dnd_objectSpread({position:"relative",minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style),!s&&{cursor:t?"move":void 0,opacity:t?.4:void 0,transform:W.ux.Translate.toString(a),transition:c,zIndex:t?1:0}];return C.createElement(h.Z,column_ordering_dnd_extends({ref:o,sx:d},s?void 0:r,s?void 0:l),e.isPlaceholder?null:C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))})})))})),C.createElement(y.Z,null,T.getRowModel().rows.map(function(e){return C.createElement(x.Z,{key:e.id,"data-selected":(0,L.PB)(e.getIsSelected()),_hover:{backgroundColor:n.background.highlighted},_selected:{backgroundColor:n.background.selected}},C.createElement(V.Fo,{items:D,strategy:V.PG},e.getVisibleCells().map(function(e){return C.createElement(column_ordering_dnd_SortableItem,{key:e.id,id:e.column.id},function(n){var t=n.isDragging,o=n.setNodeRef,r=n.transform,l=n.transition,a=e.column.columnDef.isPinned,c=column_ordering_dnd_objectSpread({position:"relative",minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style),s={};return a||(s={opacity:t?.4:void 0,transform:W.ux.Translate.toString(r),transition:l,zIndex:t?1:0}),C.createElement(w.Z,column_ordering_dnd_extends({ref:o},c,s),C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))})})))})))}))};function column_auto_sizing_extends(){return(column_auto_sizing_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function column_auto_sizing_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function column_auto_sizing_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?column_auto_sizing_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):column_auto_sizing_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function column_auto_sizing_toConsumableArray(e){return function(e){if(Array.isArray(e))return column_auto_sizing_arrayLikeToArray(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||column_auto_sizing_unsupportedIterableToArray(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_auto_sizing_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,n)||column_auto_sizing_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_auto_sizing_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return column_auto_sizing_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return column_auto_sizing_arrayLikeToArray(e,n)}}function column_auto_sizing_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var eO=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],column_auto_sizing_getTextWidth=function getTextWidth(e,n){var t=(getTextWidth.canvas||(getTextWidth.canvas=document.createElement("canvas"))).getContext("2d");return t.font=n,t.measureText(e).width||0},column_auto_sizing=function(){var e=(0,eh.u)(),n=column_auto_sizing_slicedToArray((0,s.Z)(),1)[0],t=column_auto_sizing_slicedToArray((0,C.useState)([{header:"Event Type",accessorKey:"eventType",size:"auto"},{header:"Affected Devices",accessorKey:"affectedDevices",size:"25%"},{header:"Detections",accessorKey:"detections",size:150}]),2),o=t[0],r=t[1],l=(0,i.b7)({data:eO,columns:o,defaultColumn:{minSize:40},getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}}),c=column_auto_sizing_slicedToArray((0,C.useState)(0),2),u=c[0],b=c[1];return(0,C.useEffect)(function(){if(u){var n=[e.fontWeights.semibold,e.fontSizes.sm,e.fonts.base].join(" "),t=l.getAllColumns().filter(function(e){return"auto"!==e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize,l=o.size;if("number"==typeof l)return{id:t,size:l};if("string"==typeof l&&l.endsWith("%")){var i="string"==typeof o.header?column_auto_sizing_getTextWidth(o.header,n):0;return{id:t,size:Math.max(u*parseFloat(l)/100,i+24,r)}}return{id:t,size:r}}),o=l.getAllColumns().filter(function(e){return"auto"===e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize;return{id:t,size:Math.max(("string"==typeof o.header?column_auto_sizing_getTextWidth(o.header,n):0)+24,r)}}),r=t.reduce(function(e,n){return e+n.size},0),i=o.reduce(function(e,n){return e+n.size},0),a=u-r;if(0===o.length&&a>0){var c=a/t.length;t.forEach(function(e){e.size=e.size+c}),a=0}o.length>0&&a>i&&o.forEach(function(e,n){e.size=Math.max(a/(o.length-n),e.size),a-=e.size});for(var s={},d=0;d<t.length;d++){var m=t[d];s[m.id]=m.size}for(var f=0;f<o.length;f++){var g=o[f];s[g.id]=g.size}l.setColumnSizing(s)}},[o,l,u,e]),C.createElement(d.Z,{width:"100%"},o.map(function(e,n){return C.createElement(d.Z,{mb:"4x",key:n},C.createElement(d.Z,{mb:"2x"},C.createElement(Y.Z,null,e.header)),C.createElement(es.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},["auto","25%",150].map(function(e){return C.createElement(ed.Z,{key:e,selected:e===o[n].size,onClick:function(){r([].concat(column_auto_sizing_toConsumableArray(o.slice(0,n)),[column_auto_sizing_objectSpread(column_auto_sizing_objectSpread({},o[n]),{},{size:e})],column_auto_sizing_toConsumableArray(o.slice(n+1))))},minWidth:"15x"},e)})))}),C.createElement(ey.ZP,{disableHeight:!0,onResize:function(e){var n=e.width;u!==n&&b(n)}},function(e){var t=e.width;return C.createElement(m.Z,{layout:"flexbox",variant:"default",sx:{visibility:v().isEmpty(l.getState().columnSizing)?"hidden":"visible",width:t}},C.createElement(f.Z,null,l.getHeaderGroups().map(function(e){return C.createElement(g.Z,{key:e.id},e.headers.map(function(e){var n=column_auto_sizing_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return C.createElement(h.Z,column_auto_sizing_extends({key:e.id},n),e.isPlaceholder?null:C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),C.createElement(y.Z,null,l.getRowModel().rows.map(function(e){return C.createElement(x.Z,{key:e.id,_hover:{backgroundColor:n.background.highlighted}},e.getVisibleCells().map(function(e){var n=column_auto_sizing_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return C.createElement(w.Z,column_auto_sizing_extends({key:e.id},n),C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))})))}))};function basic_extends(){return(basic_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function basic_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function basic_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?basic_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):basic_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function basic_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var eH=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],basic=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,s.Z)())||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,1)||function(e,n){if(e){if("string"==typeof e)return basic_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return basic_arrayLikeToArray(e,n)}}(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],t=(0,C.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),o=(0,i.b7)({data:eH,columns:t,defaultColumn:{minSize:40},getCoreRowModel:(0,a.sC)(),getRowId:function(e,n){return e.id}});return C.createElement(m.Z,{layout:"flexbox"},C.createElement(f.Z,null,o.getHeaderGroups().map(function(e){return C.createElement(g.Z,{key:e.id},e.headers.map(function(e){var n=basic_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return C.createElement(h.Z,basic_extends({key:e.id},n),e.isPlaceholder?null:C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.header,e.getContext())))}))})),C.createElement(y.Z,null,o.getRowModel().rows.map(function(e){return C.createElement(x.Z,{key:e.id,_hover:{backgroundColor:n.background.highlighted}},e.getVisibleCells().map(function(e){var n=basic_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return C.createElement(w.Z,basic_extends({key:e.id},n),C.createElement(p.Z,null,(0,i.ie)(e.column.columnDef.cell,e.getContext())))}))})))};function usage_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function usage_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?usage_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):usage_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function usage_extends(){return(usage_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function usage_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],i=!0,a=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);i=!0);}catch(e){a=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return usage_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return usage_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function usage_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var useSelection=function(e){var n=usage_slicedToArray((0,C.useState)(e),2),t=n[0],o=n[1];return[t,function(e){return function(){return o(e)}}]},eB=[{id:"priority",header:"Priority",accessorKey:"priority",cell:function(e){var n;return null!==(n=e.priority)&&void 0!==n?n:"-"},size:80},{id:"policy",header:"Policy",accessorKey:"policy",size:240},{id:"modifiedTime",header:"Last Modified",cell:function(e){var n=new Date(e.modifiedTime);return C.createElement(p.Z,null,n.toLocaleString())},size:180},{id:"modifiedBy",header:"Last Editor",accessorKey:"modifiedBy",size:150}],eM=[{id:1,priority:1,policy:"Team Managers",modifiedTime:16258752e5,modifiedBy:"admin"},{id:2,priority:2,policy:"Marketing Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:3,priority:3,policy:"Sales Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:4,priority:4,policy:"Development Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:5,priority:5,policy:"IT Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:6,priority:null,policy:"Server policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"},{id:7,priority:null,policy:"Endpoint policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"}],FormGroup=function(e){return C.createElement(d.Z,usage_extends({mb:"4x"},e))},usage_ConditionalWrapper=function(e){var n=e.children,t=e.condition,o=e.wrapper;return t?o(n):n},usage=function(){var e=usage_slicedToArray((0,s.Z)(),1)[0],n=usage_slicedToArray((0,C.useReducer)(function(e){return!e},!1),2),t=n[0],o=n[1],r=usage_slicedToArray(useSelection("flexbox"),2),l=r[0],i=r[1],a=usage_slicedToArray(useSelection("default"),2),c=a[0],T=a[1],v=usage_slicedToArray(useSelection("md"),2),S=v[0],R=v[1],z=usage_slicedToArray((0,B.Z)(!0),2),j=z[0],E=z[1],A=usage_slicedToArray((0,B.Z)(!0),2),I=A[0],O=A[1],H=usage_slicedToArray((0,B.Z)(!0),2),M=H[0],Z=H[1],V=(0,C.useMemo)(function(){return eM.map(function(e,n){return{id:n,cells:eB.map(function(n,t){return{id:"".concat(t,"_").concat(n.id),column:n,row:e}}),row:e}})},[]),W=(0,C.useRef)(),onScrollTableBody=function(e){var n=null==W?void 0:W.current;if(n){var t=e.target.scrollLeft;n.scrollleft!==t&&(n.scrollLeft=t)}},F=M&&"table"!==l,G={},N={};return F&&(G={height:216},N={overflow:"hidden"}),C.createElement(C.Fragment,null,C.createElement(d.Z,{mb:"4x"},C.createElement(u.Z,{fontSize:"lg",lineHeight:"lg"},"Table props")),C.createElement(FormGroup,null,C.createElement(d.Z,{mb:"2x"},C.createElement(Y.Z,null,"layout")),C.createElement(es.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},["flexbox","table"].map(function(e){return C.createElement(ed.Z,{key:e,selected:e===l,onClick:(0,L.PP)(i(e),function(n){"table"===e&&Z(!1)}),minWidth:"15x"},e)}))),C.createElement(FormGroup,null,C.createElement(d.Z,{mb:"2x"},C.createElement(Y.Z,null,"variant")),C.createElement(es.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},["default","outline"].map(function(e){return C.createElement(ed.Z,{key:e,selected:e===c,onClick:T(e),minWidth:"15x"},e)}))),C.createElement(FormGroup,null,C.createElement(d.Z,{mb:"2x"},C.createElement(Y.Z,null,"size")),C.createElement(es.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},["sm","md","lg"].map(function(e){return C.createElement(ed.Z,{key:e,selected:e===S,onClick:R(e),minWidth:"15x"},e)}))),C.createElement(eo.Z,{mb:"4x"}),C.createElement(d.Z,{mb:"4x"},C.createElement(u.Z,{fontSize:"lg",lineHeight:"lg"},"Table composition")),C.createElement(FormGroup,null,C.createElement(Y.Z,{display:"flex",alignItems:"center"},C.createElement(k.Z,{checked:j,onChange:function(){return E()}}),C.createElement(P.Z,{width:"2x"}),C.createElement(u.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"TableHeader"))),C.createElement(FormGroup,null,C.createElement(Y.Z,{display:"flex",alignItems:"center"},C.createElement(k.Z,{checked:I,onChange:function(){return O()}}),C.createElement(P.Z,{width:"2x"}),C.createElement(u.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"TableBody"))),C.createElement(FormGroup,null,C.createElement(Y.Z,{display:"flex",alignItems:"center",mb:"3x"},C.createElement(k.Z,{checked:M,disabled:"table"===l,onChange:function(){Z(),o()}}),C.createElement(P.Z,{width:"2x"}),C.createElement(u.Z,{fontFamily:"mono",whiteSpace:"nowrap"},"TableScrollbar")),C.createElement(d.Z,{ml:"6x",mb:"4x"},C.createElement(u.Z,{mb:"2x",color:e.color.secondary},"Note: ",C.createElement(D.Z,null,"TableScrollbar")," is only supported when the ",C.createElement(D.Z,null,"layout")," prop is set to ",C.createElement(D.Z,null,"flexbox"),"."))),C.createElement(eo.Z,{mb:"4x"}),C.createElement(_.Z,{alignItems:"center",columnGap:"3x",minHeight:"5x"},C.createElement(m.Z,usage_extends({key:t,layout:l,variant:c,size:S},G),j&&C.createElement(f.Z,usage_extends({ref:W},N),C.createElement(g.Z,null,eB.map(function(e){var n=usage_objectSpread({flex:"none",width:e.size},e.style);return C.createElement(h.Z,usage_extends({key:e.id},n),C.createElement(p.Z,null,e.header))}))),I&&C.createElement(usage_ConditionalWrapper,{condition:F,wrapper:function(e){return C.createElement(b.Z,{height:"100%",overflow:"visible",onScroll:onScrollTableBody},e)}},C.createElement(y.Z,null,V.map(function(n){var t={_hover:{backgroundColor:e.background.highlighted}};return C.createElement(x.Z,usage_extends({key:n.id},t),n.cells.map(function(e,t){var o=usage_objectSpread({flex:"none",width:e.column.size},e.column.style);return C.createElement(w.Z,usage_extends({key:e.id},o),"function"==typeof e.column.cell?e.column.cell(n.row):C.createElement(p.Z,null,e.row[e.column.accessorKey]))}))}))),j&&!I&&C.createElement(y.Z,null,"flexbox"===l&&C.createElement(_.Z,{justifyContent:"center",px:"3x",py:"10x"},"No data to display"),"table"===l&&C.createElement(x.Z,null,C.createElement(w.Z,{colSpan:"4",px:0,py:0},C.createElement(u.Z,{px:"3x",py:"10x",textAlign:"center"},"No data to display")))))))};function _createMdxContent(e){var n=Object.assign({div:"div",h1:"h1",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",code:"code",p:"p",h3:"h3",ol:"ol",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,r.ah)(),e.components);return(0,o.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,o.jsx)(n.h1,{id:"table",children:"Table"}),"\n",(0,o.jsxs)(n.h2,{id:"import",children:["Import",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import {\n  Table,\n  TableHeader,\n  TableHeaderRow, // deprecated: use `TableRow` instead\n  TableHeaderCell, // deprecated: use `TableCell` instead\n  TableBody,\n  TableFooter,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n} from '@tonic-ui/react';\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"usage",children:["Usage",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:usage,file:{data:"import {\n  Box,\n  Button, \n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { callAll } from '@tonic-ui/utils';\nimport React, { useMemo, useReducer, useRef, useState } from 'react';\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst columns = [\n  {\n    id: 'priority',\n    header: 'Priority',\n    accessorKey: 'priority',\n    cell: (row) => row.priority ?? '-',\n    size: 80,\n  },\n  {\n    id: 'policy',\n    header: 'Policy',\n    accessorKey: 'policy',\n    size: 240,\n  },\n  {\n    id: 'modifiedTime',\n    header: 'Last Modified',\n    cell: (row) => {\n      const mtime = new Date(row.modifiedTime);\n      return (\n        <Truncate>\n          {mtime.toLocaleString()}\n        </Truncate>\n      );\n    },\n    size: 180,\n  },\n  {\n    id: 'modifiedBy',\n    header: 'Last Editor',\n    accessorKey: 'modifiedBy',\n    size: 150,\n  },\n];\n\nconst data = [\n  { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n];\n\nconst FormGroup = (props) => (\n  <Box mb=\"4x\" {...props} />\n);\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [updateKey, forceUpdate] = useReducer((value) => !value, false);\n  const [layout, changeLayoutBy] = useSelection('flexbox');\n  const [variant, changeVariantBy] = useSelection('default');\n  const [size, changeSizeBy] = useSelection('md');\n  const [isTableHeaderVisible, toggleIsTableHeaderVisible] = useToggle(true);\n  const [isTableBodyVisible, toggleIsTableBodyVisible] = useToggle(true);\n  const [isTableScrollbarVisible, toggleIsTableScrollbarVisible] = useToggle(true);\n  const rows = useMemo(() => {\n    return data.map((row, rowIndex) => {\n      return {\n        id: rowIndex,\n        cells: columns.map((column, columnIndex) => {\n          return {\n            id: `${columnIndex}_${column.id}`,\n            column,\n            row,\n          };\n        }),\n        row,\n      };\n    });\n  }, []);\n  const tableHeaderRef = useRef();\n  const onScrollTableBody = (e) => {\n    const tableHeader = tableHeaderRef?.current;\n    if (!tableHeader) {\n      return;\n    }\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    const scrollLeft = e.target.scrollLeft;\n    if (tableHeader.scrollleft !== scrollLeft) {\n      tableHeader.scrollLeft = scrollLeft;\n    }\n  };\n  const isTableScrollingEnabled = isTableScrollbarVisible && layout !== 'table';\n  let tableStyleProps = {};\n  let tableHeaderStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const cellHeight = 36;\n    const headerHeight = 36;\n    const rowsToDisplay = 5;\n\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight,\n      // Uncomment the following line to specify the width and enable horizontal scrollbar\n      // width: 200,\n    };\n\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    tableHeaderStyleProps = {\n      overflow: 'hidden',\n    };\n  }\n\n  return (\n    <>\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            layout\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          sx={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['flexbox', 'table'].map(value => (\n            <Button\n              key={value}\n              selected={value === layout}\n              onClick={callAll(\n                changeLayoutBy(value),\n                (event) => {\n                  if (value === 'table') {\n                    toggleIsTableScrollbarVisible(false);\n                  }\n                },\n              )}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            variant\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          sx={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['default', 'outline'].map(value => (\n            <Button\n              key={value}\n              selected={value === variant}\n              onClick={changeVariantBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          sx={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['sm', 'md', 'lg'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableHeaderVisible}\n            onChange={() => toggleIsTableHeaderVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableBodyVisible}\n            onChange={() => toggleIsTableBodyVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\" mb=\"3x\">\n          <Checkbox\n            checked={isTableScrollbarVisible}\n            disabled={layout === 'table'}\n            onChange={() => {\n              toggleIsTableScrollbarVisible();\n\n              // Force update to recalculate table width and height\n              forceUpdate();\n            }}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableScrollbar</Text>\n        </TextLabel>\n        <Box ml=\"6x\" mb=\"4x\">\n          <Text mb=\"2x\" color={colorStyle.color.secondary}>\n            Note: <Code>TableScrollbar</Code> is only supported when the <Code>layout</Code> prop is set to <Code>flexbox</Code>.\n          </Text>\n        </Box>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Flex alignItems=\"center\" columnGap=\"3x\" minHeight=\"5x\">\n        <Table\n          key={updateKey}\n          layout={layout}\n          variant={variant}\n          size={size}\n          {...tableStyleProps}\n        >\n          {isTableHeaderVisible && (\n            <TableHeader\n              ref={tableHeaderRef}\n              {...tableHeaderStyleProps}\n            >\n              <TableHeaderRow>\n                {columns.map(column => {\n                  const styleProps = {\n                    flex: 'none',\n                    width: column.size,\n                    ...column.style,\n                  };\n                  return (\n                    <TableHeaderCell key={column.id} {...styleProps}>\n                      <Truncate>\n                        {column.header}\n                      </Truncate>\n                    </TableHeaderCell>\n                  );\n                })}\n              </TableHeaderRow>\n            </TableHeader>\n          )}\n          {isTableBodyVisible && (\n            <ConditionalWrapper\n              condition={isTableScrollingEnabled}\n              wrapper={children => (\n                <TableScrollbar\n                  height=\"100%\"\n                  overflow=\"visible\" // Make the scrollbar visible\n                  onScroll={onScrollTableBody} // To sync the scroll position of the table header and table body for horizontal scrolling\n                >\n                  {children}\n                </TableScrollbar>\n              )}\n            >\n              <TableBody>\n                {rows.map(row => {\n                  const styleProps = {\n                    _hover: {\n                      backgroundColor: colorStyle.background.highlighted,\n                    },\n                  };\n                  return (\n                    <TableRow key={row.id} {...styleProps}>\n                      {row.cells.map((cell, cellIndex) => {\n                        const styleProps = {\n                          flex: 'none',\n                          width: cell.column.size,\n                          ...cell.column.style,\n                        };\n                        return (\n                          <TableCell key={cell.id} {...styleProps}>\n                            {typeof cell.column.cell === 'function'\n                              ? cell.column.cell(row.row)\n                              : <Truncate>{cell.row[cell.column.accessorKey]}</Truncate>\n                            }\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </ConditionalWrapper>\n          )}\n          {(isTableHeaderVisible && !isTableBodyVisible) && (\n            <TableBody>\n              {layout === 'flexbox' && (\n                <Flex justifyContent=\"center\" px=\"3x\" py=\"10x\">\n                  No data to display\n                </Flex>\n              )}\n              {layout === 'table' && (\n                <TableRow>\n                  <TableCell colSpan=\"4\" px={0} py={0}>\n                    <Text px=\"3x\" py=\"10x\" textAlign=\"center\">\n                      No data to display\n                    </Text>\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          )}\n        </Table>\n      </Flex>\n    </>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Box,\n  Button, \n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { callAll } from '@tonic-ui/utils';\nimport React, { useMemo, useReducer, useRef, useState } from 'react';\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst columns = [\n  {\n    id: 'priority',\n    header: 'Priority',\n    accessorKey: 'priority',\n    cell: (row) => row.priority ?? '-',\n    size: 80,\n  },\n  {\n    id: 'policy',\n    header: 'Policy',\n    accessorKey: 'policy',\n    size: 240,\n  },\n  {\n    id: 'modifiedTime',\n    header: 'Last Modified',\n    cell: (row) => {\n      const mtime = new Date(row.modifiedTime);\n      return (\n        <Truncate>\n          {mtime.toLocaleString()}\n        </Truncate>\n      );\n    },\n    size: 180,\n  },\n  {\n    id: 'modifiedBy',\n    header: 'Last Editor',\n    accessorKey: 'modifiedBy',\n    size: 150,\n  },\n];\n\nconst data = [\n  { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n];\n\nconst FormGroup = (props) => (\n  <Box mb=\"4x\" {...props} />\n);\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [updateKey, forceUpdate] = useReducer((value) => !value, false);\n  const [layout, changeLayoutBy] = useSelection('flexbox');\n  const [variant, changeVariantBy] = useSelection('default');\n  const [size, changeSizeBy] = useSelection('md');\n  const [isTableHeaderVisible, toggleIsTableHeaderVisible] = useToggle(true);\n  const [isTableBodyVisible, toggleIsTableBodyVisible] = useToggle(true);\n  const [isTableScrollbarVisible, toggleIsTableScrollbarVisible] = useToggle(true);\n  const rows = useMemo(() => {\n    return data.map((row, rowIndex) => {\n      return {\n        id: rowIndex,\n        cells: columns.map((column, columnIndex) => {\n          return {\n            id: `${columnIndex}_${column.id}`,\n            column,\n            row,\n          };\n        }),\n        row,\n      };\n    });\n  }, []);\n  const tableHeaderRef = useRef();\n  const onScrollTableBody = (e) => {\n    const tableHeader = tableHeaderRef?.current;\n    if (!tableHeader) {\n      return;\n    }\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    const scrollLeft = e.target.scrollLeft;\n    if (tableHeader.scrollleft !== scrollLeft) {\n      tableHeader.scrollLeft = scrollLeft;\n    }\n  };\n  const isTableScrollingEnabled = isTableScrollbarVisible && layout !== 'table';\n  let tableStyleProps = {};\n  let tableHeaderStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const cellHeight = 36;\n    const headerHeight = 36;\n    const rowsToDisplay = 5;\n\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight,\n      // Uncomment the following line to specify the width and enable horizontal scrollbar\n      // width: 200,\n    };\n\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    tableHeaderStyleProps = {\n      overflow: 'hidden',\n    };\n  }\n\n  return (\n    <>\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            layout\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          sx={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['flexbox', 'table'].map(value => (\n            <Button\n              key={value}\n              selected={value === layout}\n              onClick={callAll(\n                changeLayoutBy(value),\n                (event) => {\n                  if (value === 'table') {\n                    toggleIsTableScrollbarVisible(false);\n                  }\n                },\n              )}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            variant\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          sx={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['default', 'outline'].map(value => (\n            <Button\n              key={value}\n              selected={value === variant}\n              onClick={changeVariantBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          sx={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['sm', 'md', 'lg'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableHeaderVisible}\n            onChange={() => toggleIsTableHeaderVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableBodyVisible}\n            onChange={() => toggleIsTableBodyVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\" mb=\"3x\">\n          <Checkbox\n            checked={isTableScrollbarVisible}\n            disabled={layout === 'table'}\n            onChange={() => {\n              toggleIsTableScrollbarVisible();\n\n              // Force update to recalculate table width and height\n              forceUpdate();\n            }}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableScrollbar</Text>\n        </TextLabel>\n        <Box ml=\"6x\" mb=\"4x\">\n          <Text mb=\"2x\" color={colorStyle.color.secondary}>\n            Note: <Code>TableScrollbar</Code> is only supported when the <Code>layout</Code> prop is set to <Code>flexbox</Code>.\n          </Text>\n        </Box>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Flex alignItems=\"center\" columnGap=\"3x\" minHeight=\"5x\">\n        <Table\n          key={updateKey}\n          layout={layout}\n          variant={variant}\n          size={size}\n          {...tableStyleProps}\n        >\n          {isTableHeaderVisible && (\n            <TableHeader\n              ref={tableHeaderRef}\n              {...tableHeaderStyleProps}\n            >\n              <TableHeaderRow>\n                {columns.map(column => {\n                  const styleProps = {\n                    flex: 'none',\n                    width: column.size,\n                    ...column.style,\n                  };\n                  return (\n                    <TableHeaderCell key={column.id} {...styleProps}>\n                      <Truncate>\n                        {column.header}\n                      </Truncate>\n                    </TableHeaderCell>\n                  );\n                })}\n              </TableHeaderRow>\n            </TableHeader>\n          )}\n          {isTableBodyVisible && (\n            <ConditionalWrapper\n              condition={isTableScrollingEnabled}\n              wrapper={children => (\n                <TableScrollbar\n                  height=\"100%\"\n                  overflow=\"visible\" // Make the scrollbar visible\n                  onScroll={onScrollTableBody} // To sync the scroll position of the table header and table body for horizontal scrolling\n                >\n                  {children}\n                </TableScrollbar>\n              )}\n            >\n              <TableBody>\n                {rows.map(row => {\n                  const styleProps = {\n                    _hover: {\n                      backgroundColor: colorStyle.background.highlighted,\n                    },\n                  };\n                  return (\n                    <TableRow key={row.id} {...styleProps}>\n                      {row.cells.map((cell, cellIndex) => {\n                        const styleProps = {\n                          flex: 'none',\n                          width: cell.column.size,\n                          ...cell.column.style,\n                        };\n                        return (\n                          <TableCell key={cell.id} {...styleProps}>\n                            {typeof cell.column.cell === 'function'\n                              ? cell.column.cell(row.row)\n                              : <Truncate>{cell.row[cell.column.accessorKey]}</Truncate>\n                            }\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </ConditionalWrapper>\n          )}\n          {(isTableHeaderVisible && !isTableBodyVisible) && (\n            <TableBody>\n              {layout === 'flexbox' && (\n                <Flex justifyContent=\"center\" px=\"3x\" py=\"10x\">\n                  No data to display\n                </Flex>\n              )}\n              {layout === 'table' && (\n                <TableRow>\n                  <TableCell colSpan=\"4\" px={0} py={0}>\n                    <Text px=\"3x\" py=\"10x\" textAlign=\"center\">\n                      No data to display\n                    </Text>\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          )}\n        </Table>\n      </Flex>\n    </>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h2,{id:"examples",children:["Examples",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#examples",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["In this section, we'll explore how to use the ",(0,o.jsx)(n.code,{children:"Table"})," component and various Hooks provided by ",(0,o.jsx)(n.code,{children:"react-table"})," to create tables with features such as sorting, filtering, pagination, and selection."]}),"\n",(0,o.jsxs)(n.p,{children:["To get started with ",(0,o.jsx)(n.code,{children:"react-table"}),", visit ",(0,o.jsx)(n.a,{href:"https://github.com/TanStack/table",children:"https://github.com/TanStack/table"})," to learn more."]}),"\n",(0,o.jsxs)(n.h3,{id:"basic",children:["Basic",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:basic,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  // If you want to manage your own state and override the state manager, you can uncomment and modify the following code:\n  /*\n  const [state, setState] = React.useState(table.initialState);\n  table.setOptions(prevOptions => ({\n    ...prevOptions,\n    state,\n    onStateChange: setState,\n  }));\n  */\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableHeaderRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableHeaderCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableHeaderCell>\n              );\n            })}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <TableRow\n            key={row.id}\n            _hover={{\n              backgroundColor: colorStyle.background.highlighted,\n            }}\n          >\n            {row.getVisibleCells().map(cell => {\n              const styleProps = {\n                minWidth: cell.column.columnDef.minSize,\n                width: cell.column.getSize(),\n                ...cell.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={cell.id}\n                  {...styleProps}\n                >\n                  <Truncate>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Truncate>\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  // If you want to manage your own state and override the state manager, you can uncomment and modify the following code:\n  /*\n  const [state, setState] = React.useState(table.initialState);\n  table.setOptions(prevOptions => ({\n    ...prevOptions,\n    state,\n    onStateChange: setState,\n  }));\n  */\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableHeaderRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableHeaderCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableHeaderCell>\n              );\n            })}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <TableRow\n            key={row.id}\n            _hover={{\n              backgroundColor: colorStyle.background.highlighted,\n            }}\n          >\n            {row.getVisibleCells().map(cell => {\n              const styleProps = {\n                minWidth: cell.column.columnDef.minSize,\n                width: cell.column.getSize(),\n                ...cell.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={cell.id}\n                  {...styleProps}\n                >\n                  <Truncate>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Truncate>\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"column-auto-sizing",children:["Column auto sizing",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-auto-sizing",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:column_auto_sizing,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TextLabel,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const [columns, setColumns] = useState([\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 'auto',\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: '25%',\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n\n  return (\n    <Box width=\"100%\">\n      {columns.map((column, columnIndex) => (\n        <Box mb=\"4x\" key={columnIndex}>\n          <Box mb=\"2x\">\n            <TextLabel>\n              {column.header}\n            </TextLabel>\n          </Box>\n          <ButtonGroup\n            variant=\"secondary\"\n            sx={{\n              '> *:not(:first-of-type)': {\n                marginLeft: -1\n              }\n            }}\n          >\n            {['auto', '25%', 150].map(value => (\n              <Button\n                key={value}\n                selected={value === columns[columnIndex].size}\n                onClick={() => {\n                  const newColumns = [\n                    ...columns.slice(0, columnIndex),\n                    {\n                      ...columns[columnIndex],\n                      size: value,\n                    },\n                    ...columns.slice(columnIndex + 1),\n                  ];\n                  setColumns(newColumns);\n                }}\n                minWidth=\"15x\"\n              >\n                {value}\n              </Button>\n            ))}\n          </ButtonGroup>\n        </Box>\n      ))}\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            variant={variant}\n            sx={{\n              // Hide the table if there is no column sizing state\n              visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n              width,\n            }}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n\n                    return (\n                      <TableHeaderCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Truncate>\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                          </Truncate>\n                        )}\n                      </TableHeaderCell>\n                    );\n                  })}\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  _hover={{\n                    backgroundColor: colorStyle.background.highlighted,\n                  }}\n                >\n                  {row.getVisibleCells().map(cell => {\n                    const styleProps = {\n                      minWidth: cell.column.columnDef.minSize,\n                      width: cell.column.getSize(),\n                      ...cell.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        {...styleProps}\n                      >\n                        <Truncate>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Truncate>\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TextLabel,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const [columns, setColumns] = useState([\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 'auto',\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: '25%',\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n\n  return (\n    <Box width=\"100%\">\n      {columns.map((column, columnIndex) => (\n        <Box mb=\"4x\" key={columnIndex}>\n          <Box mb=\"2x\">\n            <TextLabel>\n              {column.header}\n            </TextLabel>\n          </Box>\n          <ButtonGroup\n            variant=\"secondary\"\n            sx={{\n              '> *:not(:first-of-type)': {\n                marginLeft: -1\n              }\n            }}\n          >\n            {['auto', '25%', 150].map(value => (\n              <Button\n                key={value}\n                selected={value === columns[columnIndex].size}\n                onClick={() => {\n                  const newColumns = [\n                    ...columns.slice(0, columnIndex),\n                    {\n                      ...columns[columnIndex],\n                      size: value,\n                    },\n                    ...columns.slice(columnIndex + 1),\n                  ];\n                  setColumns(newColumns);\n                }}\n                minWidth=\"15x\"\n              >\n                {value}\n              </Button>\n            ))}\n          </ButtonGroup>\n        </Box>\n      ))}\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            variant={variant}\n            sx={{\n              // Hide the table if there is no column sizing state\n              visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n              width,\n            }}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n\n                    return (\n                      <TableHeaderCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Truncate>\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                          </Truncate>\n                        )}\n                      </TableHeaderCell>\n                    );\n                  })}\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  _hover={{\n                    backgroundColor: colorStyle.background.highlighted,\n                  }}\n                >\n                  {row.getVisibleCells().map(cell => {\n                    const styleProps = {\n                      minWidth: cell.column.columnDef.minSize,\n                      width: cell.column.getSize(),\n                      ...cell.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        {...styleProps}\n                      >\n                        <Truncate>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Truncate>\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"column-ordering-dnd",children:["Column ordering (DnD)",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-ordering-dnd",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:'In this example, the "Priority" column is fixed and cannot be moved. Try dragging the other columns to adjust their order.'}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:column_ordering_dnd,file:{data:"import {\n  DndContext,\n  KeyboardSensor,\n  MouseSensor,\n  TouchSensor,\n  closestCenter,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers';\nimport {\n  SortableContext,\n  arrayMove,\n  horizontalListSortingStrategy,\n  sortableKeyboardCoordinates,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities'\nimport {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { dataAttr } from '@tonic-ui/utils';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst SortableItem = ({ children, id }) => {\n  const { attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition } = useSortable({ id });\n  return children({ attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition });\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const defaultColumnOrder = [\n    'priority',\n    'policy',\n    'modifiedTime',\n    'modifiedBy',\n  ];\n  const [columnOrder, setColumnOrder] = useState(defaultColumnOrder);\n  const [columnVisibility, setColumnVisibility] = useState({\n    priority: true,\n    policy: true,\n    modifiedTime: true,\n    modifiedBy: true,\n  });\n  const data = useConst(() => [\n    { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n    { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  ]);\n  const columns = useConst(() => [\n    {\n      id: 'priority',\n      header: 'Priority',\n      accessorKey: 'priority',\n      cell: ({ getValue }) => {\n        const priority = getValue();\n        return priority ?? '-';\n      },\n      size: 80,\n      isPinned: true,\n    },\n    {\n      id: 'policy',\n      header: 'Policy',\n      accessorKey: 'policy',\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedTime',\n      header: 'Last Modified',\n      accessorKey: 'modifiedTime',\n      cell: ({ getValue }) => {\n        const mtime = getValue();\n        const date = new Date(mtime);\n        if (date.toString() === 'Invalid Date') {\n          return '-';\n        }\n        return (\n          <Truncate>\n            {date.toLocaleString()}\n          </Truncate>\n        );\n      },\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedBy',\n      header: 'Last Editor',\n      accessorKey: 'modifiedBy',\n      size: 'auto',\n      isPinned: false,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnOrder,\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  /*\n   * columns = [\n   *   {\n   *     id: <string>,\n   *     label: <string>,\n   *     isPinned: <boolean>,\n   *     isVisible: <boolean>,\n   *   }\n   * ]\n   */\n  const orderedColumns = table.getState().columnOrder.map(columnId => {\n    const column = table.getColumn(columnId);\n    return {\n      id: columnId,\n      label: column.columnDef.header,\n      isPinned: column.columnDef.isPinned,\n      isVisible: table.getState().columnVisibility[columnId],\n    };\n  });\n\n  const handleDragEnd = useCallback((event) => {\n    const { active, over } = event;\n    if (active && over && active.id !== over.id) {\n      setColumnOrder(columnOrder => {\n        const oldIndex = columnOrder.indexOf(active.id);\n        const newIndex = columnOrder.indexOf(over.id);\n        return arrayMove(columnOrder, oldIndex, newIndex) //this is just a splice util\n      })\n    }\n  }, []);\n\n  const sensors = useSensors(\n    useSensor(MouseSensor),\n    useSensor(TouchSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  )\n\n  return (\n    <DndContext\n      collisionDetection={closestCenter}\n      modifiers={[restrictToHorizontalAxis]}\n      onDragEnd={handleDragEnd}\n      sensors={sensors}\n    >\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            sx={{\n              // Hide the table if there is no column sizing state\n              visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n\n              width,\n            }}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  <SortableContext\n                    items={orderedColumns}\n                    strategy={horizontalListSortingStrategy}\n                  >\n                    {headerGroup.headers.map(header => (\n                      <SortableItem\n                        key={header.id}\n                        id={header.column.id}\n                      >\n                        {({ isDragging, setActivatorNodeRef, setNodeRef, attributes, listeners, transform, transition }) => {\n                          const isPinned = header.column.columnDef.isPinned;\n                          const sx = [\n                            {\n                              position: 'relative',\n                              minWidth: header.column.columnDef.minSize,\n                              width: header.getSize(),\n                              ...header.column.columnDef.style,\n                            },\n                            !isPinned && {\n                              cursor: isDragging ? 'move' : undefined,\n                              opacity: isDragging ? 0.4 : undefined,\n                              transform: CSS.Translate.toString(transform), // translate instead of transform to avoid squishing\n                              transition,\n                              // Ensure the draggable element appears on top of other elements when dragged\n                              zIndex: isDragging ? 1 : 0,\n                            },\n                          ];\n                          \n                          return (\n                            <TableHeaderCell\n                              ref={setNodeRef}\n                              sx={sx}\n                              {...(!isPinned ? attributes : undefined)}\n                              {...(!isPinned ? listeners : undefined)}\n                            >\n                              {header.isPlaceholder ? null : (\n                                <Truncate>\n                                  {flexRender(header.column.columnDef.header, header.getContext())}\n                                </Truncate>\n                              )}\n                            </TableHeaderCell>\n                          );\n                        }}\n                      </SortableItem>\n                    ))}\n                  </SortableContext>\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  data-selected={dataAttr(row.getIsSelected())}\n                  _hover={{\n                    backgroundColor: colorStyle.background.highlighted,\n                  }}\n                  _selected={{\n                    backgroundColor: colorStyle.background.selected,\n                  }}\n                >\n                  <SortableContext\n                    items={orderedColumns}\n                    strategy={horizontalListSortingStrategy}\n                  >\n                    {row.getVisibleCells().map(cell => (\n                      <SortableItem\n                        key={cell.id}\n                        id={cell.column.id}\n                      >\n                        {({ isDragging, setNodeRef, transform, transition }) => {\n                          const isPinned = cell.column.columnDef.isPinned;\n                          const styleProps = {\n                            position: 'relative',\n                            minWidth: cell.column.columnDef.minSize,\n                            width: cell.column.getSize(),\n                            ...cell.column.columnDef.style,\n                          };\n                          let other = {};\n                          if (!isPinned) {\n                            other = {\n                              opacity: isDragging ? 0.4 : undefined,\n                              transform: CSS.Translate.toString(transform),\n                              transition,\n                              zIndex: isDragging ? 1 : 0,\n                            };\n                          }\n                          return (\n                            <TableCell\n                              ref={setNodeRef}\n                              {...styleProps}\n                              {...other}\n                            >\n                              <Truncate>\n                                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                              </Truncate>\n                            </TableCell>\n                          );\n                        }}\n                      </SortableItem>\n                    ))}\n                  </SortableContext>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </DndContext>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  DndContext,\n  KeyboardSensor,\n  MouseSensor,\n  TouchSensor,\n  closestCenter,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers';\nimport {\n  SortableContext,\n  arrayMove,\n  horizontalListSortingStrategy,\n  sortableKeyboardCoordinates,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities'\nimport {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { dataAttr } from '@tonic-ui/utils';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst SortableItem = ({ children, id }) => {\n  const { attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition } = useSortable({ id });\n  return children({ attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition });\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const defaultColumnOrder = [\n    'priority',\n    'policy',\n    'modifiedTime',\n    'modifiedBy',\n  ];\n  const [columnOrder, setColumnOrder] = useState(defaultColumnOrder);\n  const [columnVisibility, setColumnVisibility] = useState({\n    priority: true,\n    policy: true,\n    modifiedTime: true,\n    modifiedBy: true,\n  });\n  const data = useConst(() => [\n    { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n    { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  ]);\n  const columns = useConst(() => [\n    {\n      id: 'priority',\n      header: 'Priority',\n      accessorKey: 'priority',\n      cell: ({ getValue }) => {\n        const priority = getValue();\n        return priority ?? '-';\n      },\n      size: 80,\n      isPinned: true,\n    },\n    {\n      id: 'policy',\n      header: 'Policy',\n      accessorKey: 'policy',\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedTime',\n      header: 'Last Modified',\n      accessorKey: 'modifiedTime',\n      cell: ({ getValue }) => {\n        const mtime = getValue();\n        const date = new Date(mtime);\n        if (date.toString() === 'Invalid Date') {\n          return '-';\n        }\n        return (\n          <Truncate>\n            {date.toLocaleString()}\n          </Truncate>\n        );\n      },\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedBy',\n      header: 'Last Editor',\n      accessorKey: 'modifiedBy',\n      size: 'auto',\n      isPinned: false,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnOrder,\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  /*\n   * columns = [\n   *   {\n   *     id: <string>,\n   *     label: <string>,\n   *     isPinned: <boolean>,\n   *     isVisible: <boolean>,\n   *   }\n   * ]\n   */\n  const orderedColumns = table.getState().columnOrder.map(columnId => {\n    const column = table.getColumn(columnId);\n    return {\n      id: columnId,\n      label: column.columnDef.header,\n      isPinned: column.columnDef.isPinned,\n      isVisible: table.getState().columnVisibility[columnId],\n    };\n  });\n\n  const handleDragEnd = useCallback((event) => {\n    const { active, over } = event;\n    if (active && over && active.id !== over.id) {\n      setColumnOrder(columnOrder => {\n        const oldIndex = columnOrder.indexOf(active.id);\n        const newIndex = columnOrder.indexOf(over.id);\n        return arrayMove(columnOrder, oldIndex, newIndex) //this is just a splice util\n      })\n    }\n  }, []);\n\n  const sensors = useSensors(\n    useSensor(MouseSensor),\n    useSensor(TouchSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  )\n\n  return (\n    <DndContext\n      collisionDetection={closestCenter}\n      modifiers={[restrictToHorizontalAxis]}\n      onDragEnd={handleDragEnd}\n      sensors={sensors}\n    >\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            sx={{\n              // Hide the table if there is no column sizing state\n              visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n\n              width,\n            }}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  <SortableContext\n                    items={orderedColumns}\n                    strategy={horizontalListSortingStrategy}\n                  >\n                    {headerGroup.headers.map(header => (\n                      <SortableItem\n                        key={header.id}\n                        id={header.column.id}\n                      >\n                        {({ isDragging, setActivatorNodeRef, setNodeRef, attributes, listeners, transform, transition }) => {\n                          const isPinned = header.column.columnDef.isPinned;\n                          const sx = [\n                            {\n                              position: 'relative',\n                              minWidth: header.column.columnDef.minSize,\n                              width: header.getSize(),\n                              ...header.column.columnDef.style,\n                            },\n                            !isPinned && {\n                              cursor: isDragging ? 'move' : undefined,\n                              opacity: isDragging ? 0.4 : undefined,\n                              transform: CSS.Translate.toString(transform), // translate instead of transform to avoid squishing\n                              transition,\n                              // Ensure the draggable element appears on top of other elements when dragged\n                              zIndex: isDragging ? 1 : 0,\n                            },\n                          ];\n                          \n                          return (\n                            <TableHeaderCell\n                              ref={setNodeRef}\n                              sx={sx}\n                              {...(!isPinned ? attributes : undefined)}\n                              {...(!isPinned ? listeners : undefined)}\n                            >\n                              {header.isPlaceholder ? null : (\n                                <Truncate>\n                                  {flexRender(header.column.columnDef.header, header.getContext())}\n                                </Truncate>\n                              )}\n                            </TableHeaderCell>\n                          );\n                        }}\n                      </SortableItem>\n                    ))}\n                  </SortableContext>\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  data-selected={dataAttr(row.getIsSelected())}\n                  _hover={{\n                    backgroundColor: colorStyle.background.highlighted,\n                  }}\n                  _selected={{\n                    backgroundColor: colorStyle.background.selected,\n                  }}\n                >\n                  <SortableContext\n                    items={orderedColumns}\n                    strategy={horizontalListSortingStrategy}\n                  >\n                    {row.getVisibleCells().map(cell => (\n                      <SortableItem\n                        key={cell.id}\n                        id={cell.column.id}\n                      >\n                        {({ isDragging, setNodeRef, transform, transition }) => {\n                          const isPinned = cell.column.columnDef.isPinned;\n                          const styleProps = {\n                            position: 'relative',\n                            minWidth: cell.column.columnDef.minSize,\n                            width: cell.column.getSize(),\n                            ...cell.column.columnDef.style,\n                          };\n                          let other = {};\n                          if (!isPinned) {\n                            other = {\n                              opacity: isDragging ? 0.4 : undefined,\n                              transform: CSS.Translate.toString(transform),\n                              transition,\n                              zIndex: isDragging ? 1 : 0,\n                            };\n                          }\n                          return (\n                            <TableCell\n                              ref={setNodeRef}\n                              {...styleProps}\n                              {...other}\n                            >\n                              <Truncate>\n                                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                              </Truncate>\n                            </TableCell>\n                          );\n                        }}\n                      </SortableItem>\n                    ))}\n                  </SortableContext>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </DndContext>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"column-resizing",children:["Column resizing",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-resizing",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:column_resizing,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  ResizeHandle,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useMemo, useRef, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const [columnResizeMode, setColumnResizeMode] = useState('onChange');\n\n  // https://tanstack.com/table/v8/docs/api/features/column-sizing#column-def-options\n  //\n  // ```\n  // enableResizing?: boolean\n  // ```\n  // Enables or disables column resizing for the column\n  //\n  // ```\n  // size?: number\n  // ```\n  // The desired size for the column\n  //\n  // ```\n  // minSize?: number\n  // ```\n  // The minimum allowed size for the column\n  //\n  // ```\n  // maxSize?: number\n  // ```\n  // The maximum allowed size for the column\n  //\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      enableResizing: true,\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const tableRef = useRef();\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    columnResizeMode,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'outline'; // One of: 'default', 'outline'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Menu>\n          <MenuButton variant=\"secondary\">\n            Resize: {columnResizeMode}\n          </MenuButton>\n          <MenuList\n            onClick={(event) => {\n              const value = event.target.value;\n              setColumnResizeMode(value);\n            }}\n            width=\"max-content\"\n          >\n            <MenuItem value=\"onChange\">\n              Resize: onChange\n            </MenuItem>\n            <MenuItem value=\"onEnd\">\n              Resize: onEnd\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </Box>\n      <Table\n        ref={tableRef}\n        layout={layout}\n        variant={variant}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  position: 'relative',\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                const columnSizingInfo = table.getState().columnSizingInfo;\n                const isResizingColumn = (columnSizingInfo.isResizingColumn === header.column.id);\n                const tableHeight = tableRef.current?.clientHeight ?? '100%';\n\n                // ResizeHandle\n                const resizeHandleSX = (() => {\n                  const dividerColor = {\n                    dark: 'gray:70',\n                    light: 'gray:30',\n                  }[colorMode];\n                  const highlightedDividerColor = {\n                    dark: 'gray:50',\n                    light: 'gray:50',\n                  }[colorMode];\n                  const dividerWidth = 1;\n                  const hoverableWidth = 8;\n                  const translucentWidth = 4;\n\n                  return {\n                    // You must specify absolute positioning for the resize handle to work correctly\n                    position: 'absolute',\n                    top: (variant === 'outline') ? -1 : 0,\n                    right: -1 * (isResizingColumn ? dividerWidth + translucentWidth : hoverableWidth),\n                    height: isResizingColumn ? tableHeight : 36,\n                    zIndex: 1,\n\n                    borderLeft: dividerWidth,\n                    borderLeftColor: isResizingColumn ? highlightedDividerColor : dividerColor,\n                    _hover: {\n                      borderLeftColor: highlightedDividerColor,\n                    },\n\n                    // Use `transform: translateX()` to move the resize handle when `columnResizeMode` is 'onEnd'\n                    transform: (columnResizeMode === 'onEnd' && isResizingColumn)\n                      ? `translateX(${columnSizingInfo.deltaOffset}px)`\n                      : undefined,\n                  };\n                })();\n\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                    {(header.column.columnDef.enableResizing !== false) && (\n                      <ResizeHandle\n                        sx={resizeHandleSX}\n\n                        // The following `onMouseDown` and `onTouchStart` props are required for the resize handle to work with `@tanstack/react-table`\n                        onMouseDown={header.getResizeHandler()}\n                        onTouchStart={header.getResizeHandler()}\n\n                        // The following `onResize`, `onResizeStart`, and `onResizeEnd` props can be used to update the column size when resizing\n                        onResize={({ clientX, clientY }) => {\n                          // Update the column size based on the current resizing coordinates\n                        }}\n                        onResizeStart={({ clientX, clientY }) => {\n                          // Get the initial position of the resize handle when resizing starts\n                        }}\n                        onResizeEnd={({ clientX, clientY }) => {\n                          // Get the final position of the resize handle when resizing ends\n                        }}\n                      />\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  ResizeHandle,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useMemo, useRef, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const [columnResizeMode, setColumnResizeMode] = useState('onChange');\n\n  // https://tanstack.com/table/v8/docs/api/features/column-sizing#column-def-options\n  //\n  // ```\n  // enableResizing?: boolean\n  // ```\n  // Enables or disables column resizing for the column\n  //\n  // ```\n  // size?: number\n  // ```\n  // The desired size for the column\n  //\n  // ```\n  // minSize?: number\n  // ```\n  // The minimum allowed size for the column\n  //\n  // ```\n  // maxSize?: number\n  // ```\n  // The maximum allowed size for the column\n  //\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      enableResizing: true,\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const tableRef = useRef();\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    columnResizeMode,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'outline'; // One of: 'default', 'outline'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Menu>\n          <MenuButton variant=\"secondary\">\n            Resize: {columnResizeMode}\n          </MenuButton>\n          <MenuList\n            onClick={(event) => {\n              const value = event.target.value;\n              setColumnResizeMode(value);\n            }}\n            width=\"max-content\"\n          >\n            <MenuItem value=\"onChange\">\n              Resize: onChange\n            </MenuItem>\n            <MenuItem value=\"onEnd\">\n              Resize: onEnd\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </Box>\n      <Table\n        ref={tableRef}\n        layout={layout}\n        variant={variant}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  position: 'relative',\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                const columnSizingInfo = table.getState().columnSizingInfo;\n                const isResizingColumn = (columnSizingInfo.isResizingColumn === header.column.id);\n                const tableHeight = tableRef.current?.clientHeight ?? '100%';\n\n                // ResizeHandle\n                const resizeHandleSX = (() => {\n                  const dividerColor = {\n                    dark: 'gray:70',\n                    light: 'gray:30',\n                  }[colorMode];\n                  const highlightedDividerColor = {\n                    dark: 'gray:50',\n                    light: 'gray:50',\n                  }[colorMode];\n                  const dividerWidth = 1;\n                  const hoverableWidth = 8;\n                  const translucentWidth = 4;\n\n                  return {\n                    // You must specify absolute positioning for the resize handle to work correctly\n                    position: 'absolute',\n                    top: (variant === 'outline') ? -1 : 0,\n                    right: -1 * (isResizingColumn ? dividerWidth + translucentWidth : hoverableWidth),\n                    height: isResizingColumn ? tableHeight : 36,\n                    zIndex: 1,\n\n                    borderLeft: dividerWidth,\n                    borderLeftColor: isResizingColumn ? highlightedDividerColor : dividerColor,\n                    _hover: {\n                      borderLeftColor: highlightedDividerColor,\n                    },\n\n                    // Use `transform: translateX()` to move the resize handle when `columnResizeMode` is 'onEnd'\n                    transform: (columnResizeMode === 'onEnd' && isResizingColumn)\n                      ? `translateX(${columnSizingInfo.deltaOffset}px)`\n                      : undefined,\n                  };\n                })();\n\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                    {(header.column.columnDef.enableResizing !== false) && (\n                      <ResizeHandle\n                        sx={resizeHandleSX}\n\n                        // The following `onMouseDown` and `onTouchStart` props are required for the resize handle to work with `@tanstack/react-table`\n                        onMouseDown={header.getResizeHandler()}\n                        onTouchStart={header.getResizeHandler()}\n\n                        // The following `onResize`, `onResizeStart`, and `onResizeEnd` props can be used to update the column size when resizing\n                        onResize={({ clientX, clientY }) => {\n                          // Update the column size based on the current resizing coordinates\n                        }}\n                        onResizeStart={({ clientX, clientY }) => {\n                          // Get the initial position of the resize handle when resizing starts\n                        }}\n                        onResizeEnd={({ clientX, clientY }) => {\n                          // Get the final position of the resize handle when resizing ends\n                        }}\n                      />\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"column-visibility",children:["Column visibility",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-visibility",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:column_visibility,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Divider,\n  Flex,\n  Stack,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { Fragment, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [columnVisibility, setColumnVisibility] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Flex\n          display=\"inline-flex\"\n          flexDirection=\"column\"\n        >\n          <Checkbox\n            checked={table.getIsAllColumnsVisible()}\n            indeterminate={table.getIsSomeColumnsVisible() && !table.getIsAllColumnsVisible()}\n            onChange={table.getToggleAllColumnsVisibilityHandler()}\n          >\n            Toggle All\n          </Checkbox>\n          <Divider my=\"2x\" />\n          <Stack spacing=\"1x\">\n            {table.getAllLeafColumns().map(column => {\n              return (\n                <Fragment key={column.id}>\n                  <Checkbox\n                    checked={column.getIsVisible()}\n                    onChange={column.getToggleVisibilityHandler()}\n                  >\n                    {column.columnDef.header}\n                  </Checkbox>\n                </Fragment>\n              );\n            })}\n          </Stack>\n        </Flex>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Divider,\n  Flex,\n  Stack,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { Fragment, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [columnVisibility, setColumnVisibility] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Flex\n          display=\"inline-flex\"\n          flexDirection=\"column\"\n        >\n          <Checkbox\n            checked={table.getIsAllColumnsVisible()}\n            indeterminate={table.getIsSomeColumnsVisible() && !table.getIsAllColumnsVisible()}\n            onChange={table.getToggleAllColumnsVisibilityHandler()}\n          >\n            Toggle All\n          </Checkbox>\n          <Divider my=\"2x\" />\n          <Stack spacing=\"1x\">\n            {table.getAllLeafColumns().map(column => {\n              return (\n                <Fragment key={column.id}>\n                  <Checkbox\n                    checked={column.getIsVisible()}\n                    onChange={column.getToggleVisibilityHandler()}\n                  >\n                    {column.columnDef.header}\n                  </Checkbox>\n                </Fragment>\n              );\n            })}\n          </Stack>\n        </Flex>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"column-visibility-and-order",children:["Column visibility and order",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-visibility-and-order",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:'Click the "Customize Columns" button to toggle column visibility and adjust their order.'}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:column_visibility_and_order,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  Flex,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { ColumnsIcon } from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { dataAttr } from '@tonic-ui/utils';\nimport _ from 'lodash';\nimport React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport ColumnSettingsDrawer from './column-settings-drawer';\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const defaultColumnOrder = [\n    'priority',\n    'policy',\n    'modifiedTime',\n    'modifiedBy',\n  ];\n  const [columnOrder, setColumnOrder] = useState(defaultColumnOrder);\n  const [columnVisibility, setColumnVisibility] = useState({\n    'priority': true,\n    'policy': true,\n    'modifiedTime': true,\n    'modifiedBy': true,\n  });\n  const data = useConst(() => [\n    { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n    { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  ]);\n  const columns = useConst(() => [\n    {\n      id: 'priority',\n      header: 'Priority',\n      accessorKey: 'priority',\n      cell: ({ getValue }) => {\n        const priority = getValue();\n        return priority ?? '-';\n      },\n      size: 80,\n      isPinned: true,\n    },\n    {\n      id: 'policy',\n      header: 'Policy',\n      accessorKey: 'policy',\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedTime',\n      header: 'Last Modified',\n      accessorKey: 'modifiedTime',\n      cell: ({ getValue }) => {\n        const mtime = getValue();\n        const date = new Date(mtime);\n        if (date.toString() === 'Invalid Date') {\n          return '-';\n        }\n        return (\n          <Truncate>\n            {date.toLocaleString()}\n          </Truncate>\n        );\n      },\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedBy',\n      header: 'Last Editor',\n      accessorKey: 'modifiedBy',\n      size: 'auto',\n      isPinned: false,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnOrder,\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const [isColumnSettingsDrawerOpen, setIsColumnSettingsDrawerOpen] = useState(false);\n\n  /*\n   * columns = [\n   *   {\n   *     id: <string>,\n   *     label: <string>,\n   *     isPinned: <boolean>,\n   *     isVisible: <boolean>,\n   *   }\n   * ]\n   */\n  const orderedColumns = table.getState().columnOrder.map(columnId => {\n    const column = table.getColumn(columnId);\n    return {\n      id: columnId,\n      label: column.columnDef.header,\n      isPinned: column.columnDef.isPinned,\n      isVisible: table.getState().columnVisibility[columnId],\n    };\n  });\n\n  const onUpdateColumns = useCallback((columns) => {\n    const order = columns.map(column => column.id);\n    const visibility = columns.reduce((acc, column) => {\n      acc[column.id] = column.isVisible;\n      return acc;\n    }, {});\n    setColumnOrder(order);\n    setColumnVisibility(visibility);\n  }, [setColumnOrder]);\n\n  return (<>\n    <ColumnSettingsDrawer\n      columns={orderedColumns}\n      defaultColumnOrder={defaultColumnOrder}\n      onUpdateColumns={onUpdateColumns}\n      isOpen={isColumnSettingsDrawerOpen}\n      onClose={() => setIsColumnSettingsDrawerOpen(false)}\n    />\n    <Flex\n      justifyContent=\"flex-end\"\n      mb=\"4x\"\n    >\n      <Button\n        variant=\"secondary\"\n        onClick={() => setIsColumnSettingsDrawerOpen(true)}\n      >\n        <ColumnsIcon />\n        <Space width=\"2x\" />\n        Customize Columns\n      </Button>\n    </Flex>\n    <Box>\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            sx={{\n              // Hide the table if there is no column sizing state\n              visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n\n              width,\n            }}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n                    return (\n                      <TableHeaderCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Truncate>\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                          </Truncate>\n                        )}\n                      </TableHeaderCell>\n                    );\n                  })}\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  data-selected={dataAttr(row.getIsSelected())}\n                  _hover={{\n                    backgroundColor: colorStyle.background.highlighted,\n                  }}\n                  _selected={{\n                    backgroundColor: colorStyle.background.selected,\n                  }}\n                >\n                  {row.getVisibleCells().map(cell => {\n                    const styleProps = {\n                      minWidth: cell.column.columnDef.minSize,\n                      width: cell.column.getSize(),\n                      ...cell.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        {...styleProps}\n                      >\n                        <Truncate>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Truncate>\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </Box>\n  </>);\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{"src/pages/components/table/column-visibility-and-order/column-settings-drawer.js":"import {\n  DndContext,\n  DragOverlay,\n  KeyboardSensor,\n  MouseSensor,\n  PointerSensor,\n  defaultDropAnimationSideEffects,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  Grid,\n  LinkButton,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { isNullish } from '@tonic-ui/utils';\nimport { ensureArray, ensureFunction } from 'ensure-type';\nimport _orderBy from 'lodash/orderBy';\nimport React, {\n  Fragment,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState,\n} from 'react';\nimport HandleIcon from '@/pages/components/table/icons/icon-handle';\n\nconst UPDATE_COLUMNS = 'UPDATE_COLUMNS';\n\nconst reducer = (state, action) => {\n  if (action.type === UPDATE_COLUMNS) {\n    const nextState = {\n      ...state,\n      columns: ensureArray(action.payload),\n    };\n    return nextState;\n  }\n\n  return state;\n};\n\nconst DragHandle = forwardRef((props, ref) => {\n  return (\n    <Flex\n      role=\"presentation\"\n      sx={{\n        alignItems: 'center',\n        cursor: 'move',\n      }}\n      {...props}\n    />\n  );\n});\nDragHandle.displayName = 'DragHandle';\n\nconst SortableOverlay = ({ children }) => {\n  const dropAnimationConfig = useMemo(() => ({\n    sideEffects: defaultDropAnimationSideEffects({\n      styles: {\n        active: {\n          opacity: '0.4',\n        },\n      },\n    }),\n  }), []);\n\n  return (\n    <DragOverlay dropAnimation={dropAnimationConfig}>\n      {children}\n    </DragOverlay>\n  );\n};\n\nconst SortableItem = ({ children, id }) => {\n  const { attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition } = useSortable({ id });\n  return children({ attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition });\n};\n\n/**\n * @param {object} columns - The columns to be displayed in the drawer\n * @param {string} columns[].id - The id of the column\n * @param {string} columns[].label - The label of the column\n * @param {boolean} columns[].isPinned - Whether the column is pinned\n * @param {boolean} columns[].isVisible - Whether the column is visible\n * @param {string[]} defaultColumnOrder - The default order of the columns\n * @param {function} onUpdateColumns - Callback function to be called when the columns are updated\n * @param {boolean} isOpen - Whether the drawer is open\n * @param {function} onClose - Callback function to be called when the drawer is closed\n */\nconst ColumnSettingsDrawer = ({\n  columns: columnsProp,\n  defaultColumnOrder: defaultColumnOrder,\n  onUpdateColumns,\n  isOpen,\n  onClose,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const [state, dispatch] = useReducer(reducer, {\n    columns: ensureArray(columnsProp),\n  });\n  const allColumnsVisible = state.columns.every(column => column.isVisible !== false);\n  const isToggleAllChecked = allColumnsVisible;\n  const toggleAllColumns = useCallback(() => {\n    const isVisible = !allColumnsVisible;\n    dispatch({\n      type: UPDATE_COLUMNS,\n      payload: state.columns.map(column => {\n        if (column.isPinned) {\n          return column;\n        }\n        return {\n          ...column,\n          isVisible: isVisible,\n        };\n      }),\n    });\n  }, [allColumnsVisible, state.columns]);\n\n  useEffect(() => {\n    const nextColumns = columnsProp;\n    dispatch({\n      type: UPDATE_COLUMNS,\n      payload: nextColumns,\n    });\n  }, [columnsProp]);\n\n  const handleClickResetToDefault = useCallback(() => {\n    const nextColumns = _orderBy(state.columns, (column) => defaultColumnOrder.indexOf(column.id), ['asc'])\n      .map(column => {\n        const isVisible = defaultColumnOrder.indexOf(column.id) >= 0;\n        column.isVisible = isVisible;\n        return column;\n      });\n    dispatch({\n      type: UPDATE_COLUMNS,\n      payload: nextColumns,\n    });\n  }, [defaultColumnOrder, state.columns]);\n\n  const handleUpdateColumns = useCallback(() => {\n    ensureFunction(onUpdateColumns)(state.columns);\n    ensureFunction(onClose)();\n  }, [onClose, onUpdateColumns, state.columns]);\n\n  const [activeId, setActiveId] = useState(null);\n  const getColumnById = (id) => state.columns.find(column => column.id === id);\n  const sensors = useSensors(\n    useSensor(MouseSensor),\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const renderColumn = (column) => (\n    <SortableItem id={column.id}>\n      {({\n        attributes,\n        isDragging,\n        listeners,\n        setNodeRef,\n        setActivatorNodeRef,\n        transform,\n        transition,\n      }) => {\n        let styleProps = {};\n        if (!column.isPinned) {\n          styleProps = {\n            _hover: {\n              backgroundColor: isDragging ? 'gray:70' : colorStyle.background.highlighted,\n            },\n            opacity: isDragging ? 0.4 : undefined,\n            transform: CSS.Translate.toString(transform),\n            transition,\n            // Ensure the draggable element appears on top of other elements when dragged\n            zIndex: isDragging ? 'modal' : undefined,\n          };\n        }\n\n        return (\n          <Box\n            ref={setNodeRef}\n            sx={styleProps}\n          >\n            <Flex\n              alignItems=\"center\"\n              py=\"2x\"\n            >\n              <Flex\n                sx={{\n                  '*:hover > &': {\n                    opacity: 1,\n                  },\n                  opacity: 0,\n                  minWidth: '4x',\n                  px: '1x',\n                }}\n              >\n                {!column.isPinned && (\n                  <DragHandle\n                    ref={setActivatorNodeRef}\n                    {...attributes}\n                    {...listeners}\n                  >\n                    <HandleIcon />\n                  </DragHandle>\n                )}\n              </Flex>\n              <Checkbox\n                disabled={column.isPinned}\n                checked={column.isVisible}\n                onChange={(event) => {\n                  const isVisible = event.target.checked;\n                  const nextColumns = state.columns.map(_column => {\n                    if (_column.id !== column.id) {\n                      return _column;\n                    } \n                    return {\n                      ..._column,\n                      isVisible,\n                    };\n                  });\n                  dispatch({\n                    type: UPDATE_COLUMNS,\n                    payload: nextColumns,\n                  });\n                }}\n                sx={{\n                  width: '100%',\n                }}\n              >\n                {column.label}\n              </Checkbox>\n            </Flex>\n          </Box>\n        );\n      }}\n    </SortableItem>\n  );\n\n  return (\n    <Drawer\n      autoFocus={true}\n      backdrop={true}\n      closeOnEsc={true}\n      closeOnOutsideClick={true}\n      returnFocusOnClose={false}\n      ensureFocus={true}\n      isClosable={true}\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"sm\"\n    >\n      <DrawerOverlay />\n      <DrawerContent>\n        <DrawerHeader>\n          Show/Hide Columns\n        </DrawerHeader>\n        <DrawerBody>\n          <Box mb=\"1x\">\n            <Button\n              variant=\"secondary\"\n              onClick={handleClickResetToDefault}\n            >\n              Reset to Default\n            </Button>\n          </Box>\n          <Box mb=\"1x\">\n            <LinkButton onClick={toggleAllColumns}>\n              {isToggleAllChecked ? 'Clear all' : 'Select all'}\n            </LinkButton>\n          </Box>\n          <DndContext\n            sensors={sensors}\n            onDragStart={(event) => {\n              setActiveId(event.active.id);\n            }}\n            onDragEnd={({ active, over }) => {\n              if (over && active.id !== over?.id) {\n                const columns = [...state.columns];\n                const activeIndex = columns.findIndex(({ id }) => id === active.id);\n                const overIndex = columns.findIndex(({ id }) => id === over.id);\n                const nextColumns = arrayMove(columns, activeIndex, overIndex);\n                dispatch({\n                  type: UPDATE_COLUMNS,\n                  payload: nextColumns,\n                });\n              }\n              setActiveId(null);\n            }}\n            onDragCancel={() => {\n              setActiveId(null);\n            }}\n          >\n            <SortableContext\n              items={state.columns}\n            >\n              <Flex\n                sx={{\n                  flexDirection: 'column',\n                  rowGap: '1x',\n                }}\n              >\n                {state.columns.map((column) => (\n                  <Fragment key={column.id}>\n                    {renderColumn(column)}\n                  </Fragment>\n                ))}\n              </Flex>\n            </SortableContext>\n            <SortableOverlay>\n              {!isNullish(activeId) ? renderColumn(getColumnById(activeId)) : null}\n            </SortableOverlay>\n          </DndContext>\n        </DrawerBody>\n        <DrawerFooter>\n          <Grid templateColumns=\"repeat(2, 1fr)\" columnGap=\"2x\">\n            <Button\n              variant=\"primary\"\n              onClick={handleUpdateColumns}\n            >\n              Save\n            </Button>\n            <Button\n              variant=\"default\"\n              onClick={onClose}\n            >\n              Cancel\n            </Button>\n          </Grid>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport default ColumnSettingsDrawer;","src/pages/components/table/icons/icon-handle.js":'import { SVGIcon } from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst Icon = (props) => (\n  <SVGIcon width="2x" height="4x" viewBox="0 0 8 16" {...props}>\n    <circle cx="2" cy="2" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="6" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="10" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="14" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="2" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="6" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="10" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="14" r="1" fill="#5E5E5E"/>\n  </SVGIcon>\n);\n\nexport default Icon;'},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  Flex,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { ColumnsIcon } from '@tonic-ui/react-icons';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { dataAttr } from '@tonic-ui/utils';\nimport _ from 'lodash';\nimport React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport ColumnSettingsDrawer from '@/pages/components/table/column-visibility-and-order/column-settings-drawer';\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const defaultColumnOrder = [\n    'priority',\n    'policy',\n    'modifiedTime',\n    'modifiedBy',\n  ];\n  const [columnOrder, setColumnOrder] = useState(defaultColumnOrder);\n  const [columnVisibility, setColumnVisibility] = useState({\n    'priority': true,\n    'policy': true,\n    'modifiedTime': true,\n    'modifiedBy': true,\n  });\n  const data = useConst(() => [\n    { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n    { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  ]);\n  const columns = useConst(() => [\n    {\n      id: 'priority',\n      header: 'Priority',\n      accessorKey: 'priority',\n      cell: ({ getValue }) => {\n        const priority = getValue();\n        return priority ?? '-';\n      },\n      size: 80,\n      isPinned: true,\n    },\n    {\n      id: 'policy',\n      header: 'Policy',\n      accessorKey: 'policy',\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedTime',\n      header: 'Last Modified',\n      accessorKey: 'modifiedTime',\n      cell: ({ getValue }) => {\n        const mtime = getValue();\n        const date = new Date(mtime);\n        if (date.toString() === 'Invalid Date') {\n          return '-';\n        }\n        return (\n          <Truncate>\n            {date.toLocaleString()}\n          </Truncate>\n        );\n      },\n      size: 'auto',\n      isPinned: false,\n    },\n    {\n      id: 'modifiedBy',\n      header: 'Last Editor',\n      accessorKey: 'modifiedBy',\n      size: 'auto',\n      isPinned: false,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnOrder,\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const [isColumnSettingsDrawerOpen, setIsColumnSettingsDrawerOpen] = useState(false);\n\n  /*\n   * columns = [\n   *   {\n   *     id: <string>,\n   *     label: <string>,\n   *     isPinned: <boolean>,\n   *     isVisible: <boolean>,\n   *   }\n   * ]\n   */\n  const orderedColumns = table.getState().columnOrder.map(columnId => {\n    const column = table.getColumn(columnId);\n    return {\n      id: columnId,\n      label: column.columnDef.header,\n      isPinned: column.columnDef.isPinned,\n      isVisible: table.getState().columnVisibility[columnId],\n    };\n  });\n\n  const onUpdateColumns = useCallback((columns) => {\n    const order = columns.map(column => column.id);\n    const visibility = columns.reduce((acc, column) => {\n      acc[column.id] = column.isVisible;\n      return acc;\n    }, {});\n    setColumnOrder(order);\n    setColumnVisibility(visibility);\n  }, [setColumnOrder]);\n\n  return (<>\n    <ColumnSettingsDrawer\n      columns={orderedColumns}\n      defaultColumnOrder={defaultColumnOrder}\n      onUpdateColumns={onUpdateColumns}\n      isOpen={isColumnSettingsDrawerOpen}\n      onClose={() => setIsColumnSettingsDrawerOpen(false)}\n    />\n    <Flex\n      justifyContent=\"flex-end\"\n      mb=\"4x\"\n    >\n      <Button\n        variant=\"secondary\"\n        onClick={() => setIsColumnSettingsDrawerOpen(true)}\n      >\n        <ColumnsIcon />\n        <Space width=\"2x\" />\n        Customize Columns\n      </Button>\n    </Flex>\n    <Box>\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            sx={{\n              // Hide the table if there is no column sizing state\n              visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n\n              width,\n            }}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n                    return (\n                      <TableHeaderCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Truncate>\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                          </Truncate>\n                        )}\n                      </TableHeaderCell>\n                    );\n                  })}\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  data-selected={dataAttr(row.getIsSelected())}\n                  _hover={{\n                    backgroundColor: colorStyle.background.highlighted,\n                  }}\n                  _selected={{\n                    backgroundColor: colorStyle.background.selected,\n                  }}\n                >\n                  {row.getVisibleCells().map(cell => {\n                    const styleProps = {\n                      minWidth: cell.column.columnDef.minSize,\n                      width: cell.column.getSize(),\n                      ...cell.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        {...styleProps}\n                      >\n                        <Truncate>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Truncate>\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </Box>\n  </>);\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"pagination",children:["Pagination",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#pagination",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:pagination,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { AngleLeftIcon, AngleRightIcon } from '@tonic-ui/react-icons';\nimport { ensureArray, ensureNumber } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Endpoint',\n      accessorKey: 'endpoint',\n      size: 200,\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 150,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const isTableScrollingEnabled = layout !== 'table';\n  const currentPage = table.getState().pagination.pageIndex + 1;\n  const totalCount = table.getCoreRowModel().rows.length;\n  let tableStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const headerHeight = 36;\n    const cellHeight = 36;\n    const footerHeight = 56;\n    const rowsToDisplay = 10;\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight + footerHeight,\n    };\n  }\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>Current page: {currentPage}</Text>\n      </Box>\n      <Table\n        layout={layout}\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <ConditionalWrapper\n          condition={isTableScrollingEnabled}\n          wrapper={children => (\n            <TableScrollbar\n              height=\"100%\"\n              overflow=\"visible\" // Make the scrollbar visible\n            >\n              {children}\n            </TableScrollbar>\n          )}\n        >\n          <TableBody>\n            {table.getRowModel().rows.map(row => (\n              <TableRow\n                key={row.id}\n                _hover={{\n                  backgroundColor: colorStyle.background.highlighted,\n                }}\n              >\n                {row.getVisibleCells().map(cell => {\n                  const styleProps = {\n                    minWidth: cell.column.columnDef.minSize,\n                    width: cell.column.getSize(),\n                    ...cell.column.columnDef.style,\n                  };\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      {...styleProps}\n                    >\n                      <Truncate>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </Truncate>\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableBody>\n        </ConditionalWrapper>\n        <TablePagination\n          count={totalCount}\n          onPageChange={(nextPage) => {\n            const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n            table.setPageIndex(pageIndex);\n          }}\n          onRowsPerPageChange={(nextRowsPerPage) => {\n            const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n            table.setPageSize(pageSize);\n          }}\n        />\n      </Table>\n    </>\n  );\n};\n\nconst TablePagination = ({\n  count,\n  defaultPage = 1,\n  defaultRowsPerPage: defaultRowsPerPageProp,\n  onPageChange: onPageChangeProp,\n  onRowsPerPageChange: onRowsPerPageChangeProp,\n  page: pageProp,\n  rowsPerPage: rowsPerPageProp,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  showFirstButton = false,\n  showLastButton = false,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const defaultRowsPerPage = defaultRowsPerPageProp ?? ensureArray(rowsPerPageOptions)[0];\n  const [page, setPage] = useState(pageProp ?? defaultPage);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageProp ?? defaultRowsPerPage);\n\n  useEffect(() => {\n    const isControlled = (pageProp !== undefined);\n    if (isControlled) {\n      setPage(pageProp);\n    }\n  }, [pageProp]);\n\n  useEffect(() => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (isControlled) {\n      setRowsPerPage(rowsPerPageProp);\n    }\n  }, [rowsPerPageProp]);\n\n  const onPageChange = useCallback((nextPage) => {\n    const isControlled = (pageProp !== undefined);\n    if (!isControlled) {\n      setPage(nextPage);\n    }\n\n    if (typeof onPageChangeProp === 'function') {\n      onPageChangeProp(nextPage);\n    }\n  }, [pageProp, onPageChangeProp]);\n\n  const onRowsPerPageChange = useCallback((nextRowsPerPage) => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (!isControlled) {\n      setRowsPerPage(nextRowsPerPage);\n    }\n\n    if (typeof onRowsPerPageChangeProp === 'function') {\n      onRowsPerPageChangeProp(nextRowsPerPage);\n    }\n  }, [rowsPerPageProp, onRowsPerPageChangeProp]);\n\n  const totalPages = Math.ceil(count / rowsPerPage);\n  const handlePageChange = (event) => {\n    const nextPage = ensureNumber(event.target.value);\n    if (nextPage <= 1) {\n      onPageChange(1);\n    } else if (nextPage >= totalPages) {\n      onPageChange(totalPages);\n    } else {\n      onPageChange(nextPage);\n    }\n  };\n  const handleRowsPerPageChange = (event) => {\n    const nextRowsPerPage = ensureNumber(event.target.value);\n    if (nextRowsPerPage > 0) {\n      onPageChange(1);\n      onRowsPerPageChange(nextRowsPerPage);\n    }\n  };\n  const canPreviousPage = (page > 1);\n  const canNextPage = (page < totalPages);\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      justifyContent=\"flex-end\"\n      backgroundColor={colorStyle.background.secondary}\n      px=\"6x\"\n      py=\"3x\"\n    >\n      <Text mr=\"2x\">\n        Total: {count}\n      </Text>\n      <Divider\n        orientation=\"vertical\"\n        height=\"6x\"\n      />\n      <Menu>\n        <MenuButton variant=\"ghost\">\n          {rowsPerPage} per page\n        </MenuButton>\n        <MenuList\n          onClick={handleRowsPerPageChange}\n          width=\"100%\"\n        >\n          {rowsPerPageOptions.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n            >\n              {option}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      <Divider\n        orientation=\"vertical\"\n        height=\"6x\"\n      />\n      <Space width=\"2x\" />\n      <Input\n        width=\"10x\"\n        px={0}\n        textAlign=\"center\"\n        onChange={handlePageChange}\n        value={page}\n      />\n      <Space width=\"2x\" />\n      <Text>/</Text>\n      <Space width=\"2x\" />\n      <Text>{totalPages}</Text>\n      <Space width=\"2x\" />\n      <ButtonGroup\n        variant=\"secondary\"\n        sx={{\n          '> *:not(:first-of-type)': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button\n          width=\"8x\"\n          disabled={!canPreviousPage}\n          onClick={(event) => {\n            onPageChange(page - 1);\n          }}\n        >\n          <AngleLeftIcon />\n        </Button>\n        <Button\n          width=\"8x\"\n          disabled={!canNextPage}\n          onClick={(event) => {\n            onPageChange(page + 1);\n          }}\n        >\n          <AngleRightIcon />\n        </Button>\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { AngleLeftIcon, AngleRightIcon } from '@tonic-ui/react-icons';\nimport { ensureArray, ensureNumber } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Endpoint',\n      accessorKey: 'endpoint',\n      size: 200,\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 150,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const isTableScrollingEnabled = layout !== 'table';\n  const currentPage = table.getState().pagination.pageIndex + 1;\n  const totalCount = table.getCoreRowModel().rows.length;\n  let tableStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const headerHeight = 36;\n    const cellHeight = 36;\n    const footerHeight = 56;\n    const rowsToDisplay = 10;\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight + footerHeight,\n    };\n  }\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>Current page: {currentPage}</Text>\n      </Box>\n      <Table\n        layout={layout}\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <ConditionalWrapper\n          condition={isTableScrollingEnabled}\n          wrapper={children => (\n            <TableScrollbar\n              height=\"100%\"\n              overflow=\"visible\" // Make the scrollbar visible\n            >\n              {children}\n            </TableScrollbar>\n          )}\n        >\n          <TableBody>\n            {table.getRowModel().rows.map(row => (\n              <TableRow\n                key={row.id}\n                _hover={{\n                  backgroundColor: colorStyle.background.highlighted,\n                }}\n              >\n                {row.getVisibleCells().map(cell => {\n                  const styleProps = {\n                    minWidth: cell.column.columnDef.minSize,\n                    width: cell.column.getSize(),\n                    ...cell.column.columnDef.style,\n                  };\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      {...styleProps}\n                    >\n                      <Truncate>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </Truncate>\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableBody>\n        </ConditionalWrapper>\n        <TablePagination\n          count={totalCount}\n          onPageChange={(nextPage) => {\n            const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n            table.setPageIndex(pageIndex);\n          }}\n          onRowsPerPageChange={(nextRowsPerPage) => {\n            const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n            table.setPageSize(pageSize);\n          }}\n        />\n      </Table>\n    </>\n  );\n};\n\nconst TablePagination = ({\n  count,\n  defaultPage = 1,\n  defaultRowsPerPage: defaultRowsPerPageProp,\n  onPageChange: onPageChangeProp,\n  onRowsPerPageChange: onRowsPerPageChangeProp,\n  page: pageProp,\n  rowsPerPage: rowsPerPageProp,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  showFirstButton = false,\n  showLastButton = false,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const defaultRowsPerPage = defaultRowsPerPageProp ?? ensureArray(rowsPerPageOptions)[0];\n  const [page, setPage] = useState(pageProp ?? defaultPage);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageProp ?? defaultRowsPerPage);\n\n  useEffect(() => {\n    const isControlled = (pageProp !== undefined);\n    if (isControlled) {\n      setPage(pageProp);\n    }\n  }, [pageProp]);\n\n  useEffect(() => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (isControlled) {\n      setRowsPerPage(rowsPerPageProp);\n    }\n  }, [rowsPerPageProp]);\n\n  const onPageChange = useCallback((nextPage) => {\n    const isControlled = (pageProp !== undefined);\n    if (!isControlled) {\n      setPage(nextPage);\n    }\n\n    if (typeof onPageChangeProp === 'function') {\n      onPageChangeProp(nextPage);\n    }\n  }, [pageProp, onPageChangeProp]);\n\n  const onRowsPerPageChange = useCallback((nextRowsPerPage) => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (!isControlled) {\n      setRowsPerPage(nextRowsPerPage);\n    }\n\n    if (typeof onRowsPerPageChangeProp === 'function') {\n      onRowsPerPageChangeProp(nextRowsPerPage);\n    }\n  }, [rowsPerPageProp, onRowsPerPageChangeProp]);\n\n  const totalPages = Math.ceil(count / rowsPerPage);\n  const handlePageChange = (event) => {\n    const nextPage = ensureNumber(event.target.value);\n    if (nextPage <= 1) {\n      onPageChange(1);\n    } else if (nextPage >= totalPages) {\n      onPageChange(totalPages);\n    } else {\n      onPageChange(nextPage);\n    }\n  };\n  const handleRowsPerPageChange = (event) => {\n    const nextRowsPerPage = ensureNumber(event.target.value);\n    if (nextRowsPerPage > 0) {\n      onPageChange(1);\n      onRowsPerPageChange(nextRowsPerPage);\n    }\n  };\n  const canPreviousPage = (page > 1);\n  const canNextPage = (page < totalPages);\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      justifyContent=\"flex-end\"\n      backgroundColor={colorStyle.background.secondary}\n      px=\"6x\"\n      py=\"3x\"\n    >\n      <Text mr=\"2x\">\n        Total: {count}\n      </Text>\n      <Divider\n        orientation=\"vertical\"\n        height=\"6x\"\n      />\n      <Menu>\n        <MenuButton variant=\"ghost\">\n          {rowsPerPage} per page\n        </MenuButton>\n        <MenuList\n          onClick={handleRowsPerPageChange}\n          width=\"100%\"\n        >\n          {rowsPerPageOptions.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n            >\n              {option}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      <Divider\n        orientation=\"vertical\"\n        height=\"6x\"\n      />\n      <Space width=\"2x\" />\n      <Input\n        width=\"10x\"\n        px={0}\n        textAlign=\"center\"\n        onChange={handlePageChange}\n        value={page}\n      />\n      <Space width=\"2x\" />\n      <Text>/</Text>\n      <Space width=\"2x\" />\n      <Text>{totalPages}</Text>\n      <Space width=\"2x\" />\n      <ButtonGroup\n        variant=\"secondary\"\n        sx={{\n          '> *:not(:first-of-type)': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button\n          width=\"8x\"\n          disabled={!canPreviousPage}\n          onClick={(event) => {\n            onPageChange(page - 1);\n          }}\n        >\n          <AngleLeftIcon />\n        </Button>\n        <Button\n          width=\"8x\"\n          disabled={!canNextPage}\n          onClick={(event) => {\n            onPageChange(page + 1);\n          }}\n        >\n          <AngleRightIcon />\n        </Button>\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"row-expanding",children:["Row expanding",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-expanding",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:row_expanding,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  ButtonBase,\n  Collapse,\n  Flex,\n  Grid,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { AngleRightIcon } from '@tonic-ui/react-icons';\nimport {\n  createTransitionStyle,\n  dataAttr,\n  getEnterTransitionProps,\n  getExitTransitionProps,\n  transitionEasing,\n} from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n    const entries = Object.entries(row.original);\n    const renderValue = (value) => {\n      if (Array.isArray(value)) {\n        return value.map(item => <Text key={item}>{item}</Text>);\n      }\n\n      if (typeof value === 'boolean') {\n        return value.toString();\n      }\n\n      return value;\n    };\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          <Grid\n            templateColumns=\"auto auto\"\n            columnGap=\"10x\"\n            rowGap=\"1x\"\n          >\n            {entries.map(([key, value]) => {\n              return (\n                <Fragment key={key}>\n                  <TextLabel>\n                    {key}\n                  </TextLabel>\n                  <Text>\n                    {renderValue(value)}\n                  </Text>\n                </Fragment>\n              );\n            })}\n          </Grid>\n        </Box>\n      </Flex>\n    );\n  };\n\n  /*\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          {JSON.stringify(row.original, null, 2)}\n        </Box>\n      </Flex>\n    );\n  };\n  */\n\n  const columns = useMemo(() => [\n    {\n      id: 'expand',\n      header: () => null,\n      cell: ({ row }) => {\n        const canExpand = row.getCanExpand();\n        const isExpanded = row.getIsExpanded();\n\n        if (!canExpand) {\n          return null;\n        }\n\n        return (\n          <TableRowToggleIcon\n            isExpanded={isExpanded}\n            onClick={row.getToggleExpandedHandler()}\n          />\n        );\n      },\n      size: 48,\n    },\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getRowCanExpand: () => true,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableHeaderRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableHeaderCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableHeaderCell>\n              );\n            })}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <Fragment key={row.id}>\n            <TableRow\n              data-selected={dataAttr(row.getIsExpanded())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n            {(row.getCanExpand() && layout === 'flexbox') && (\n              <Collapse in={row.getIsExpanded()}>\n                {renderExpandedRow({ row })}\n              </Collapse>\n            )}\n            {(row.getCanExpand() && layout === 'table') && (\n              <TableRow>\n                <TableCell\n                  padding={0}\n                  borderBottom={0}\n                  colSpan={row.getVisibleCells().length}\n                >\n                  <Collapse in={row.getIsExpanded()}>\n                    {renderExpandedRow({ row })}\n                  </Collapse>\n                </TableCell>\n              </TableRow>\n            )}\n          </Fragment>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nconst TableRowToggleIcon = forwardRef((\n  {\n    isExpanded,\n    ...rest\n  },\n  ref,\n) => {\n  const timeout = isExpanded\n    ? Math.floor(133 * 0.7) // exit\n    : 133; // enter\n  const easing = transitionEasing.easeOut;\n  const transitionProps = isExpanded\n    ? getEnterTransitionProps({ timeout, easing })\n    : getExitTransitionProps({ timeout, easing });\n  const styleProps = {\n    transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',\n    transition: createTransitionStyle('transform', transitionProps),\n  };\n\n  return (\n    <ButtonBase {...rest}>\n      <AngleRightIcon size=\"4x\" {...styleProps} />\n    </ButtonBase>\n  );\n});\nTableRowToggleIcon.displayName = 'TableRowToggleIcon';\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  ButtonBase,\n  Collapse,\n  Flex,\n  Grid,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { AngleRightIcon } from '@tonic-ui/react-icons';\nimport {\n  createTransitionStyle,\n  dataAttr,\n  getEnterTransitionProps,\n  getExitTransitionProps,\n  transitionEasing,\n} from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n    const entries = Object.entries(row.original);\n    const renderValue = (value) => {\n      if (Array.isArray(value)) {\n        return value.map(item => <Text key={item}>{item}</Text>);\n      }\n\n      if (typeof value === 'boolean') {\n        return value.toString();\n      }\n\n      return value;\n    };\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          <Grid\n            templateColumns=\"auto auto\"\n            columnGap=\"10x\"\n            rowGap=\"1x\"\n          >\n            {entries.map(([key, value]) => {\n              return (\n                <Fragment key={key}>\n                  <TextLabel>\n                    {key}\n                  </TextLabel>\n                  <Text>\n                    {renderValue(value)}\n                  </Text>\n                </Fragment>\n              );\n            })}\n          </Grid>\n        </Box>\n      </Flex>\n    );\n  };\n\n  /*\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          {JSON.stringify(row.original, null, 2)}\n        </Box>\n      </Flex>\n    );\n  };\n  */\n\n  const columns = useMemo(() => [\n    {\n      id: 'expand',\n      header: () => null,\n      cell: ({ row }) => {\n        const canExpand = row.getCanExpand();\n        const isExpanded = row.getIsExpanded();\n\n        if (!canExpand) {\n          return null;\n        }\n\n        return (\n          <TableRowToggleIcon\n            isExpanded={isExpanded}\n            onClick={row.getToggleExpandedHandler()}\n          />\n        );\n      },\n      size: 48,\n    },\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getRowCanExpand: () => true,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableHeaderRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableHeaderCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableHeaderCell>\n              );\n            })}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <Fragment key={row.id}>\n            <TableRow\n              data-selected={dataAttr(row.getIsExpanded())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n            {(row.getCanExpand() && layout === 'flexbox') && (\n              <Collapse in={row.getIsExpanded()}>\n                {renderExpandedRow({ row })}\n              </Collapse>\n            )}\n            {(row.getCanExpand() && layout === 'table') && (\n              <TableRow>\n                <TableCell\n                  padding={0}\n                  borderBottom={0}\n                  colSpan={row.getVisibleCells().length}\n                >\n                  <Collapse in={row.getIsExpanded()}>\n                    {renderExpandedRow({ row })}\n                  </Collapse>\n                </TableCell>\n              </TableRow>\n            )}\n          </Fragment>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nconst TableRowToggleIcon = forwardRef((\n  {\n    isExpanded,\n    ...rest\n  },\n  ref,\n) => {\n  const timeout = isExpanded\n    ? Math.floor(133 * 0.7) // exit\n    : 133; // enter\n  const easing = transitionEasing.easeOut;\n  const transitionProps = isExpanded\n    ? getEnterTransitionProps({ timeout, easing })\n    : getExitTransitionProps({ timeout, easing });\n  const styleProps = {\n    transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',\n    transition: createTransitionStyle('transform', transitionProps),\n  };\n\n  return (\n    <ButtonBase {...rest}>\n      <AngleRightIcon size=\"4x\" {...styleProps} />\n    </ButtonBase>\n  );\n});\nTableRowToggleIcon.displayName = 'TableRowToggleIcon';\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.p,{children:["The way the expanded row is displayed in the ",(0,o.jsx)(n.code,{children:"Table"})," component depends on the value of the ",(0,o.jsx)(n.code,{children:"layout"})," prop."]}),"\n",(0,o.jsxs)(n.p,{children:["If the ",(0,o.jsx)(n.code,{children:"layout"})," prop is set to ",(0,o.jsx)(n.code,{children:"flexbox"}),", the expanded row will appear below the current row. On the other hand, if the ",(0,o.jsx)(n.code,{children:"layout"})," prop is set to ",(0,o.jsx)(n.code,{children:"table"}),", the expanded row will be displayed within a ",(0,o.jsx)(n.code,{children:"TableCell"})," that spans across the visible cells in a new row."]}),"\n",(0,o.jsxs)(n.p,{children:["Below are the code snippets that demonstrate how to render the expanded row based on the ",(0,o.jsx)(n.code,{children:"layout"})," prop:"]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// layout='flexbox'\n<TableRow>\n  <TableCell>Cell 1</TableCell>\n  <TableCell>Cell 2</TableCell>\n  <TableCell>Cell 3</TableCell>\n</TableRow>\n{row.getCanExpand() && (\n  <Collapse in={row.getIsExpanded()}>\n    {renderExpandedRow({ row })}\n  </Collapse>\n)}\n"})}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// layout='table'\n<TableRow>\n  <TableCell>Cell 1</TableCell>\n  <TableCell>Cell 2</TableCell>\n  <TableCell>Cell 3</TableCell>\n</TableRow>\n{row.getCanExpand() && (\n  <TableRow>\n    <TableCell\n      padding={0}\n      borderBottom={0}\n      colSpan={row.getVisibleCells().length}\n    >\n      <Collapse in={row.getIsExpanded()}>\n        {renderExpandedRow({ row })}\n      </Collapse>\n    </TableCell>\n  </TableRow>\n)}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"row-selection",children:["Row selection",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-selection",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:row_selection,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [rowSelection, setRowSelection] = useState({});\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 48,\n      style: {\n        px: '4x',\n      },\n    },\n    {\n      accessorKey: 'eventType',\n      header: () => (\n        <Truncate>\n          Event Type\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 240,\n    },\n    {\n      accessorKey: 'affectedDevices',\n      header: () => (\n        <Truncate>\n          Affected Devices\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      accessorKey: 'detections',\n      header: () => (\n        <Truncate>\n          Detections\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 48,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const selectedRowCount = Object.keys(rowSelection).length;\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      flexRender(header.column.columnDef.header, header.getContext())\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [rowSelection, setRowSelection] = useState({});\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 48,\n      style: {\n        px: '4x',\n      },\n    },\n    {\n      accessorKey: 'eventType',\n      header: () => (\n        <Truncate>\n          Event Type\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 240,\n    },\n    {\n      accessorKey: 'affectedDevices',\n      header: () => (\n        <Truncate>\n          Affected Devices\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      accessorKey: 'detections',\n      header: () => (\n        <Truncate>\n          Detections\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 48,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const selectedRowCount = Object.keys(rowSelection).length;\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      flexRender(header.column.columnDef.header, header.getContext())\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"row-ordering-dnd",children:["Row ordering (DnD)",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-ordering-dnd",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:row_ordering_dnd,file:{data:"import {\n  DndContext,\n  DragOverlay,\n  KeyboardSensor,\n  MouseSensor,\n  PointerSensor,\n  defaultDropAnimationSideEffects,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Flex,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr, isNullish } from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useCallback, useMemo, useState } from 'react';\nimport HandleIcon from './icons/icon-handle';\n\nconst DragHandle = forwardRef((\n  {\n    sx,\n    ...rest\n  },\n  ref,\n) => {\n  return (\n    <Flex\n      sx={[\n        {\n          '[role=\"row\"]:hover > [role=\"cell\"] &': {\n            opacity: 1,\n          },\n          opacity: 0,\n          cursor: 'move',\n          px: '1x',\n          width: '4x',\n          position: 'absolute',\n          left: 0,\n        },\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n      {...rest}\n    />\n  );\n});\nDragHandle.displayName = 'DragHandle';\n\nconst SortableItem = ({ children, id }) => {\n  const { attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition } = useSortable({ id });\n  return children({ attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition });\n};\n\nconst SortableOverlay = ({ children }) => {\n  const dropAnimationConfig = useMemo(() => ({\n    sideEffects: defaultDropAnimationSideEffects({\n      styles: {\n        active: {\n          opacity: '0.4',\n        },\n      },\n    }),\n  }), []);\n\n  return (\n    <DragOverlay dropAnimation={dropAnimationConfig}>\n      {children}\n    </DragOverlay>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [data, setData] = useState([\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ]);\n  const [rowSelection, setRowSelection] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 48,\n      style: {\n        px: '4x',\n      },\n    },\n    {\n      accessorKey: 'eventType',\n      header: () => (\n        <Truncate>\n          Event Type\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 240,\n    },\n    {\n      accessorKey: 'affectedDevices',\n      header: () => (\n        <Truncate>\n          Affected Devices\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      accessorKey: 'detections',\n      header: () => (\n        <Truncate>\n          Detections\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 48,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const selectedRowCount = Object.keys(rowSelection).length;\n  const rows = table.getRowModel().rows;\n\n  const [activeId, setActiveId] = useState(null);\n  const getRowById = (id) => rows.find(row => row.id === id);\n  const sensors = useSensors(\n    useSensor(MouseSensor),\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const handleDragStart = useCallback((event) => {\n    setActiveId(event.active.id);\n  }, []);\n  const handleDragEnd = useCallback((event) => {\n    const { over, active } = event;\n    if (over && (active.id !== over?.id)) {\n      const activeIndex = rows.findIndex(({ id }) => id === active.id);\n      const overIndex = rows.findIndex(({ id }) => id === over.id);\n\n      // Update the data\n      setData(arrayMove(data, activeIndex, overIndex));\n    }\n    setActiveId(null);\n  }, [data, rows]);\n  const handleDragCancel = useCallback((event) => {\n    setActiveId(null);\n  }, []);\n\n  const renderRow = useCallback((row) => {\n    if (!row) {\n      return null;\n    }\n\n    return (\n      <SortableItem id={row.id}>\n        {({\n          attributes,\n          isDragging,\n          listeners,\n          setActivatorNodeRef,\n          setNodeRef,\n          transform,\n          transition,\n        }) => {\n          const sx = {\n            cursor: isDragging ? 'move' : undefined,\n            _hover: {\n              backgroundColor: isDragging ? 'gray:70' : colorStyle.background.highlighted,\n            },\n            _selected: {\n              backgroundColor: isDragging ? 'gray:70' : colorStyle.background.selected,\n            },\n            opacity: isDragging ? 0.4 : undefined,\n            transform: CSS.Translate.toString(transform),\n            transition,\n            // Ensure the draggable element appears on top of other elements when dragged\n            zIndex: isDragging ? 1 : 0,\n          };\n\n          return (\n            <TableRow\n              ref={setNodeRef}\n              data-selected={dataAttr(row.getIsSelected())}\n              sx={sx}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n\n                if (cell.column.id === 'selection') {\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      sx={{\n                        ...styleProps,\n                        position: 'relative',\n                      }}\n                    >\n                      <Flex alignItems=\"center\">\n                        <DragHandle\n                          ref={setActivatorNodeRef}\n                          {...attributes}\n                          {...listeners}\n                        >\n                          <HandleIcon />\n                        </DragHandle>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </Flex>\n                    </TableCell>\n                  );\n                }\n\n                return (\n                  <TableCell\n                    key={cell.id}\n                    sx={{\n                      ...styleProps,\n                    }}\n                  >\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          );\n        }}\n      </SortableItem>\n    );\n  }, [colorStyle]);\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <DndContext\n        sensors={sensors}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        onDragCancel={handleDragCancel}\n      >\n        <SortableContext\n          items={rows}\n        >\n          <Table layout={layout}>\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n                    return (\n                      <TableHeaderCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          flexRender(header.column.columnDef.header, header.getContext())\n                        )}\n                      </TableHeaderCell>\n                    );\n                  })}\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {rows.map(row => (\n                <Fragment key={row.id}>\n                  {renderRow(row)}\n                </Fragment>\n              ))}\n              <SortableOverlay>\n                {!isNullish(activeId) ? renderRow(getRowById(activeId)) : null}\n              </SortableOverlay>\n            </TableBody>\n          </Table>\n        </SortableContext>\n      </DndContext>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{"src/pages/components/table/icons/icon-handle.js":'import { SVGIcon } from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst Icon = (props) => (\n  <SVGIcon width="2x" height="4x" viewBox="0 0 8 16" {...props}>\n    <circle cx="2" cy="2" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="6" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="10" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="14" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="2" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="6" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="10" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="14" r="1" fill="#5E5E5E"/>\n  </SVGIcon>\n);\n\nexport default Icon;'},raw:"import {\n  DndContext,\n  DragOverlay,\n  KeyboardSensor,\n  MouseSensor,\n  PointerSensor,\n  defaultDropAnimationSideEffects,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Flex,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr, isNullish } from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useCallback, useMemo, useState } from 'react';\nimport HandleIcon from '@/pages/components/table/icons/icon-handle';\n\nconst DragHandle = forwardRef((\n  {\n    sx,\n    ...rest\n  },\n  ref,\n) => {\n  return (\n    <Flex\n      sx={[\n        {\n          '[role=\"row\"]:hover > [role=\"cell\"] &': {\n            opacity: 1,\n          },\n          opacity: 0,\n          cursor: 'move',\n          px: '1x',\n          width: '4x',\n          position: 'absolute',\n          left: 0,\n        },\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n      {...rest}\n    />\n  );\n});\nDragHandle.displayName = 'DragHandle';\n\nconst SortableItem = ({ children, id }) => {\n  const { attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition } = useSortable({ id });\n  return children({ attributes, isDragging, listeners, setActivatorNodeRef, setNodeRef, transform, transition });\n};\n\nconst SortableOverlay = ({ children }) => {\n  const dropAnimationConfig = useMemo(() => ({\n    sideEffects: defaultDropAnimationSideEffects({\n      styles: {\n        active: {\n          opacity: '0.4',\n        },\n      },\n    }),\n  }), []);\n\n  return (\n    <DragOverlay dropAnimation={dropAnimationConfig}>\n      {children}\n    </DragOverlay>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [data, setData] = useState([\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ]);\n  const [rowSelection, setRowSelection] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 48,\n      style: {\n        px: '4x',\n      },\n    },\n    {\n      accessorKey: 'eventType',\n      header: () => (\n        <Truncate>\n          Event Type\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 240,\n    },\n    {\n      accessorKey: 'affectedDevices',\n      header: () => (\n        <Truncate>\n          Affected Devices\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      accessorKey: 'detections',\n      header: () => (\n        <Truncate>\n          Detections\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 48,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const selectedRowCount = Object.keys(rowSelection).length;\n  const rows = table.getRowModel().rows;\n\n  const [activeId, setActiveId] = useState(null);\n  const getRowById = (id) => rows.find(row => row.id === id);\n  const sensors = useSensors(\n    useSensor(MouseSensor),\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const handleDragStart = useCallback((event) => {\n    setActiveId(event.active.id);\n  }, []);\n  const handleDragEnd = useCallback((event) => {\n    const { over, active } = event;\n    if (over && (active.id !== over?.id)) {\n      const activeIndex = rows.findIndex(({ id }) => id === active.id);\n      const overIndex = rows.findIndex(({ id }) => id === over.id);\n\n      // Update the data\n      setData(arrayMove(data, activeIndex, overIndex));\n    }\n    setActiveId(null);\n  }, [data, rows]);\n  const handleDragCancel = useCallback((event) => {\n    setActiveId(null);\n  }, []);\n\n  const renderRow = useCallback((row) => {\n    if (!row) {\n      return null;\n    }\n\n    return (\n      <SortableItem id={row.id}>\n        {({\n          attributes,\n          isDragging,\n          listeners,\n          setActivatorNodeRef,\n          setNodeRef,\n          transform,\n          transition,\n        }) => {\n          const sx = {\n            cursor: isDragging ? 'move' : undefined,\n            _hover: {\n              backgroundColor: isDragging ? 'gray:70' : colorStyle.background.highlighted,\n            },\n            _selected: {\n              backgroundColor: isDragging ? 'gray:70' : colorStyle.background.selected,\n            },\n            opacity: isDragging ? 0.4 : undefined,\n            transform: CSS.Translate.toString(transform),\n            transition,\n            // Ensure the draggable element appears on top of other elements when dragged\n            zIndex: isDragging ? 1 : 0,\n          };\n\n          return (\n            <TableRow\n              ref={setNodeRef}\n              data-selected={dataAttr(row.getIsSelected())}\n              sx={sx}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n\n                if (cell.column.id === 'selection') {\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      sx={{\n                        ...styleProps,\n                        position: 'relative',\n                      }}\n                    >\n                      <Flex alignItems=\"center\">\n                        <DragHandle\n                          ref={setActivatorNodeRef}\n                          {...attributes}\n                          {...listeners}\n                        >\n                          <HandleIcon />\n                        </DragHandle>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </Flex>\n                    </TableCell>\n                  );\n                }\n\n                return (\n                  <TableCell\n                    key={cell.id}\n                    sx={{\n                      ...styleProps,\n                    }}\n                  >\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          );\n        }}\n      </SortableItem>\n    );\n  }, [colorStyle]);\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <DndContext\n        sensors={sensors}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        onDragCancel={handleDragCancel}\n      >\n        <SortableContext\n          items={rows}\n        >\n          <Table layout={layout}>\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n                    return (\n                      <TableHeaderCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          flexRender(header.column.columnDef.header, header.getContext())\n                        )}\n                      </TableHeaderCell>\n                    );\n                  })}\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {rows.map(row => (\n                <Fragment key={row.id}>\n                  {renderRow(row)}\n                </Fragment>\n              ))}\n              <SortableOverlay>\n                {!isNullish(activeId) ? renderRow(getRowById(activeId)) : null}\n              </SortableOverlay>\n            </TableBody>\n          </Table>\n        </SortableContext>\n      </DndContext>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"sorting",children:["Sorting",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#sorting",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:sorting,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Code,\n  DarkMode,\n  Flex,\n  LightMode,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Tooltip,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { InfoOIcon, SortDownIcon, SortUpIcon } from '@tonic-ui/react-icons';\nimport {\n  useToggle,\n} from '@tonic-ui/react-hooks';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const [sorting, setSorting] = useState([\n    { id: 'eventType', desc: false },\n  ]);\n  const [enableSortingRemoval, toggleEnableSortingRemoval] = useToggle(false);\n\n  useEffect(() => {\n    if (enableSortingRemoval) {\n      setSorting([]);\n    }\n  }, [enableSortingRemoval]);\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      sorting,\n    },\n    // https://tanstack.com/table/v8/docs/api/features/sorting\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval, // Enables/Disables the ability to remove sorting for the table\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const enableSortingRemovalTooltipLabel = (\n    <Box p=\"1x\">\n      <Text>\n        If <Code>true</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `none` → ...\n      </Text>\n      <Text>\n        If <Code>false</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `desc` → `asc` → ...\n      </Text>\n    </Box>\n  );\n\n  return (<>\n    <Box mb=\"4x\" px=\"3x\">\n      <Checkbox\n        checked={enableSortingRemoval}\n        onChange={() => {\n          toggleEnableSortingRemoval();\n        }}\n      >\n        <Flex alignItems=\"center\">\n          Enable the ability to remove sorting for the table\n          <Space width=\"2x\" />\n          <Tooltip\n            label={colorMode === 'dark'\n              ? <LightMode>{enableSortingRemovalTooltipLabel}</LightMode>\n              : <DarkMode>{enableSortingRemovalTooltipLabel}</DarkMode>\n            }\n          >\n            <InfoOIcon />\n          </Tooltip>\n        </Flex>\n      </Checkbox>\n    </Box>\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableHeaderRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              let styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              if (header.column.getCanSort()) {\n                styleProps = {\n                  ...styleProps,\n                  cursor: 'pointer',\n                  userSelect: 'none',\n                  _hover: {\n                    backgroundColor: colorStyle.background.highlighted,\n                  },\n                };\n              }\n              if (header.column.getIsSorted()) {\n                styleProps = {\n                  ...styleProps,\n                  color: colorStyle.color.emphasis,\n                };\n              }\n              return (\n                <TableHeaderCell\n                  key={header.id}\n                  onClick={header.column.getToggleSortingHandler()}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Flex alignItems=\"center\">\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                      {{\n                        asc: (<SortUpIcon size={20} ml=\"1x\" />),\n                        desc: (<SortDownIcon size={20} ml=\"1x\" />),\n                      }[header.column.getIsSorted()] ?? null}\n                    </Flex>\n                  )}\n                </TableHeaderCell>\n              );\n            })}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <TableRow\n            key={row.id}\n            _hover={{\n              backgroundColor: colorStyle.background.highlighted,\n            }}\n          >\n            {row.getVisibleCells().map(cell => {\n              const styleProps = {\n                minWidth: cell.column.columnDef.minSize,\n                width: cell.column.getSize(),\n                ...cell.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={cell.id}\n                  {...styleProps}\n                >\n                  <Truncate>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Truncate>\n                </TableCell>\n              );\n            })}\n            </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </>);\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Code,\n  DarkMode,\n  Flex,\n  LightMode,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Tooltip,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { InfoOIcon, SortDownIcon, SortUpIcon } from '@tonic-ui/react-icons';\nimport {\n  useToggle,\n} from '@tonic-ui/react-hooks';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const [sorting, setSorting] = useState([\n    { id: 'eventType', desc: false },\n  ]);\n  const [enableSortingRemoval, toggleEnableSortingRemoval] = useToggle(false);\n\n  useEffect(() => {\n    if (enableSortingRemoval) {\n      setSorting([]);\n    }\n  }, [enableSortingRemoval]);\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      sorting,\n    },\n    // https://tanstack.com/table/v8/docs/api/features/sorting\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval, // Enables/Disables the ability to remove sorting for the table\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const enableSortingRemovalTooltipLabel = (\n    <Box p=\"1x\">\n      <Text>\n        If <Code>true</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `none` → ...\n      </Text>\n      <Text>\n        If <Code>false</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `desc` → `asc` → ...\n      </Text>\n    </Box>\n  );\n\n  return (<>\n    <Box mb=\"4x\" px=\"3x\">\n      <Checkbox\n        checked={enableSortingRemoval}\n        onChange={() => {\n          toggleEnableSortingRemoval();\n        }}\n      >\n        <Flex alignItems=\"center\">\n          Enable the ability to remove sorting for the table\n          <Space width=\"2x\" />\n          <Tooltip\n            label={colorMode === 'dark'\n              ? <LightMode>{enableSortingRemovalTooltipLabel}</LightMode>\n              : <DarkMode>{enableSortingRemovalTooltipLabel}</DarkMode>\n            }\n          >\n            <InfoOIcon />\n          </Tooltip>\n        </Flex>\n      </Checkbox>\n    </Box>\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableHeaderRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              let styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              if (header.column.getCanSort()) {\n                styleProps = {\n                  ...styleProps,\n                  cursor: 'pointer',\n                  userSelect: 'none',\n                  _hover: {\n                    backgroundColor: colorStyle.background.highlighted,\n                  },\n                };\n              }\n              if (header.column.getIsSorted()) {\n                styleProps = {\n                  ...styleProps,\n                  color: colorStyle.color.emphasis,\n                };\n              }\n              return (\n                <TableHeaderCell\n                  key={header.id}\n                  onClick={header.column.getToggleSortingHandler()}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Flex alignItems=\"center\">\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                      {{\n                        asc: (<SortUpIcon size={20} ml=\"1x\" />),\n                        desc: (<SortDownIcon size={20} ml=\"1x\" />),\n                      }[header.column.getIsSorted()] ?? null}\n                    </Flex>\n                  )}\n                </TableHeaderCell>\n              );\n            })}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <TableRow\n            key={row.id}\n            _hover={{\n              backgroundColor: colorStyle.background.highlighted,\n            }}\n          >\n            {row.getVisibleCells().map(cell => {\n              const styleProps = {\n                minWidth: cell.column.columnDef.minSize,\n                width: cell.column.getSize(),\n                ...cell.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={cell.id}\n                  {...styleProps}\n                >\n                  <Truncate>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Truncate>\n                </TableCell>\n              );\n            })}\n            </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </>);\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h3,{id:"virtualized-rows",children:["Virtualized rows",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#virtualized-rows",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,Object.assign({},{component:virtualized_rows,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport {\n  Box,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useMemo, useRef } from 'react';\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Endpoint',\n      accessorKey: 'endpoint',\n      size: 200,\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 100,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const scrollRef = useRef();\n  const headerHeight = 36;\n  const cellHeight = 36;\n  const rowsToDisplay = 10;\n  const tableStyleProps = {\n    height: headerHeight + rowsToDisplay * cellHeight,\n  };\n\n  // https://tanstack.com/virtual/v3/docs/api/virtualizer\n  const rowVirtualizer = useVirtualizer({\n    count: table.getRowModel().rows.length,\n    getScrollElement: () => scrollRef.current?.firstChild,\n    estimateSize: (index) => cellHeight,\n    overscan: rowsToDisplay,\n  });\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>Total: {table.getRowModel().rows.length}</Text>\n      </Box>\n      <Table\n        layout=\"flexbox\"\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableScrollbar\n          ref={scrollRef}\n          height=\"100%\"\n          overflow=\"visible\" // Make the scrollbar visible\n        >\n          <Box\n            position=\"relative\"\n            width=\"100%\"\n            style={{\n              height: rowVirtualizer.getTotalSize(),\n            }}\n          >\n            <TableBody>\n              {rowVirtualizer.getVirtualItems().map(virtualRow => {\n                const row = table.getRowModel().rows[virtualRow.index];\n                return (\n                  <Box\n                    key={virtualRow.key}\n                    position=\"absolute\"\n                    top={0}\n                    left={0}\n                    width=\"100%\"\n                    style={{\n                      height: `${virtualRow.size}px`,\n                      transform: `translateY(${virtualRow.start}px)`,\n                    }}\n                  >\n                    {row && (\n                      <TableRow\n                        _hover={{\n                          backgroundColor: colorStyle.background.highlighted,\n                        }}\n                      >\n                        {row.getVisibleCells().map(cell => {\n                          const styleProps = {\n                            minWidth: cell.column.columnDef.minSize,\n                            width: cell.column.getSize(),\n                            ...cell.column.columnDef.style,\n                          };\n                          return (\n                            <TableCell\n                              key={cell.id}\n                              {...styleProps}\n                            >\n                              <Truncate>\n                                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                              </Truncate>\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    )}\n                  </Box>\n                );\n              })}\n            </TableBody>\n          </Box>\n        </TableScrollbar>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport {\n  Box,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useMemo, useRef } from 'react';\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Endpoint',\n      accessorKey: 'endpoint',\n      size: 200,\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 100,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (originalRow, index) => {\n      // Identify individual rows that are originating from any server-side operation\n      return originalRow.id;\n    },\n  });\n\n  const scrollRef = useRef();\n  const headerHeight = 36;\n  const cellHeight = 36;\n  const rowsToDisplay = 10;\n  const tableStyleProps = {\n    height: headerHeight + rowsToDisplay * cellHeight,\n  };\n\n  // https://tanstack.com/virtual/v3/docs/api/virtualizer\n  const rowVirtualizer = useVirtualizer({\n    count: table.getRowModel().rows.length,\n    getScrollElement: () => scrollRef.current?.firstChild,\n    estimateSize: (index) => cellHeight,\n    overscan: rowsToDisplay,\n  });\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>Total: {table.getRowModel().rows.length}</Text>\n      </Box>\n      <Table\n        layout=\"flexbox\"\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableScrollbar\n          ref={scrollRef}\n          height=\"100%\"\n          overflow=\"visible\" // Make the scrollbar visible\n        >\n          <Box\n            position=\"relative\"\n            width=\"100%\"\n            style={{\n              height: rowVirtualizer.getTotalSize(),\n            }}\n          >\n            <TableBody>\n              {rowVirtualizer.getVirtualItems().map(virtualRow => {\n                const row = table.getRowModel().rows[virtualRow.index];\n                return (\n                  <Box\n                    key={virtualRow.key}\n                    position=\"absolute\"\n                    top={0}\n                    left={0}\n                    width=\"100%\"\n                    style={{\n                      height: `${virtualRow.size}px`,\n                      transform: `translateY(${virtualRow.start}px)`,\n                    }}\n                  >\n                    {row && (\n                      <TableRow\n                        _hover={{\n                          backgroundColor: colorStyle.background.highlighted,\n                        }}\n                      >\n                        {row.getVisibleCells().map(cell => {\n                          const styleProps = {\n                            minWidth: cell.column.columnDef.minSize,\n                            width: cell.column.getSize(),\n                            ...cell.column.columnDef.style,\n                          };\n                          return (\n                            <TableCell\n                              key={cell.id}\n                              {...styleProps}\n                            >\n                              <Truncate>\n                                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                              </Truncate>\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    )}\n                  </Box>\n                );\n              })}\n            </TableBody>\n          </Box>\n        </TableScrollbar>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(n.h2,{id:"commonly-asked-questions",children:["Commonly Asked Questions",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#commonly-asked-questions",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h3,{id:"how-to-make-the-table-body-vertically-scrollable",children:["How to make the table body vertically scrollable?",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-to-make-the-table-body-vertically-scrollable",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:"To make the table body vertically scrollable, you can follow these steps:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Calculate the height of the table based on the number of rows to display."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const cellHeight = 36;\nconst headerHeight = 36;\nconst rowsToDisplay = 10;\nconst tableHeight = headerHeight + rowsToDisplay * cellHeight;\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsxs)(n.li,{children:["Wrap the ",(0,o.jsx)(n.code,{children:"TableBody"})," component with a ",(0,o.jsx)(n.code,{children:"TableScrollbar"})," component, and set the ",(0,o.jsx)(n.code,{children:"height"})," and ",(0,o.jsx)(n.code,{children:"overflow"})," props of the ",(0,o.jsx)(n.code,{children:"TableScrollbar"})," component to control the scrolling behavior."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:'<Table\n  layout="flexbox"\n  height={tableHeight}\n>\n  <TableHeader>\n    <TableRow>\n      <TableHeaderCell>Cell<TableHeaderCell>\n      <TableHeaderCell>Cell<TableHeaderCell>\n    </TableRow>\n  </TableHeader>\n  <TableScrollbar\n    height="100%"\n    overflow="visible" // Make scrollbar visible\n  >\n    <TableBody>\n      <TableRow>\n        <TableCell>Cell<TableCell>\n        <TableCell>Cell<TableCell>\n      </TableRow>\n    </TableBody>\n  </TableScrollbar>\n</Table>\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"how-to-control-whether-to-enable-the-scrolling-feature",children:["How to control whether to enable the scrolling feature?",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-to-control-whether-to-enable-the-scrolling-feature",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["If you want to control whether to enable the scrolling feature dynamically, you can use a custom ",(0,o.jsx)(n.code,{children:"ConditionWrapper"})," component to conditionally wrap ",(0,o.jsx)(n.code,{children:"TableBody"})," with the ",(0,o.jsx)(n.code,{children:"TableScrollbar"})," component."]}),"\n",(0,o.jsxs)(n.p,{children:["Here's an example implementation of the ",(0,o.jsx)(n.code,{children:"ConditionalWrapper"})," component:"]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:"const ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"And here's how you can use it in your code:"}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:'<Table\n  height={isTableScrollingEnabled ? tableHeight : undefined}\n>\n  <TableHeader>\n    <TableRow>\n      <TableHeaderCell>Cell<TableHeaderCell>\n      <TableHeaderCell>Cell<TableHeaderCell>\n    </TableRow>\n  </TableHeader>\n  <ConditionalWrapper\n    condition={isTableScrollingEnabled}\n    wrapper={children => (\n      <TableScrollbar\n        height="100%"\n        overflow="visible" // Make scrollbar visible\n      >\n        {children}\n      </TableScrollbar>\n    )}\n  >\n    <TableBody>\n      <TableRow>\n        <TableCell>Cell<TableCell>\n        <TableCell>Cell<TableCell>\n      </TableRow>\n    </TableBody>\n  </ConditionalWrapper>  \n</Table>\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"props",children:["Props",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h3,{id:"table-1",children:["Table",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#table-1",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"layout"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'flexbox'"}),(0,o.jsx)(n.td,{align:"left",children:"The layout of the table. One of: 'flexbox', 'table'"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"size"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'md'"}),(0,o.jsx)(n.td,{align:"left",children:"The size of TableCells. One of: 'sm', 'md', 'lg'"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"variant"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'default'"}),(0,o.jsx)(n.td,{align:"left",children:"The variant of the table style to use. One of: 'default', 'outline'"})]})]})]}),"\n",(0,o.jsxs)(n.h3,{id:"tableheader",children:["TableHeader",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheader",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tableheaderrow",children:["TableHeaderRow",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheaderrow",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tableheadercell",children:["TableHeaderCell",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheadercell",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tablebody",children:["TableBody",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablebody",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tablerow",children:["TableRow",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablerow",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tablecell",children:["TableCell",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablecell",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tablescrollbar",children:["TableScrollbar",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablescrollbar",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"TableScrollbar"})," component has the same set of props as the ",(0,o.jsx)(n.a,{href:"./scrollbar#props",children:"Scrollbar"})," component."]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode | function"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The content of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"width"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left",children:"'auto'"}),(0,o.jsxs)(n.td,{align:"left",children:["The width of the scrollbar. If set to 'auto', you can constrain the width using the ",(0,o.jsx)(n.code,{children:"minWidth"})," and ",(0,o.jsx)(n.code,{children:"maxWidth"})," props."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"height"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left",children:"'auto'"}),(0,o.jsxs)(n.td,{align:"left",children:["The height of the scrollbar. If set to 'auto', you can constrain the height using the ",(0,o.jsx)(n.code,{children:"minHeight"})," and ",(0,o.jsx)(n.code,{children:"maxHeight"})," props."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"minWidth"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The minimum width of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"maxWidth"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The maximum width of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"minHeight"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The minimum height of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"maxHeight"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The maximum height of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"minThumbWidth"}),(0,o.jsx)(n.td,{align:"left",children:"number"}),(0,o.jsx)(n.td,{align:"left",children:"32"}),(0,o.jsx)(n.td,{align:"left",children:"The minimum width of the thumb in pixels."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"minThumbHeight"}),(0,o.jsx)(n.td,{align:"left",children:"number"}),(0,o.jsx)(n.td,{align:"left",children:"32"}),(0,o.jsx)(n.td,{align:"left",children:"The minimum height of the thumb in pixels."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"onScroll"}),(0,o.jsx)(n.td,{align:"left",children:(0,o.jsx)(n.code,{children:"(event: UIEvent) => void"})}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"A callback function that is called when the scrollbar is scrolled."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"onUpdate"}),(0,o.jsx)(n.td,{align:"left",children:"function"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsxs)(n.td,{align:"left",children:["A callback function that is called when the scroll position or size of the content changes. The function is passed an object containing the following properties: ",(0,o.jsx)(n.code,{children:"left"}),", ",(0,o.jsx)(n.code,{children:"top"}),", ",(0,o.jsx)(n.code,{children:"scrollLeft"}),", ",(0,o.jsx)(n.code,{children:"scrollTop"}),", ",(0,o.jsx)(n.code,{children:"scrollWidth"}),", ",(0,o.jsx)(n.code,{children:"scrollHeight"}),", ",(0,o.jsx)(n.code,{children:"clientWidth"}),", ",(0,o.jsx)(n.code,{children:"clientHeight"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"overflow"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'auto'"}),(0,o.jsx)(n.td,{align:"left",children:"The overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"overflowX"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The horizontal overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"overflowY"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The vertical overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]})]})]})]})}var index_page=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,r.ah)(),e.components).wrapper;return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(_createMdxContent,e)})):_createMdxContent(e)}},56208:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/table",function(){return t(60976)}])},23638:function(e,n,t){"use strict";t.d(n,{Z:function(){return l}}),t(2784);var o=t(75928),r=t(52903),l=(0,o.Z)((0,r.tZ)("path",{d:"M15 1h-14c-0.6 0-1 0.4-1 1v12c0 0.6 0.4 1 1 1h14c0.6 0 1-0.4 1-1v-12c0-0.6-0.4-1-1-1zM1 14v-11h4v11h-4zM6 14v-11h4v11h-4zM15 14h-4v-11h4v11z"}),"ColumnsIcon")},41965:function(e,n,t){"use strict";t.d(n,{Z:function(){return l}}),t(2784);var o=t(75928),r=t(52903),l=(0,o.Z)((0,r.tZ)("path",{d:"M8 0c-4.418 0-8 3.582-8 8s3.582 8 8 8c4.418 0 8-3.582 8-8v0c0-4.418-3.582-8-8-8v0zM8 14.5c-3.59 0-6.5-2.91-6.5-6.5s2.91-6.5 6.5-6.5c3.59 0 6.5 2.91 6.5 6.5v0c-0.006 3.588-2.912 6.494-6.499 6.5h-0.001zM6 7v1h1v3h-1v1h4v-1h-1v-4zM9 4h-2v2h2z"}),"InfoOIcon")},31222:function(e,n,t){"use strict";t.d(n,{Z:function(){return l}}),t(2784);var o=t(75928),r=t(52903),l=(0,o.Z)((0,r.tZ)("path",{d:"M11 8.667l-3.5 3.333-3.5-3.333 0.7-0.667 2.3 2.19v-6.19h1v6.19l2.3-2.19z"}),"SortDownIcon")},86851:function(e,n,t){"use strict";t.d(n,{Z:function(){return l}}),t(2784);var o=t(75928),r=t(52903),l=(0,o.Z)((0,r.tZ)("path",{d:"M10.3 8l-2.3-2.19v6.19h-1v-6.19l-2.3 2.19-0.7-0.667 3.5-3.333 3.5 3.333z"}),"SortUpIcon")},1847:function(e,n,t){"use strict";t.d(n,{Z:function(){return T}});var o=t(53860),r=t(20325),l=t(56818),i=t(13409),a=t(5081),c=t(2784),s=t(81522),d=t(40596),u=t(27216),m="blue",f=t(52903),g=t(95530),IconChecked=function(e){return(0,f.tZ)(g.Z,(0,o.Zj)((0,o.Zj)({viewBox:"0 0 16 16"},e),{},{children:(0,f.tZ)("g",{fill:"currentColor",children:(0,f.tZ)("path",{d:"M6 11.060l-3-3-1 1 4 4 9-9-1-1z"})})}))};IconChecked.displayName="IconChecked";var IconIndeterminate=function(e){return(0,f.tZ)(g.Z,(0,o.Zj)((0,o.Zj)({viewBox:"0 0 24 24"},e),{},{children:(0,f.tZ)("g",{fill:"currentColor",children:(0,f.tZ)("rect",{height:"18",width:"18",x:"3",y:"3"})})}))};IconIndeterminate.displayName="IconIndeterminate";var h=t(49857),p=["indeterminate","size","variantColor","sx"],b=(0,c.forwardRef)(function(e,n){var t,r,i,c,s,g=e.indeterminate,b=e.size,y=void 0===b?"md":b,x=e.variantColor,w=void 0===x?m:x,T=e.sx,v=(0,o.Kd)(e,p),C=(0,u.u)().sizes,S=(0,d.Z)(),R=(0,o.ZQ)(S,1)[0],z={lg:C["6x"],md:C["4x"],sm:C["3x"]}[y],getCheckboxControlBoxSelector=function(e){return'input[type="'.concat("checkbox",'"]')+(0,a.Zs)(e)+" + &"},D=(0,o.Zj)((0,o._x)((0,o._x)((0,o._x)({position:"relative",border:1,width:{lg:"6x",md:"4x",sm:"3x"}[y],height:{lg:"6x",md:"4x",sm:"3x"}[y],zIndex:0},getCheckboxControlBoxSelector()+"> *",{opacity:0}),getCheckboxControlBoxSelector(":checked")+"> *",{opacity:1}),getCheckboxControlBoxSelector("[data-indeterminate]")+"> *",{opacity:1}),g?(0,o._x)((0,o._x)((0,o._x)((0,o._x)({},getCheckboxControlBoxSelector("[data-indeterminate]"),{borderColor:{dark:"gray:50",light:"gray:40"}[R],color:{dark:"".concat(w,":60"),light:"".concat(w,":60")}[R]}),getCheckboxControlBoxSelector("[data-indeterminate]:hover:not(:disabled)"),{borderColor:{dark:"".concat(w,":50"),light:"".concat(w,":50")}[R],color:{dark:"".concat(w,":50"),light:"".concat(w,":50")}[R]}),getCheckboxControlBoxSelector("[data-indeterminate]:focus-visible"),{outlineColor:{dark:"".concat(w,":60"),light:"".concat(w,":60")}[R],outlineStyle:"solid",outlineWidth:"1h"}),getCheckboxControlBoxSelector("[data-indeterminate]:disabled"),{borderColor:{dark:"gray:60",light:"gray:40"}[R],color:{dark:"gray:60",light:"gray:40"}[R],opacity:.28}):(t=({dark:"white:emphasis",light:"white:emphasis"})[R],r="transparent",i=({dark:"".concat(w,":60"),light:"".concat(w,":60")})[R],c=({dark:"".concat(w,":50"),light:"".concat(w,":50")})[R],s=({dark:"gray:60",light:"gray:40"})[R],(0,o._x)((0,o._x)((0,o._x)((0,o._x)((0,o._x)((0,o._x)((0,o._x)((0,o._x)({backgroundColor:r,borderColor:{dark:"gray:50",light:"gray:40"}[R],color:t},getCheckboxControlBoxSelector(":hover"),{backgroundColor:r,borderColor:c,color:t}),getCheckboxControlBoxSelector(":disabled"),{backgroundColor:r,borderColor:s,color:t,opacity:.28}),getCheckboxControlBoxSelector(":focus-visible"),{outlineColor:{dark:"".concat(w,":60"),light:"".concat(w,":60")}[R],outlineStyle:"solid",outlineWidth:"1h"}),getCheckboxControlBoxSelector(":checked"),{backgroundColor:i,borderColor:{dark:"".concat(w,":60"),light:"".concat(w,":60")}[R],color:t}),getCheckboxControlBoxSelector(":checked:hover:not(:disabled)"),{backgroundColor:{dark:"".concat(w,":50"),light:"".concat(w,":50")}[R],borderColor:c,color:t}),getCheckboxControlBoxSelector(":checked:focus-visible"),{backgroundColor:"inherit",borderColor:"transparent",color:t}),getCheckboxControlBoxSelector(":checked:focus-visible")+"> div:first-of-type",{backgroundColor:i}),getCheckboxControlBoxSelector(":checked:disabled"),{backgroundColor:{dark:"gray:60",light:"gray:40"}[R],borderColor:s,color:{dark:"white:emphasis",light:"black:primary"}[R],opacity:.28})));return(0,f.tZ)(h.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)({"aria-hidden":(0,l.Qm)(!0),role:"checkbox",sx:[D].concat((0,o.u)((0,a.rY)(T)))},{display:"inline-flex",alignItems:"center",justifyContent:"center",flexShrink:0,userSelect:"none"}),v),{},{children:g?(0,f.tZ)(IconIndeterminate,{size:z}):(0,f.tZ)(IconChecked,{size:z})}))});b.displayName="CheckboxControlBox";var y=t(16301),useCheckboxGroup$1=function(){if(!c.useContext)throw Error("The `useContext` hook is not available with your React version.");return(0,c.useContext)(y.w)},x=["checked","children","defaultChecked","disabled","id","indeterminate","inputProps","inputRef","name","onBlur","onChange","onClick","onFocus","size","value","variantColor"],w=(0,c.forwardRef)(function(e,n){var t,d,u=e.checked,g=e.children,p=e.defaultChecked,y=e.disabled,w=e.id,T=e.indeterminate,v=e.inputProps,C=e.inputRef,S=e.name,R=e.onBlur,z=e.onChange,D=e.onClick,k=e.onFocus,_=e.size,P=e.value,j=e.variantColor,E=(0,o.Kd)(e,x),A=(0,c.useRef)(),I=(0,r.Z)(C,A),O={display:"inline-flex",verticalAlign:"top",alignItems:"center",cursor:y?"not-allowed":"pointer"},H=useCheckboxGroup$1();if(H){var B,M,Z,V,W=(0,o.Zj)({},H),L=W.disabled,F=W.name,G=W.size,N=W.value,K=W.variantColor,U=W.onChange;void 0!==N&&(u=(0,a.rY)(N).includes(P)),y=L||y,S=null!=F?F:S,z=(0,l.PP)(z,U),_=null!==(B=null!==(M=_)&&void 0!==M?M:G)&&void 0!==B?B:"md",j=null!==(Z=null!==(V=j)&&void 0!==V?V:K)&&void 0!==Z?Z:m}else _=null!==(t=_)&&void 0!==t?t:"md",j=null!==(d=j)&&void 0!==d?d:m;return(0,f.BX)(h.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)({as:"label",ref:n},O),E),{},{children:[(0,f.tZ)(s.Z,(0,o.Zj)({as:"input",checked:u,"data-indeterminate":(0,l.PB)(T),defaultChecked:p,disabled:y,id:w,name:S,onBlur:R,onChange:z,onClick:D,onFocus:k,ref:I,type:"checkbox",value:P},v)),(0,f.tZ)(b,{indeterminate:T,size:_,variantColor:j}),!(0,i.Rw)(g)&&(0,f.tZ)(h.Z,{ml:"2x",userSelect:"none",opacity:y?.28:1,children:g})]}))});w.displayName="Checkbox";var T=w},16301:function(e,n,t){"use strict";t.d(n,{w:function(){return o}});var o=(0,t(2784).createContext)()},34925:function(e,n,t){"use strict";t.d(n,{Z:function(){return s}});var o=t(53860),r=t(2784),l=t(14641),i=t(52903),a=t(49857),c=(0,r.forwardRef)(function(e,n){return(0,i.tZ)(l.Z,{value:"dark",children:(0,i.tZ)(a.Z,(0,o.Zj)({ref:n,colorScheme:"dark"},e))})});c.displayName="DarkMode";var s=c},69821:function(e,n,t){"use strict";t.d(n,{Z:function(){return s}});var o=t(53860),r=t(2784),l=t(14641),i=t(52903),a=t(49857),c=(0,r.forwardRef)(function(e,n){return(0,i.tZ)(l.Z,{value:"light",children:(0,i.tZ)(a.Z,(0,o.Zj)({ref:n,colorScheme:"light"},e))})});c.displayName="LightMode";var s=c},82412:function(e,n,t){"use strict";t.d(n,{Z:function(){return S}});var o=t(53860),r=t(10525),l=t(56818),i=t(70404),a=t(92307),c=t.n(a),s=t(2784),d=t(64355),u=t.n(d),m=t(47732),f=t(3241),g=t(20325),h=t(79937),p=t(74086),b=t(52903),y=t(49857),x=(0,s.forwardRef)(function(e,n){var t=(0,p.Z)(),r=(0,o.Zj)({},t),l=r.backdrop,i=r.closeOnOutsideClick,a=r.onClose,c=r.placement,s=r.containerRef,d=(0,g.Z)(s,n),u=(0,h.Pw)({backdrop:l,placement:c}),m=(0,o.Zj)((0,o.Zj)({ref:d,onClick:function(e){e.stopPropagation(),i&&"function"==typeof a&&a(e)}},u),e);return(0,b.tZ)(y.Z,(0,o.Zj)({},m))});x.displayName="DrawerContainer";var w=t(59845),T=["isCloseButtonVisible","autoFocus","backdrop","children","closeOnEsc","closeOnOutsideClick","ensureFocus","finalFocusRef","initialFocusRef","isClosable","isOpen","onClose","placement","portalProps","returnFocusOnClose","size"],v=c()(function(e){return(0,o.Zj)({},e)}),C=(0,s.forwardRef)(function(e,n){var t=e.isCloseButtonVisible,a=e.autoFocus,c=void 0!==a&&a,d=e.backdrop,g=e.children,h=e.closeOnEsc,p=e.closeOnOutsideClick,y=e.ensureFocus,S=void 0!==y&&y,R=e.finalFocusRef,z=e.initialFocusRef,D=e.isClosable,k=void 0!==D&&D,_=e.isOpen,P=void 0!==_&&_,j=e.onClose,E=e.placement,A=e.portalProps,I=e.returnFocusOnClose,O=e.size,H=(0,o.Kd)(e,T),B="".concat(C.displayName,":");(0,r.Z)(function(){(0,l.TL)("isCloseButtonVisible",{prefix:B,alternative:"isClosable",willRemove:!0})},void 0!==t),k=k||t;var M=(0,s.useState)(P),Z=(0,o.ZQ)(M,2),V=Z[0],W=Z[1],L=(0,s.useRef)(),F=(0,s.useRef)(null),G=v({autoFocus:c,backdrop:void 0!==d&&d,closeOnEsc:void 0!==h&&h,closeOnOutsideClick:void 0!==p&&p,ensureFocus:S,finalFocusRef:R,initialFocusRef:z,isClosable:k,isOpen:P,onClose:j,placement:void 0===E?"right":E,size:void 0===O?"auto":O,containerRef:L,contentRef:F,scrollBehavior:"inside"}),N=(void 0===I||I)&&!R,K=(0,s.useCallback)(function(){if(z&&z.current){var e=z.current;"function"==typeof e.focus&&e.focus();return}if(F.current){var n=F.current;if((0,i.t)(n).length>0)return;"function"==typeof n.focus&&n.focus()}},[z]),U=(0,s.useCallback)(function(){if(R&&R.current){var e=R.current;"function"==typeof e.focus&&e.focus()}},[R]),X=(0,s.useCallback)(function(){W(!1)},[]);return(0,s.useEffect)(function(){if(P&&!V){W(!0);return}},[P,V]),(0,b.tZ)(w.r.Provider,{value:G,children:(0,b.tZ)(f.Z,{in:P,onExitComplete:X,children:!!V&&(0,b.tZ)(m.Z,(0,o.Zj)((0,o.Zj)({},A),{},{children:(0,b.tZ)(u(),{disabled:!S,autoFocus:c,returnFocus:N,onActivation:K,onDeactivation:U,children:(0,b.tZ)(x,(0,o.Zj)((0,o.Zj)({ref:n},H),{},{children:(0,l.Pu)(g,G)}))})}))})})});C.displayName="Drawer";var S=C},6192:function(e,n,t){"use strict";t.d(n,{Z:function(){return g}});var o=t(53860),r=t(20325),l=t(56818),i=t(2784),a=t(48504),c=t(62272),s=t(79937),d=t(74086),u=t(52903),m=["TransitionComponent","TransitionProps"],f=(0,i.forwardRef)(function(e,n){var t=e.TransitionComponent,f=void 0===t?c.Z:t,g=e.TransitionProps,h=(0,o.Kd)(e,m),p=(0,d.Z)(),b=(0,o.Zj)({},p).isOpen,y=(0,a.Z)(),x=(0,o.ZQ)(y,2)[1],w=(0,i.useRef)(),T=(0,r.Z)(w,n),v=(0,s.Bp)(),C=(0,o.Zj)((0,o.Zj)({ref:T},v),h);return(0,u.tZ)(f,(0,o.Zj)((0,o.Zj)((0,o.Zj)({appear:!!p},g),C),{},{in:!p||b,onExited:(0,l.PP)(x,null==g?void 0:g.onExited)}))});f.displayName="DrawerOverlay";var g=f},17025:function(e,n,t){"use strict";t.d(n,{Z:function(){return d}});var o=t(53860),r=t(2784),l=t(83513),i=t(19088),a=t(10130),c=t(52903),s=(0,r.forwardRef)(function(e,n){var t=(0,a.u)();return(0,c.tZ)(i.Z,(0,o.Zj)((0,o.Zj)({as:l.Z,ref:n},t),e))});s.displayName="LinkButton";var d=s},10636:function(e,n,t){"use strict";t.d(n,{Z:function(){return u}});var o=t(53860),r=t(56818),l=t(2784),i=t(40596),useResizeHandleStyle=function(e){var n=e.isResizing,t=(0,i.Z)(),r=(0,o.ZQ)(t,1)[0];return{backgroundColor:n?({dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"})[r]:"transparent",boxSizing:n?"content-box":"border-box",cursor:"col-resize",touchAction:"none",userSelect:"none",width:n?"1x":"2x"}},getIsPassiveListenerSupported=function(){var e=null;return function(){if("boolean"==typeof e)return e;try{var noop=function(){};window.addEventListener("test",noop,{get passive(){return e=!0,!1}}),window.removeEventListener("test",noop)}catch(n){e=!1}return e}},a=t(52903),c=t(49857),s=["onMouseDown","onResize","onResizeEnd","onResizeStart","onTouchStart"],d=(0,l.forwardRef)(function(e,n){var t=e.onMouseDown,i=e.onResize,d=e.onResizeEnd,u=e.onResizeStart,m=e.onTouchStart,f=(0,o.Kd)(e,s),g=(0,l.useState)(!1),h=(0,o.ZQ)(g,2),p=h[0],b=h[1],y=useResizeHandleStyle({isResizing:p}),x=(0,l.useCallback)(function(e){var n=e.clientX,t=e.clientY;null==u||u({clientX:n,clientY:t}),b(!0);var r="mousemove",l="mouseup",a=(0,o._x)((0,o._x)({},r,function(e){var n=e.clientX,t=e.clientY;null==i||i({clientX:n,clientY:t})}),l,function(e){document.removeEventListener("mousemove",a[r]),document.removeEventListener("mouseup",a[l]),b(!1);var n=e.clientX,t=e.clientY;null==d||d({clientX:n,clientY:t})}),c=!!getIsPassiveListenerSupported()&&{passive:!1};document.addEventListener("mousemove",a[r],c),document.addEventListener("mouseup",a[l],c)},[i,d,u]),w=(0,l.useCallback)(function(e){if(!("touchstart"===e.type&&Array.isArray(e.touches)&&e.touches.length>1)){var n,t,r=Array.isArray(e.touches)?null===(n=e.touches[0])||void 0===n?void 0:n.clientX:void 0,l=Array.isArray(e.touches)?null===(t=e.touches[0])||void 0===t?void 0:t.clientY:void 0;null==u||u({clientX:r,clientY:l}),b(!0);var a="touchmove",c="touchend",s=(0,o._x)((0,o._x)({},a,function(e){e.cancelable&&(e.preventDefault(),e.stopPropagation());var n,t,o=Array.isArray(e.touches)?null===(n=e.touches[0])||void 0===n?void 0:n.clientX:void 0,r=Array.isArray(e.touches)?null===(t=e.touches[0])||void 0===t?void 0:t.clientY:void 0;return null==i||i({clientX:o,clientY:r}),!1}),c,function(e){document.removeEventListener("touchmove",s[a]),document.removeEventListener("touchend",s[c]),e.cancelable&&(e.preventDefault(),e.stopPropagation()),b(!1);var n,t,o=Array.isArray(e.touches)?null===(n=e.touches[0])||void 0===n?void 0:n.clientX:void 0,r=Array.isArray(e.touches)?null===(t=e.touches[0])||void 0===t?void 0:t.clientY:void 0;null==d||d({clientX:o,clientY:r})}),m=!!getIsPassiveListenerSupported()&&{passive:!1};document.addEventListener("touchmove",s[a],m),document.addEventListener("touchend",s[c],m)}},[i,d,u]);return(0,a.tZ)(c.Z,(0,o.Zj)((0,o.Zj)({ref:n,onMouseDown:(0,r.N)(t,x),onTouchStart:(0,r.N)(m,w)},y),f))});d.displayName="ResizeHandle";var u=d},67622:function(e,n,t){"use strict";t.d(n,{Z:function(){return d}});var o=t(53860),r=t(2784),l=t(70758),i=t(91334),a=t(52903),c=["size"],s=(0,r.forwardRef)(function(e,n){var t=e.size,r=(0,o.Kd)(e,c),s=(0,i.w)({size:t});return(0,a.tZ)(l.Z,(0,o.Zj)((0,o.Zj)({as:"label",ref:n},s),r))});s.displayName="TextLabel";var d=s},81522:function(e,n,t){"use strict";t.d(n,{Z:function(){return c}});var o=t(53860),r=t(2784),l=t(52903),i=t(49857),a=(0,r.forwardRef)(function(e,n){return(0,l.tZ)(i.Z,(0,o.Zj)({ref:n,position:"absolute",width:1,height:1,padding:0,border:0,overflow:"hidden",clipPath:"inset(50%)",whiteSpace:"nowrap"},e))});a.displayName="VisuallyHidden";var c=a}},function(e){e.O(0,[5220,1630,7344,9285,3732,4344,9774,2888,179],function(){return e(e.s=56208)}),_N_E=e.O()}]);