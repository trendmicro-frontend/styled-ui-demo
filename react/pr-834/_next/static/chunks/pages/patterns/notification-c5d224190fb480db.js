(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3222],{3231:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return index_page}});var o=t(52322),r=t(45392),a=t(68314),i=t(32700),l=t(62080),s=t(70758),c=t(82412),u=t(6192),d=t(2501),p=t(53335),m=t(14378),f=t(42049),g=t(95346),x=t(61481),h=t(49857),y=t(61619),b=t(57861),v=t(39256),C=t(42309),T=t(6194),w=t(73645),A=t(83591),k=t(97152),S=t(81141),Z=t(22938),B=t(2784),I=t(60258),E=["onClose"];function _extends(){return(_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}function ownKeys(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,o)}return t}function _unsupportedIterableToArray(n,e){if(n){if("string"==typeof n)return _arrayLikeToArray(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if("Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(n,e)}}function _arrayLikeToArray(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=Array(e);t<e;t++)o[t]=n[t];return o}var O=(0,B.forwardRef)(function(n,e){var t,o=n.onClose,r=function(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],!(e.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}(n,E),a=(0,B.useRef)(0),i=function(n){if(Array.isArray(n))return n}(t=(0,B.useState)([]))||function(n,e){var t,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var a=[],i=!0,l=!1;try{for(r=r.call(n);!(i=(t=r.next()).done)&&(a.push(t.value),!e||a.length!==e);i=!0);}catch(n){l=!0,o=n}finally{try{i||null==r.return||r.return()}finally{if(l)throw o}}return a}}(t,2)||_unsupportedIterableToArray(t,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),w=i[0],O=i[1],notify=function(n){var e=function(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?ownKeys(Object(t),!0).forEach(function(e){var o;o=t[e],e in n?Object.defineProperty(n,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[e]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}({},n),t=e.appearance,o=e.content,r=e.duration,i=void 0===r?null:r,l=e.isClosable,s=void 0===l||l;O(function(n){var e,r=++a.current;return[].concat(function(n){if(Array.isArray(n))return _arrayLikeToArray(n)}(e=n.slice(n.length))||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(e)||_unsupportedIterableToArray(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[{id:r,appearance:t,content:o,duration:i,isClosable:s,onClose:function(){O(function(n){return n.filter(function(n){return n.id!==r})})}}])})},handleClickAddToastByAppearance=function(n){return function(e){e.currentTarget.blur();var t={success:B.createElement(B.Fragment,null,B.createElement(s.Z,null,"This is a success message."),B.createElement(s.Z,null,"The toast will be automatically dismissed after 5 seconds.")),info:B.createElement(B.Fragment,null,B.createElement(s.Z,null,"This is an info message."),B.createElement(s.Z,null,"The toast will remain visible until the user dismisses it.")),warning:B.createElement(B.Fragment,null,B.createElement(s.Z,null,"This is a warning message."),B.createElement(s.Z,null,"The toast will remain visible until the user dismisses it.")),error:B.createElement(B.Fragment,null,B.createElement(s.Z,null,"This is an error message."),B.createElement(s.Z,null,"The toast will remain visible until the user dismisses it."))}[n];notify({appearance:n,content:t,duration:"success"===n?5e3:void 0})}};return B.createElement(c.Z,_extends({ref:e,backdrop:!0,closeOnEsc:!0,closeOnOutsideClick:!0,isClosable:!0,isOpen:!0,onClose:o,size:"md"},r),B.createElement(u.Z,null),B.createElement(d.Z,null,B.createElement(CustomToastContainer,null,B.createElement(I.Z,{component:null},w.map(function(n){return B.createElement(p.Z,{key:null==n?void 0:n.id,in:!0,unmountOnExit:!0},B.createElement(m.Z,{duration:null==n?void 0:n.duration,onClose:null==n?void 0:n.onClose},B.createElement(f.Z,{appearance:null==n?void 0:n.appearance,isClosable:null==n?void 0:n.isClosable,onClose:null==n?void 0:n.onClose,mb:"2x",minWidth:280,width:"fit-content"},null==n?void 0:n.content)))}))),B.createElement(g.Z,null,"Drawer"),B.createElement(x.Z,null,B.createElement(h.Z,{mb:"8x"},B.createElement(y.Z,{direction:"column",spacing:"4x"},B.createElement(b.Z,{width:160}),B.createElement(b.Z,{width:240}),B.createElement(b.Z,{width:240}))),B.createElement(v.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},B.createElement(l.Z,{columnGap:"2x",onClick:handleClickAddToastByAppearance("success")},B.createElement(A.Z,null),"Success"),B.createElement(l.Z,{columnGap:"2x",onClick:handleClickAddToastByAppearance("info")},B.createElement(k.Z,null),"Info"),B.createElement(l.Z,{columnGap:"2x",onClick:handleClickAddToastByAppearance("warning")},B.createElement(S.Z,null),"Warning"),B.createElement(l.Z,{columnGap:"2x",onClick:handleClickAddToastByAppearance("error")},B.createElement(Z.Z,null),"Error"))),B.createElement(C.Z,null,B.createElement(T.Z,{templateColumns:"repeat(2, 1fr)",columnGap:"2x"},B.createElement(l.Z,{variant:"primary",onClick:o},"OK"),B.createElement(l.Z,{onClick:o},"Cancel")))))});O.displayName="DrawerExample";var CustomToastContainer=function(n){return B.createElement(w.Z,_extends({flexDirection:"column",alignItems:"center",position:"absolute",top:"12x",left:"50%",transform:"translateX(-50%)",width:"max-content",maxWidth:"80%",zIndex:"toast"},n))},drawer_toast=function(){var n=(0,i.Z)();return B.createElement(B.Fragment,null,B.createElement(l.Z,{variant:"secondary",onClick:function(){n(function(n){return B.createElement(O,{onClose:n})})}},"Open Drawer"))},_=t(13462),j=t(21400),P=t(40736),M=t(52235),D=t(35358),F=t(76168),N=["onClose"];function modal_toast_extends(){return(modal_toast_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}function modal_toast_ownKeys(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,o)}return t}function modal_toast_unsupportedIterableToArray(n,e){if(n){if("string"==typeof n)return modal_toast_arrayLikeToArray(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if("Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return modal_toast_arrayLikeToArray(n,e)}}function modal_toast_arrayLikeToArray(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=Array(e);t<e;t++)o[t]=n[t];return o}var G=(0,B.forwardRef)(function(n,e){var t,o=n.onClose,r=function(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],!(e.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}(n,N),a=(0,B.useRef)(0),i=function(n){if(Array.isArray(n))return n}(t=(0,B.useState)([]))||function(n,e){var t,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var a=[],i=!0,l=!1;try{for(r=r.call(n);!(i=(t=r.next()).done)&&(a.push(t.value),!e||a.length!==e);i=!0);}catch(n){l=!0,o=n}finally{try{i||null==r.return||r.return()}finally{if(l)throw o}}return a}}(t,2)||modal_toast_unsupportedIterableToArray(t,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),c=i[0],u=i[1],notify=function(n){var e=function(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?modal_toast_ownKeys(Object(t),!0).forEach(function(e){var o;o=t[e],e in n?Object.defineProperty(n,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[e]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):modal_toast_ownKeys(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}({},n),t=e.appearance,o=e.content,r=e.duration,i=void 0===r?null:r,l=e.isClosable,s=void 0===l||l;u(function(n){var e,r=++a.current;return[].concat(function(n){if(Array.isArray(n))return modal_toast_arrayLikeToArray(n)}(e=n.slice(n.length))||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(e)||modal_toast_unsupportedIterableToArray(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[{id:r,appearance:t,content:o,duration:i,isClosable:s,onClose:function(){u(function(n){return n.filter(function(n){return n.id!==r})})}}])})},handleClickAddToastByAppearance=function(n){return function(e){e.currentTarget.blur();var t={success:B.createElement(B.Fragment,null,B.createElement(s.Z,null,"This is a success message."),B.createElement(s.Z,null,"The toast will be automatically dismissed after 5 seconds.")),info:B.createElement(B.Fragment,null,B.createElement(s.Z,null,"This is an info message."),B.createElement(s.Z,null,"The toast will remain visible until the user dismisses it.")),warning:B.createElement(B.Fragment,null,B.createElement(s.Z,null,"This is a warning message."),B.createElement(s.Z,null,"The toast will remain visible until the user dismisses it.")),error:B.createElement(B.Fragment,null,B.createElement(s.Z,null,"This is an error message."),B.createElement(s.Z,null,"The toast will remain visible until the user dismisses it."))}[n];notify({appearance:n,content:t,duration:"success"===n?5e3:void 0})}};return B.createElement(_.Z,modal_toast_extends({ref:e,closeOnEsc:!0,closeOnOutsideClick:!0,isClosable:!0,isOpen:!0,onClose:o,size:"md"},r),B.createElement(j.Z,null),B.createElement(P.Z,null,B.createElement(modal_toast_CustomToastContainer,null,B.createElement(I.Z,{component:null},c.map(function(n){return B.createElement(p.Z,{key:null==n?void 0:n.id,in:!0,unmountOnExit:!0},B.createElement(m.Z,{duration:null==n?void 0:n.duration,onClose:null==n?void 0:n.onClose},B.createElement(f.Z,{appearance:null==n?void 0:n.appearance,isClosable:null==n?void 0:n.isClosable,onClose:null==n?void 0:n.onClose,mb:"2x",minWidth:280,width:"fit-content"},null==n?void 0:n.content)))}))),B.createElement(M.Z,null,"Modal"),B.createElement(D.Z,null,B.createElement(h.Z,{mb:"8x"},B.createElement(y.Z,{direction:"column",spacing:"4x"},B.createElement(b.Z,{width:160}),B.createElement(b.Z,{width:240}),B.createElement(b.Z,{width:240}))),B.createElement(v.Z,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},B.createElement(l.Z,{columnGap:"2x",onClick:handleClickAddToastByAppearance("success")},B.createElement(A.Z,null),"Success"),B.createElement(l.Z,{columnGap:"2x",onClick:handleClickAddToastByAppearance("info")},B.createElement(k.Z,null),"Info"),B.createElement(l.Z,{columnGap:"2x",onClick:handleClickAddToastByAppearance("warning")},B.createElement(S.Z,null),"Warning"),B.createElement(l.Z,{columnGap:"2x",onClick:handleClickAddToastByAppearance("error")},B.createElement(Z.Z,null),"Error"))),B.createElement(F.Z,null,B.createElement(T.Z,{templateColumns:"repeat(2, 1fr)",columnGap:"2x"},B.createElement(l.Z,{variant:"primary",onClick:o},"OK"),B.createElement(l.Z,{onClick:o},"Cancel")))))});G.displayName="ModalExample";var modal_toast_CustomToastContainer=function(n){return B.createElement(w.Z,modal_toast_extends({flexDirection:"column",alignItems:"center",position:"absolute",top:"12x",left:"50%",transform:"translateX(-50%)",width:"max-content",maxWidth:"80%",zIndex:"toast"},n))},modal_toast=function(){var n=(0,i.Z)();return B.createElement(B.Fragment,null,B.createElement(l.Z,{variant:"secondary",onClick:function(){n(function(n){return B.createElement(G,{onClose:n})})}},"Open Modal"))},R=t(78727),z=t(40596),H=t(85017);function app_toast_extends(){return(app_toast_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}function app_toast_slicedToArray(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var a=[],i=!0,l=!1;try{for(r=r.call(n);!(i=(t=r.next()).done)&&(a.push(t.value),!e||a.length!==e);i=!0);}catch(n){l=!0,o=n}finally{try{i||null==r.return||r.return()}finally{if(l)throw o}}return a}}(n,e)||function(n,e){if(n){if("string"==typeof n)return app_toast_arrayLikeToArray(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if("Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return app_toast_arrayLikeToArray(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function app_toast_arrayLikeToArray(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=Array(e);t<e;t++)o[t]=n[t];return o}function app_toast_ownKeys(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,o)}return t}function app_toast_objectSpread(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?app_toast_ownKeys(Object(t),!0).forEach(function(e){app_toast_defineProperty(n,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):app_toast_ownKeys(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}function app_toast_defineProperty(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var ToastLayout=function(n){var e=app_toast_slicedToArray((0,z.Z)(),1)[0],t=app_toast_slicedToArray((0,H.Z)({colorMode:e}),1)[0].shadow.thin;return B.createElement(h.Z,app_toast_extends({fontSize:"sm",lineHeight:"sm",textAlign:"left",boxShadow:t},n))},app_toast=function(){var n=(0,R.Z)(),handleClickAddToastByAppearance=function(e){return function(t){t.currentTarget.blur();var o={success:B.createElement(B.Fragment,null,B.createElement(s.Z,null,"This is a success message."),B.createElement(s.Z,null,"The toast will be automatically dismissed after 5 seconds.")),info:B.createElement(B.Fragment,null,B.createElement(s.Z,null,"This is an info message."),B.createElement(s.Z,null,"The toast will remain visible until the user dismisses it.")),warning:B.createElement(B.Fragment,null,B.createElement(s.Z,null,"This is a warning message."),B.createElement(s.Z,null,"The toast will remain visible until the user dismisses it.")),error:B.createElement(B.Fragment,null,B.createElement(s.Z,null,"This is an error message."),B.createElement(s.Z,null,"The toast will remain visible until the user dismisses it."))}[e],r="bottom-right";n.notify(function(n){var t=n.onClose,r=n.placement.includes("top");return B.createElement(ToastLayout,{sx:app_toast_defineProperty(app_toast_defineProperty({},r?"pb":"pt","2x"),"width",320)},B.createElement(f.Z,{appearance:e,isClosable:!0,onClose:t},o))},{placement:r,duration:"success"===e?5e3:void 0}),r.includes("top")?n.setState(function(n){return app_toast_objectSpread(app_toast_objectSpread({},n),{},app_toast_defineProperty({},r,n[r].slice(0,3)))}):n.setState(function(n){return app_toast_objectSpread(app_toast_objectSpread({},n),{},app_toast_defineProperty({},r,n[r].slice(-3)))})}};return B.createElement(w.Z,{display:"inline-flex",flexWrap:"wrap",columnGap:"2x",rowGap:"2x"},B.createElement(v.Z,{variant:"secondary",sx:{flexGrow:1,"> *:not(:first-of-type)":{marginLeft:-1},"> *":{columnGap:"2x"}}},B.createElement(l.Z,{onClick:handleClickAddToastByAppearance("success")},B.createElement(A.Z,null),"Success"),B.createElement(l.Z,{onClick:handleClickAddToastByAppearance("info")},B.createElement(k.Z,null),"Info"),B.createElement(l.Z,{onClick:handleClickAddToastByAppearance("warning")},B.createElement(S.Z,null),"Warning"),B.createElement(l.Z,{onClick:handleClickAddToastByAppearance("error")},B.createElement(Z.Z,null),"Error")),B.createElement(l.Z,{variant:"secondary",onClick:function(){n.closeAll()}},"Close All"))},L=t(14594),W=t(69860),U=t(19088),$=t(65019),K=["onClose"];function drawer_alert_extends(){return(drawer_alert_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}function drawer_alert_arrayLikeToArray(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=Array(e);t<e;t++)o[t]=n[t];return o}var X=(0,B.forwardRef)(function(n,e){var t,o=n.onClose,r=function(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],!(e.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}(n,K),a=function(n){if(Array.isArray(n))return n}(t=(0,$.Z)(!0))||function(n,e){var t,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var a=[],i=!0,l=!1;try{for(r=r.call(n);!(i=(t=r.next()).done)&&(a.push(t.value),!e||a.length!==e);i=!0);}catch(n){l=!0,o=n}finally{try{i||null==r.return||r.return()}finally{if(l)throw o}}return a}}(t,2)||function(n,e){if(n){if("string"==typeof n)return drawer_alert_arrayLikeToArray(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if("Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return drawer_alert_arrayLikeToArray(n,e)}}(t,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),i=a[0],p=a[1];return B.createElement(c.Z,drawer_alert_extends({ref:e,backdrop:!0,closeOnEsc:!0,closeOnOutsideClick:!0,isClosable:!0,isOpen:!0,onClose:o,size:"md"},r),B.createElement(u.Z,null),B.createElement(d.Z,null,B.createElement(g.Z,null,"Drawer"),B.createElement(x.Z,null,B.createElement(L.Z,{in:i},B.createElement(W.Z,{isClosable:!0,onClose:function(){return p(!1)},severity:"info",variant:"outline",mb:"4x"},B.createElement(s.Z,{display:"inline-block",fontWeight:"semibold",mr:"2x"},"Important:"),B.createElement(s.Z,{display:"inline-block",mr:"2x"},"This is an important message."),B.createElement(U.Z,null,"Learn more"))),B.createElement(y.Z,{direction:"column",spacing:"4x"},B.createElement(b.Z,{width:160}),B.createElement(b.Z,{width:240}),B.createElement(b.Z,{width:240}))),B.createElement(C.Z,null,B.createElement(T.Z,{templateColumns:"repeat(2, 1fr)",columnGap:"2x"},B.createElement(l.Z,{variant:"primary",onClick:o},"OK"),B.createElement(l.Z,{onClick:o},"Cancel")))))});X.displayName="DrawerExample";var drawer_alert=function(){var n=(0,i.Z)();return B.createElement(B.Fragment,null,B.createElement(l.Z,{variant:"secondary",onClick:function(){n(function(n){return B.createElement(X,{onClose:n})})}},"Open Drawer"))},V=["onClose"];function modal_alert_extends(){return(modal_alert_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}function modal_alert_arrayLikeToArray(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=Array(e);t<e;t++)o[t]=n[t];return o}var q=(0,B.forwardRef)(function(n,e){var t,o=n.onClose,r=function(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],!(e.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}(n,V),a=function(n){if(Array.isArray(n))return n}(t=(0,$.Z)(!0))||function(n,e){var t,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var a=[],i=!0,l=!1;try{for(r=r.call(n);!(i=(t=r.next()).done)&&(a.push(t.value),!e||a.length!==e);i=!0);}catch(n){l=!0,o=n}finally{try{i||null==r.return||r.return()}finally{if(l)throw o}}return a}}(t,2)||function(n,e){if(n){if("string"==typeof n)return modal_alert_arrayLikeToArray(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if("Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return modal_alert_arrayLikeToArray(n,e)}}(t,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),i=a[0],c=a[1];return B.createElement(_.Z,modal_alert_extends({ref:e,closeOnEsc:!0,closeOnOutsideClick:!0,isClosable:!0,isOpen:!0,onClose:o,size:"md"},r),B.createElement(j.Z,null),B.createElement(P.Z,null,B.createElement(M.Z,null,"Modal"),B.createElement(D.Z,null,B.createElement(L.Z,{in:i},B.createElement(W.Z,{isClosable:!0,onClose:function(){return c(!1)},severity:"warning",variant:"outline",mb:"4x"},B.createElement(s.Z,{display:"inline-block",fontWeight:"semibold",mr:"2x"},"Important:"),B.createElement(s.Z,{display:"inline-block",mr:"2x"},"This is an important message."),B.createElement(U.Z,null,"Learn more"))),B.createElement(y.Z,{direction:"column",spacing:"4x"},B.createElement(b.Z,{width:160}),B.createElement(b.Z,{width:240}),B.createElement(b.Z,{width:240}))),B.createElement(F.Z,null,B.createElement(T.Z,{templateColumns:"repeat(2, 1fr)",columnGap:"2x"},B.createElement(l.Z,{variant:"primary",onClick:o},"OK"),B.createElement(l.Z,{onClick:o},"Cancel")))))});q.displayName="ModalExample";var modal_alert=function(){var n=(0,i.Z)();return B.createElement(B.Fragment,null,B.createElement(l.Z,{variant:"secondary",onClick:function(){n(function(n){return B.createElement(q,{onClose:n})})}},"Open Modal"))},Y=t(27216),Q=t(83513),J=t(67616),nn=t(72448),ne=t(65258),nt=t(62009),no=t(34121),nr=t(50397),na=t(56818),ni=t(83377);function in_app_alert_extends(){return(in_app_alert_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}function in_app_alert_slicedToArray(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var a=[],i=!0,l=!1;try{for(r=r.call(n);!(i=(t=r.next()).done)&&(a.push(t.value),!e||a.length!==e);i=!0);}catch(n){l=!0,o=n}finally{try{i||null==r.return||r.return()}finally{if(l)throw o}}return a}}(n,e)||function(n,e){if(n){if("string"==typeof n)return in_app_alert_arrayLikeToArray(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if("Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return in_app_alert_arrayLikeToArray(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function in_app_alert_arrayLikeToArray(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=Array(e);t<e;t++)o[t]=n[t];return o}var nl=[{variant:"outline",severity:"none",icon:B.createElement(nt.Z,null),sx:{borderImageSource:"linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)",borderImageSlice:1},message:"This is a promotion message."},{variant:"outline",severity:"error",message:"This is an error message."},{variant:"outline",severity:"warning",message:"This is a warning message."},{variant:"outline",severity:"info",message:"This is an info message."}],CollapseToggle=function(n){var e=n.defaultIsOpen,t=n.children,o=in_app_alert_slicedToArray((0,$.Z)(void 0===e||e),2),r=o[0],a=o[1];return B.createElement(L.Z,{in:r,unmountOnExit:!0},(0,na.Pu)(t,{isOpen:r,onOpen:function(){return a(!0)},onClose:function(){return a(!1)}}))};(0,B.forwardRef)(function(n,e){var t=(0,Y.u)(),o="blue:60",r={display:"flex",alignItems:"center",justifyContent:"center",border:1,borderColor:"transparent",color:"black:secondary",width:"8x",height:"8x",transition:(0,ni.zx)(["border-color","box-shadow","color"],{duration:200}),_disabled:{color:"black:disabled"},_focus:{":not(:active)":{borderColor:o,boxShadow:"inset 0 0 0 1px ".concat(t.colors[o]),color:"black:primary"}},_hover:{color:"black:primary"},_active:{color:"black:primary"}};return B.createElement(Q.Z,in_app_alert_extends({ref:e},r,n))}).displayName="IconButton";var ns=(0,B.forwardRef)(function(n,e){return B.createElement(l.Z,in_app_alert_extends({ref:e,size:"sm",variant:"secondary"},n))});ns.displayName="AlertOutlineActionButton";var AlertView=function(){var n,e=null!==(n=nl[in_app_alert_slicedToArray((0,B.useState)(1),1)[0]-1])&&void 0!==n?n:{};return B.createElement(CollapseToggle,null,function(n){var t=n.onClose;return B.createElement(W.Z,{variant:e.variant,severity:e.severity,icon:e.icon,onClose:t,sx:e.sx},B.createElement(w.Z,{alignItems:"center",justifyContent:"space-between",columnGap:"4x",mr:"10x"},B.createElement(s.Z,null,e.message),B.createElement(w.Z,{columnGap:"4x"},B.createElement(ns,{my:"-1x"},"Action"))),B.createElement(J.Z,{top:3,right:7,position:"absolute","data-test":"alert-close-button"}))})},NavigationBar=function(n){var e={backgroundColor:in_app_alert_slicedToArray((0,H.Z)(),1)[0].background.secondary,height:"12x",alignItems:"center",justifyContent:"space-between"},t=in_app_alert_slicedToArray(B.useState(new Date),2),o=t[0],r=t[1];return(0,B.useEffect)(function(){var n=setInterval(function(){r(new Date)},1e3);return function(){clearInterval(n)}},[]),B.createElement(w.Z,in_app_alert_extends({},e,n),B.createElement(w.Z,{alignItems:"center",ml:"5x"},B.createElement(s.Z,{fontSize:"2xl",lineHeight:"2xl"},"Product Name"),B.createElement(nn.Z,{orientation:"vertical",height:"5x",mx:"2x"}),B.createElement(s.Z,{fontSize:"sm",lineHeight:"sm"},"Home")),B.createElement(w.Z,{height:"100%"},B.createElement(NavItem,{columnGap:"2x"},B.createElement(no.Z,null),B.createElement(s.Z,null,o.toLocaleDateString()),B.createElement(s.Z,null,o.toLocaleTimeString())),B.createElement(NavItemDivider,null),B.createElement(NavItem,{as:h.Z},B.createElement(ne.Z,{badgeContent:null},B.createElement(nr.Z,null)))))},NavItem=function(n){var e=in_app_alert_slicedToArray((0,z.Z)(),1)[0],t=in_app_alert_slicedToArray((0,H.Z)({colorMode:e}),1)[0],o={display:"inline-flex",alignItems:"center",backgroundColor:t.background.secondary,px:"4x",height:"100%",_hover:{backgroundColor:t.background.highlighted},_selected:{backgroundColor:t.background.selected}};return B.createElement(Q.Z,in_app_alert_extends({},o,n))},NavItemDivider=function(n){var e=in_app_alert_slicedToArray((0,z.Z)(),1)[0];return B.createElement(nn.Z,in_app_alert_extends({orientation:"vertical"},{borderColor:{dark:"gray:100",light:"gray:20"}[e],height:"100%"},n))},in_app_alert=function(){var n={backgroundColor:in_app_alert_slicedToArray((0,H.Z)(),1)[0].background.primary,height:480};return B.createElement(h.Z,n,B.createElement(NavigationBar,null),B.createElement(h.Z,{p:"4x"},B.createElement(h.Z,{mb:"4x"},B.createElement(AlertView,null)),B.createElement(s.Z,{fontSize:"xl",lineHeight:"xl"},"Home")))};function alert_outline_extends(){return(alert_outline_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}function alert_outline_arrayLikeToArray(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=Array(e);t<e;t++)o[t]=n[t];return o}var alert_outline_CollapseToggle=function(n){var e,t=n.defaultIsOpen,o=n.children,r=function(n){if(Array.isArray(n))return n}(e=(0,$.Z)(void 0===t||t))||function(n,e){var t,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var a=[],i=!0,l=!1;try{for(r=r.call(n);!(i=(t=r.next()).done)&&(a.push(t.value),!e||a.length!==e);i=!0);}catch(n){l=!0,o=n}finally{try{i||null==r.return||r.return()}finally{if(l)throw o}}return a}}(e,2)||function(n,e){if(n){if("string"==typeof n)return alert_outline_arrayLikeToArray(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if("Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return alert_outline_arrayLikeToArray(n,e)}}(e,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),a=r[0],i=r[1];return B.createElement(L.Z,{in:a,unmountOnExit:!0},(0,na.Pu)(o,{isOpen:a,onOpen:function(){return i(!0)},onClose:function(){return i(!1)}}))},nc=(0,B.forwardRef)(function(n,e){return B.createElement(l.Z,alert_outline_extends({ref:e,size:"sm",variant:"secondary"},n))});nc.displayName="AlertOutlineActionButton";var alert_outline=function(){return B.createElement(y.Z,{direction:"column",spacing:"4x"},B.createElement(alert_outline_CollapseToggle,null,function(n){var e=n.onClose;return B.createElement(W.Z,{variant:"outline",severity:"none",icon:B.createElement(nt.Z,null),onClose:e,sx:{borderImageSource:"linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)",borderImageSlice:1}},B.createElement(w.Z,{alignItems:"center",justifyContent:"space-between",mr:"10x"},B.createElement(s.Z,null,"This is a promotion message."),B.createElement(nc,{my:"-1x"},"Action")),B.createElement(J.Z,{top:3,right:7,position:"absolute","data-test":"alert-close-button"}))}),B.createElement(alert_outline_CollapseToggle,null,function(n){var e=n.onClose;return B.createElement(W.Z,{variant:"outline",severity:"error",onClose:e},B.createElement(w.Z,{alignItems:"center",justifyContent:"space-between",mr:"10x"},B.createElement(s.Z,null,"This is an error message."),B.createElement(nc,{my:"-1x"},"Action")),B.createElement(J.Z,{top:3,right:7,position:"absolute","data-test":"alert-close-button"}))}),B.createElement(alert_outline_CollapseToggle,null,function(n){var e=n.onClose;return B.createElement(W.Z,{variant:"outline",severity:"warning",onClose:e},B.createElement(w.Z,{alignItems:"center",justifyContent:"space-between",mr:"10x"},B.createElement(s.Z,null,"This is a warning message."),B.createElement(nc,{my:"-1x"},"Action")),B.createElement(J.Z,{top:3,right:7,position:"absolute","data-test":"alert-close-button"}))}),B.createElement(alert_outline_CollapseToggle,null,function(n){var e=n.onClose;return B.createElement(W.Z,{variant:"outline",severity:"info",onClose:e},B.createElement(w.Z,{alignItems:"center",justifyContent:"space-between",mr:"10x"},B.createElement(s.Z,null,"This is an info message."),B.createElement(nc,{my:"-1x"},"Action")),B.createElement(J.Z,{top:3,right:7,position:"absolute","data-test":"alert-close-button"}))}),B.createElement(alert_outline_CollapseToggle,null,function(n){var e=n.onClose;return B.createElement(W.Z,{variant:"outline",severity:"success",onClose:e},B.createElement(w.Z,{alignItems:"center",justifyContent:"space-between",mr:"10x"},B.createElement(s.Z,null,"This is a success message.")),B.createElement(J.Z,{top:3,right:7,position:"absolute","data-test":"alert-close-button"}))}))},nu=t(85163),nd=t(20012),np=["page","count","onPrevious","onNext"];function product_alert_extends(){return(product_alert_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}function product_alert_slicedToArray(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var a=[],i=!0,l=!1;try{for(r=r.call(n);!(i=(t=r.next()).done)&&(a.push(t.value),!e||a.length!==e);i=!0);}catch(n){l=!0,o=n}finally{try{i||null==r.return||r.return()}finally{if(l)throw o}}return a}}(n,e)||function(n,e){if(n){if("string"==typeof n)return product_alert_arrayLikeToArray(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if("Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return product_alert_arrayLikeToArray(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function product_alert_arrayLikeToArray(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=Array(e);t<e;t++)o[t]=n[t];return o}var nm=[{variant:"solid",severity:"none",icon:B.createElement(nt.Z,null),sx:{background:"linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)",color:"white:emphasis"},message:"This is a promotion message."},{variant:"solid",severity:"error",message:"This is an error message."},{variant:"solid",severity:"warning",message:"This is a warning message."},{variant:"solid",severity:"info",message:"This is an info message."}],product_alert_CollapseToggle=function(n){var e=n.defaultIsOpen,t=n.children,o=product_alert_slicedToArray((0,$.Z)(void 0===e||e),2),r=o[0],a=o[1];return B.createElement(L.Z,{in:r,unmountOnExit:!0},(0,na.Pu)(t,{isOpen:r,onOpen:function(){return a(!0)},onClose:function(){return a(!1)}}))},nf=(0,B.forwardRef)(function(n,e){var t=(0,Y.u)(),o="blue:60",r={display:"flex",alignItems:"center",justifyContent:"center",border:1,borderColor:"transparent",color:"black:secondary",width:"8x",height:"8x",transition:(0,ni.zx)(["border-color","box-shadow","color"],{duration:200}),_disabled:{color:"black:disabled"},_focus:{":not(:active)":{borderColor:o,boxShadow:"inset 0 0 0 1px ".concat(t.colors[o]),color:"black:primary"}},_hover:{color:"black:primary"},_active:{color:"black:primary"}};return B.createElement(Q.Z,product_alert_extends({ref:e},r,n))});nf.displayName="IconButton";var ng=(0,B.forwardRef)(function(n,e){var t=n.page,o=n.count,r=n.onPrevious,a=n.onNext,i=function(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)t=a[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)t=a[o],!(e.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}(n,np);return B.createElement(w.Z,product_alert_extends({alignItems:"center",columnGap:"2x"},i),B.createElement(nf,{disabled:t<=1,onClick:r},B.createElement(nu.Z,null)),B.createElement(s.Z,{color:"black:primary"},t,"/",o),B.createElement(nf,{disabled:t>=o,onClick:a},B.createElement(nd.Z,null)))});ng.displayName="AlertPagination";var nx=(0,B.forwardRef)(function(n,e){return B.createElement(l.Z,product_alert_extends({ref:e,size:"sm",variant:"secondary",sx:{borderColor:"black:primary",color:"black:primary",":active":{color:"black:primary"},":focus":{color:"black:primary"},":hover":{background:"rgba(0, 0, 0, 0.12)",color:"black:primary"},":hover:not(:focus)":{boxShadow:"none"}}},n))});nx.displayName="AlertSolidActionButton";var product_alert_AlertView=function(){var n,e=product_alert_slicedToArray((0,B.useState)(1),2),t=e[0],o=e[1],r=null!==(n=nm[t-1])&&void 0!==n?n:{};return B.createElement(product_alert_CollapseToggle,null,function(n){var e=n.onClose;return B.createElement(W.Z,{variant:r.variant,severity:r.severity,icon:r.icon,onClose:e,sx:r.sx},B.createElement(w.Z,{alignItems:"center",justifyContent:"space-between",columnGap:"4x",mr:"10x"},B.createElement(s.Z,null,r.message),B.createElement(w.Z,{columnGap:"4x"},B.createElement(nx,{my:"-1x"},"Action"),B.createElement(ng,{page:t,count:nm.length,onPrevious:function(){return o(Math.max(1,t-1))},onNext:function(){return o(Math.min(nm.length,t+1))},my:"-2x"}))),B.createElement(J.Z,{top:3,right:7,position:"absolute","data-test":"alert-close-button"}))})},product_alert_NavigationBar=function(n){var e={backgroundColor:product_alert_slicedToArray((0,H.Z)(),1)[0].background.secondary,height:"12x",alignItems:"center",justifyContent:"space-between"},t=product_alert_slicedToArray(B.useState(new Date),2),o=t[0],r=t[1];return(0,B.useEffect)(function(){var n=setInterval(function(){r(new Date)},1e3);return function(){clearInterval(n)}},[]),B.createElement(w.Z,product_alert_extends({},e,n),B.createElement(w.Z,{alignItems:"center",ml:"5x"},B.createElement(s.Z,{fontSize:"2xl",lineHeight:"2xl"},"Product Name"),B.createElement(nn.Z,{orientation:"vertical",height:"5x",mx:"2x"}),B.createElement(s.Z,{fontSize:"sm",lineHeight:"sm"},"Home")),B.createElement(w.Z,{height:"100%"},B.createElement(product_alert_NavItem,{columnGap:"2x"},B.createElement(no.Z,null),B.createElement(s.Z,null,o.toLocaleDateString()),B.createElement(s.Z,null,o.toLocaleTimeString())),B.createElement(product_alert_NavItemDivider,null),B.createElement(product_alert_NavItem,{as:h.Z},B.createElement(ne.Z,{badgeContent:null},B.createElement(nr.Z,null)))))},product_alert_NavItem=function(n){var e=product_alert_slicedToArray((0,z.Z)(),1)[0],t=product_alert_slicedToArray((0,H.Z)({colorMode:e}),1)[0],o={display:"inline-flex",alignItems:"center",backgroundColor:t.background.secondary,px:"4x",height:"100%",_hover:{backgroundColor:t.background.highlighted},_selected:{backgroundColor:t.background.selected}};return B.createElement(Q.Z,product_alert_extends({},o,n))},product_alert_NavItemDivider=function(n){var e=product_alert_slicedToArray((0,z.Z)(),1)[0];return B.createElement(nn.Z,product_alert_extends({orientation:"vertical"},{borderColor:{dark:"gray:100",light:"gray:20"}[e],height:"100%"},n))},product_alert=function(){var n={backgroundColor:product_alert_slicedToArray((0,H.Z)(),1)[0].background.primary,height:480};return B.createElement(h.Z,n,B.createElement(product_alert_AlertView,null),B.createElement(product_alert_NavigationBar,null),B.createElement(h.Z,{p:"4x"},B.createElement(s.Z,{fontSize:"xl",lineHeight:"xl"},"Home")))};function alert_solid_extends(){return(alert_solid_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}function alert_solid_arrayLikeToArray(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=Array(e);t<e;t++)o[t]=n[t];return o}var alert_solid_CollapseToggle=function(n){var e,t=n.defaultIsOpen,o=n.children,r=function(n){if(Array.isArray(n))return n}(e=(0,$.Z)(void 0===t||t))||function(n,e){var t,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var a=[],i=!0,l=!1;try{for(r=r.call(n);!(i=(t=r.next()).done)&&(a.push(t.value),!e||a.length!==e);i=!0);}catch(n){l=!0,o=n}finally{try{i||null==r.return||r.return()}finally{if(l)throw o}}return a}}(e,2)||function(n,e){if(n){if("string"==typeof n)return alert_solid_arrayLikeToArray(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if("Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return alert_solid_arrayLikeToArray(n,e)}}(e,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),a=r[0],i=r[1];return B.createElement(L.Z,{in:a,unmountOnExit:!0},(0,na.Pu)(o,{isOpen:a,onOpen:function(){return i(!0)},onClose:function(){return i(!1)}}))},nh=(0,B.forwardRef)(function(n,e){return B.createElement(l.Z,alert_solid_extends({ref:e,size:"sm",variant:"secondary",sx:{borderColor:"black:primary",color:"black:primary",":active":{color:"black:primary"},":focus":{color:"black:primary"},":hover":{background:"rgba(0, 0, 0, 0.12)",color:"black:primary"},":hover:not(:focus)":{boxShadow:"none"}}},n))});nh.displayName="AlertSolidActionButton";var alert_solid=function(){return B.createElement(y.Z,{direction:"column",spacing:"4x"},B.createElement(alert_solid_CollapseToggle,null,function(n){var e=n.onClose;return B.createElement(W.Z,{variant:"solid",severity:"none",icon:B.createElement(nt.Z,null),onClose:e,sx:{background:"linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)",color:"white:emphasis"}},B.createElement(w.Z,{alignItems:"center",justifyContent:"space-between",columnGap:"4x",mr:"10x"},B.createElement(s.Z,null,"This is a promotion message."),B.createElement(nh,{my:"-1x"},"Action")),B.createElement(J.Z,{top:3,right:7,position:"absolute","data-test":"alert-close-button"}))}),B.createElement(alert_solid_CollapseToggle,null,function(n){var e=n.onClose;return B.createElement(W.Z,{variant:"solid",severity:"error",onClose:e},B.createElement(w.Z,{alignItems:"center",justifyContent:"space-between",columnGap:"4x",mr:"10x"},B.createElement(s.Z,null,"This is an error message."),B.createElement(nh,{my:"-1x"},"Action")),B.createElement(J.Z,{top:3,right:7,position:"absolute","data-test":"alert-close-button"}))}),B.createElement(alert_solid_CollapseToggle,null,function(n){var e=n.onClose;return B.createElement(W.Z,{variant:"solid",severity:"warning",onClose:e},B.createElement(w.Z,{alignItems:"center",justifyContent:"space-between",columnGap:"4x",mr:"10x"},B.createElement(s.Z,null,"This is a warning message."),B.createElement(nh,{my:"-1x"},"Action")),B.createElement(J.Z,{top:3,right:7,position:"absolute","data-test":"alert-close-button"}))}),B.createElement(alert_solid_CollapseToggle,null,function(n){var e=n.onClose;return B.createElement(W.Z,{variant:"solid",severity:"info",onClose:e},B.createElement(w.Z,{alignItems:"center",justifyContent:"space-between",columnGap:"4x",mr:"10x"},B.createElement(s.Z,null,"This is an info message."),B.createElement(nh,{my:"-1x"},"Action")),B.createElement(J.Z,{top:3,right:7,position:"absolute","data-test":"alert-close-button"}))}),B.createElement(alert_solid_CollapseToggle,null,function(n){var e=n.onClose;return B.createElement(W.Z,{variant:"solid",severity:"success",onClose:e},B.createElement(w.Z,{alignItems:"center",justifyContent:"space-between",columnGap:"4x",mr:"10x"},B.createElement(s.Z,null,"This is a success message.")),B.createElement(J.Z,{top:3,right:7,position:"absolute","data-test":"alert-close-button"}))}))},ny=t(85273),nb=t(15192),nv=t(12226),nC=t(47721),nT=t(52571),nw=t(99113),nA=t(97273),nk=t(52842),nS=t(56098),nZ=t(743),nB=t(10424),nI=t(14529),nE=t(96913),nO=t(6458),n_=t(33889),nj=t(37763),nP=t(46102);function notification_center_extends(){return(notification_center_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}function notification_center_slicedToArray(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var a=[],i=!0,l=!1;try{for(r=r.call(n);!(i=(t=r.next()).done)&&(a.push(t.value),!e||a.length!==e);i=!0);}catch(n){l=!0,o=n}finally{try{i||null==r.return||r.return()}finally{if(l)throw o}}return a}}(n,e)||function(n,e){if(n){if("string"==typeof n)return notification_center_arrayLikeToArray(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if("Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return notification_center_arrayLikeToArray(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function notification_center_arrayLikeToArray(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=Array(e);t<e;t++)o[t]=n[t];return o}var nM=(0,t(5081).Zs)("/tonic-ui-demo/react/pr-834"),nD=[{id:1,seen:!0,icon:B.createElement(ny.Z,{alt:"",src:"".concat(nM,"/images/patterns/notification/icon-notification-highlight.svg")}),message:B.createElement(s.Z,null,"Place your highlight message here."),time:(0,nI.Z)((0,nE.Z)(new Date,2)).getTime()},{id:2,seen:!1,icon:B.createElement(ny.Z,{alt:"",src:"".concat(nM,"/images/patterns/notification/icon-notification-success.svg")}),message:B.createElement(s.Z,null,"Place your success message here."),time:(0,nO.Z)(new Date,30).getTime()},{id:3,seen:!1,icon:B.createElement(ny.Z,{alt:"",src:"".concat(nM,"/images/patterns/notification/icon-notification-error.svg")}),message:B.createElement(s.Z,null,"Place your error message here."),time:(0,n_.Z)(new Date,5).getTime()},{id:4,seen:!1,icon:B.createElement(ny.Z,{alt:"",src:"".concat(nM,"/images/patterns/notification/icon-notification-warning.svg")}),message:B.createElement(s.Z,null,"Place your warning message here."),time:(0,n_.Z)(new Date,30).getTime()},{id:5,seen:!1,icon:B.createElement(ny.Z,{alt:"",src:"".concat(nM,"/images/patterns/notification/icon-notification-info.svg")}),message:B.createElement(s.Z,null,"Place your info message here."),time:(0,n_.Z)(new Date,60).getTime()}],nF=[{id:1,seen:!1,icon:B.createElement(ny.Z,{alt:"",src:"".concat(nM,"/images/patterns/notification/icon-notification-progress.svg")}),message:B.createElement(y.Z,{spacing:"1x"},B.createElement(s.Z,{fontSize:"sm",lineHeight:"sm"},"Place your progessive message here."),B.createElement(s.Z,{fontSize:"xs",lineHeight:"xs"},"Pending")),time:(0,nO.Z)(new Date,10).getTime()},{id:2,seen:!1,icon:B.createElement(ny.Z,{alt:"",src:"".concat(nM,"/images/patterns/notification/icon-notification-success.svg")}),message:B.createElement(y.Z,{spacing:"1x"},B.createElement(s.Z,{fontSize:"sm",lineHeight:"sm"},"Place your success message here."),B.createElement(s.Z,{fontSize:"xs",lineHeight:"xs"},"Successful")),time:(0,n_.Z)(new Date,5).getTime()},{id:3,seen:!1,icon:B.createElement(ny.Z,{alt:"",src:"".concat(nM,"/images/patterns/notification/icon-notification-error.svg")}),message:B.createElement(y.Z,{spacing:"1x"},B.createElement(s.Z,{fontSize:"sm",lineHeight:"sm"},"Place your error message here."),B.createElement(s.Z,{fontSize:"xs",lineHeight:"xs"},"Unsuccessful")),time:(0,n_.Z)(new Date,30).getTime()}],notification_center_NavigationBar=function(n){var e=notification_center_slicedToArray((0,$.Z)(!1),2),t=e[0],o=e[1],r={backgroundColor:notification_center_slicedToArray((0,H.Z)(),1)[0].background.secondary,height:"12x",alignItems:"center",justifyContent:"space-between"},a=notification_center_slicedToArray(B.useState(new Date),2),i=a[0],l=a[1];(0,B.useEffect)(function(){var n=setInterval(function(){l(new Date)},1e3);return function(){clearInterval(n)}},[]);var c=nD.filter(function(n){return!n.seen}).length,u=nF.filter(function(n){return!n.seen}).length;return(0,nB.Z)(function(){o(!0)}),B.createElement(w.Z,notification_center_extends({},r,n),B.createElement(w.Z,{alignItems:"center",ml:"5x"},B.createElement(s.Z,{fontSize:"2xl",lineHeight:"2xl"},"Product Name"),B.createElement(nn.Z,{orientation:"vertical",height:"5x",mx:"2x"}),B.createElement(s.Z,{fontSize:"sm",lineHeight:"sm"},"Home")),B.createElement(w.Z,{height:"100%"},B.createElement(notification_center_NavItem,{columnGap:"2x"},B.createElement(no.Z,null),B.createElement(s.Z,null,i.toLocaleDateString()),B.createElement(s.Z,null,i.toLocaleTimeString())),B.createElement(notification_center_NavItemDivider,null),B.createElement(nb.Z,{isOpen:t,onClose:function(){return o(!1)},onOpen:function(){return o(!0)},closeOnBlur:!1,placement:"bottom-end",offset:[0,1]},B.createElement(nv.Z,null,B.createElement(notification_center_NavItem,{as:h.Z,"aria-selected":t},B.createElement(ne.Z,{badgeContent:c+u},B.createElement(nr.Z,null)))),B.createElement(nC.Z,null,B.createElement(NotificationCenter,{sx:{width:480}})))))},notification_center_NavItem=function(n){var e=notification_center_slicedToArray((0,z.Z)(),1)[0],t=notification_center_slicedToArray((0,H.Z)({colorMode:e}),1)[0],o={display:"inline-flex",alignItems:"center",backgroundColor:t.background.secondary,px:"4x",height:"100%",_hover:{backgroundColor:t.background.highlighted},_selected:{backgroundColor:t.background.selected}};return B.createElement(Q.Z,notification_center_extends({},o,n))},notification_center_NavItemDivider=function(n){var e=notification_center_slicedToArray((0,z.Z)(),1)[0];return B.createElement(nn.Z,notification_center_extends({orientation:"vertical"},{borderColor:{dark:"gray:100",light:"gray:20"}[e],height:"100%"},n))},NotificationCenter=function(n){var e=notification_center_slicedToArray((0,H.Z)(),1)[0],t={backgroundColor:e.background.secondary,fontSize:"sm",lineHeight:"sm",display:"flex",alignItems:"center",justifyContent:"center",px:"3x",py:"10q",_selected:{backgroundColor:e.background.tertiary}},o={backgroundColor:e.background.tertiary},r=new Date().getTime(),a=nD.filter(function(n){return!n.seen}).length,i=nF.filter(function(n){return!n.seen}).length;return B.createElement(nT.Z,notification_center_extends({orientation:"horizontal",variant:"unstyled"},n),B.createElement(nw.Z,{sx:{display:"grid",gridTemplateColumns:"repeat(2, 1fr)"}},B.createElement(nA.Z,t,B.createElement(s.Z,null,"Notifications (",a,")")),B.createElement(nA.Z,t,B.createElement(s.Z,null,"Tasks (",i,")"))),B.createElement(nk.Z,null,B.createElement(nS.Z,o,0===nD.length&&B.createElement(w.Z,{flexDirection:"column",alignItems:"center",justifyContent:"center",height:360},B.createElement(h.Z,{mb:"3x"},B.createElement(ny.Z,{alt:"",src:"".concat(nM,"/images/patterns/notification/notification-empty-content.svg")})),B.createElement(s.Z,{color:e.color.tertiary},"No notifications to display")),nD.length>0&&B.createElement(nZ.Z,{height:360,overflowY:"visible"},nD.map(function(n){return B.createElement(NotificationCenterItem,{key:n.id},B.createElement(w.Z,{columnGap:"2x"},B.createElement(h.Z,{position:"relative",width:"9x"},!n.seen&&B.createElement(h.Z,{position:"absolute",top:15,left:-10,width:5,height:5,borderRadius:"50%",backgroundColor:"cyan:30"}),n.icon),B.createElement(h.Z,null,B.createElement(h.Z,{mb:"3x"},n.message),!!n.time&&B.createElement(s.Z,{color:e.color.secondary},(0,nj.Z)(n.time,r,{addSuffix:!0})," ","(".concat((0,nP.Z)(n.time),")")))))}))),B.createElement(nS.Z,o,0===nF.length&&B.createElement(w.Z,{flexDirection:"column",alignItems:"center",justifyContent:"center",height:360},B.createElement(h.Z,{mb:"3x"},B.createElement(ny.Z,{alt:"",src:"".concat(nM,"/images/patterns/notification/notification-empty-content.svg")})),B.createElement(s.Z,{color:e.color.tertiary},"No tasks to display")),nF.length>0&&B.createElement(nZ.Z,{height:360,overflowY:"visible"},nF.map(function(n){return B.createElement(NotificationCenterItem,{key:n.id},B.createElement(w.Z,{columnGap:"2x"},B.createElement(h.Z,{position:"relative",width:"9x"},!n.seen&&B.createElement(h.Z,{position:"absolute",top:15,left:-10,width:5,height:5,borderRadius:"50%",backgroundColor:"cyan:30"}),n.icon),B.createElement(h.Z,null,B.createElement(h.Z,{mb:"3x"},n.message),!!n.time&&B.createElement(s.Z,{color:e.color.secondary},(0,nj.Z)(n.time,r,{addSuffix:!0})," ","(".concat((0,nP.Z)(n.time),")")))))})))))},NotificationCenterItem=function(n){var e=notification_center_slicedToArray((0,z.Z)(),1)[0],t=notification_center_slicedToArray((0,H.Z)({colorMode:e}),1)[0],o={backgroundColor:t.background.tertiary,borderBottom:1,borderBottomColor:{dark:"gray:100",light:"gray:20"}[e],px:"4x",py:"4x",textAlign:"left",width:"100%",_hover:{backgroundColor:t.background.highlighted}};return B.createElement(Q.Z,notification_center_extends({},o,n))},notification_center=function(){var n={backgroundColor:notification_center_slicedToArray((0,H.Z)(),1)[0].background.primary,height:480};return B.createElement(h.Z,n,B.createElement(notification_center_NavigationBar,null),B.createElement(h.Z,{p:"4x"},B.createElement(s.Z,{fontSize:"xl",lineHeight:"xl"},"Home")))},nN=t(67622),nG=t(119);function _createMdxContent(n){var e=Object.assign({div:"div",h1:"h1",h2:"h2",a:"a",svg:"svg",use:"use",p:"p",ul:"ul",li:"li",h3:"h3",strong:"strong",h4:"h4",code:"code"},(0,r.ah)(),n.components);return(0,o.jsxs)(e.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,o.jsx)(e.h1,{id:"notification",children:"Notification"}),"\n",(0,o.jsxs)(e.h2,{id:"overview",children:["Overview",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#overview",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(e.p,{children:"Notifications proactively provide short, timely, and relevant information about the product to help users notice important things and even take follow-up actions."}),"\n",(0,o.jsx)(e.p,{children:"There are various channels to notify users:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Notification center"}),"\n",(0,o.jsx)(e.li,{children:"Alert"}),"\n",(0,o.jsx)(e.li,{children:"Toast"}),"\n"]}),"\n",(0,o.jsxs)(e.h2,{id:"how-it-works",children:["How It Works",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-it-works",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.h3,{id:"notification-center",children:["Notification center",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#notification-center",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.p,{children:["Product-level system notifications can be placed on the ",(0,o.jsx)(e.strong,{children:"Informative"})," tab of the notification center with the following types:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Success: Indicates that a system task is successfully executed."}),"\n",(0,o.jsx)(e.li,{children:"Error: Indicates that a system error occurs and requires users to take actions."}),"\n",(0,o.jsx)(e.li,{children:"Information: Indicates that a system change happens and might temporarily affect users, for example, system maintenance."}),"\n",(0,o.jsx)(e.li,{children:"Attack related: Informs users of attack related information and leads users to learn about the impact."}),"\n",(0,o.jsx)(e.li,{children:"New feature: Informs users of a new feature and leads users to learn more about the feature."}),"\n"]}),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:notification_center,file:{data:'import {\n  Badge,\n  Box,\n  ButtonBase,\n  Divider,\n  Flex,\n  Image,\n  Menu,\n  MenuContent,\n  MenuToggle,\n  Scrollbar,\n  Stack,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Text,\n  useColorMode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { AlertIcon, ClockIcon } from \'@tonic-ui/react-icons\';\nimport { useEffectOnce, useToggle } from \'@tonic-ui/react-hooks\';\nimport { formatDistance, formatISO, startOfToday, subDays, subMinutes, subSeconds } from \'date-fns\';\nimport { ensureString } from \'ensure-type\';\nimport React, { useEffect } from \'react\';\n\nconst BASE_PATH = ensureString(process.env.BASE_PATH);\n\nconst notifications = [\n  {\n    id: 1,\n    seen: true,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-highlight.svg`} />\n    ),\n    message: (\n      <Text>\n        Place your highlight message here.\n      </Text>\n    ),\n    time: startOfToday(subDays(new Date(), 2)).getTime(),\n  },\n  {\n    id: 2,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-success.svg`} />\n    ),\n    message: (\n      <Text>\n        Place your success message here.\n      </Text>\n    ),\n    time: subSeconds(new Date(), 30).getTime(),\n  },\n  {\n    id: 3,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-error.svg`} />\n    ),\n    message: (\n      <Text>\n        Place your error message here.\n      </Text>\n    ),\n    time: subMinutes(new Date(), 5).getTime(),\n  },\n  {\n    id: 4,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-warning.svg`} />\n    ),\n    message: (\n      <Text>\n        Place your warning message here.\n      </Text>\n    ),\n    time: subMinutes(new Date(), 30).getTime(),\n  },\n  {\n    id: 5,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-info.svg`} />\n    ),\n    message: (\n      <Text>\n        Place your info message here.\n      </Text>\n    ),\n    time: subMinutes(new Date(), 60).getTime(),\n  },\n];\n\nconst tasks = [\n  {\n    id: 1,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-progress.svg`} />\n    ),\n    message: (\n      <Stack spacing="1x">\n        <Text fontSize="sm" lineHeight="sm">\n          Place your progessive message here.\n        </Text>\n        <Text fontSize="xs" lineHeight="xs">\n          Pending\n        </Text>\n      </Stack>\n    ),\n    time: subSeconds(new Date(), 10).getTime(),\n  },\n  {\n    id: 2,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-success.svg`} />\n    ),\n    message: (\n      <Stack spacing="1x">\n        <Text fontSize="sm" lineHeight="sm">\n          Place your success message here.\n        </Text>\n        <Text fontSize="xs" lineHeight="xs">\n          Successful\n        </Text>\n      </Stack>\n    ),\n    time: subMinutes(new Date(), 5).getTime(),\n  },\n  {\n    id: 3,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-error.svg`} />\n    ),\n    message: (\n      <Stack spacing="1x">\n        <Text fontSize="sm" lineHeight="sm">\n          Place your error message here.\n        </Text>\n        <Text fontSize="xs" lineHeight="xs">\n          Unsuccessful\n        </Text>\n      </Stack>\n    ),\n    time: subMinutes(new Date(), 30).getTime(),\n  },\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.primary,\n    height: 480,\n  };\n\n  return (\n    <Box\n      {...styleProps}\n    >\n      <NavigationBar />\n      <Box p="4x">\n        <Text fontSize="xl" lineHeight="xl">\n          Home\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nconst NavigationBar = (props) => {\n  const [isNotificationCenterOpen, toggleIsNotificationCenterOpen] = useToggle(false);\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.secondary,\n    height: \'12x\',\n    alignItems: \'center\',\n    justifyContent: \'space-between\',\n  };\n  const [date, setDate] = React.useState(new Date());\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(t);\n    };\n  }, []);\n\n  const notificationUnreadCount = notifications.filter(x => !x.seen).length;\n  const taskUnreadCount = tasks.filter(x => !x.seen).length;\n  const unreadCount = notificationUnreadCount + taskUnreadCount;\n\n  useEffectOnce(() => {\n    toggleIsNotificationCenterOpen(true);\n  });\n\n  return (\n    <Flex\n      {...styleProps}\n      {...props}\n    >\n      <Flex alignItems="center" ml="5x">\n        <Text fontSize="2xl" lineHeight="2xl">\n          Product Name\n        </Text>\n        <Divider orientation="vertical" height="5x" mx="2x" />\n        <Text fontSize="sm" lineHeight="sm">\n          Home\n        </Text>\n      </Flex>\n      <Flex height="100%">\n        <NavItem columnGap="2x">\n          <ClockIcon />\n          <Text>{date.toLocaleDateString()}</Text>\n          <Text>{date.toLocaleTimeString()}</Text>\n        </NavItem>\n        <NavItemDivider />\n        <Menu\n          isOpen={isNotificationCenterOpen}\n          onClose={() => toggleIsNotificationCenterOpen(false)}\n          onOpen={() => toggleIsNotificationCenterOpen(true)}\n          closeOnBlur={false}\n          placement="bottom-end"\n          offset={[0, 1]}\n        >\n          <MenuToggle>\n            <NavItem\n              as={Box}\n              aria-selected={isNotificationCenterOpen}\n            >\n              <Badge badgeContent={unreadCount}>\n                <AlertIcon />\n              </Badge>\n            </NavItem>\n          </MenuToggle>\n          <MenuContent>\n            <NotificationCenter\n              sx={{\n                width: 480,\n              }}\n            />\n          </MenuContent>\n        </Menu>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst NavItem = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const styleProps = {\n    display: \'inline-flex\',\n    alignItems: \'center\',\n    backgroundColor: colorStyle.background.secondary,\n    px: \'4x\',\n    height: \'100%\',\n    _hover: {\n      backgroundColor: colorStyle.background.highlighted,\n    },\n    _selected: {\n      backgroundColor: colorStyle.background.selected,\n    },\n  };\n\n  return (\n    <ButtonBase\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nconst NavItemDivider = (props) => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: \'gray:100\',\n    light: \'gray:20\',\n  }[colorMode];\n  const styleProps = {\n    borderColor,\n    height: \'100%\',\n  };\n\n  return (\n    <Divider\n      orientation="vertical"\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nconst NotificationCenter = (props) => {\n  const [colorStyle] = useColorStyle();\n  const tabStyleProps = {\n    backgroundColor: colorStyle.background.secondary,\n    fontSize: \'sm\',\n    lineHeight: \'sm\',\n    display: \'flex\',\n    alignItems: \'center\',\n    justifyContent: \'center\',\n    px: \'3x\',\n    py: \'10q\',\n    _selected: {\n      backgroundColor: colorStyle.background.tertiary,\n    },\n  };\n  const tabPanelStyleProps = {\n    backgroundColor: colorStyle.background.tertiary,\n  };\n  const now = new Date().getTime();\n  const notificationUnreadCount = notifications.filter(x => !x.seen).length;\n  const taskUnreadCount = tasks.filter(x => !x.seen).length;\n\n  return (\n    <Tabs\n      orientation="horizontal"\n      variant="unstyled"\n      {...props}\n    >\n      <TabList\n        sx={{\n          display: \'grid\',\n          gridTemplateColumns: \'repeat(2, 1fr)\',\n        }}\n      >\n        <Tab {...tabStyleProps}>\n          <Text>Notifications ({notificationUnreadCount})</Text>\n        </Tab>\n        <Tab {...tabStyleProps}>\n          <Text>Tasks ({taskUnreadCount})</Text>\n        </Tab>\n      </TabList>\n      <TabPanels>\n        <TabPanel\n          {...tabPanelStyleProps}\n        >\n          {notifications.length === 0 && (\n            <Flex\n              flexDirection="column"\n              alignItems="center"\n              justifyContent="center"\n              height={360}\n            >\n              <Box mb="3x">\n                <Image alt="" src={`${BASE_PATH}/images/patterns/notification/notification-empty-content.svg`} />\n              </Box>\n              <Text color={colorStyle.color.tertiary}>\n                No notifications to display\n              </Text>\n            </Flex>\n          )}\n          {notifications.length > 0 && (\n            <Scrollbar\n              height={360}\n              overflowY="visible"\n            >\n              {notifications.map((notification) => (\n                <NotificationCenterItem key={notification.id}>\n                  <Flex columnGap="2x">\n                    <Box\n                      position="relative"\n                      width="9x"\n                    >\n                      {!notification.seen && (\n                        <Box\n                          position="absolute"\n                          top={15}\n                          left={-10}\n                          width={5}\n                          height={5}\n                          borderRadius="50%"\n                          backgroundColor="cyan:30"\n                        />\n                      )}\n                      {notification.icon}\n                    </Box>\n                    <Box>\n                      <Box mb="3x">\n                        {notification.message}\n                      </Box>\n                      {!!notification.time && (\n                        <Text color={colorStyle.color.secondary}>\n                          {formatDistance(notification.time, now, { addSuffix: true })}\n                          {\' \'}\n                          {`(${formatISO(notification.time)})`}\n                        </Text>\n                      )}\n                    </Box>\n                  </Flex>\n                </NotificationCenterItem>\n              ))}\n            </Scrollbar>\n          )}\n        </TabPanel>\n        <TabPanel\n          {...tabPanelStyleProps}\n        >\n          {tasks.length === 0 && (\n            <Flex\n              flexDirection="column"\n              alignItems="center"\n              justifyContent="center"\n              height={360}\n            >\n              <Box mb="3x">\n                <Image alt="" src={`${BASE_PATH}/images/patterns/notification/notification-empty-content.svg`} />\n              </Box>\n              <Text color={colorStyle.color.tertiary}>\n                No tasks to display\n              </Text>\n            </Flex>\n          )}\n          {tasks.length > 0 && (\n            <Scrollbar\n              height={360}\n              overflowY="visible"\n            >\n              {tasks.map((task) => (\n                <NotificationCenterItem key={task.id}>\n                  <Flex columnGap="2x">\n                    <Box\n                      position="relative"\n                      width="9x"\n                    >\n                      {!task.seen && (\n                        <Box\n                          position="absolute"\n                          top={15}\n                          left={-10}\n                          width={5}\n                          height={5}\n                          borderRadius="50%"\n                          backgroundColor="cyan:30"\n                        />\n                      )}\n                      {task.icon}\n                    </Box>\n                    <Box>\n                      <Box mb="3x">\n                        {task.message}\n                      </Box>\n                      {!!task.time && (\n                        <Text color={colorStyle.color.secondary}>\n                          {formatDistance(task.time, now, { addSuffix: true })}\n                          {\' \'}\n                          {`(${formatISO(task.time)})`}\n                        </Text>\n                      )}\n                    </Box>\n                  </Flex>\n                </NotificationCenterItem>\n              ))}\n            </Scrollbar>\n          )}\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n};\n\nconst NotificationCenterItem = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const borderColor = {\n    dark: \'gray:100\',\n    light: \'gray:20\',\n  }[colorMode];\n  const styleProps = {\n    backgroundColor: colorStyle.background.tertiary,\n    borderBottom: 1,\n    borderBottomColor: borderColor,\n    px: \'4x\',\n    py: \'4x\',\n    textAlign: \'left\',\n    width: \'100%\',\n    _hover: {\n      backgroundColor: colorStyle.background.highlighted,\n    },\n  };\n\n  return (\n    <ButtonBase\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nexport default App;',path:"pages/patterns/notification/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Badge,\n  Box,\n  ButtonBase,\n  Divider,\n  Flex,\n  Image,\n  Menu,\n  MenuContent,\n  MenuToggle,\n  Scrollbar,\n  Stack,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Text,\n  useColorMode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { AlertIcon, ClockIcon } from \'@tonic-ui/react-icons\';\nimport { useEffectOnce, useToggle } from \'@tonic-ui/react-hooks\';\nimport { formatDistance, formatISO, startOfToday, subDays, subMinutes, subSeconds } from \'date-fns\';\nimport { ensureString } from \'ensure-type\';\nimport React, { useEffect } from \'react\';\n\nconst BASE_PATH = ensureString(process.env.BASE_PATH);\n\nconst notifications = [\n  {\n    id: 1,\n    seen: true,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-highlight.svg`} />\n    ),\n    message: (\n      <Text>\n        Place your highlight message here.\n      </Text>\n    ),\n    time: startOfToday(subDays(new Date(), 2)).getTime(),\n  },\n  {\n    id: 2,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-success.svg`} />\n    ),\n    message: (\n      <Text>\n        Place your success message here.\n      </Text>\n    ),\n    time: subSeconds(new Date(), 30).getTime(),\n  },\n  {\n    id: 3,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-error.svg`} />\n    ),\n    message: (\n      <Text>\n        Place your error message here.\n      </Text>\n    ),\n    time: subMinutes(new Date(), 5).getTime(),\n  },\n  {\n    id: 4,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-warning.svg`} />\n    ),\n    message: (\n      <Text>\n        Place your warning message here.\n      </Text>\n    ),\n    time: subMinutes(new Date(), 30).getTime(),\n  },\n  {\n    id: 5,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-info.svg`} />\n    ),\n    message: (\n      <Text>\n        Place your info message here.\n      </Text>\n    ),\n    time: subMinutes(new Date(), 60).getTime(),\n  },\n];\n\nconst tasks = [\n  {\n    id: 1,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-progress.svg`} />\n    ),\n    message: (\n      <Stack spacing="1x">\n        <Text fontSize="sm" lineHeight="sm">\n          Place your progessive message here.\n        </Text>\n        <Text fontSize="xs" lineHeight="xs">\n          Pending\n        </Text>\n      </Stack>\n    ),\n    time: subSeconds(new Date(), 10).getTime(),\n  },\n  {\n    id: 2,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-success.svg`} />\n    ),\n    message: (\n      <Stack spacing="1x">\n        <Text fontSize="sm" lineHeight="sm">\n          Place your success message here.\n        </Text>\n        <Text fontSize="xs" lineHeight="xs">\n          Successful\n        </Text>\n      </Stack>\n    ),\n    time: subMinutes(new Date(), 5).getTime(),\n  },\n  {\n    id: 3,\n    seen: false,\n    icon: (\n      <Image alt="" src={`${BASE_PATH}/images/patterns/notification/icon-notification-error.svg`} />\n    ),\n    message: (\n      <Stack spacing="1x">\n        <Text fontSize="sm" lineHeight="sm">\n          Place your error message here.\n        </Text>\n        <Text fontSize="xs" lineHeight="xs">\n          Unsuccessful\n        </Text>\n      </Stack>\n    ),\n    time: subMinutes(new Date(), 30).getTime(),\n  },\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.primary,\n    height: 480,\n  };\n\n  return (\n    <Box\n      {...styleProps}\n    >\n      <NavigationBar />\n      <Box p="4x">\n        <Text fontSize="xl" lineHeight="xl">\n          Home\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nconst NavigationBar = (props) => {\n  const [isNotificationCenterOpen, toggleIsNotificationCenterOpen] = useToggle(false);\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.secondary,\n    height: \'12x\',\n    alignItems: \'center\',\n    justifyContent: \'space-between\',\n  };\n  const [date, setDate] = React.useState(new Date());\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(t);\n    };\n  }, []);\n\n  const notificationUnreadCount = notifications.filter(x => !x.seen).length;\n  const taskUnreadCount = tasks.filter(x => !x.seen).length;\n  const unreadCount = notificationUnreadCount + taskUnreadCount;\n\n  useEffectOnce(() => {\n    toggleIsNotificationCenterOpen(true);\n  });\n\n  return (\n    <Flex\n      {...styleProps}\n      {...props}\n    >\n      <Flex alignItems="center" ml="5x">\n        <Text fontSize="2xl" lineHeight="2xl">\n          Product Name\n        </Text>\n        <Divider orientation="vertical" height="5x" mx="2x" />\n        <Text fontSize="sm" lineHeight="sm">\n          Home\n        </Text>\n      </Flex>\n      <Flex height="100%">\n        <NavItem columnGap="2x">\n          <ClockIcon />\n          <Text>{date.toLocaleDateString()}</Text>\n          <Text>{date.toLocaleTimeString()}</Text>\n        </NavItem>\n        <NavItemDivider />\n        <Menu\n          isOpen={isNotificationCenterOpen}\n          onClose={() => toggleIsNotificationCenterOpen(false)}\n          onOpen={() => toggleIsNotificationCenterOpen(true)}\n          closeOnBlur={false}\n          placement="bottom-end"\n          offset={[0, 1]}\n        >\n          <MenuToggle>\n            <NavItem\n              as={Box}\n              aria-selected={isNotificationCenterOpen}\n            >\n              <Badge badgeContent={unreadCount}>\n                <AlertIcon />\n              </Badge>\n            </NavItem>\n          </MenuToggle>\n          <MenuContent>\n            <NotificationCenter\n              sx={{\n                width: 480,\n              }}\n            />\n          </MenuContent>\n        </Menu>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst NavItem = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const styleProps = {\n    display: \'inline-flex\',\n    alignItems: \'center\',\n    backgroundColor: colorStyle.background.secondary,\n    px: \'4x\',\n    height: \'100%\',\n    _hover: {\n      backgroundColor: colorStyle.background.highlighted,\n    },\n    _selected: {\n      backgroundColor: colorStyle.background.selected,\n    },\n  };\n\n  return (\n    <ButtonBase\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nconst NavItemDivider = (props) => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: \'gray:100\',\n    light: \'gray:20\',\n  }[colorMode];\n  const styleProps = {\n    borderColor,\n    height: \'100%\',\n  };\n\n  return (\n    <Divider\n      orientation="vertical"\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nconst NotificationCenter = (props) => {\n  const [colorStyle] = useColorStyle();\n  const tabStyleProps = {\n    backgroundColor: colorStyle.background.secondary,\n    fontSize: \'sm\',\n    lineHeight: \'sm\',\n    display: \'flex\',\n    alignItems: \'center\',\n    justifyContent: \'center\',\n    px: \'3x\',\n    py: \'10q\',\n    _selected: {\n      backgroundColor: colorStyle.background.tertiary,\n    },\n  };\n  const tabPanelStyleProps = {\n    backgroundColor: colorStyle.background.tertiary,\n  };\n  const now = new Date().getTime();\n  const notificationUnreadCount = notifications.filter(x => !x.seen).length;\n  const taskUnreadCount = tasks.filter(x => !x.seen).length;\n\n  return (\n    <Tabs\n      orientation="horizontal"\n      variant="unstyled"\n      {...props}\n    >\n      <TabList\n        sx={{\n          display: \'grid\',\n          gridTemplateColumns: \'repeat(2, 1fr)\',\n        }}\n      >\n        <Tab {...tabStyleProps}>\n          <Text>Notifications ({notificationUnreadCount})</Text>\n        </Tab>\n        <Tab {...tabStyleProps}>\n          <Text>Tasks ({taskUnreadCount})</Text>\n        </Tab>\n      </TabList>\n      <TabPanels>\n        <TabPanel\n          {...tabPanelStyleProps}\n        >\n          {notifications.length === 0 && (\n            <Flex\n              flexDirection="column"\n              alignItems="center"\n              justifyContent="center"\n              height={360}\n            >\n              <Box mb="3x">\n                <Image alt="" src={`${BASE_PATH}/images/patterns/notification/notification-empty-content.svg`} />\n              </Box>\n              <Text color={colorStyle.color.tertiary}>\n                No notifications to display\n              </Text>\n            </Flex>\n          )}\n          {notifications.length > 0 && (\n            <Scrollbar\n              height={360}\n              overflowY="visible"\n            >\n              {notifications.map((notification) => (\n                <NotificationCenterItem key={notification.id}>\n                  <Flex columnGap="2x">\n                    <Box\n                      position="relative"\n                      width="9x"\n                    >\n                      {!notification.seen && (\n                        <Box\n                          position="absolute"\n                          top={15}\n                          left={-10}\n                          width={5}\n                          height={5}\n                          borderRadius="50%"\n                          backgroundColor="cyan:30"\n                        />\n                      )}\n                      {notification.icon}\n                    </Box>\n                    <Box>\n                      <Box mb="3x">\n                        {notification.message}\n                      </Box>\n                      {!!notification.time && (\n                        <Text color={colorStyle.color.secondary}>\n                          {formatDistance(notification.time, now, { addSuffix: true })}\n                          {\' \'}\n                          {`(${formatISO(notification.time)})`}\n                        </Text>\n                      )}\n                    </Box>\n                  </Flex>\n                </NotificationCenterItem>\n              ))}\n            </Scrollbar>\n          )}\n        </TabPanel>\n        <TabPanel\n          {...tabPanelStyleProps}\n        >\n          {tasks.length === 0 && (\n            <Flex\n              flexDirection="column"\n              alignItems="center"\n              justifyContent="center"\n              height={360}\n            >\n              <Box mb="3x">\n                <Image alt="" src={`${BASE_PATH}/images/patterns/notification/notification-empty-content.svg`} />\n              </Box>\n              <Text color={colorStyle.color.tertiary}>\n                No tasks to display\n              </Text>\n            </Flex>\n          )}\n          {tasks.length > 0 && (\n            <Scrollbar\n              height={360}\n              overflowY="visible"\n            >\n              {tasks.map((task) => (\n                <NotificationCenterItem key={task.id}>\n                  <Flex columnGap="2x">\n                    <Box\n                      position="relative"\n                      width="9x"\n                    >\n                      {!task.seen && (\n                        <Box\n                          position="absolute"\n                          top={15}\n                          left={-10}\n                          width={5}\n                          height={5}\n                          borderRadius="50%"\n                          backgroundColor="cyan:30"\n                        />\n                      )}\n                      {task.icon}\n                    </Box>\n                    <Box>\n                      <Box mb="3x">\n                        {task.message}\n                      </Box>\n                      {!!task.time && (\n                        <Text color={colorStyle.color.secondary}>\n                          {formatDistance(task.time, now, { addSuffix: true })}\n                          {\' \'}\n                          {`(${formatISO(task.time)})`}\n                        </Text>\n                      )}\n                    </Box>\n                  </Flex>\n                </NotificationCenterItem>\n              ))}\n            </Scrollbar>\n          )}\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n};\n\nconst NotificationCenterItem = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const borderColor = {\n    dark: \'gray:100\',\n    light: \'gray:20\',\n  }[colorMode];\n  const styleProps = {\n    backgroundColor: colorStyle.background.tertiary,\n    borderBottom: 1,\n    borderBottomColor: borderColor,\n    px: \'4x\',\n    py: \'4x\',\n    textAlign: \'left\',\n    width: \'100%\',\n    _hover: {\n      backgroundColor: colorStyle.background.highlighted,\n    },\n  };\n\n  return (\n    <ButtonBase\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsxs)(e.p,{children:["Notifications about user-initiated system tasks that require some time to complete can be placed on the ",(0,o.jsx)(e.strong,{children:"Tasks"})," tab of the notification center. A notification is triggered when the task status changes.\nA task can have the following statuses:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Task successful: Informs users that a task is successfully executed. You can add a shortcut button to guide users to take follow-up actions. For example, adding a ",(0,o.jsx)(e.strong,{children:"Download"})," button when a file is ready to be exported."]}),"\n",(0,o.jsx)(e.li,{children:"Request pending: Informs users that a task requires manual approval."}),"\n",(0,o.jsx)(e.li,{children:"Task unsuccessful: Informs users that a task fails to be executed and leads users to the corresponding screen to view an error message that explain the failure."}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["For more information, see ",(0,o.jsx)(e.a,{href:"https://www.figma.com/file/Y1PF38zpyzA15XwBAdAb7f/Notification-Center?node-id=576%3A0&fuid=847002822432287235",children:"notification center guideline"}),"."]}),"\n",(0,o.jsxs)(e.h3,{id:"alert",children:["Alert",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#alert",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.h4,{id:"product-level-alert",children:["Product-level alert",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#product-level-alert",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.p,{children:["For product-level alerts, place an ",(0,o.jsx)(e.a,{href:"../components/alert",children:"alert"})," banner above the product name bar. The alert can be dismissed manually by the user or automatically by the system after the call to action is completed."]}),"\n",(0,o.jsx)(e.p,{children:"An alert has the following types:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Error: Informs users that a problem has occurred, for example, license expiration, and requires users to take actions."}),"\n",(0,o.jsx)(e.li,{children:"Warning: Informs users to prevent an imminent problem, for example, license about to expire."}),"\n"]}),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:alert_solid,file:{data:'import { Alert, AlertCloseButton, Button, Collapse, Flex, Stack, Text } from \'@tonic-ui/react\';\nimport { Light2OIcon } from \'@tonic-ui/react-icons\';\nimport { useToggle } from \'@tonic-ui/react-hooks\';\nimport { runIfFn } from \'@tonic-ui/utils\';\nimport React, { forwardRef } from \'react\';\n\nconst CollapseToggle = ({\n  defaultIsOpen: defaultIsOpenProp = true,\n  children,\n}) => {\n  const [isOpen, toggleIsOpen] = useToggle(defaultIsOpenProp);\n  const onOpen = () => toggleIsOpen(true);\n  const onClose = () => toggleIsOpen(false);\n\n  return (\n    <Collapse in={isOpen} unmountOnExit>\n      {runIfFn(children, { isOpen, onOpen, onClose })}\n    </Collapse>\n  );\n};\n\nconst AlertSolidActionButton = forwardRef((props, ref) => (\n  <Button\n    ref={ref}\n    size="sm"\n    variant="secondary"\n    sx={{\n      borderColor: \'black:primary\',\n      color: \'black:primary\',\n      \':active\': {\n        color: \'black:primary\',\n      },\n      \':focus\': {\n        color: \'black:primary\',\n      },\n      \':hover\': {\n        background: \'rgba(0, 0, 0, 0.12)\',\n        color: \'black:primary\',\n      },\n      \':hover:not(:focus)\': {\n        boxShadow: \'none\',\n      },\n    }}\n    {...props}\n  />\n));\nAlertSolidActionButton.displayName = \'AlertSolidActionButton\';\n\nconst App = () => {\n  return (\n    <Stack direction="column" spacing="4x">\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="solid"\n            severity="none"\n            icon={<Light2OIcon />}\n            onClose={onClose}\n            sx={{\n              background: \'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)\',\n              color: \'white:emphasis\',\n            }}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              columnGap="4x"\n              mr="10x"\n            >\n              <Text>This is a promotion message.</Text>\n              <AlertSolidActionButton my="-1x">\n                Action\n              </AlertSolidActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="solid"\n            severity="error"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              columnGap="4x"\n              mr="10x"\n            >\n              <Text>This is an error message.</Text>\n              <AlertSolidActionButton my="-1x">\n                Action\n              </AlertSolidActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="solid"\n            severity="warning"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              columnGap="4x"\n              mr="10x"\n            >\n              <Text>This is a warning message.</Text>\n              <AlertSolidActionButton my="-1x">\n                Action\n              </AlertSolidActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="solid"\n            severity="info"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              columnGap="4x"\n              mr="10x"\n            >\n              <Text>This is an info message.</Text>\n              <AlertSolidActionButton my="-1x">\n                Action\n              </AlertSolidActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="solid"\n            severity="success"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              columnGap="4x"\n              mr="10x"\n            >\n              <Text>This is a success message.</Text>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/patterns/notification/index.page.mdx"},sandbox:{files:{},raw:'import { Alert, AlertCloseButton, Button, Collapse, Flex, Stack, Text } from \'@tonic-ui/react\';\nimport { Light2OIcon } from \'@tonic-ui/react-icons\';\nimport { useToggle } from \'@tonic-ui/react-hooks\';\nimport { runIfFn } from \'@tonic-ui/utils\';\nimport React, { forwardRef } from \'react\';\n\nconst CollapseToggle = ({\n  defaultIsOpen: defaultIsOpenProp = true,\n  children,\n}) => {\n  const [isOpen, toggleIsOpen] = useToggle(defaultIsOpenProp);\n  const onOpen = () => toggleIsOpen(true);\n  const onClose = () => toggleIsOpen(false);\n\n  return (\n    <Collapse in={isOpen} unmountOnExit>\n      {runIfFn(children, { isOpen, onOpen, onClose })}\n    </Collapse>\n  );\n};\n\nconst AlertSolidActionButton = forwardRef((props, ref) => (\n  <Button\n    ref={ref}\n    size="sm"\n    variant="secondary"\n    sx={{\n      borderColor: \'black:primary\',\n      color: \'black:primary\',\n      \':active\': {\n        color: \'black:primary\',\n      },\n      \':focus\': {\n        color: \'black:primary\',\n      },\n      \':hover\': {\n        background: \'rgba(0, 0, 0, 0.12)\',\n        color: \'black:primary\',\n      },\n      \':hover:not(:focus)\': {\n        boxShadow: \'none\',\n      },\n    }}\n    {...props}\n  />\n));\nAlertSolidActionButton.displayName = \'AlertSolidActionButton\';\n\nconst App = () => {\n  return (\n    <Stack direction="column" spacing="4x">\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="solid"\n            severity="none"\n            icon={<Light2OIcon />}\n            onClose={onClose}\n            sx={{\n              background: \'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)\',\n              color: \'white:emphasis\',\n            }}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              columnGap="4x"\n              mr="10x"\n            >\n              <Text>This is a promotion message.</Text>\n              <AlertSolidActionButton my="-1x">\n                Action\n              </AlertSolidActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="solid"\n            severity="error"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              columnGap="4x"\n              mr="10x"\n            >\n              <Text>This is an error message.</Text>\n              <AlertSolidActionButton my="-1x">\n                Action\n              </AlertSolidActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="solid"\n            severity="warning"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              columnGap="4x"\n              mr="10x"\n            >\n              <Text>This is a warning message.</Text>\n              <AlertSolidActionButton my="-1x">\n                Action\n              </AlertSolidActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="solid"\n            severity="info"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              columnGap="4x"\n              mr="10x"\n            >\n              <Text>This is an info message.</Text>\n              <AlertSolidActionButton my="-1x">\n                Action\n              </AlertSolidActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="solid"\n            severity="success"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              columnGap="4x"\n              mr="10x"\n            >\n              <Text>This is a success message.</Text>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsx)(e.p,{children:"When multiple alerts are present, they are prioritized in the following order:"}),"\n",(0,o.jsx)(w.Z,{fontSize:"sm",lineHeight:"sm",mb:"6x",children:(0,o.jsxs)(T.Z,{alignItems:"center",columnGap:"2x",templateColumns:"repeat(4, 1fr auto)",children:[(0,o.jsx)(W.Z,{severity:"none",variant:"solid",icon:(0,o.jsx)(nt.Z,{}),sx:{background:"linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)",color:"white:primary"},children:(0,o.jsx)(s.Z,{children:"Promotion"})}),(0,o.jsx)(nG.Z,{}),(0,o.jsx)(W.Z,{severity:"error",variant:"solid",children:(0,o.jsx)(s.Z,{children:"Error"})}),(0,o.jsx)(nG.Z,{}),(0,o.jsx)(W.Z,{severity:"warning",variant:"solid",children:(0,o.jsx)(s.Z,{children:"Warning"})}),(0,o.jsx)(nG.Z,{}),(0,o.jsx)(W.Z,{severity:"info",variant:"solid",children:(0,o.jsx)(s.Z,{children:"Info"})})]})}),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:product_alert,file:{data:"import {\n  Alert,\n  AlertCloseButton,\n  Badge,\n  Box,\n  Button,\n  ButtonBase,\n  Collapse,\n  Divider,\n  Flex,\n  Text,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { AlertIcon, AngleDownIcon, AngleUpIcon, ClockIcon, Light2OIcon } from '@tonic-ui/react-icons';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { createTransitionStyle, runIfFn } from '@tonic-ui/utils';\nimport React, { forwardRef, useEffect, useState } from 'react';\n\nconst alerts = [\n  {\n    variant: 'solid',\n    severity: 'none',\n    icon: (\n      <Light2OIcon />\n    ),\n    sx: {\n      background: 'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)',\n      color: 'white:emphasis',\n    },\n    message: 'This is a promotion message.',\n  },\n  {\n    variant: 'solid',\n    severity: 'error',\n    message: 'This is an error message.',\n  },\n  {\n    variant: 'solid',\n    severity: 'warning',\n    message: 'This is a warning message.',\n  },\n  {\n    variant: 'solid',\n    severity: 'info',\n    message: 'This is an info message.',\n  },\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.primary,\n    height: 480,\n  };\n\n  return (\n    <Box\n      {...styleProps}\n    >\n      <AlertView />\n      <NavigationBar />\n      <Box p=\"4x\">\n        <Text fontSize=\"xl\" lineHeight=\"xl\">\n          Home\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nconst CollapseToggle = ({\n  defaultIsOpen: defaultIsOpenProp = true,\n  children,\n}) => {\n  const [isOpen, toggleIsOpen] = useToggle(defaultIsOpenProp);\n  const onOpen = () => toggleIsOpen(true);\n  const onClose = () => toggleIsOpen(false);\n\n  return (\n    <Collapse in={isOpen} unmountOnExit>\n      {runIfFn(children, { isOpen, onOpen, onClose })}\n    </Collapse>\n  );\n};\n\nconst IconButton = forwardRef((props, ref) => {\n  const theme = useTheme();\n  const size = '8x';\n  const color = 'black:secondary';\n  const disabledColor = 'black:disabled';\n  const activeColor = 'black:primary';\n  const focusBorderColor = 'blue:60';\n  const focusColor = 'black:primary';\n  const hoverColor = 'black:primary';\n  const styleProps = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 1,\n    borderColor: 'transparent',\n    color,\n    width: size,\n    height: size,\n    transition: createTransitionStyle(['border-color', 'box-shadow', 'color'], { duration: 200 }),\n    _disabled: {\n      color: disabledColor,\n    },\n    _focus: {\n      ':not(:active)': {\n        borderColor: focusBorderColor,\n        boxShadow: `inset 0 0 0 1px ${theme.colors[focusBorderColor]}`,\n        color: focusColor,\n      },\n    },\n    _hover: {\n      color: hoverColor,\n    },\n    _active: {\n      color: activeColor,\n    },\n  };\n\n  return (\n    <ButtonBase\n      ref={ref}\n      {...styleProps}\n      {...props}\n    />\n  );\n});\nIconButton.displayName = 'IconButton';\n\nconst AlertPagination = forwardRef((\n  {\n    page,\n    count,\n    onPrevious,\n    onNext,\n    ...rest\n  },\n  ref,\n) => (\n  <Flex alignItems=\"center\" columnGap=\"2x\" {...rest}>\n    <IconButton\n      disabled={page <= 1}\n      onClick={onPrevious}\n    >\n      <AngleUpIcon />\n    </IconButton>\n    <Text color=\"black:primary\">\n      {page}/{count}\n    </Text>\n    <IconButton\n      disabled={page >= count}\n      onClick={onNext}\n    >\n      <AngleDownIcon />\n    </IconButton>\n  </Flex>\n));\nAlertPagination.displayName = 'AlertPagination';\n\nconst AlertSolidActionButton = forwardRef((props, ref) => (\n  <Button\n    ref={ref}\n    size=\"sm\"\n    variant=\"secondary\"\n    sx={{\n      borderColor: 'black:primary',\n      color: 'black:primary',\n      ':active': {\n        color: 'black:primary',\n      },\n      ':focus': {\n        color: 'black:primary',\n      },\n      ':hover': {\n        background: 'rgba(0, 0, 0, 0.12)',\n        color: 'black:primary',\n      },\n      ':hover:not(:focus)': {\n        boxShadow: 'none',\n      },\n    }}\n    {...props}\n  />\n));\nAlertSolidActionButton.displayName = 'AlertSolidActionButton';\n\nconst AlertView = () => {\n  const [page, setPage] = useState(1);\n  const alert = alerts[page - 1] ?? {};\n\n  return (\n    <CollapseToggle>\n      {({ onClose }) => (\n        <Alert\n          variant={alert.variant}\n          severity={alert.severity}\n          icon={alert.icon}\n          onClose={onClose}\n          sx={alert.sx}\n        >\n          <Flex\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            columnGap=\"4x\"\n            mr=\"10x\"\n          >\n            <Text>{alert.message}</Text>\n            <Flex columnGap=\"4x\">\n              <AlertSolidActionButton my=\"-1x\">\n                Action\n              </AlertSolidActionButton>\n              <AlertPagination\n                page={page}\n                count={alerts.length}\n                onPrevious={() => setPage(Math.max(1, page - 1))}\n                onNext={() => setPage(Math.min(alerts.length, page + 1))}\n                my=\"-2x\"\n              />\n            </Flex>\n          </Flex>\n          <AlertCloseButton top={3} right={7} position=\"absolute\" data-test=\"alert-close-button\" />\n        </Alert>\n      )}\n    </CollapseToggle>\n  );\n};\n\nconst NavigationBar = (props) => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.secondary,\n    height: '12x',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  };\n  const [date, setDate] = React.useState(new Date());\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(t);\n    };\n  }, []);\n\n  return (\n    <Flex\n      {...styleProps}\n      {...props}\n    >\n      <Flex alignItems=\"center\" ml=\"5x\">\n        <Text fontSize=\"2xl\" lineHeight=\"2xl\">\n          Product Name\n        </Text>\n        <Divider orientation=\"vertical\" height=\"5x\" mx=\"2x\" />\n        <Text fontSize=\"sm\" lineHeight=\"sm\">\n          Home\n        </Text>\n      </Flex>\n      <Flex height=\"100%\">\n        <NavItem columnGap=\"2x\">\n          <ClockIcon />\n          <Text>{date.toLocaleDateString()}</Text>\n          <Text>{date.toLocaleTimeString()}</Text>\n        </NavItem>\n        <NavItemDivider />\n        <NavItem as={Box}>\n          <Badge badgeContent={null}>\n            <AlertIcon />\n          </Badge>\n        </NavItem>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst NavItem = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const styleProps = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    backgroundColor: colorStyle.background.secondary,\n    px: '4x',\n    height: '100%',\n    _hover: {\n      backgroundColor: colorStyle.background.highlighted,\n    },\n    _selected: {\n      backgroundColor: colorStyle.background.selected,\n    },\n  };\n\n  return (\n    <ButtonBase\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nconst NavItemDivider = (props) => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:100',\n    light: 'gray:20',\n  }[colorMode];\n  const styleProps = {\n    borderColor,\n    height: '100%',\n  };\n\n  return (\n    <Divider\n      orientation=\"vertical\"\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nexport default App;",path:"pages/patterns/notification/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Alert,\n  AlertCloseButton,\n  Badge,\n  Box,\n  Button,\n  ButtonBase,\n  Collapse,\n  Divider,\n  Flex,\n  Text,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { AlertIcon, AngleDownIcon, AngleUpIcon, ClockIcon, Light2OIcon } from '@tonic-ui/react-icons';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { createTransitionStyle, runIfFn } from '@tonic-ui/utils';\nimport React, { forwardRef, useEffect, useState } from 'react';\n\nconst alerts = [\n  {\n    variant: 'solid',\n    severity: 'none',\n    icon: (\n      <Light2OIcon />\n    ),\n    sx: {\n      background: 'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)',\n      color: 'white:emphasis',\n    },\n    message: 'This is a promotion message.',\n  },\n  {\n    variant: 'solid',\n    severity: 'error',\n    message: 'This is an error message.',\n  },\n  {\n    variant: 'solid',\n    severity: 'warning',\n    message: 'This is a warning message.',\n  },\n  {\n    variant: 'solid',\n    severity: 'info',\n    message: 'This is an info message.',\n  },\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.primary,\n    height: 480,\n  };\n\n  return (\n    <Box\n      {...styleProps}\n    >\n      <AlertView />\n      <NavigationBar />\n      <Box p=\"4x\">\n        <Text fontSize=\"xl\" lineHeight=\"xl\">\n          Home\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nconst CollapseToggle = ({\n  defaultIsOpen: defaultIsOpenProp = true,\n  children,\n}) => {\n  const [isOpen, toggleIsOpen] = useToggle(defaultIsOpenProp);\n  const onOpen = () => toggleIsOpen(true);\n  const onClose = () => toggleIsOpen(false);\n\n  return (\n    <Collapse in={isOpen} unmountOnExit>\n      {runIfFn(children, { isOpen, onOpen, onClose })}\n    </Collapse>\n  );\n};\n\nconst IconButton = forwardRef((props, ref) => {\n  const theme = useTheme();\n  const size = '8x';\n  const color = 'black:secondary';\n  const disabledColor = 'black:disabled';\n  const activeColor = 'black:primary';\n  const focusBorderColor = 'blue:60';\n  const focusColor = 'black:primary';\n  const hoverColor = 'black:primary';\n  const styleProps = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 1,\n    borderColor: 'transparent',\n    color,\n    width: size,\n    height: size,\n    transition: createTransitionStyle(['border-color', 'box-shadow', 'color'], { duration: 200 }),\n    _disabled: {\n      color: disabledColor,\n    },\n    _focus: {\n      ':not(:active)': {\n        borderColor: focusBorderColor,\n        boxShadow: `inset 0 0 0 1px ${theme.colors[focusBorderColor]}`,\n        color: focusColor,\n      },\n    },\n    _hover: {\n      color: hoverColor,\n    },\n    _active: {\n      color: activeColor,\n    },\n  };\n\n  return (\n    <ButtonBase\n      ref={ref}\n      {...styleProps}\n      {...props}\n    />\n  );\n});\nIconButton.displayName = 'IconButton';\n\nconst AlertPagination = forwardRef((\n  {\n    page,\n    count,\n    onPrevious,\n    onNext,\n    ...rest\n  },\n  ref,\n) => (\n  <Flex alignItems=\"center\" columnGap=\"2x\" {...rest}>\n    <IconButton\n      disabled={page <= 1}\n      onClick={onPrevious}\n    >\n      <AngleUpIcon />\n    </IconButton>\n    <Text color=\"black:primary\">\n      {page}/{count}\n    </Text>\n    <IconButton\n      disabled={page >= count}\n      onClick={onNext}\n    >\n      <AngleDownIcon />\n    </IconButton>\n  </Flex>\n));\nAlertPagination.displayName = 'AlertPagination';\n\nconst AlertSolidActionButton = forwardRef((props, ref) => (\n  <Button\n    ref={ref}\n    size=\"sm\"\n    variant=\"secondary\"\n    sx={{\n      borderColor: 'black:primary',\n      color: 'black:primary',\n      ':active': {\n        color: 'black:primary',\n      },\n      ':focus': {\n        color: 'black:primary',\n      },\n      ':hover': {\n        background: 'rgba(0, 0, 0, 0.12)',\n        color: 'black:primary',\n      },\n      ':hover:not(:focus)': {\n        boxShadow: 'none',\n      },\n    }}\n    {...props}\n  />\n));\nAlertSolidActionButton.displayName = 'AlertSolidActionButton';\n\nconst AlertView = () => {\n  const [page, setPage] = useState(1);\n  const alert = alerts[page - 1] ?? {};\n\n  return (\n    <CollapseToggle>\n      {({ onClose }) => (\n        <Alert\n          variant={alert.variant}\n          severity={alert.severity}\n          icon={alert.icon}\n          onClose={onClose}\n          sx={alert.sx}\n        >\n          <Flex\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            columnGap=\"4x\"\n            mr=\"10x\"\n          >\n            <Text>{alert.message}</Text>\n            <Flex columnGap=\"4x\">\n              <AlertSolidActionButton my=\"-1x\">\n                Action\n              </AlertSolidActionButton>\n              <AlertPagination\n                page={page}\n                count={alerts.length}\n                onPrevious={() => setPage(Math.max(1, page - 1))}\n                onNext={() => setPage(Math.min(alerts.length, page + 1))}\n                my=\"-2x\"\n              />\n            </Flex>\n          </Flex>\n          <AlertCloseButton top={3} right={7} position=\"absolute\" data-test=\"alert-close-button\" />\n        </Alert>\n      )}\n    </CollapseToggle>\n  );\n};\n\nconst NavigationBar = (props) => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.secondary,\n    height: '12x',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  };\n  const [date, setDate] = React.useState(new Date());\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(t);\n    };\n  }, []);\n\n  return (\n    <Flex\n      {...styleProps}\n      {...props}\n    >\n      <Flex alignItems=\"center\" ml=\"5x\">\n        <Text fontSize=\"2xl\" lineHeight=\"2xl\">\n          Product Name\n        </Text>\n        <Divider orientation=\"vertical\" height=\"5x\" mx=\"2x\" />\n        <Text fontSize=\"sm\" lineHeight=\"sm\">\n          Home\n        </Text>\n      </Flex>\n      <Flex height=\"100%\">\n        <NavItem columnGap=\"2x\">\n          <ClockIcon />\n          <Text>{date.toLocaleDateString()}</Text>\n          <Text>{date.toLocaleTimeString()}</Text>\n        </NavItem>\n        <NavItemDivider />\n        <NavItem as={Box}>\n          <Badge badgeContent={null}>\n            <AlertIcon />\n          </Badge>\n        </NavItem>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst NavItem = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const styleProps = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    backgroundColor: colorStyle.background.secondary,\n    px: '4x',\n    height: '100%',\n    _hover: {\n      backgroundColor: colorStyle.background.highlighted,\n    },\n    _selected: {\n      backgroundColor: colorStyle.background.selected,\n    },\n  };\n\n  return (\n    <ButtonBase\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nconst NavItemDivider = (props) => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:100',\n    light: 'gray:20',\n  }[colorMode];\n  const styleProps = {\n    borderColor,\n    height: '100%',\n  };\n\n  return (\n    <Divider\n      orientation=\"vertical\"\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(e.h4,{id:"in-app-alert",children:["In-app alert",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#in-app-alert",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(e.p,{children:"For alerts that are related to a screen or a feature only, show the alert banner in the associated screen or feature. The alert can be placed in different modules to fit different use cases. For example, place it in the upper part of a screen, a drawer, or a modal."}),"\n",(0,o.jsx)(e.p,{children:"An in-app alert has the following types:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Promotion: Used only when there is a solution or offering to promote."}),"\n",(0,o.jsx)(e.li,{children:"Error: Informs users that a problem has occurred and requires users to take actions."}),"\n",(0,o.jsx)(e.li,{children:"Warning: Informs users of potential problems that may not require immediate action or to prevent an imminent problem"}),"\n",(0,o.jsx)(e.li,{children:"Info: Provides useful, relevant information to users."}),"\n"]}),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:alert_outline,file:{data:'import { Alert, AlertCloseButton, Button, Collapse, Flex, Stack, Text } from \'@tonic-ui/react\';\nimport { Light2OIcon } from \'@tonic-ui/react-icons\';\nimport { useToggle } from \'@tonic-ui/react-hooks\';\nimport { runIfFn } from \'@tonic-ui/utils\';\nimport React, { forwardRef } from \'react\';\n\nconst CollapseToggle = ({\n  defaultIsOpen: defaultIsOpenProp = true,\n  children,\n}) => {\n  const [isOpen, toggleIsOpen] = useToggle(defaultIsOpenProp);\n  const onOpen = () => toggleIsOpen(true);\n  const onClose = () => toggleIsOpen(false);\n\n  return (\n    <Collapse in={isOpen} unmountOnExit>\n      {runIfFn(children, { isOpen, onOpen, onClose })}\n    </Collapse>\n  );\n};\n\nconst AlertOutlineActionButton = forwardRef((props, ref) => (\n  <Button\n    ref={ref}\n    size="sm"\n    variant="secondary"\n    {...props}\n  />\n));\nAlertOutlineActionButton.displayName = \'AlertOutlineActionButton\';\n\nconst App = () => {\n  return (\n    <Stack direction="column" spacing="4x">\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="outline"\n            severity="none"\n            icon={<Light2OIcon />}\n            onClose={onClose}\n            sx={{\n              borderImageSource: \'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)\',\n              borderImageSlice: 1,\n            }}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              mr="10x"\n            >\n              <Text>This is a promotion message.</Text>\n              <AlertOutlineActionButton my="-1x">\n                Action\n              </AlertOutlineActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="outline"\n            severity="error"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              mr="10x"\n            >\n              <Text>This is an error message.</Text>\n              <AlertOutlineActionButton my="-1x">\n                Action\n              </AlertOutlineActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="outline"\n            severity="warning"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              mr="10x"\n            >\n              <Text>This is a warning message.</Text>\n              <AlertOutlineActionButton my="-1x">\n                Action\n              </AlertOutlineActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="outline"\n            severity="info"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              mr="10x"\n            >\n              <Text>This is an info message.</Text>\n              <AlertOutlineActionButton my="-1x">\n                Action\n              </AlertOutlineActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="outline"\n            severity="success"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              mr="10x"\n            >\n              <Text>This is a success message.</Text>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n    </Stack>\n  );\n};\n\nexport default App;',path:"pages/patterns/notification/index.page.mdx"},sandbox:{files:{},raw:'import { Alert, AlertCloseButton, Button, Collapse, Flex, Stack, Text } from \'@tonic-ui/react\';\nimport { Light2OIcon } from \'@tonic-ui/react-icons\';\nimport { useToggle } from \'@tonic-ui/react-hooks\';\nimport { runIfFn } from \'@tonic-ui/utils\';\nimport React, { forwardRef } from \'react\';\n\nconst CollapseToggle = ({\n  defaultIsOpen: defaultIsOpenProp = true,\n  children,\n}) => {\n  const [isOpen, toggleIsOpen] = useToggle(defaultIsOpenProp);\n  const onOpen = () => toggleIsOpen(true);\n  const onClose = () => toggleIsOpen(false);\n\n  return (\n    <Collapse in={isOpen} unmountOnExit>\n      {runIfFn(children, { isOpen, onOpen, onClose })}\n    </Collapse>\n  );\n};\n\nconst AlertOutlineActionButton = forwardRef((props, ref) => (\n  <Button\n    ref={ref}\n    size="sm"\n    variant="secondary"\n    {...props}\n  />\n));\nAlertOutlineActionButton.displayName = \'AlertOutlineActionButton\';\n\nconst App = () => {\n  return (\n    <Stack direction="column" spacing="4x">\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="outline"\n            severity="none"\n            icon={<Light2OIcon />}\n            onClose={onClose}\n            sx={{\n              borderImageSource: \'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)\',\n              borderImageSlice: 1,\n            }}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              mr="10x"\n            >\n              <Text>This is a promotion message.</Text>\n              <AlertOutlineActionButton my="-1x">\n                Action\n              </AlertOutlineActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="outline"\n            severity="error"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              mr="10x"\n            >\n              <Text>This is an error message.</Text>\n              <AlertOutlineActionButton my="-1x">\n                Action\n              </AlertOutlineActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="outline"\n            severity="warning"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              mr="10x"\n            >\n              <Text>This is a warning message.</Text>\n              <AlertOutlineActionButton my="-1x">\n                Action\n              </AlertOutlineActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="outline"\n            severity="info"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              mr="10x"\n            >\n              <Text>This is an info message.</Text>\n              <AlertOutlineActionButton my="-1x">\n                Action\n              </AlertOutlineActionButton>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n      <CollapseToggle>\n        {({ onClose }) => (\n          <Alert\n            variant="outline"\n            severity="success"\n            onClose={onClose}\n          >\n            <Flex\n              alignItems="center"\n              justifyContent="space-between"\n              mr="10x"\n            >\n              <Text>This is a success message.</Text>\n            </Flex>\n            <AlertCloseButton top={3} right={7} position="absolute" data-test="alert-close-button" />\n          </Alert>\n        )}\n      </CollapseToggle>\n    </Stack>\n  );\n};\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:in_app_alert,file:{data:"import {\n  Alert,\n  AlertCloseButton,\n  Badge,\n  Box,\n  Button,\n  ButtonBase,\n  Collapse,\n  Divider,\n  Flex,\n  Text,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { AlertIcon, ClockIcon, Light2OIcon } from '@tonic-ui/react-icons';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { createTransitionStyle, runIfFn } from '@tonic-ui/utils';\nimport React, { forwardRef, useEffect, useState } from 'react';\n\nconst alerts = [\n  {\n    variant: 'outline',\n    severity: 'none',\n    icon: (\n      <Light2OIcon />\n    ),\n    sx: {\n      borderImageSource: 'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)',\n      borderImageSlice: 1,\n    },\n    message: 'This is a promotion message.',\n  },\n  {\n    variant: 'outline',\n    severity: 'error',\n    message: 'This is an error message.',\n  },\n  {\n    variant: 'outline',\n    severity: 'warning',\n    message: 'This is a warning message.',\n  },\n  {\n    variant: 'outline',\n    severity: 'info',\n    message: 'This is an info message.',\n  },\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.primary,\n    height: 480,\n  };\n\n  return (\n    <Box\n      {...styleProps}\n    >\n      <NavigationBar />\n      <Box p=\"4x\">\n        <Box mb=\"4x\">\n          <AlertView />\n        </Box>\n        <Text fontSize=\"xl\" lineHeight=\"xl\">\n          Home\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nconst CollapseToggle = ({\n  defaultIsOpen: defaultIsOpenProp = true,\n  children,\n}) => {\n  const [isOpen, toggleIsOpen] = useToggle(defaultIsOpenProp);\n  const onOpen = () => toggleIsOpen(true);\n  const onClose = () => toggleIsOpen(false);\n\n  return (\n    <Collapse in={isOpen} unmountOnExit>\n      {runIfFn(children, { isOpen, onOpen, onClose })}\n    </Collapse>\n  );\n};\n\nconst IconButton = forwardRef((props, ref) => {\n  const theme = useTheme();\n  const size = '8x';\n  const color = 'black:secondary';\n  const disabledColor = 'black:disabled';\n  const activeColor = 'black:primary';\n  const focusBorderColor = 'blue:60';\n  const focusColor = 'black:primary';\n  const hoverColor = 'black:primary';\n  const styleProps = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 1,\n    borderColor: 'transparent',\n    color,\n    width: size,\n    height: size,\n    transition: createTransitionStyle(['border-color', 'box-shadow', 'color'], { duration: 200 }),\n    _disabled: {\n      color: disabledColor,\n    },\n    _focus: {\n      ':not(:active)': {\n        borderColor: focusBorderColor,\n        boxShadow: `inset 0 0 0 1px ${theme.colors[focusBorderColor]}`,\n        color: focusColor,\n      },\n    },\n    _hover: {\n      color: hoverColor,\n    },\n    _active: {\n      color: activeColor,\n    },\n  };\n\n  return (\n    <ButtonBase\n      ref={ref}\n      {...styleProps}\n      {...props}\n    />\n  );\n});\nIconButton.displayName = 'IconButton';\n\nconst AlertOutlineActionButton = forwardRef((props, ref) => (\n  <Button\n    ref={ref}\n    size=\"sm\"\n    variant=\"secondary\"\n    {...props}\n  />\n));\nAlertOutlineActionButton.displayName = 'AlertOutlineActionButton';\n\nconst AlertView = () => {\n  const [page, ] = useState(1);\n  const alert = alerts[page - 1] ?? {};\n\n  return (\n    <CollapseToggle>\n      {({ onClose }) => (\n        <Alert\n          variant={alert.variant}\n          severity={alert.severity}\n          icon={alert.icon}\n          onClose={onClose}\n          sx={alert.sx}\n        >\n          <Flex\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            columnGap=\"4x\"\n            mr=\"10x\"\n          >\n            <Text>{alert.message}</Text>\n            <Flex columnGap=\"4x\">\n              <AlertOutlineActionButton my=\"-1x\">\n                Action\n              </AlertOutlineActionButton>\n            </Flex>\n          </Flex>\n          <AlertCloseButton top={3} right={7} position=\"absolute\" data-test=\"alert-close-button\" />\n        </Alert>\n      )}\n    </CollapseToggle>\n  );\n};\n\nconst NavigationBar = (props) => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.secondary,\n    height: '12x',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  };\n  const [date, setDate] = React.useState(new Date());\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(t);\n    };\n  }, []);\n\n  return (\n    <Flex\n      {...styleProps}\n      {...props}\n    >\n      <Flex alignItems=\"center\" ml=\"5x\">\n        <Text fontSize=\"2xl\" lineHeight=\"2xl\">\n          Product Name\n        </Text>\n        <Divider orientation=\"vertical\" height=\"5x\" mx=\"2x\" />\n        <Text fontSize=\"sm\" lineHeight=\"sm\">\n          Home\n        </Text>\n      </Flex>\n      <Flex height=\"100%\">\n        <NavItem columnGap=\"2x\">\n          <ClockIcon />\n          <Text>{date.toLocaleDateString()}</Text>\n          <Text>{date.toLocaleTimeString()}</Text>\n        </NavItem>\n        <NavItemDivider />\n        <NavItem as={Box}>\n          <Badge badgeContent={null}>\n            <AlertIcon />\n          </Badge>\n        </NavItem>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst NavItem = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const styleProps = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    backgroundColor: colorStyle.background.secondary,\n    px: '4x',\n    height: '100%',\n    _hover: {\n      backgroundColor: colorStyle.background.highlighted,\n    },\n    _selected: {\n      backgroundColor: colorStyle.background.selected,\n    },\n  };\n\n  return (\n    <ButtonBase\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nconst NavItemDivider = (props) => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:100',\n    light: 'gray:20',\n  }[colorMode];\n  const styleProps = {\n    borderColor,\n    height: '100%',\n  };\n\n  return (\n    <Divider\n      orientation=\"vertical\"\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nexport default App;",path:"pages/patterns/notification/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Alert,\n  AlertCloseButton,\n  Badge,\n  Box,\n  Button,\n  ButtonBase,\n  Collapse,\n  Divider,\n  Flex,\n  Text,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { AlertIcon, ClockIcon, Light2OIcon } from '@tonic-ui/react-icons';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { createTransitionStyle, runIfFn } from '@tonic-ui/utils';\nimport React, { forwardRef, useEffect, useState } from 'react';\n\nconst alerts = [\n  {\n    variant: 'outline',\n    severity: 'none',\n    icon: (\n      <Light2OIcon />\n    ),\n    sx: {\n      borderImageSource: 'linear-gradient(90deg, var(--tonic-colors-purple-60) 0%, var(--tonic-colors-blue-50) 100%)',\n      borderImageSlice: 1,\n    },\n    message: 'This is a promotion message.',\n  },\n  {\n    variant: 'outline',\n    severity: 'error',\n    message: 'This is an error message.',\n  },\n  {\n    variant: 'outline',\n    severity: 'warning',\n    message: 'This is a warning message.',\n  },\n  {\n    variant: 'outline',\n    severity: 'info',\n    message: 'This is an info message.',\n  },\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.primary,\n    height: 480,\n  };\n\n  return (\n    <Box\n      {...styleProps}\n    >\n      <NavigationBar />\n      <Box p=\"4x\">\n        <Box mb=\"4x\">\n          <AlertView />\n        </Box>\n        <Text fontSize=\"xl\" lineHeight=\"xl\">\n          Home\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nconst CollapseToggle = ({\n  defaultIsOpen: defaultIsOpenProp = true,\n  children,\n}) => {\n  const [isOpen, toggleIsOpen] = useToggle(defaultIsOpenProp);\n  const onOpen = () => toggleIsOpen(true);\n  const onClose = () => toggleIsOpen(false);\n\n  return (\n    <Collapse in={isOpen} unmountOnExit>\n      {runIfFn(children, { isOpen, onOpen, onClose })}\n    </Collapse>\n  );\n};\n\nconst IconButton = forwardRef((props, ref) => {\n  const theme = useTheme();\n  const size = '8x';\n  const color = 'black:secondary';\n  const disabledColor = 'black:disabled';\n  const activeColor = 'black:primary';\n  const focusBorderColor = 'blue:60';\n  const focusColor = 'black:primary';\n  const hoverColor = 'black:primary';\n  const styleProps = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    border: 1,\n    borderColor: 'transparent',\n    color,\n    width: size,\n    height: size,\n    transition: createTransitionStyle(['border-color', 'box-shadow', 'color'], { duration: 200 }),\n    _disabled: {\n      color: disabledColor,\n    },\n    _focus: {\n      ':not(:active)': {\n        borderColor: focusBorderColor,\n        boxShadow: `inset 0 0 0 1px ${theme.colors[focusBorderColor]}`,\n        color: focusColor,\n      },\n    },\n    _hover: {\n      color: hoverColor,\n    },\n    _active: {\n      color: activeColor,\n    },\n  };\n\n  return (\n    <ButtonBase\n      ref={ref}\n      {...styleProps}\n      {...props}\n    />\n  );\n});\nIconButton.displayName = 'IconButton';\n\nconst AlertOutlineActionButton = forwardRef((props, ref) => (\n  <Button\n    ref={ref}\n    size=\"sm\"\n    variant=\"secondary\"\n    {...props}\n  />\n));\nAlertOutlineActionButton.displayName = 'AlertOutlineActionButton';\n\nconst AlertView = () => {\n  const [page, ] = useState(1);\n  const alert = alerts[page - 1] ?? {};\n\n  return (\n    <CollapseToggle>\n      {({ onClose }) => (\n        <Alert\n          variant={alert.variant}\n          severity={alert.severity}\n          icon={alert.icon}\n          onClose={onClose}\n          sx={alert.sx}\n        >\n          <Flex\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            columnGap=\"4x\"\n            mr=\"10x\"\n          >\n            <Text>{alert.message}</Text>\n            <Flex columnGap=\"4x\">\n              <AlertOutlineActionButton my=\"-1x\">\n                Action\n              </AlertOutlineActionButton>\n            </Flex>\n          </Flex>\n          <AlertCloseButton top={3} right={7} position=\"absolute\" data-test=\"alert-close-button\" />\n        </Alert>\n      )}\n    </CollapseToggle>\n  );\n};\n\nconst NavigationBar = (props) => {\n  const [colorStyle] = useColorStyle();\n  const styleProps = {\n    backgroundColor: colorStyle.background.secondary,\n    height: '12x',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  };\n  const [date, setDate] = React.useState(new Date());\n\n  useEffect(() => {\n    const t = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n\n    return () => {\n      clearInterval(t);\n    };\n  }, []);\n\n  return (\n    <Flex\n      {...styleProps}\n      {...props}\n    >\n      <Flex alignItems=\"center\" ml=\"5x\">\n        <Text fontSize=\"2xl\" lineHeight=\"2xl\">\n          Product Name\n        </Text>\n        <Divider orientation=\"vertical\" height=\"5x\" mx=\"2x\" />\n        <Text fontSize=\"sm\" lineHeight=\"sm\">\n          Home\n        </Text>\n      </Flex>\n      <Flex height=\"100%\">\n        <NavItem columnGap=\"2x\">\n          <ClockIcon />\n          <Text>{date.toLocaleDateString()}</Text>\n          <Text>{date.toLocaleTimeString()}</Text>\n        </NavItem>\n        <NavItemDivider />\n        <NavItem as={Box}>\n          <Badge badgeContent={null}>\n            <AlertIcon />\n          </Badge>\n        </NavItem>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst NavItem = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const styleProps = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    backgroundColor: colorStyle.background.secondary,\n    px: '4x',\n    height: '100%',\n    _hover: {\n      backgroundColor: colorStyle.background.highlighted,\n    },\n    _selected: {\n      backgroundColor: colorStyle.background.selected,\n    },\n  };\n\n  return (\n    <ButtonBase\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nconst NavItemDivider = (props) => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:100',\n    light: 'gray:20',\n  }[colorMode];\n  const styleProps = {\n    borderColor,\n    height: '100%',\n  };\n\n  return (\n    <Divider\n      orientation=\"vertical\"\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(e.h4,{id:"alert-in-modal-and-drawer",children:["Alert in modal and drawer",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#alert-in-modal-and-drawer",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:modal_alert,file:{data:'import {\n  Alert,\n  Button,\n  Collapse,\n  Grid,\n  Link,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Skeleton,\n  Stack,\n  Text,\n  usePortalManager,\n} from \'@tonic-ui/react\';\nimport { useToggle } from \'@tonic-ui/react-hooks\';\nimport React, { forwardRef } from \'react\';\n\nconst App = () => {\n  const portal = usePortalManager();\n  const openModal = () => {\n    portal((close) => (\n      <ModalExample onClose={close} />\n    ));\n  };\n\n  return (\n    <>\n      <Button variant="secondary" onClick={openModal}>\n        Open Modal\n      </Button>\n    </>\n  );\n};\n\nconst ModalExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const [isAlertOpen, toggleIsAlertOpen] = useToggle(true);\n\n  return (\n    <Modal\n      ref={ref}\n      closeOnEsc\n      closeOnOutsideClick\n      isClosable\n      isOpen={true}\n      onClose={onClose}\n      size="md"\n      {...rest}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>\n          Modal\n        </ModalHeader>\n        <ModalBody>\n          <Collapse in={isAlertOpen}>\n            <Alert\n              isClosable\n              onClose={() => toggleIsAlertOpen(false)}\n              severity="warning"\n              variant="outline"\n              mb="4x"\n            >\n              <Text display="inline-block" fontWeight="semibold" mr="2x">Important:</Text>\n              <Text display="inline-block" mr="2x">This is an important message.</Text>\n              <Link>Learn more</Link>\n            </Alert>\n          </Collapse>\n          <Stack direction="column" spacing="4x">\n            <Skeleton width={160} />\n            <Skeleton width={240} />\n            <Skeleton width={240} />\n          </Stack>\n        </ModalBody>\n        <ModalFooter>\n          <Grid templateColumns="repeat(2, 1fr)" columnGap="2x">\n            <Button variant="primary" onClick={onClose}>\n              OK\n            </Button>\n            <Button onClick={onClose}>\n              Cancel\n            </Button>\n          </Grid>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n});\n\nModalExample.displayName = \'ModalExample\';\n\nexport default App;',path:"pages/patterns/notification/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Alert,\n  Button,\n  Collapse,\n  Grid,\n  Link,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Skeleton,\n  Stack,\n  Text,\n  usePortalManager,\n} from \'@tonic-ui/react\';\nimport { useToggle } from \'@tonic-ui/react-hooks\';\nimport React, { forwardRef } from \'react\';\n\nconst App = () => {\n  const portal = usePortalManager();\n  const openModal = () => {\n    portal((close) => (\n      <ModalExample onClose={close} />\n    ));\n  };\n\n  return (\n    <>\n      <Button variant="secondary" onClick={openModal}>\n        Open Modal\n      </Button>\n    </>\n  );\n};\n\nconst ModalExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const [isAlertOpen, toggleIsAlertOpen] = useToggle(true);\n\n  return (\n    <Modal\n      ref={ref}\n      closeOnEsc\n      closeOnOutsideClick\n      isClosable\n      isOpen={true}\n      onClose={onClose}\n      size="md"\n      {...rest}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>\n          Modal\n        </ModalHeader>\n        <ModalBody>\n          <Collapse in={isAlertOpen}>\n            <Alert\n              isClosable\n              onClose={() => toggleIsAlertOpen(false)}\n              severity="warning"\n              variant="outline"\n              mb="4x"\n            >\n              <Text display="inline-block" fontWeight="semibold" mr="2x">Important:</Text>\n              <Text display="inline-block" mr="2x">This is an important message.</Text>\n              <Link>Learn more</Link>\n            </Alert>\n          </Collapse>\n          <Stack direction="column" spacing="4x">\n            <Skeleton width={160} />\n            <Skeleton width={240} />\n            <Skeleton width={240} />\n          </Stack>\n        </ModalBody>\n        <ModalFooter>\n          <Grid templateColumns="repeat(2, 1fr)" columnGap="2x">\n            <Button variant="primary" onClick={onClose}>\n              OK\n            </Button>\n            <Button onClick={onClose}>\n              Cancel\n            </Button>\n          </Grid>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n});\n\nModalExample.displayName = \'ModalExample\';\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:drawer_alert,file:{data:'import {\n  Alert,\n  Button,\n  Collapse,\n  Grid,\n  Link,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter,\n  Skeleton,\n  Stack,\n  Text,\n  usePortalManager,\n} from \'@tonic-ui/react\';\nimport { useToggle } from \'@tonic-ui/react-hooks\';\nimport React, { forwardRef } from \'react\';\n\nconst App = () => {\n  const portal = usePortalManager();\n  const openDrawer = () => {\n    portal((close) => (\n      <DrawerExample onClose={close} />\n    ));\n  };\n\n  return (\n    <>\n      <Button variant="secondary" onClick={openDrawer}>\n        Open Drawer\n      </Button>\n    </>\n  );\n};\n\nconst DrawerExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const [isAlertOpen, toggleIsAlertOpen] = useToggle(true);\n\n  return (\n    <Drawer\n      ref={ref}\n      backdrop\n      closeOnEsc\n      closeOnOutsideClick\n      isClosable\n      isOpen={true}\n      onClose={onClose}\n      size="md"\n      {...rest}\n    >\n      <DrawerOverlay />\n      <DrawerContent>\n        <DrawerHeader>\n          Drawer\n        </DrawerHeader>\n        <DrawerBody>\n          <Collapse in={isAlertOpen}>\n            <Alert\n              isClosable\n              onClose={() => toggleIsAlertOpen(false)}\n              severity="info"\n              variant="outline"\n              mb="4x"\n            >\n              <Text display="inline-block" fontWeight="semibold" mr="2x">Important:</Text>\n              <Text display="inline-block" mr="2x">This is an important message.</Text>\n              <Link>Learn more</Link>\n            </Alert>\n          </Collapse>\n          <Stack direction="column" spacing="4x">\n            <Skeleton width={160} />\n            <Skeleton width={240} />\n            <Skeleton width={240} />\n          </Stack>\n        </DrawerBody>\n        <DrawerFooter>\n          <Grid templateColumns="repeat(2, 1fr)" columnGap="2x">\n            <Button variant="primary" onClick={onClose}>\n              OK\n            </Button>\n            <Button onClick={onClose}>\n              Cancel\n            </Button>\n          </Grid>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n});\n\nDrawerExample.displayName = \'DrawerExample\';\n\nexport default App;',path:"pages/patterns/notification/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Alert,\n  Button,\n  Collapse,\n  Grid,\n  Link,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter,\n  Skeleton,\n  Stack,\n  Text,\n  usePortalManager,\n} from \'@tonic-ui/react\';\nimport { useToggle } from \'@tonic-ui/react-hooks\';\nimport React, { forwardRef } from \'react\';\n\nconst App = () => {\n  const portal = usePortalManager();\n  const openDrawer = () => {\n    portal((close) => (\n      <DrawerExample onClose={close} />\n    ));\n  };\n\n  return (\n    <>\n      <Button variant="secondary" onClick={openDrawer}>\n        Open Drawer\n      </Button>\n    </>\n  );\n};\n\nconst DrawerExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const [isAlertOpen, toggleIsAlertOpen] = useToggle(true);\n\n  return (\n    <Drawer\n      ref={ref}\n      backdrop\n      closeOnEsc\n      closeOnOutsideClick\n      isClosable\n      isOpen={true}\n      onClose={onClose}\n      size="md"\n      {...rest}\n    >\n      <DrawerOverlay />\n      <DrawerContent>\n        <DrawerHeader>\n          Drawer\n        </DrawerHeader>\n        <DrawerBody>\n          <Collapse in={isAlertOpen}>\n            <Alert\n              isClosable\n              onClose={() => toggleIsAlertOpen(false)}\n              severity="info"\n              variant="outline"\n              mb="4x"\n            >\n              <Text display="inline-block" fontWeight="semibold" mr="2x">Important:</Text>\n              <Text display="inline-block" mr="2x">This is an important message.</Text>\n              <Link>Learn more</Link>\n            </Alert>\n          </Collapse>\n          <Stack direction="column" spacing="4x">\n            <Skeleton width={160} />\n            <Skeleton width={240} />\n            <Skeleton width={240} />\n          </Stack>\n        </DrawerBody>\n        <DrawerFooter>\n          <Grid templateColumns="repeat(2, 1fr)" columnGap="2x">\n            <Button variant="primary" onClick={onClose}>\n              OK\n            </Button>\n            <Button onClick={onClose}>\n              Cancel\n            </Button>\n          </Grid>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n});\n\nDrawerExample.displayName = \'DrawerExample\';\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsxs)(e.h3,{id:"toast",children:["Toast",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#toast",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.a,{href:"../components/toast",children:"Toast"})," provides simple feedback for user-initiated actions or information that users need to complete the current task. Place a toast on the bottom right of a screen. Toasts can be chronologically piled up when there are multiple and pushed down when a previous toast is dismissed."]}),"\n",(0,o.jsx)(e.p,{children:"A toast can be classified into the following types:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Success: The toast will be automatically dismissed after 5 seconds."}),"\n",(0,o.jsx)(e.li,{children:"Info/Warning/Error: The toast will remain visible until the user dismisses it."}),"\n"]}),"\n",(0,o.jsxs)(e.h4,{id:"app-toast",children:["App toast",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#app-toast",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:app_toast,file:{data:"import {\n  Box,\n  Button,\n  ButtonGroup,\n  Flex,\n  Text,\n  Toast,\n  useColorMode,\n  useColorStyle,\n  useToastManager,\n} from '@tonic-ui/react';\nimport { ErrorIcon, InfoIcon, SuccessIcon, WarningMinorIcon } from '@tonic-ui/react-icons';\nimport React from 'react';\n\nconst MAX_TOASTS = 3;\n\nconst App = () => {\n  const toast = useToastManager();\n\n  const handleClickAddToastByAppearance = (appearance) => (event) => {\n    // Remove current focus\n    event.currentTarget.blur();\n\n    const content = {\n      success: (\n        <>\n          <Text>This is a success message.</Text>\n          <Text>The toast will be automatically dismissed after 5 seconds.</Text>\n        </>\n      ),\n      info: (\n        <>\n          <Text>This is an info message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n      warning: (\n        <>\n          <Text>This is a warning message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n      error: (\n        <>\n          <Text>This is an error message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n    }[appearance];\n\n    const placement = 'bottom-right';\n    const duration = appearance === 'success' ? 5000 : undefined;\n    const options = {\n      placement,\n      duration,\n    };\n\n    toast.notify(({ onClose, placement }) => {\n      const isTop = placement.includes('top');\n      const toastSpacingKey = isTop ? 'pb' : 'pt';\n\n      return (\n        <ToastLayout\n          sx={{\n            [toastSpacingKey]: '2x',\n            width: 320,\n          }}\n        >\n          <Toast appearance={appearance} isClosable onClose={onClose}>\n            {content}\n          </Toast>\n        </ToastLayout>\n      );\n    }, options);\n\n    const isTop = placement.includes('top');\n\n    // Limit the maximum number of toasts\n    if (isTop) {\n      toast.setState(prevState => ({\n        ...prevState,\n        [placement]: prevState[placement].slice(0, MAX_TOASTS),\n      }));\n    } else {\n      toast.setState(prevState => ({\n        ...prevState,\n        [placement]: prevState[placement].slice(-MAX_TOASTS),\n      }));\n    }\n  };\n\n  const handleClickCloseToasts = () => {\n    toast.closeAll();\n  };\n\n  return (\n    <Flex\n      display=\"inline-flex\"\n      flexWrap=\"wrap\"\n      columnGap=\"2x\"\n      rowGap=\"2x\"\n    >\n      <ButtonGroup\n        variant=\"secondary\"\n        sx={{\n          flexGrow: 1,\n          '> *:not(:first-of-type)': {\n            marginLeft: -1\n          },\n          '> *': {\n            columnGap: '2x',\n          },\n        }}\n      >\n        <Button onClick={handleClickAddToastByAppearance('success')}>\n          <SuccessIcon />\n          Success\n        </Button>\n        <Button onClick={handleClickAddToastByAppearance('info')}>\n          <InfoIcon />\n          Info\n        </Button>\n        <Button onClick={handleClickAddToastByAppearance('warning')}>\n          <WarningMinorIcon />\n          Warning\n        </Button>\n        <Button onClick={handleClickAddToastByAppearance('error')}>\n          <ErrorIcon />\n          Error\n        </Button>\n      </ButtonGroup>\n      <Button variant=\"secondary\" onClick={handleClickCloseToasts}>\n        Close All\n      </Button>\n    </Flex>\n  );\n};\n\nconst ToastLayout = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const boxShadow = colorStyle.shadow.thin;\n\n  return (\n    <Box\n      fontSize=\"sm\"\n      lineHeight=\"sm\"\n      textAlign=\"left\"\n      boxShadow={boxShadow}\n      {...props}\n    />\n  );\n};\n\nexport default App;",path:"pages/patterns/notification/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Box,\n  Button,\n  ButtonGroup,\n  Flex,\n  Text,\n  Toast,\n  useColorMode,\n  useColorStyle,\n  useToastManager,\n} from '@tonic-ui/react';\nimport { ErrorIcon, InfoIcon, SuccessIcon, WarningMinorIcon } from '@tonic-ui/react-icons';\nimport React from 'react';\n\nconst MAX_TOASTS = 3;\n\nconst App = () => {\n  const toast = useToastManager();\n\n  const handleClickAddToastByAppearance = (appearance) => (event) => {\n    // Remove current focus\n    event.currentTarget.blur();\n\n    const content = {\n      success: (\n        <>\n          <Text>This is a success message.</Text>\n          <Text>The toast will be automatically dismissed after 5 seconds.</Text>\n        </>\n      ),\n      info: (\n        <>\n          <Text>This is an info message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n      warning: (\n        <>\n          <Text>This is a warning message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n      error: (\n        <>\n          <Text>This is an error message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n    }[appearance];\n\n    const placement = 'bottom-right';\n    const duration = appearance === 'success' ? 5000 : undefined;\n    const options = {\n      placement,\n      duration,\n    };\n\n    toast.notify(({ onClose, placement }) => {\n      const isTop = placement.includes('top');\n      const toastSpacingKey = isTop ? 'pb' : 'pt';\n\n      return (\n        <ToastLayout\n          sx={{\n            [toastSpacingKey]: '2x',\n            width: 320,\n          }}\n        >\n          <Toast appearance={appearance} isClosable onClose={onClose}>\n            {content}\n          </Toast>\n        </ToastLayout>\n      );\n    }, options);\n\n    const isTop = placement.includes('top');\n\n    // Limit the maximum number of toasts\n    if (isTop) {\n      toast.setState(prevState => ({\n        ...prevState,\n        [placement]: prevState[placement].slice(0, MAX_TOASTS),\n      }));\n    } else {\n      toast.setState(prevState => ({\n        ...prevState,\n        [placement]: prevState[placement].slice(-MAX_TOASTS),\n      }));\n    }\n  };\n\n  const handleClickCloseToasts = () => {\n    toast.closeAll();\n  };\n\n  return (\n    <Flex\n      display=\"inline-flex\"\n      flexWrap=\"wrap\"\n      columnGap=\"2x\"\n      rowGap=\"2x\"\n    >\n      <ButtonGroup\n        variant=\"secondary\"\n        sx={{\n          flexGrow: 1,\n          '> *:not(:first-of-type)': {\n            marginLeft: -1\n          },\n          '> *': {\n            columnGap: '2x',\n          },\n        }}\n      >\n        <Button onClick={handleClickAddToastByAppearance('success')}>\n          <SuccessIcon />\n          Success\n        </Button>\n        <Button onClick={handleClickAddToastByAppearance('info')}>\n          <InfoIcon />\n          Info\n        </Button>\n        <Button onClick={handleClickAddToastByAppearance('warning')}>\n          <WarningMinorIcon />\n          Warning\n        </Button>\n        <Button onClick={handleClickAddToastByAppearance('error')}>\n          <ErrorIcon />\n          Error\n        </Button>\n      </ButtonGroup>\n      <Button variant=\"secondary\" onClick={handleClickCloseToasts}>\n        Close All\n      </Button>\n    </Flex>\n  );\n};\n\nconst ToastLayout = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const boxShadow = colorStyle.shadow.thin;\n\n  return (\n    <Box\n      fontSize=\"sm\"\n      lineHeight=\"sm\"\n      textAlign=\"left\"\n      boxShadow={boxShadow}\n      {...props}\n    />\n  );\n};\n\nexport default App;",title:"Tonic UI"}})),"\n",(0,o.jsxs)(e.h4,{id:"toast-in-modal-and-drawer",children:["Toast in modal and drawer",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#toast-in-modal-and-drawer",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(e.p,{children:"In scenarios where there is limited space, such as within a modal or drawer, the toast should be positioned between the title and the content. When the limited space is closed, the toast will be automatically dismissed."}),"\n",(0,o.jsx)(e.p,{children:"In the examples below, the toast will be positioned 48 pixels from the top of the modal or drawer, and has a minimum width of 280 pixels. If the content of the toast message is wider than 280 pixels, the toast will expand to fit the content without exceeding 80% of the width of the modal or drawer in which it is being displayed."}),"\n",(0,o.jsxs)(e.p,{children:["To animate the toast when it is displayed or dismissed, you can use the ",(0,o.jsx)(e.code,{children:"ToastTransition"})," component. The ",(0,o.jsx)(e.code,{children:"ToastController"})," component can also be used to control the duration for which the toast will be displayed before it is automatically dismissed. This allows you to set a specific amount of time for the toast to be visible, ensuring that it does not interrupt the user's workflow for too long."]}),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:modal_toast,file:{data:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Flex,\n  Grid,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Skeleton,\n  Stack,\n  Text,\n  Toast,\n  ToastController,\n  ToastTransition,\n  usePortalManager,\n} from \'@tonic-ui/react\';\nimport { ErrorIcon, InfoIcon, SuccessIcon, WarningMinorIcon } from \'@tonic-ui/react-icons\';\nimport React, { forwardRef, useRef, useState } from \'react\';\nimport { TransitionGroup } from \'react-transition-group\';\n\nconst MAX_TOASTS = 1;\n\nconst App = () => {\n  const portal = usePortalManager();\n  const openModal = () => {\n    portal((close) => (\n      <ModalExample onClose={close} />\n    ));\n  };\n\n  return (\n    <>\n      <Button variant="secondary" onClick={openModal}>\n        Open Modal\n      </Button>\n    </>\n  );\n};\n\nconst ModalExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const autoIncrementRef = useRef(0);\n  const [toasts, setToasts] = useState([]);\n\n  const notify = (options) => {\n    const {\n      appearance,\n      content,\n      duration = null,\n      isClosable = true,\n    } = { ...options };\n\n    setToasts(prevState => {\n      const id = ++autoIncrementRef.current;\n      const onClose = () => {\n        setToasts(toasts => toasts.filter(x => x.id !== id));\n      };\n      // You can decide how many toasts you want to show at the same time depending on your use case\n      const nextState = [\n        ...prevState.slice(MAX_TOASTS > 1 ? -(MAX_TOASTS - 1) : prevState.length),\n        {\n          id,\n          appearance,\n          content,\n          duration,\n          isClosable,\n          onClose,\n        },\n      ];\n      return nextState;\n    });\n  };\n\n  const handleClickAddToastByAppearance = (appearance) => (event) => {\n    // Remove current focus\n    event.currentTarget.blur();\n\n    const content = {\n      success: (\n        <>\n          <Text>This is a success message.</Text>\n          <Text>The toast will be automatically dismissed after 5 seconds.</Text>\n        </>\n      ),\n      info: (\n        <>\n          <Text>This is an info message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n      warning: (\n        <>\n          <Text>This is a warning message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n      error: (\n        <>\n          <Text>This is an error message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n    }[appearance];\n\n    notify({\n      appearance,\n      content,\n      duration: (appearance === \'success\') ? 5000 : undefined,\n    });\n  };\n\n  return (\n    <Modal\n      ref={ref}\n      closeOnEsc\n      closeOnOutsideClick\n      isClosable\n      isOpen={true}\n      onClose={onClose}\n      size="md"\n      {...rest}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <CustomToastContainer>\n          <TransitionGroup\n            component={null} // Pass in `component={null}` to avoid a wrapping `<div>` element\n          >\n            {toasts.map(toast => (\n              <ToastTransition\n                key={toast?.id}\n                in={true}\n                unmountOnExit\n              >\n                <ToastController\n                  duration={toast?.duration}\n                  onClose={toast?.onClose}\n                >\n                  <Toast\n                    appearance={toast?.appearance}\n                    isClosable={toast?.isClosable}\n                    onClose={toast?.onClose}\n                    mb="2x"\n                    minWidth={280} // The toast has a minimum width of 280 pixels\n                    width="fit-content"\n                  >\n                    {toast?.content}\n                  </Toast>\n                </ToastController>\n              </ToastTransition>\n            ))}\n          </TransitionGroup>\n        </CustomToastContainer>\n        <ModalHeader>\n          Modal\n        </ModalHeader>\n        <ModalBody>\n          <Box mb="8x">\n            <Stack direction="column" spacing="4x">\n              <Skeleton width={160} />\n              <Skeleton width={240} />\n              <Skeleton width={240} />\n            </Stack>\n          </Box>\n          <ButtonGroup\n            variant="secondary"\n            sx={{\n              \'> *:not(:first-of-type)\': {\n                marginLeft: -1\n              }\n            }}\n          >\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'success\')}>\n              <SuccessIcon />\n              Success\n            </Button>\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'info\')}>\n              <InfoIcon />\n              Info\n            </Button>\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'warning\')}>\n              <WarningMinorIcon />\n              Warning\n            </Button>\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'error\')}>\n              <ErrorIcon />\n              Error\n            </Button>\n          </ButtonGroup>\n        </ModalBody>\n        <ModalFooter>\n          <Grid templateColumns="repeat(2, 1fr)" columnGap="2x">\n            <Button variant="primary" onClick={onClose}>\n              OK\n            </Button>\n            <Button onClick={onClose}>\n              Cancel\n            </Button>\n          </Grid>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n});\n\nModalExample.displayName = \'ModalExample\';\n\nconst CustomToastContainer = (props) => (\n  <Flex\n    flexDirection="column"\n    alignItems="center"\n    position="absolute"\n    top="12x"\n    left="50%"\n    transform="translateX(-50%)"\n    width="max-content"\n    maxWidth="80%" // up to 80% of the modal or drawer width\n    zIndex="toast"\n    {...props}\n  />\n);\n\nexport default App;',path:"pages/patterns/notification/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Flex,\n  Grid,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Skeleton,\n  Stack,\n  Text,\n  Toast,\n  ToastController,\n  ToastTransition,\n  usePortalManager,\n} from \'@tonic-ui/react\';\nimport { ErrorIcon, InfoIcon, SuccessIcon, WarningMinorIcon } from \'@tonic-ui/react-icons\';\nimport React, { forwardRef, useRef, useState } from \'react\';\nimport { TransitionGroup } from \'react-transition-group\';\n\nconst MAX_TOASTS = 1;\n\nconst App = () => {\n  const portal = usePortalManager();\n  const openModal = () => {\n    portal((close) => (\n      <ModalExample onClose={close} />\n    ));\n  };\n\n  return (\n    <>\n      <Button variant="secondary" onClick={openModal}>\n        Open Modal\n      </Button>\n    </>\n  );\n};\n\nconst ModalExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const autoIncrementRef = useRef(0);\n  const [toasts, setToasts] = useState([]);\n\n  const notify = (options) => {\n    const {\n      appearance,\n      content,\n      duration = null,\n      isClosable = true,\n    } = { ...options };\n\n    setToasts(prevState => {\n      const id = ++autoIncrementRef.current;\n      const onClose = () => {\n        setToasts(toasts => toasts.filter(x => x.id !== id));\n      };\n      // You can decide how many toasts you want to show at the same time depending on your use case\n      const nextState = [\n        ...prevState.slice(MAX_TOASTS > 1 ? -(MAX_TOASTS - 1) : prevState.length),\n        {\n          id,\n          appearance,\n          content,\n          duration,\n          isClosable,\n          onClose,\n        },\n      ];\n      return nextState;\n    });\n  };\n\n  const handleClickAddToastByAppearance = (appearance) => (event) => {\n    // Remove current focus\n    event.currentTarget.blur();\n\n    const content = {\n      success: (\n        <>\n          <Text>This is a success message.</Text>\n          <Text>The toast will be automatically dismissed after 5 seconds.</Text>\n        </>\n      ),\n      info: (\n        <>\n          <Text>This is an info message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n      warning: (\n        <>\n          <Text>This is a warning message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n      error: (\n        <>\n          <Text>This is an error message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n    }[appearance];\n\n    notify({\n      appearance,\n      content,\n      duration: (appearance === \'success\') ? 5000 : undefined,\n    });\n  };\n\n  return (\n    <Modal\n      ref={ref}\n      closeOnEsc\n      closeOnOutsideClick\n      isClosable\n      isOpen={true}\n      onClose={onClose}\n      size="md"\n      {...rest}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <CustomToastContainer>\n          <TransitionGroup\n            component={null} // Pass in `component={null}` to avoid a wrapping `<div>` element\n          >\n            {toasts.map(toast => (\n              <ToastTransition\n                key={toast?.id}\n                in={true}\n                unmountOnExit\n              >\n                <ToastController\n                  duration={toast?.duration}\n                  onClose={toast?.onClose}\n                >\n                  <Toast\n                    appearance={toast?.appearance}\n                    isClosable={toast?.isClosable}\n                    onClose={toast?.onClose}\n                    mb="2x"\n                    minWidth={280} // The toast has a minimum width of 280 pixels\n                    width="fit-content"\n                  >\n                    {toast?.content}\n                  </Toast>\n                </ToastController>\n              </ToastTransition>\n            ))}\n          </TransitionGroup>\n        </CustomToastContainer>\n        <ModalHeader>\n          Modal\n        </ModalHeader>\n        <ModalBody>\n          <Box mb="8x">\n            <Stack direction="column" spacing="4x">\n              <Skeleton width={160} />\n              <Skeleton width={240} />\n              <Skeleton width={240} />\n            </Stack>\n          </Box>\n          <ButtonGroup\n            variant="secondary"\n            sx={{\n              \'> *:not(:first-of-type)\': {\n                marginLeft: -1\n              }\n            }}\n          >\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'success\')}>\n              <SuccessIcon />\n              Success\n            </Button>\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'info\')}>\n              <InfoIcon />\n              Info\n            </Button>\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'warning\')}>\n              <WarningMinorIcon />\n              Warning\n            </Button>\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'error\')}>\n              <ErrorIcon />\n              Error\n            </Button>\n          </ButtonGroup>\n        </ModalBody>\n        <ModalFooter>\n          <Grid templateColumns="repeat(2, 1fr)" columnGap="2x">\n            <Button variant="primary" onClick={onClose}>\n              OK\n            </Button>\n            <Button onClick={onClose}>\n              Cancel\n            </Button>\n          </Grid>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n});\n\nModalExample.displayName = \'ModalExample\';\n\nconst CustomToastContainer = (props) => (\n  <Flex\n    flexDirection="column"\n    alignItems="center"\n    position="absolute"\n    top="12x"\n    left="50%"\n    transform="translateX(-50%)"\n    width="max-content"\n    maxWidth="80%" // up to 80% of the modal or drawer width\n    zIndex="toast"\n    {...props}\n  />\n);\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsx)(a.Z,Object.assign({},{component:drawer_toast,file:{data:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Flex,\n  Grid,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter,\n  Skeleton,\n  Stack,\n  Text,\n  Toast,\n  ToastController,\n  ToastTransition,\n  usePortalManager,\n} from \'@tonic-ui/react\';\nimport { ErrorIcon, InfoIcon, SuccessIcon, WarningMinorIcon } from \'@tonic-ui/react-icons\';\nimport React, { forwardRef, useRef, useState } from \'react\';\nimport { TransitionGroup } from \'react-transition-group\';\n\nconst MAX_TOASTS = 1;\n\nconst App = () => {\n  const portal = usePortalManager();\n  const openDrawer = () => {\n    portal((close) => (\n      <DrawerExample onClose={close} />\n    ));\n  };\n\n  return (\n    <>\n      <Button variant="secondary" onClick={openDrawer}>\n        Open Drawer\n      </Button>\n    </>\n  );\n};\n\nconst DrawerExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const autoIncrementRef = useRef(0);\n  const [toasts, setToasts] = useState([]);\n\n  const notify = (options) => {\n    const {\n      appearance,\n      content,\n      duration = null,\n      isClosable = true,\n    } = { ...options };\n\n    setToasts(prevState => {\n      const id = ++autoIncrementRef.current;\n      const onClose = () => {\n        setToasts(toasts => toasts.filter(x => x.id !== id));\n      };\n      // You can decide how many toasts you want to show at the same time depending on your use case\n      const nextState = [\n        ...prevState.slice(MAX_TOASTS > 1 ? -(MAX_TOASTS - 1) : prevState.length),\n        {\n          id,\n          appearance,\n          content,\n          duration,\n          isClosable,\n          onClose,\n        },\n      ];\n      return nextState;\n    });\n  };\n\n  const handleClickAddToastByAppearance = (appearance) => (event) => {\n    // Remove current focus\n    event.currentTarget.blur();\n\n    const content = {\n      success: (\n        <>\n          <Text>This is a success message.</Text>\n          <Text>The toast will be automatically dismissed after 5 seconds.</Text>\n        </>\n      ),\n      info: (\n        <>\n          <Text>This is an info message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n      warning: (\n        <>\n          <Text>This is a warning message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n      error: (\n        <>\n          <Text>This is an error message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n    }[appearance];\n\n    notify({\n      appearance,\n      content,\n      duration: (appearance === \'success\') ? 5000 : undefined,\n    });\n  };\n\n  return (\n    <Drawer\n      ref={ref}\n      backdrop\n      closeOnEsc\n      closeOnOutsideClick\n      isClosable\n      isOpen={true}\n      onClose={onClose}\n      size="md"\n      {...rest}\n    >\n      <DrawerOverlay />\n      <DrawerContent>\n        <CustomToastContainer>\n          <TransitionGroup\n            component={null} // Pass in `component={null}` to avoid a wrapping `<div>` element\n          >\n            {toasts.map(toast => (\n              <ToastTransition\n                key={toast?.id}\n                in={true}\n                unmountOnExit\n              >\n                <ToastController\n                  duration={toast?.duration}\n                  onClose={toast?.onClose}\n                >\n                  <Toast\n                    appearance={toast?.appearance}\n                    isClosable={toast?.isClosable}\n                    onClose={toast?.onClose}\n                    mb="2x"\n                    minWidth={280} // The toast has a minimum width of 280 pixels\n                    width="fit-content"\n                  >\n                    {toast?.content}\n                  </Toast>\n                </ToastController>\n              </ToastTransition>\n            ))}\n          </TransitionGroup>\n        </CustomToastContainer>\n        <DrawerHeader>\n          Drawer\n        </DrawerHeader>\n        <DrawerBody>\n          <Box mb="8x">\n            <Stack direction="column" spacing="4x">\n              <Skeleton width={160} />\n              <Skeleton width={240} />\n              <Skeleton width={240} />\n            </Stack>\n          </Box>\n          <ButtonGroup\n            variant="secondary"\n            sx={{\n              \'> *:not(:first-of-type)\': {\n                marginLeft: -1\n              }\n            }}\n          >\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'success\')}>\n              <SuccessIcon />\n              Success\n            </Button>\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'info\')}>\n              <InfoIcon />\n              Info\n            </Button>\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'warning\')}>\n              <WarningMinorIcon />\n              Warning\n            </Button>\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'error\')}>\n              <ErrorIcon />\n              Error\n            </Button>\n          </ButtonGroup>\n        </DrawerBody>\n        <DrawerFooter>\n          <Grid templateColumns="repeat(2, 1fr)" columnGap="2x">\n            <Button variant="primary" onClick={onClose}>\n              OK\n            </Button>\n            <Button onClick={onClose}>\n              Cancel\n            </Button>\n          </Grid>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n});\n\nDrawerExample.displayName = \'DrawerExample\';\n\nconst CustomToastContainer = (props) => (\n  <Flex\n    flexDirection="column"\n    alignItems="center"\n    position="absolute"\n    top="12x"\n    left="50%"\n    transform="translateX(-50%)"\n    width="max-content"\n    maxWidth="80%" // up to 80% of the modal or drawer width\n    zIndex="toast"\n    {...props}\n  />\n);\n\nexport default App;',path:"pages/patterns/notification/index.page.mdx"},sandbox:{files:{},raw:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Flex,\n  Grid,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter,\n  Skeleton,\n  Stack,\n  Text,\n  Toast,\n  ToastController,\n  ToastTransition,\n  usePortalManager,\n} from \'@tonic-ui/react\';\nimport { ErrorIcon, InfoIcon, SuccessIcon, WarningMinorIcon } from \'@tonic-ui/react-icons\';\nimport React, { forwardRef, useRef, useState } from \'react\';\nimport { TransitionGroup } from \'react-transition-group\';\n\nconst MAX_TOASTS = 1;\n\nconst App = () => {\n  const portal = usePortalManager();\n  const openDrawer = () => {\n    portal((close) => (\n      <DrawerExample onClose={close} />\n    ));\n  };\n\n  return (\n    <>\n      <Button variant="secondary" onClick={openDrawer}>\n        Open Drawer\n      </Button>\n    </>\n  );\n};\n\nconst DrawerExample = forwardRef((\n  {\n    onClose,\n    ...rest\n  },\n  ref,\n) => {\n  const autoIncrementRef = useRef(0);\n  const [toasts, setToasts] = useState([]);\n\n  const notify = (options) => {\n    const {\n      appearance,\n      content,\n      duration = null,\n      isClosable = true,\n    } = { ...options };\n\n    setToasts(prevState => {\n      const id = ++autoIncrementRef.current;\n      const onClose = () => {\n        setToasts(toasts => toasts.filter(x => x.id !== id));\n      };\n      // You can decide how many toasts you want to show at the same time depending on your use case\n      const nextState = [\n        ...prevState.slice(MAX_TOASTS > 1 ? -(MAX_TOASTS - 1) : prevState.length),\n        {\n          id,\n          appearance,\n          content,\n          duration,\n          isClosable,\n          onClose,\n        },\n      ];\n      return nextState;\n    });\n  };\n\n  const handleClickAddToastByAppearance = (appearance) => (event) => {\n    // Remove current focus\n    event.currentTarget.blur();\n\n    const content = {\n      success: (\n        <>\n          <Text>This is a success message.</Text>\n          <Text>The toast will be automatically dismissed after 5 seconds.</Text>\n        </>\n      ),\n      info: (\n        <>\n          <Text>This is an info message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n      warning: (\n        <>\n          <Text>This is a warning message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n      error: (\n        <>\n          <Text>This is an error message.</Text>\n          <Text>The toast will remain visible until the user dismisses it.</Text>\n        </>\n      ),\n    }[appearance];\n\n    notify({\n      appearance,\n      content,\n      duration: (appearance === \'success\') ? 5000 : undefined,\n    });\n  };\n\n  return (\n    <Drawer\n      ref={ref}\n      backdrop\n      closeOnEsc\n      closeOnOutsideClick\n      isClosable\n      isOpen={true}\n      onClose={onClose}\n      size="md"\n      {...rest}\n    >\n      <DrawerOverlay />\n      <DrawerContent>\n        <CustomToastContainer>\n          <TransitionGroup\n            component={null} // Pass in `component={null}` to avoid a wrapping `<div>` element\n          >\n            {toasts.map(toast => (\n              <ToastTransition\n                key={toast?.id}\n                in={true}\n                unmountOnExit\n              >\n                <ToastController\n                  duration={toast?.duration}\n                  onClose={toast?.onClose}\n                >\n                  <Toast\n                    appearance={toast?.appearance}\n                    isClosable={toast?.isClosable}\n                    onClose={toast?.onClose}\n                    mb="2x"\n                    minWidth={280} // The toast has a minimum width of 280 pixels\n                    width="fit-content"\n                  >\n                    {toast?.content}\n                  </Toast>\n                </ToastController>\n              </ToastTransition>\n            ))}\n          </TransitionGroup>\n        </CustomToastContainer>\n        <DrawerHeader>\n          Drawer\n        </DrawerHeader>\n        <DrawerBody>\n          <Box mb="8x">\n            <Stack direction="column" spacing="4x">\n              <Skeleton width={160} />\n              <Skeleton width={240} />\n              <Skeleton width={240} />\n            </Stack>\n          </Box>\n          <ButtonGroup\n            variant="secondary"\n            sx={{\n              \'> *:not(:first-of-type)\': {\n                marginLeft: -1\n              }\n            }}\n          >\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'success\')}>\n              <SuccessIcon />\n              Success\n            </Button>\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'info\')}>\n              <InfoIcon />\n              Info\n            </Button>\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'warning\')}>\n              <WarningMinorIcon />\n              Warning\n            </Button>\n            <Button columnGap="2x" onClick={handleClickAddToastByAppearance(\'error\')}>\n              <ErrorIcon />\n              Error\n            </Button>\n          </ButtonGroup>\n        </DrawerBody>\n        <DrawerFooter>\n          <Grid templateColumns="repeat(2, 1fr)" columnGap="2x">\n            <Button variant="primary" onClick={onClose}>\n              OK\n            </Button>\n            <Button onClick={onClose}>\n              Cancel\n            </Button>\n          </Grid>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n});\n\nDrawerExample.displayName = \'DrawerExample\';\n\nconst CustomToastContainer = (props) => (\n  <Flex\n    flexDirection="column"\n    alignItems="center"\n    position="absolute"\n    top="12x"\n    left="50%"\n    transform="translateX(-50%)"\n    width="max-content"\n    maxWidth="80%" // up to 80% of the modal or drawer width\n    zIndex="toast"\n    {...props}\n  />\n);\n\nexport default App;',title:"Tonic UI"}})),"\n",(0,o.jsxs)(e.h2,{id:"see-also",children:["See Also",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#see-also",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(w.Z,{children:(0,o.jsxs)(T.Z,{templateColumns:"1fr 1fr",columnGap:"18x",rowGap:"4x",children:[(0,o.jsx)(nN.Z,{children:"React Components"}),(0,o.jsx)(nN.Z,{children:"Patterns"}),(0,o.jsx)(h.Z,{children:(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"../components/modal",children:"Modal"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"../components/drawer",children:"Drawer"})}),"\n"]})}),(0,o.jsx)(h.Z,{children:(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://www.figma.com/file/N84ebgxXVKZTMVClV2x0VP/Pattern-guideline?node-id=820%3A26&t=azm7arGGygd4x13e-3&fuid=847002822432287235",children:"Error Handling"})}),"\n"]})})]})})]})}var index_page=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,r.ah)(),n.components).wrapper;return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(_createMdxContent,n)})):_createMdxContent(n)}},53442:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/patterns/notification",function(){return t(3231)}])},50397:function(n,e,t){"use strict";t.d(e,{Z:function(){return a}}),t(2784);var o=t(75928),r=t(52903),a=(0,o.Z)((0,r.tZ)("path",{d:"M6 14h4c0 1.105-0.895 2-2 2s-2-0.895-2-2v0zM15 12c-1.237-1.248-2.001-2.967-2.001-4.863 0-0.048 0-0.096 0.001-0.144l-0 0.007v-1c0-0 0-0.001 0-0.001 0-2.407-1.701-4.417-3.967-4.893l-0.033-0.006s0-0.1 0-0.1c0-0.552-0.448-1-1-1s-1 0.448-1 1v0s0 0.070 0 0.1c-2.299 0.482-4 2.492-4 4.899 0 0 0 0.001 0 0.001v-0 1c0.001 0.041 0.001 0.089 0.001 0.137 0 1.897-0.764 3.615-2.002 4.864l0.001-0.001v1h14v-1z"}),"AlertIcon")},119:function(n,e,t){"use strict";t.d(e,{Z:function(){return a}}),t(2784);var o=t(75928),r=t(52903),a=(0,o.Z)((0,r.tZ)("path",{d:"M15 7.976l-5.707 5.739-1.418-1.41 3.316-3.335h-10.191v-2h10.158l-3.296-3.283 1.412-1.416 4.716 4.699h0.009v0.009z"}),"ArrowRightIcon")},34121:function(n,e,t){"use strict";t.d(e,{Z:function(){return a}}),t(2784);var o=t(75928),r=t(52903),a=(0,o.Z)((0,r.tZ)("path",{d:"M8 0c-4.418 0-8 3.582-8 8s3.582 8 8 8c4.418 0 8-3.582 8-8v0c0-4.418-3.582-8-8-8v0zM8 14.5c-3.59 0-6.5-2.91-6.5-6.5s2.91-6.5 6.5-6.5c3.59 0 6.5 2.91 6.5 6.5v0c-0.006 3.588-2.912 6.494-6.499 6.5h-0.001zM8 8h4v1h-5v-5h1v4z"}),"ClockIcon")},62009:function(n,e,t){"use strict";t.d(e,{Z:function(){return a}}),t(2784);var o=t(75928),r=t(52903),a=(0,o.Z)((0,r.tZ)("path",{d:"M8.8 2.5h-1.6v-2.5h1.5v2.5zM0 9h2.2v-1.5h-2.2v1.5zM13.8 7.5v1.5h2.2v-1.5h-2.2zM2.9 1.8l-1.1 1.1 1.4 1.4 1.1-1.1-1.4-1.4zM13.1 1.8l-1.4 1.4 1.1 1.1 1.4-1.4-1.1-1.1zM12.2 6.5c1.2 2.3 0.4 5.2-1.9 6.4v3.1h-4.5v-3.1c-0.8-0.4-1.5-1.1-1.9-1.9-1.3-2.3-0.5-5.2 1.8-6.4 2.3-1.3 5.2-0.4 6.5 1.9zM9.5 5.8c-1.5-0.8-3.5-0.2-4.4 1.4s-0.3 3.6 1.3 4.4l0.8 0.4v2.5h1.5v-2.5l0.8-0.4c0.6-0.3 1-0.8 1.3-1.3 0.9-1.6 0.3-3.6-1.3-4.5z"}),"Light2OIcon")},65258:function(n,e,t){"use strict";t.d(e,{Z:function(){return f}});var o=t(53860),r=t(10525),a=t(56818),i=t(5081),l=t(2784),s=t(27216),c=t(40596),getSolidBadgeContentStyle=function(n){var e,t,o,r=n.colorMode,a=n.theme,i=null==a?void 0:null===(e=a.sizes)||void 0===e?void 0:e["4x"],l=null==a?void 0:null===(t=a.sizes)||void 0===t?void 0:t["1q"],s={dark:null==a?void 0:null===(o=a.colors)||void 0===o?void 0:o["gray:100"],light:"white"}[r];return{backgroundColor:({dark:"red:60",light:"red:60"})[r],borderRadius:i,boxShadow:"0 0 0 ".concat(l," ").concat(s),color:({dark:"white:primary",light:"white:primary"})[r],fontSize:"xs",height:i,lineHeight:"1",minWidth:i,px:"1x"}},getDotBadgeContentStyle=function(n){var e,t,o,r,a=n.colorMode,i=n.theme,l=null==i?void 0:null===(e=i.sizes)||void 0===e?void 0:e["1q"],s={dark:null==i?void 0:null===(t=i.colors)||void 0===t?void 0:t["gray:100"],light:"white"}[a];return{backgroundColor:({dark:"red:60",light:"red:60"})[a],borderRadius:"circle",boxShadow:"0 0 0 ".concat(l," ").concat(s),color:({dark:"white:primary",light:"white:primary"})[a],height:null==i?void 0:null===(o=i.sizes)||void 0===o?void 0:o["2x"],width:null==i?void 0:null===(r=i.sizes)||void 0===r?void 0:r["2x"]}},useBadgeContentStyle=function(n){var e=n.variant,t=(0,c.Z)(),r=(0,o.ZQ)(t,1)[0],a=(0,s.u)(),i={solid:getSolidBadgeContentStyle({colorMode:r,theme:a}),dot:getDotBadgeContentStyle({colorMode:r,theme:a})}[e];return(0,o.Zj)((0,o.Zj)({},{display:"inline-flex",alignItems:"center",justifyContent:"center"}),i)},useBadgeContentPlacementStyle=function(n){var e=n.placement;return(0,o.Zj)({position:"absolute"},{"top-left":{top:0,left:0,transform:"translate(-50%, -50%)"},"top-right":{top:0,right:0,transform:"translate(50%, -50%)"},"bottom-left":{bottom:0,left:0,transform:"translate(-50%, 50%)"},"bottom-right":{bottom:0,right:0,transform:"translate(50%, 50%)"}}[e])},u=t(52903),d=t(49857),p=["dotSize","isHidden","offset","variantColor","badgeContent","children","isInvisible","placement","variant"],m=(0,l.forwardRef)(function(n,e){var t=n.dotSize,l=n.isHidden,c=n.offset,f=n.variantColor,g=n.badgeContent,x=n.children,h=n.isInvisible,y=n.placement,b=n.variant,v=void 0===b?"solid":b,C=(0,o.Kd)(n,p),T=(0,s.u)(),w="".concat(m.displayName,":");if((0,r.Z)(function(){(0,a.TL)("dotSize",{prefix:w,alternative:["width","height"],willRemove:!0})},void 0!==t),(0,r.Z)(function(){(0,a.TL)("isHidden",{prefix:w,alternative:"isInvisible",willRemove:!0})},void 0!==l),(0,r.Z)(function(){(0,a.TL)("offset",{prefix:w,alternative:["right","top"],willRemove:!0})},void 0!==c),(0,r.Z)(function(){(0,a.TL)('variant="badge"',{prefix:w,alternative:'variant="solid"',willRemove:!0})},"badge"===v),(0,r.Z)(function(){(0,a.TL)("variantColor",{prefix:w,alternative:"backgroundColor",willRemove:!0})},void 0!==f),"dot"===v&&void 0!==t&&(C.height=null!==(k=C.height)&&void 0!==k?k:t,C.width=null!==(S=C.width)&&void 0!==S?S:t),void 0!==l&&(h=(0,i.pr)(l)),void 0!==c){var A,k,S,Z,B,I=(0,i.rY)(c),E=(0,o.ZQ)(I,2),O=E[0],_=E[1];void 0!==O&&(C.right=null!==(Z=C.right)&&void 0!==Z?Z:O),void 0!==_&&(C.top=null!==(B=C.top)&&void 0!==B?B:_)}if("badge"===v&&(v="solid"),void 0!==f){var j,P,M,D,F,N=null!==(j=null!==(P=null==T?void 0:null===(M=T.colors)||void 0===M?void 0:M["".concat(f,":60")])&&void 0!==P?P:null==T?void 0:null===(D=T.colors)||void 0===D?void 0:D["".concat(f,":50")])&&void 0!==j?j:f;C.backgroundColor=null!==(F=C.backgroundColor)&&void 0!==F?F:N}var G="dot"===v?null:g,R=null!==(A=h)&&void 0!==A?A:null==G&&"dot"!==v,z=useBadgeContentStyle({variant:v}),H=useBadgeContentPlacementStyle({placement:void 0===y?"top-right":y});return x||R?(0,u.BX)(d.Z,(0,o.Zj)((0,o.Zj)({},{display:"inline-flex",position:"relative",width:"fit-content"}),{},{children:[x,!R&&(0,u.tZ)(d.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)((0,o.Zj)({ref:e},z),H),C),{},{children:G}))]})):(0,u.tZ)(d.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)({ref:e},z),C),{},{children:G}))});m.displayName="Badge";var f=m},39256:function(n,e,t){"use strict";t.d(e,{Z:function(){return g}});var o=t(53860),r=t(56818),a=t(92307),i=t.n(a),l=t(2784),s=t(12711),c=t(17705),u=t(52903),d=t(49857),p=["children","orientation","size","variant"],m=i()(function(n){return(0,o.Zj)({},n)}),f=(0,l.forwardRef)(function(n,e){var t=n.children,a=n.orientation,i=void 0===a?"horizontal":a,l=n.size,f=n.variant,g=(0,o.Kd)(n,p),x=(0,c.K7)({orientation:i}),h=m({orientation:i,size:void 0===l?"md":l,variant:void 0===f?"default":f});return(0,u.tZ)(s.u.Provider,{value:h,children:(0,u.tZ)(d.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)({ref:e},x),g),{},{children:(0,r.Pu)(t,h)}))})});f.displayName="ButtonGroup";var g=f},82412:function(n,e,t){"use strict";t.d(e,{Z:function(){return A}});var o=t(53860),r=t(10525),a=t(56818),i=t(70404),l=t(92307),s=t.n(l),c=t(2784),u=t(64355),d=t.n(u),p=t(47732),m=t(3241),f=t(20325),g=t(79937),x=t(9693),h=t(52903),y=t(49857),b=(0,c.forwardRef)(function(n,e){var t=(0,x.Z)(),r=(0,o.Zj)({},t),a=r.backdrop,i=r.closeOnOutsideClick,l=r.onClose,s=r.placement,c=r.containerRef,u=(0,f.Z)(c,e),d=(0,g.Pw)({backdrop:a,placement:s}),p=(0,o.Zj)((0,o.Zj)({ref:u,onClick:function(n){n.stopPropagation(),i&&"function"==typeof l&&l(n)}},d),n);return(0,h.tZ)(y.Z,(0,o.Zj)({},p))});b.displayName="DrawerContainer";var v=t(59845),C=["isCloseButtonVisible","autoFocus","backdrop","children","closeOnEsc","closeOnOutsideClick","ensureFocus","finalFocusRef","initialFocusRef","isClosable","isOpen","onClose","placement","portalProps","returnFocusOnClose","size"],T=s()(function(n){return(0,o.Zj)({},n)}),w=(0,c.forwardRef)(function(n,e){var t=n.isCloseButtonVisible,l=n.autoFocus,s=void 0!==l&&l,u=n.backdrop,f=n.children,g=n.closeOnEsc,x=n.closeOnOutsideClick,y=n.ensureFocus,A=void 0!==y&&y,k=n.finalFocusRef,S=n.initialFocusRef,Z=n.isClosable,B=void 0!==Z&&Z,I=n.isOpen,E=void 0!==I&&I,O=n.onClose,_=n.placement,j=n.portalProps,P=n.returnFocusOnClose,M=n.size,D=(0,o.Kd)(n,C),F="".concat(w.displayName,":");(0,r.Z)(function(){(0,a.TL)("isCloseButtonVisible",{prefix:F,alternative:"isClosable",willRemove:!0})},void 0!==t),B=B||t;var N=(0,c.useState)(E),G=(0,o.ZQ)(N,2),R=G[0],z=G[1],H=(0,c.useRef)(),L=(0,c.useRef)(null),W=T({autoFocus:s,backdrop:void 0!==u&&u,closeOnEsc:void 0!==g&&g,closeOnOutsideClick:void 0!==x&&x,ensureFocus:A,finalFocusRef:k,initialFocusRef:S,isClosable:B,isOpen:E,onClose:O,placement:void 0===_?"right":_,size:void 0===M?"auto":M,containerRef:H,contentRef:L,scrollBehavior:"inside"}),U=(void 0===P||P)&&!k,$=(0,c.useCallback)(function(){if(S&&S.current){var n=S.current;"function"==typeof n.focus&&n.focus();return}if(L.current){var e=L.current;if((0,i.t)(e).length>0)return;"function"==typeof e.focus&&e.focus()}},[S]),K=(0,c.useCallback)(function(){if(k&&k.current){var n=k.current;"function"==typeof n.focus&&n.focus()}},[k]),X=(0,c.useCallback)(function(){z(!1)},[]);return(0,c.useEffect)(function(){if(E&&!R){z(!0);return}},[E,R]),(0,h.tZ)(v.r.Provider,{value:W,children:(0,h.tZ)(m.Z,{in:E,onExitComplete:X,children:!!R&&(0,h.tZ)(p.Z,(0,o.Zj)((0,o.Zj)({},j),{},{children:(0,h.tZ)(d(),{disabled:!A,autoFocus:s,returnFocus:U,onActivation:$,onDeactivation:K,children:(0,h.tZ)(b,(0,o.Zj)((0,o.Zj)({ref:e},D),{},{children:(0,a.Pu)(f,W)}))})}))})})});w.displayName="Drawer";var A=w},6192:function(n,e,t){"use strict";t.d(e,{Z:function(){return f}});var o=t(53860),r=t(20325),a=t(56818),i=t(2784),l=t(48504),s=t(62272),c=t(79937),u=t(9693),d=t(52903),p=["TransitionComponent","TransitionProps"],m=(0,i.forwardRef)(function(n,e){var t=n.TransitionComponent,m=void 0===t?s.Z:t,f=n.TransitionProps,g=(0,o.Kd)(n,p),x=(0,u.Z)(),h=(0,o.Zj)({},x).isOpen,y=(0,l.Z)(),b=(0,o.ZQ)(y,2)[1],v=(0,i.useRef)(),C=(0,r.Z)(v,e),T=(0,c.Bp)(),w=(0,o.Zj)((0,o.Zj)({ref:C},T),g);return(0,d.tZ)(m,(0,o.Zj)((0,o.Zj)((0,o.Zj)({appear:!!x},f),w),{},{in:!x||h,onExited:(0,a.PP)(b,null==f?void 0:f.onExited)}))});m.displayName="DrawerOverlay";var f=m},35358:function(n,e,t){"use strict";t.d(e,{Z:function(){return u}});var o=t(53860),r=t(2784),a=t(53638),i=t(13692),l=t(52903),s=t(49857),c=(0,r.forwardRef)(function(n,e){var t=(0,i.Z)(),r=(0,o.Zj)({},t).scrollBehavior,c=(0,a.mS)({scrollBehavior:r});return(0,l.tZ)(s.Z,(0,o.Zj)((0,o.Zj)({ref:e},c),n))});c.displayName="ModalBody";var u=c},76168:function(n,e,t){"use strict";t.d(e,{Z:function(){return c}});var o=t(53860),r=t(2784),a=t(53638),i=t(52903),l=t(49857),s=(0,r.forwardRef)(function(n,e){var t=(0,a.IB)();return(0,i.tZ)(l.Z,(0,o.Zj)((0,o.Zj)({ref:e},t),n))});s.displayName="ModalFooter";var c=s},52235:function(n,e,t){"use strict";t.d(e,{Z:function(){return u}});var o=t(53860),r=t(2784),a=t(53638),i=t(13692),l=t(52903),s=t(49857),c=(0,r.forwardRef)(function(n,e){var t=(0,i.Z)(),r=(0,o.Zj)({},t).isClosable,c=(0,a.vZ)({isClosable:r});return(0,l.tZ)(s.Z,(0,o.Zj)((0,o.Zj)({ref:e},c),n))});c.displayName="ModalHeader";var u=c},57861:function(n,e,t){"use strict";t.d(e,{Z:function(){return h}});var o,r,a=t(53860),i=t(10525),l=t(56818),s=t(2784),c=t(28165),u=t(40596),d=(0,c.F4)(o||(o=(0,a.AI)(["\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: .4;\n  }\n  100% {\n    opacity: 1;\n  }\n"]))),p=(0,c.F4)(r||(r=(0,a.AI)(["\n  0% {\n    transform: translateX(-100%);\n  }\n  50% {\n    // +0.5s of delay between each loop\n    transform: translateX(100%);\n  }\n  100% {\n    transform: translateX(100%);\n  }\n"]))),getAnimationProps=function(n){var e=n.animation,t=n.colorMode;return"pulse"===e?{animation:"".concat(d," 1.5s ease-in-out .5s infinite")}:"wave"===e?{position:"relative",overflow:"hidden",__after:{animation:"".concat(p," 1.6s linear .5s infinite"),background:"linear-gradient(90deg,".concat(["transparent","rgba(255, 255, 255, ".concat({dark:.08,light:.32}[t],")"),"transparent"].join(","),")"),content:'""',position:"absolute",inset:0,transform:"translateX(-100%)"}}:{animation:e}},getVariantProps=function(n){var e=n.variant;return"text"===e?{height:"3x",borderRadius:"sm",_empty:{"::before":{content:'"\\00a0"'}}}:"rectangle"===e?{}:"circle"===e?{borderRadius:"50%"}:{}},useSkeletonStyle=function(n){var e=n.animation,t=n.variant,o=(0,u.Z)(),r=(0,a.ZQ)(o,1)[0],i={dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"}[r],l=getAnimationProps({animation:e,colorMode:r}),s=getVariantProps({variant:t});return(0,a.Zj)((0,a.Zj)({display:"block",backgroundColor:i},l),s)},m=t(52903),f=t(49857),g=["animation","variant"],x=(0,s.forwardRef)(function(n,e){var t,o=n.animation,r=n.variant,s=(0,a.Kd)(n,g),c="".concat(x.displayName,":");(0,i.Z)(function(){(0,l.TL)('variant="rect"',{prefix:c,alternative:'variant="rectangle"',willRemove:!0})},"rect"===r),"rect"===r&&(r="rectangle");var u=useSkeletonStyle({animation:o,variant:r=null!==(t=r)&&void 0!==t?t:"text"});return(0,m.tZ)(f.Z,(0,a.Zj)((0,a.Zj)({ref:e},u),s))});x.displayName="Skeleton";var h=x},56098:function(n,e,t){"use strict";t.d(e,{Z:function(){return x}});var o=t(53860),r=t(10424),a=t(13409),i=t(56818),l=t(5081),s=t(2784),c=t(65204),u=t(99252),d=t(61809),p=t(52903),m=t(49857),f=["children","index"],g=(0,s.forwardRef)(function(n,e){var t,x=n.children,h=n.index,y=(0,o.Kd)(n,f),b=(0,s.useState)(h),v=(0,o.ZQ)(b,2),C=v[0],T=v[1],w=(0,u.Z)(),A=(0,l.zU)(null==w?void 0:w.registerTabPanel),k=(0,l.zU)(null==w?void 0:w.unregisterTabPanel),S="".concat(c.Z.name,":Tab-").concat(C),Z="".concat(c.Z.name,":TabPanel-").concat(C),B=(t=null==w?void 0:w.index,!(0,a.le)(C)&&!(0,a.le)(t)&&C===t),I=(0,d.Jv)({tabIndex:0});(0,r.Z)(function(){if((0,a.le)(C)){var n=A();return T(n),function(){k(n)}}return A(C),function(){k(C)}});var getTabPanelProps=function(){return(0,o.Zj)((0,o.Zj)({"aria-hidden":(0,i.Qm)(!B),"aria-labelledby":S,hidden:!B,id:Z,ref:e,role:"tabpanel",tabIndex:0},I),y)},E={getTabPanelProps:getTabPanelProps,index:C,isSelected:B},O="".concat(g.displayName,":");return(Object.defineProperties(E,{isActive:{get:function(){return(0,i.TL)("isActive",{prefix:O,alternative:"isSelected",willRemove:!0}),B}}}),"function"==typeof x)?x(E):(0,p.tZ)(m.Z,(0,o.Zj)((0,o.Zj)({},getTabPanelProps()),{},{children:x}))});g.displayName="TabPanel";var x=g},52842:function(n,e,t){"use strict";t.d(e,{Z:function(){return s}});var o=t(53860),r=t(2784),a=t(52903),i=t(49857),l=(0,r.forwardRef)(function(n,e){return(0,a.tZ)(i.Z,(0,o.Zj)({ref:e},n))});l.displayName="TabPanels";var s=l},67622:function(n,e,t){"use strict";t.d(e,{Z:function(){return u}});var o=t(53860),r=t(2784),a=t(70758),i=t(91334),l=t(52903),s=["size"],c=(0,r.forwardRef)(function(n,e){var t=n.size,r=(0,o.Kd)(n,s),c=(0,i.w)({size:t});return(0,l.tZ)(a.Z,(0,o.Zj)((0,o.Zj)({as:"label",ref:e},c),r))});c.displayName="TextLabel";var u=c},42049:function(n,e,t){"use strict";t.d(e,{Z:function(){return k}});var o=t(53860),r=t(10525),a=t(56818),i=t(92307),l=t.n(i),s=t(2784),c=t(91269),u=t(83591),d=t(97152),p=t(81141),m=t(22938),f=t(62368),g=t(50274),x=t(60186),h=t(52903),y=t(49857),b=(0,s.forwardRef)(function(n,e){var t=(0,x.Z)(),r=(0,o.Zj)({},t),a=r.appearance,i=r.icon,l=(0,g.zh)({appearance:a}),c=(0,s.useMemo)(function(){if("string"==typeof i)return(0,h.tZ)(f.Z,{icon:i});if(void 0===i){var n={success:u.Z,info:d.Z,warning:p.Z,error:m.Z}[a];return n?(0,h.tZ)(n,{size:"4x"}):null}return i},[a,i]);return c?(0,h.tZ)(y.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)({ref:e},l),n),{},{children:c})):null});b.displayName="ToastIcon";var v=(0,s.forwardRef)(function(n,e){var t=(0,x.Z)(),r=(0,o.Zj)({},t).isClosable,a=(0,g.Zy)({isClosable:r});return(0,h.tZ)(y.Z,(0,o.Zj)((0,o.Zj)({ref:e},a),n))});v.displayName="ToastMessage";var C=t(82268),T=["isCloseButtonVisible","appearance","icon","isClosable","onClose","children"],w=l()(function(n){return(0,o.Zj)({},n)}),A=(0,s.forwardRef)(function(n,e){var t=n.isCloseButtonVisible,i=n.appearance,l=void 0===i?"none":i,s=n.icon,u=n.isClosable,d=void 0!==u&&u,p=n.onClose,m=n.children,f=(0,o.Kd)(n,T),x="".concat(A.displayName,":");(0,r.Z)(function(){(0,a.TL)("isCloseButtonVisible",{prefix:x,alternative:"isClosable",willRemove:!0})},void 0!==t);var k=w({appearance:l,icon:s,isClosable:d=d||t,onClose:p}),S=(0,g.Xf)({appearance:l});return(0,h.tZ)(C.u.Provider,{value:k,children:(0,h.BX)(y.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)({ref:e},S),f),{},{children:[(0,h.tZ)(b,{}),(0,h.tZ)(v,{children:(0,a.Pu)(m,k)}),!!d&&(0,h.tZ)(c.Z,{})]}))})});A.displayName="Toast";var k=A},91269:function(n,e,t){"use strict";t.d(e,{Z:function(){return m}});var o=t(53860),r=t(37662),a=t(56818),i=t(2784),l=t(83513),s=t(50274),c=t(60186),u=t(52903),d=["children","onClick"],p=(0,i.forwardRef)(function(n,e){var t=n.children,i=n.onClick,p=(0,o.Kd)(n,d),m=(0,c.Z)(),f=(0,o.Zj)({},m),g=f.isClosable,x=f.onClose,h=f.variant,y=(0,s.mm)({isClosable:g,variant:h});return(0,u.tZ)(l.Z,(0,o.Zj)((0,o.Zj)((0,o.Zj)({"aria-label":"Close",ref:e,onClick:(0,a.N)(i,x)},y),p),{},{children:null!=t?t:(0,u.tZ)(r.Z,{size:"4x"})}))});p.displayName="ToastCloseButton";var m=p},50274:function(n,e,t){"use strict";t.d(e,{Xf:function(){return useToastStyle},Zy:function(){return useToastMessageStyle},mm:function(){return useToastCloseButtonStyle},zh:function(){return useToastIconStyle}});var o=t(53860),r=t(40596),a=t(31131),getAppearanceStyle=function(n){var e=n.appearance,t=n.colorMode;return(0,o.Zj)({backgroundColor:{dark:"gray:10",light:"white"}[t],color:"black:primary"},{success:{borderLeftColor:"green:50",borderLeftStyle:"solid",borderLeftWidth:"1x",pl:"3x"},info:{borderLeftColor:"blue:60",borderLeftStyle:"solid",borderLeftWidth:"1x",pl:"3x"},warning:{borderLeftColor:"yellow:50",borderLeftStyle:"solid",borderLeftWidth:"1x",pl:"3x"},error:{borderLeftColor:"red:60",borderLeftStyle:"solid",borderLeftWidth:"1x",pl:"3x"}}[e])},useToastStyle=function(n){var e=n.appearance,t=(0,r.Z)(),a=getAppearanceStyle({appearance:e,colorMode:(0,o.ZQ)(t,1)[0]});return(0,o.Zj)({display:"flex",alignItems:"flex-start",justifyContent:"space-between",position:"relative",px:"4x",py:"4x"},a)},useToastIconStyle=function(n){return{color:({success:"green:50",info:"blue:60",warning:"yellow:50",error:"red:60"})[n.appearance],display:"inline-flex",mr:"2x",mt:"1h"}},useToastMessageStyle=function(n){return{pr:n.isClosable?"10x":0,width:"100%"}},useToastCloseButtonStyle=function(n){var e=n.isClosable;n.variant;var t=(0,r.Z)(),i=(0,o.ZQ)(t,1)[0],l="blue:60",s={dark:"black:primary",light:"black:primary"}[i],c=(0,a.P)({color:{dark:"black:tertiary",light:"black:tertiary"}[i],size:"8x"});return e?(0,o.Zj)((0,o.Zj)({},c),{},{_focusVisible:{outlineColor:l,outlineOffset:"-1h",outlineStyle:"solid",outlineWidth:"1h"},_hover:{color:s},position:"absolute",top:"10q",right:"2x"}):(0,o.Zj)((0,o.Zj)({},c),{},{_focusVisible:{outlineColor:l,outlineOffset:"-1h",outlineStyle:"solid",outlineWidth:"1h"},_hover:{color:s}})}},60186:function(n,e,t){"use strict";t.d(e,{Z:function(){return useToast$1}});var o=t(2784),r=t(82268),useToast$1=function(){if(!o.useContext)throw Error("The `useContext` hook is not available with your React version.");return(0,o.useContext)(r.u)}},78727:function(n,e,t){"use strict";t.d(e,{Z:function(){return useToastManager$1}});var o=t(2784),r=t(82268),useToastManager$1=function(){var n=(0,o.useRef)(null),e=(0,o.useRef)(null);if(!o.useContext)throw Error("The `useContext` hook is not available with your React version.");var t=(0,o.useContext)(r.K);if(!t)throw Error("The `useToastManager` hook must be called from a descendent of the `ToastManager`.");return n.current=t.notify,e.current||(e.current=function(){for(var e,t=arguments.length,o=Array(t),r=0;r<t;r++)o[r]=arguments[r];return null===(e=n.current)||void 0===e?void 0:e.call.apply(e,[n].concat(o))}),Object.assign(e.current,t),e.current}}},function(n){n.O(0,[9184,406,9285,9860,1096,3732,9774,2888,179],function(){return n(n.s=53442)}),_N_E=n.O()}]);