(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7371],{55858:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var l=n(7896),a=n(59740),r=(n(2784),n(30876)),o=["components"],i={};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,l.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Flex"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Flex")," is a ",(0,r.kt)("a",{parentName:"p",href:"./box"},(0,r.kt)("inlineCode",{parentName:"a"},"Box"))," with ",(0,r.kt)("inlineCode",{parentName:"p"},"display: flex")," and comes with helpful style shorthand props."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Flex } from '@trendmicro/react-styled-ui';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("p",null,"Flex provides the following style shorthand props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Shorthand Prop"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Style Prop"),(0,r.kt)("th",{parentName:"tr",align:"left"},"CSS Property"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"direction"),(0,r.kt)("td",{parentName:"tr",align:"left"},"flexDirection"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction"},"flex-direction")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sets how flex items are placed in the flex container.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"wrap"),(0,r.kt)("td",{parentName:"tr",align:"left"},"flexWrap"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap"},"flex-wrap")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sets whether flex items are forced onto one line or can wrap onto multiple lines.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"align"),(0,r.kt)("td",{parentName:"tr",align:"left"},"alignItems"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/align-items"},"align-items")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sets the ",(0,r.kt)("inlineCode",{parentName:"td"},"align-self")," value on all direct children as a group.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"justify"),(0,r.kt)("td",{parentName:"tr",align:"left"},"justifyContent"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content"},"justify-content")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Defines how the browser distributes space between and around content items along the main axis of a flex container.")))),(0,r.kt)("h3",null,"Flex items"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"flex")," property to set how a flex item will grow or shrink to fit the available space in its flex container. It is a shorthand for ",(0,r.kt)("inlineCode",{parentName:"p"},"flex-grow"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"flex-shrink"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"flex-basis"),". For most purposes, you should set ",(0,r.kt)("inlineCode",{parentName:"p"},"flex")," to one of the following values: ",(0,r.kt)("inlineCode",{parentName:"p"},"auto"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"initial"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"none"),", or a positive unitless number."),(0,r.kt)("h4",null,"Values"),(0,r.kt)("h5",null,(0,r.kt)("inlineCode",{parentName:"h5"},"initial")),(0,r.kt)("p",null,"The item is sized according to its ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," properties. It shrinks to its minimum size to fit the container, but does not grow to absorb any extra free space in the flex container. This is equivalent to setting ",(0,r.kt)("inlineCode",{parentName:"p"},"flex: 0 1 auto"),"."),(0,r.kt)("h5",null,(0,r.kt)("inlineCode",{parentName:"h5"},"auto")),(0,r.kt)("p",null,"The item is sized according to its ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," properties, but grows to absorb any extra free space in the flex container, and shrinks to its minimum size to fit the container. This is equivalent to setting ",(0,r.kt)("inlineCode",{parentName:"p"},"flex: 1 1 auto"),"."),(0,r.kt)("h5",null,(0,r.kt)("inlineCode",{parentName:"h5"},"none")),(0,r.kt)("p",null,"The item is sized according to its ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," properties. It is fully inflexible: it neither shrinks nor grows in relation to the flex container. This is equivalent to setting ",(0,r.kt)("inlineCode",{parentName:"p"},"flex: 0 0 auto"),"."),(0,r.kt)("p",null,"To see the effect of these values, try resizing the flex containers below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const FlexItem = (props) => (\n  <Box bg="teal:50" border={1} borderColor="teal:60" p="3x" mr="4x" mb="4x" {...props} />\n);\n\nfunction Example() {\n  return (\n    <>\n      <Flex bg="gray:10" p="4x" pb={0} pr={0} mb="4x">\n        <FlexItem flex="auto">auto</FlexItem>\n        <FlexItem flex="auto">auto</FlexItem>\n        <FlexItem flex="auto">auto</FlexItem>\n      </Flex>\n      <Flex bg="gray:10" p="4x" pb={0} pr={0} mb="4x">\n        <FlexItem flex="auto">auto</FlexItem>\n        <FlexItem flex="initial">initial</FlexItem>\n        <FlexItem flex="initial">initial</FlexItem>\n      </Flex>\n      <Flex bg="gray:10" p="4x" pb={0} pr={0} mb="4x">\n        <FlexItem flex="auto">auto</FlexItem>\n        <FlexItem flex="auto">auto</FlexItem>\n        <FlexItem flex="none">none</FlexItem>\n      </Flex>\n      <Flex bg="gray:10" p="4x" pb={0} pr={0} mb="4x">\n        <FlexItem flex="initial">initial</FlexItem>\n        <FlexItem flex="none">none</FlexItem>\n        <FlexItem flex="none">none</FlexItem>\n      </Flex>\n      <Flex bg="gray:10" p="4x" pb={0} pr={0}>\n        <FlexItem flex={4}>4</FlexItem>\n        <FlexItem flex={2}>2</FlexItem>\n        <FlexItem flex={1}>1</FlexItem>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"direction")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"flexDirection"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const FlexItem = (props) => (\n  <Box bg="teal:50" border={1} borderColor="teal:60" p="3x" mr="4x" mb="4x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'row\');\n\n  return (\n    <>\n      <Stack direction="row" spacing=".5rem" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'row\')}>row</Button>\n        <Button variant="outline" onClick={() => setValue(\'row-reverse\')}>row-reverse</Button>\n        <Button variant="outline" onClick={() => setValue(\'column\')}>column</Button>\n        <Button variant="outline" onClick={() => setValue(\'column-reverse\')}>column-reverse</Button>\n      </Stack>\n      <pre>\n        {`<Flex direction="${value}">`}\n      </pre>\n      <Flex direction={value} bg="gray:10" p="4x" pb={0} pr={0}>\n        <FlexItem flex="auto">One</FlexItem>\n        <FlexItem flex="auto">Two</FlexItem>\n        <FlexItem flex="auto">Three</FlexItem>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"wrap")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"flexWrap"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const FlexItem = (props) => (\n  <Box bg="teal:50" border={1} borderColor="teal:60" p="3x" mr="4x" mb="4x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'nowrap\');\n\n  return (\n    <>\n      <Stack direction="row" spacing=".5rem" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'nowrap\')}>nowrap</Button>\n        <Button variant="outline" onClick={() => setValue(\'wrap\')}>wrap</Button>\n        <Button variant="outline" onClick={() => setValue(\'wrap-reverse\')}>wrap-reverse</Button>\n      </Stack>\n      <pre>\n        {`<Flex wrap="${value}">`}\n      </pre>\n      <Flex wrap={value} width={480} bg="gray:10" p="4x" pb={0} pr={0}>\n        <FlexItem flex="auto" minWidth={120}>One</FlexItem>\n        <FlexItem flex="auto" minWidth={120}>Two</FlexItem>\n        <FlexItem flex="auto" minWidth={120}>Three</FlexItem>\n        <FlexItem flex="auto" minWidth={120}>Four</FlexItem>\n        <FlexItem flex="auto" minWidth={120}>Five</FlexItem>\n        <FlexItem flex="auto" minWidth={120}>Six</FlexItem>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"align")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"alignItems"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const FlexItem = (props) => (\n  <Box bg="teal:50" border={1} borderColor="teal:60" p="3x" mr="4x" mb="4x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'stretch\');\n\n  return (\n    <>\n      <Stack direction="row" spacing=".5rem" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'stretch\')}>stretch</Button>\n        <Button variant="outline" onClick={() => setValue(\'flex-start\')}>flex-start</Button>\n        <Button variant="outline" onClick={() => setValue(\'center\')}>center</Button>\n        <Button variant="outline" onClick={() => setValue(\'flex-end\')}>flex-end</Button>\n      </Stack>\n      <pre>\n        {`<Flex align="${value}">`}\n      </pre>\n      <Flex align={value} height={240} bg="gray:10" p="4x" pb={0} pr={0}>\n        <FlexItem flex="auto">One</FlexItem>\n        <FlexItem flex="auto">Two</FlexItem>\n        <FlexItem flex="auto">Three</FlexItem>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"justify")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"justifyContent"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const FlexItem = (props) => (\n  <Box bg="teal:50" border={1} borderColor="teal:60" p="3x" mr="4x" mb="4x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'start\');\n\n  return (\n    <>\n      <Stack direction="row" spacing=".5rem" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'flex-start\')}>flex-start</Button>\n        <Button variant="outline" onClick={() => setValue(\'center\')}>center</Button>\n        <Button variant="outline" onClick={() => setValue(\'flex-end\')}>flex-end</Button>\n        <Button variant="outline" onClick={() => setValue(\'space-between\')}>space-between</Button>\n        <Button variant="outline" onClick={() => setValue(\'space-around\')}>space-around</Button>\n        <Button variant="outline" onClick={() => setValue(\'space-evenly\')}>space-evenly</Button>\n      </Stack>\n      <pre>\n        {`<Flex justify="${value}">`}\n      </pre>\n      <Flex justify={value} bg="gray:10" p="4x" pb={0} pr={0}>\n        <FlexItem>One</FlexItem>\n        <FlexItem>Two</FlexItem>\n        <FlexItem>Three</FlexItem>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n')))}p.isMDXComponent=!0},69151:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/flex",function(){return n(55858)}])}},function(e){e.O(0,[9774,2888,179],(function(){return t=69151,e(e.s=t);var t}));var t=e.O();_N_E=t}]);