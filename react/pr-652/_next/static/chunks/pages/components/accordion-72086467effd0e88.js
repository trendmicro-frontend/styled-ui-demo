(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9861],{1939:function(e,n,t){"use strict";t.r(n);var i=t(2322),l=t(5392);function d(e){var n=Object.assign({h1:"h1",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",pre:"pre",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",a:"a"},(0,l.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"Accordion"}),"\n",(0,i.jsx)(n.p,{children:"Accordion is a container that allows the user to toggle sections of related content."}),"\n",(0,i.jsx)(n.h2,{children:"Import"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"AccordionHeader"})," is composed of ",(0,i.jsx)(n.code,{children:"AccordionToggle"})," and ",(0,i.jsx)(n.code,{children:"AccordionToggleIcon"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"AccordionBody"})," is composed of ",(0,i.jsx)(n.code,{children:"AccordionCollapse"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionBody,\n  AccordionToggle,\n  AccordionToggleIcon,\n  AccordionCollapse,\n} from '@tonic-ui/react';\n"})}),"\n",(0,i.jsx)(n.h2,{children:"Usage"}),"\n",(0,i.jsx)(n.h3,{children:"Basic accordion"}),"\n",(0,i.jsxs)(n.p,{children:["To compose an accordion with default styles, you can use ",(0,i.jsx)(n.code,{children:"Accordion"}),", ",(0,i.jsx)(n.code,{children:"AccordionItem"}),", ",(0,i.jsx)(n.code,{children:"AccordionHeader"}),", and ",(0,i.jsx)(n.code,{children:"AccordionBody"})," directly."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'<Accordion rowGap={1}>\n  <AccordionItem defaultIsExpanded>\n    <AccordionHeader>\n      <Text>\n        Accordion 1\n      </Text>\n    </AccordionHeader>\n    <AccordionBody>\n      <SkeletonBody px="4x" py="3x" />\n    </AccordionBody>\n  </AccordionItem>\n  <AccordionItem>\n    <AccordionHeader>\n      <Text>\n        Accordion 2\n      </Text>\n    </AccordionHeader>\n    <AccordionBody>\n      <SkeletonBody px="4x" py="3x" />\n    </AccordionBody>\n  </AccordionItem>\n  <AccordionItem disabled>\n    <AccordionHeader>\n      <Text>\n        Disabled Accordion\n      </Text>\n    </AccordionHeader>\n    <AccordionBody>\n      <SkeletonBody px="4x" py="3x" />\n    </AccordionBody>\n  </AccordionItem>\n</Accordion>\n'})}),"\n",(0,i.jsx)(n.h3,{children:"Controlled accordion"}),"\n",(0,i.jsx)(n.p,{children:"Extend the default behavior to create an accordion with controlled state."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"function Example() {\n  const [expandedItem, setExpandedItem] = React.useState('item1');\n  const handleToggle = item => ({ isExpanded }) => {\n    setExpandedItem(isExpanded ? item : null);\n  };\n\n  return (\n    <Accordion rowGap={1}>\n      <AccordionItem\n        isExpanded={expandedItem === 'item1'}\n        onToggle={handleToggle('item1')}\n      >\n        <AccordionHeader>\n          <Text>\n            Accordion 1\n          </Text>\n        </AccordionHeader>\n        <AccordionBody>\n          <SkeletonBody px=\"4x\" py=\"3x\" />\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem\n        isExpanded={expandedItem === 'item2'}\n        onToggle={handleToggle('item2')}\n      >\n        <AccordionHeader>\n          <Text>\n            Accordion 2\n          </Text>\n        </AccordionHeader>\n        <AccordionBody>\n          <SkeletonBody px=\"4x\" py=\"3x\" />\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem\n        disabled\n        isExpanded={expandedItem === 'item3'}\n        onToggle={handleToggle('item3')}\n      >\n        <AccordionHeader>\n          <Text>\n            Disabled Accordion\n          </Text>\n        </AccordionHeader>\n        <AccordionBody>\n          <SkeletonBody px=\"4x\" py=\"3x\" />\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{children:"Customization"}),"\n",(0,i.jsxs)(n.p,{children:["If you don't like the default styles, you can use ",(0,i.jsx)(n.code,{children:"AccordionToggle"}),", ",(0,i.jsx)(n.code,{children:"AccordionToggleIcon"}),", and ",(0,i.jsx)(n.code,{children:"AccordionCollapse"})," to customize the accordion."]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of customizing the accordion:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"function Example() {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const borderColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const [expandedItem, setExpandedItem] = React.useState(null);\n  const handleToggle = item => ({ isExpanded }) => {\n    setExpandedItem(isExpanded ? item : null);\n  };\n  const renderToggleIcon = item => (\n    <AccordionToggleIcon>\n      {(state, { ref, style: styleProps }) => {\n        styleProps.transform = (expandedItem === item) ? 'rotate(0deg)' : 'rotate(-90deg)';\n        return (\n          <Icon ref={ref} icon=\"chevron-down\" size=\"4x\" {...styleProps} />\n        );\n      }}\n    </AccordionToggleIcon>\n  );\n  const getAccordionItemProps = item => {\n    const isExpanded = expandedItem === item;\n    const itemStyleProps = {\n      border: 1,\n      borderColor,\n      borderStyle: 'solid',\n      borderBottomWidth: isExpanded ? 1 : 0,\n      transition: 'all .2s',\n      my: isExpanded ? '3x' : 0,\n      _firstOfType: {\n        mt: 0,\n      },\n      _lastOfType: {\n        mb: 0,\n        borderBottomWidth: 1,\n      },\n    };\n\n    return {\n      ...itemStyleProps,\n      isExpanded,\n      onToggle: handleToggle(item),\n    };\n  };\n  const getAccordionToggleProps = item => {\n    const toggleStyleProps = {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-start',\n      backgroundColor: {\n        dark: 'gray:90',\n        light: 'white',\n      }[colorMode],\n      color: {\n        dark: 'white:primary',\n        light: 'black:primary',\n      }[colorMode],\n      px: '4x',\n      minHeight: '12x',\n    };\n\n    return {\n      ...toggleStyleProps,\n    };\n  };\n\n  return (\n    <Accordion>\n      {['item1', 'item2', 'item3'].map((item, index) => (\n        <AccordionItem\n          key={item}\n          {...getAccordionItemProps(item)}\n        >\n          <AccordionToggle\n            {...getAccordionToggleProps(item)}\n          >\n            {renderToggleIcon(item)}\n            <Space width=\"2x\" />\n            <Text>\n              Collapsible Item #{index + 1}\n            </Text>\n          </AccordionToggle>\n          <AccordionCollapse>\n            <SkeletonBody px=\"4x\" py=\"3x\" />\n          </AccordionCollapse>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{children:"Props"}),"\n",(0,i.jsx)(n.h3,{children:"Accordion"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{align:"left",children:"Name"}),(0,i.jsx)(n.th,{align:"left",children:"Type"}),(0,i.jsx)(n.th,{align:"left",children:"Default"}),(0,i.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"children"}),(0,i.jsxs)(n.td,{align:"left",children:["ReactNode | ",(0,i.jsx)(n.code,{children:"(context) => ReactNode"})]}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left",children:"A function child can be used intead of a React element. This function is called with the context object."})]})})]}),"\n",(0,i.jsx)(n.h3,{children:"AccordionItem"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{align:"left",children:"Name"}),(0,i.jsx)(n.th,{align:"left",children:"Type"}),(0,i.jsx)(n.th,{align:"left",children:"Default"}),(0,i.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"children"}),(0,i.jsxs)(n.td,{align:"left",children:["ReactNode | ",(0,i.jsx)(n.code,{children:"(context) => ReactNode"})]}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left",children:"A function child can be used intead of a React element. This function is called with the context object."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"disabled"}),(0,i.jsx)(n.td,{align:"left",children:"boolean"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left",children:"Whether the accordion item is disabled."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"isExpanded"}),(0,i.jsx)(n.td,{align:"left",children:"boolean"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left",children:"Whether the accordion item is expanded."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"defaultIsExpanded"}),(0,i.jsx)(n.td,{align:"left",children:"boolean"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left",children:"Whether the accordion item is expanded by default."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"onToggle"}),(0,i.jsx)(n.td,{align:"left",children:"function"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left",children:"A callback that is called when the accordion item is toggled."})]})]})]}),"\n",(0,i.jsx)(n.h3,{children:"AccordionHeader"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{align:"left",children:"Name"}),(0,i.jsx)(n.th,{align:"left",children:"Type"}),(0,i.jsx)(n.th,{align:"left",children:"Default"}),(0,i.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"children"}),(0,i.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"disabled"}),(0,i.jsx)(n.td,{align:"left",children:"boolean"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left",children:"Whether the accordion header is disabled."})]})]})]}),"\n",(0,i.jsx)(n.h3,{children:"AccordionBody"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{align:"left",children:"Name"}),(0,i.jsx)(n.th,{align:"left",children:"Type"}),(0,i.jsx)(n.th,{align:"left",children:"Default"}),(0,i.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"children"}),(0,i.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,i.jsx)(n.h3,{children:"AccordionToggle"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{align:"left",children:"Name"}),(0,i.jsx)(n.th,{align:"left",children:"Type"}),(0,i.jsx)(n.th,{align:"left",children:"Default"}),(0,i.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"children"}),(0,i.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"disabled"}),(0,i.jsx)(n.td,{align:"left",children:"boolean"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left",children:"Whether the accordion toggle is disabled."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"onClick"}),(0,i.jsx)(n.td,{align:"left",children:"function"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left",children:"A callback that is called when the accordion toggle is clicked."})]})]})]}),"\n",(0,i.jsx)(n.h3,{children:"AccordionToggleIcon"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{align:"left",children:"Name"}),(0,i.jsx)(n.th,{align:"left",children:"Type"}),(0,i.jsx)(n.th,{align:"left",children:"Default"}),(0,i.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"appear"}),(0,i.jsx)(n.td,{align:"left",children:"boolean"}),(0,i.jsx)(n.td,{align:"left",children:"false"}),(0,i.jsxs)(n.td,{align:"left",children:["By default the child component does not perform the enter transition when it first mounts, regardless of the value of ",(0,i.jsx)(n.code,{children:"in"}),". If you want this behavior, set both ",(0,i.jsx)(n.code,{children:"appear"})," and ",(0,i.jsx)(n.code,{children:"in"})," to true."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"children"}),(0,i.jsxs)(n.td,{align:"left",children:["ReactNode | ",(0,i.jsx)(n.code,{children:"(state, props) => ReactNode"})]}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left",children:"A function child can be used instead of a React element. This function is called with the current transition state ('entering', 'entered', 'exiting', 'exited'), ref, style, and context specific props for a component."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"disabled"}),(0,i.jsx)(n.td,{align:"left",children:"boolean"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left",children:"Whether the accordion toggle icon is disabled."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"easing"}),(0,i.jsxs)(n.td,{align:"left",children:["string | ",(0,i.jsx)(n.code,{children:"{ enter?: string, exit?: string }"})]}),(0,i.jsx)(n.td,{align:"left",children:(0,i.jsx)(n.code,{children:"{ enter: easing.easeInOut, exit: easing.easeInOut }"})}),(0,i.jsx)(n.td,{align:"left",children:"The timing function that describes how intermediate values are calculated during a transition. You may specify a single timing function for all transitions, or individually with an object."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"in"}),(0,i.jsx)(n.td,{align:"left",children:"boolean"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsxs)(n.td,{align:"left",children:["If ",(0,i.jsx)(n.code,{children:"true"}),", the component will transition in."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"mountOnEnter"}),(0,i.jsx)(n.td,{align:"left",children:"boolean"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsxs)(n.td,{align:"left",children:["If ",(0,i.jsx)(n.code,{children:"true"}),', it will "lazy mount" the component on the first ',(0,i.jsx)(n.code,{children:"in={true}"}),". After the first enter transition the component will stay mounted, even on the 'exited' state, unless you also specify ",(0,i.jsx)(n.code,{children:"unmountOnExit"}),". By default the child component is mounted immediately along with the parent transition component."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"timeout"}),(0,i.jsxs)(n.td,{align:"left",children:["number | ",(0,i.jsx)(n.code,{children:"{ appear?: number, enter?: number, exit?: number }"})]}),(0,i.jsx)(n.td,{align:"left",children:(0,i.jsx)(n.code,{children:"{ enter: duration.enterScreen, exit: duration.levingScreen }"})}),(0,i.jsx)(n.td,{align:"left",children:"The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"unmountOnExit"}),(0,i.jsx)(n.td,{align:"left",children:"boolean"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsxs)(n.td,{align:"left",children:["If ",(0,i.jsx)(n.code,{children:"true"}),", it will unmount the child component when ",(0,i.jsx)(n.code,{children:"in={false}"})," and the animation has finished. By default the child component stays mounted after it reaches the 'exited' state."]})]})]})]}),"\n",(0,i.jsx)(n.h3,{children:"AccordionCollapse"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{align:"left",children:"Name"}),(0,i.jsx)(n.th,{align:"left",children:"Type"}),(0,i.jsx)(n.th,{align:"left",children:"Default"}),(0,i.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"children"}),(0,i.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsx)(n.td,{align:"left"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,i.jsx)(n.td,{align:"left",children:"ElementType"}),(0,i.jsx)(n.td,{align:"left",children:"Collapse"}),(0,i.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,i.jsx)(n.td,{align:"left",children:"object"}),(0,i.jsx)(n.td,{align:"left"}),(0,i.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,i.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"left",children:"TransitionProps.appear"}),(0,i.jsx)(n.td,{align:"left",children:"boolean"}),(0,i.jsx)(n.td,{align:"left",children:"false"}),(0,i.jsx)(n.td,{align:"left"})]})]})]})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,l.ah)(),e.components).wrapper;return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(d,e)})):d(e)}},8390:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/accordion",function(){return t(1939)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=8390)}),_N_E=e.O()}]);