(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1186],{4680:function(n,o,e){"use strict";e.r(o);var r=e(2322),t=e(5392);function c(n){var o=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",pre:"pre",h3:"h3",h4:"h4",blockquote:"blockquote",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,t.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.h1,{children:"ButtonBase"}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.code,{children:"ButtonBase"})," does not have appearance settings including default border, color, outline, and padding. It aims to be a simple building block for creating a button."]}),"\n",(0,r.jsx)(o.h2,{children:"Import"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",children:"import { ButtonBase } from '@tonic-ui/react';\n"})}),"\n",(0,r.jsx)(o.h2,{children:"Usage"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:"<ButtonBase>Click Me</ButtonBase>\n"})}),"\n",(0,r.jsx)(o.h3,{children:"Attributes"}),"\n",(0,r.jsxs)(o.p,{children:["Standard button attributes are supported, e.g., ",(0,r.jsx)(o.code,{children:"type"}),", ",(0,r.jsx)(o.code,{children:"disabled"}),", etc."]}),"\n",(0,r.jsx)(o.h4,{children:(0,r.jsx)(o.code,{children:"disabled"})}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:"<ButtonBase\n  disabled\n  _disabled={{\n    opacity: 0.28, // dark: 0.28, light: 0.3\n    cursor: 'not-allowed',\n  }}\n>\n  Button is disabled\n</ButtonBase>\n"})}),"\n",(0,r.jsx)(o.h3,{children:"Icon button"}),"\n",(0,r.jsxs)(o.p,{children:["You can use ",(0,r.jsx)(o.code,{children:"ButtonBase"})," to compose an icon button. An icon button is a button that contains only an icon."]}),"\n",(0,r.jsx)(o.pre,{noInline:!0,children:(0,r.jsx)(o.code,{className:"language-jsx",children:"const IconButton = React.forwardRef((props, ref) => {\n  const [colorMode] = useColorMode();\n  const { colors } = useTheme();\n  const color = {\n    dark: 'white:secondary',\n    light: 'black:secondary',\n  }[colorMode];\n  const hoverColor = {\n    dark: 'white:primary',\n    light: 'black:primary',\n  }[colorMode];\n  const activeColor = color;\n  const focusColor = color;\n  const focusHoverColor = hoverColor;\n  const focusActiveColor = activeColor;\n  const focusBorderColor = colors['blue:60'];\n\n  return (\n    <ButtonBase\n      ref={ref}\n      border={1}\n      borderColor=\"transparent\"\n      color={color}\n      transition=\"all .2s\"\n      lineHeight={1}\n      px=\"2x\"\n      py=\"2x\"\n      _hover={{\n        color: hoverColor,\n      }}\n      _active={{\n        color: activeColor,\n      }}\n      _focus={{\n        borderColor: focusBorderColor,\n        boxShadow: `inset 0 0 0 1px ${focusBorderColor}`,\n        color: focusColor,\n      }}\n      _focusHover={{\n        color: focusHoverColor,\n      }}\n      _focusActive={{\n        borderColor: focusBorderColor,\n        boxShadow: `inset 0 0 0 1px ${focusBorderColor}`,\n        color: focusActiveColor,\n      }}\n      {...props}\n    />\n  );\n});\n\nfunction Example() {\n  return (\n    <IconButton>\n      <Icon icon=\"close\" />\n    </IconButton>\n  );\n}\n\nrender(<Example />);\n"})}),"\n",(0,r.jsx)(o.h3,{children:"Notification action button"}),"\n",(0,r.jsxs)(o.p,{children:["To perform an action on an alert or toast notification, you can use ",(0,r.jsx)(o.code,{children:"ButtonBase"})," to compose an action button using style props, or override ",(0,r.jsx)(o.code,{children:"Button"})," with the ",(0,r.jsx)(o.code,{children:"css"})," prop to customize the appearance."]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",children:"// import\nimport { sx } from '@tonic-ui/styled-system';\n\n// example\nconst ActionButton = forwardRef((props, ref) => (\n  <Button\n    ref={ref}\n    variant=\"secondary\"\n    borderColor=\"black:primary\"\n    color=\"black:primary\"\n    css={sx({\n      ':active': {\n        color: 'black:primary',\n      },\n      ':focus': {\n        color: 'black:primary',\n      },\n      ':hover': {\n        background: 'rgba(0, 0, 0, 0.12)',\n        color: 'black:primary',\n      },\n      ':hover:not(:focus)': {\n        boxShadow: 'none',\n      },\n    })}\n    {...props}\n  />\n));\n"})}),"\n",(0,r.jsxs)(o.blockquote,{children:["\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.code,{children:"sx"})," is a utility function provided by ",(0,r.jsx)(o.code,{children:"@tonic-ui/styled-system"})," that can specify style prop value with theme tokens when using the ",(0,r.jsx)(o.code,{children:"css"})," prop on a styled component."]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{noInline:!0,children:(0,r.jsx)(o.code,{className:"language-jsx",children:"const ActionButton = React.forwardRef((props, ref) => (\n  <Button\n    ref={ref}\n    variant=\"secondary\"\n    borderColor=\"black:primary\"\n    color=\"black:primary\"\n    css={sx({\n      ':active': {\n        color: 'black:primary',\n      },\n      ':focus': {\n        color: 'black:primary',\n      },\n      ':hover': {\n        background: 'rgba(0, 0, 0, 0.12)',\n        color: 'black:primary',\n      },\n      ':hover:not(:focus)': {\n        boxShadow: 'none',\n      },\n    })}\n    {...props}\n  />\n));\n\nfunction Example() {\n  return (\n    <Alert variant=\"solid\" severity=\"error\" isClosable>\n      <Flex justifyContent=\"space-between\">\n        <Text>\n          This is an alert notification with an action button.\n        </Text>\n        <ActionButton size=\"sm\">\n          Action Button\n        </ActionButton>\n      </Flex>\n    </Alert>\n  );\n}\n\nrender(<Example />);\n"})}),"\n",(0,r.jsx)(o.h2,{children:"Props"}),"\n",(0,r.jsxs)(o.table,{children:[(0,r.jsx)(o.thead,{children:(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.th,{align:"left",children:"Name"}),(0,r.jsx)(o.th,{align:"left",children:"Type"}),(0,r.jsx)(o.th,{align:"left",children:"Default"}),(0,r.jsx)(o.th,{align:"left",children:"Description"})]})}),(0,r.jsx)(o.tbody,{children:(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{align:"left",children:"disabled"}),(0,r.jsx)(o.td,{align:"left",children:"boolean"}),(0,r.jsx)(o.td,{align:"left"}),(0,r.jsxs)(o.td,{align:"left",children:["If ",(0,r.jsx)(o.code,{children:"true"}),", the button will be disabled. This sets ",(0,r.jsx)(o.code,{children:"aria-disabled=true"})," and you can style this state by passing the ",(0,r.jsx)(o.code,{children:"_disabled"})," prop."]})]})})]})]})}o.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=Object.assign({},(0,t.ah)(),n.components).wrapper;return o?(0,r.jsx)(o,Object.assign({},n,{children:(0,r.jsx)(c,n)})):c(n)}},2050:function(n,o,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/buttonbase",function(){return e(4680)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=2050)}),_N_E=n.O()}]);