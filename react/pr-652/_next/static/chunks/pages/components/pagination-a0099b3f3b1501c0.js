(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4600],{6258:function(e,n,t){"use strict";t.r(n);var a=t(2322),i=t(5392);function l(e){var n=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",pre:"pre",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,i.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{children:"Pagination"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Pagination"})," component enables the user to select a specific page from a range of pages."]}),"\n",(0,a.jsx)(n.h2,{children:"Import"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import {\n  Pagination,\n  PaginationItem,\n} from '@tonic-ui/react';\n"})}),"\n",(0,a.jsx)(n.h2,{children:"Usage"}),"\n",(0,a.jsx)(n.h3,{children:"Basic pagination"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'<Stack spacing="4x">\n  <Pagination count={10} />\n  <Pagination count={10} defaultPage={4} />\n  <Pagination count={10} disabled />\n</Stack>\n'})}),"\n",(0,a.jsx)(n.h3,{children:"Pagination buttons"}),"\n",(0,a.jsx)(n.p,{children:"You can optionally enable or disable first-page, last-page, previous-page, and next-page buttons."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'<Stack spacing="4x">\n  <Pagination\n    count={10}\n  />\n  <Pagination\n    count={10}\n    defaultPage={5}\n    boundaryCount={0}\n    slot={{ first: true, last: true }}\n  />\n  <Pagination\n    count={10}\n    slot={{ previous: false, next: false }}\n  />\n</Stack>\n'})}),"\n",(0,a.jsx)(n.h3,{children:"Customize the control icons"}),"\n",(0,a.jsx)(n.p,{children:"It's possible to customize the control icons for the start-ellipsis, end-ellipsis, first-page, last-page, previous-page, and next-page buttons."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'<Pagination\n  count={10}\n  renderItem={(props) => {\n    if (props.type === \'start-ellipsis\' || props.type === \'end-ellipsis\') {\n      return (\n        <Text mx="2x">...</Text>\n      );\n    }\n\n    return (\n      <PaginationItem\n        slot={{\n          previous: <Icon icon="chevron-left" />,\n          next: <Icon icon="chevron-right" />,\n        }}\n        {...props}\n      />\n    );\n  }}\n/>\n'})}),"\n",(0,a.jsx)(n.h3,{children:"Pagination ranges"}),"\n",(0,a.jsxs)(n.p,{children:["You can specify how many numbers to display either side of current page with the ",(0,a.jsx)(n.code,{children:"siblingCount"})," prop, and adjacent to the start and end page number with the ",(0,a.jsx)(n.code,{children:"boundaryCount"})," prop."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'<Stack spacing="4x">\n  <Pagination count={11} defaultPage={6} />\n  <Pagination count={11} defaultPage={6} boundaryCount={0} />\n  <Pagination count={11} defaultPage={6} siblingCount={0} />\n  <Pagination count={11} defaultPage={6} boundaryCount={0} siblingCount={0} />\n  <Pagination count={11} defaultPage={6} boundaryCount={2} siblingCount={0} />\n  <Pagination count={15} defaultPage={8} boundaryCount={2} siblingCount={2} />\n</Stack>\n'})}),"\n",(0,a.jsx)(n.h3,{children:"Controlled pagination"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'function Example() {\n  const [page, setPage] = React.useState(1);\n  const handleChange = (event, value) => {\n    setPage(value);\n  };\n\n  return (\n    <Stack spacing="4x">\n      <Text>Page: {page}</Text>\n      <Pagination count={10} page={page} onChange={handleChange} />\n    </>\n  );\n}\n'})}),"\n",(0,a.jsx)(n.h3,{children:"Table pagination"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Pagination"})," component is designed to paginate a list of arbitrary items when infinite loading isn't used. For the pagination of a large set of tabular data, you should use the ",(0,a.jsx)(n.code,{children:"TablePagination"})," component as illustrated below."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'function Example() {\n  const totalRecords = 400;\n  const [page, setPage] = React.useState(1);\n  const [perPage, setPerPage] = React.useState(10);\n  const totalPages = Math.ceil(totalRecords / perPage);\n  const selectPerPage = (value) => {\n    setPage(1);\n    setPerPage(value);\n  };\n  const isPrevPageDisabled = (page <= 1);\n  const isNextPageDisabled = (page >= totalPages);\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    if (value <= 1) {\n      setPage(1);\n    } else if (value >= totalPages) {\n      setPage(totalPages);\n    } else if (!isNaN(value)) {\n      setPage(e.target.value);\n    }\n  };\n\n  return (\n    <Stack spacing="4x">\n      <Flex alignItems="center">\n        <Text mr="3x">\n          Total: {totalRecords}\n        </Text>\n        <Divider orientation="vertical" height="6x" />\n        <Menu>\n          <MenuButton variant="ghost">{perPage} per page</MenuButton>\n          <MenuList>\n            <MenuItem onClick={() => selectPerPage(10)}>10</MenuItem>\n            <MenuItem onClick={() => selectPerPage(50)}>50</MenuItem>\n            <MenuItem onClick={() => selectPerPage(100)}>100</MenuItem>\n          </MenuList>\n        </Menu>\n        <Divider orientation="vertical" height="6x" />\n        <Pagination\n          count={totalPages}\n          page={page}\n          onChange={(_, value) => setPage(value)}\n        />\n      </Flex>\n      <Flex alignItems="center">\n        <Text mr="3x">\n          Total: {totalRecords}\n        </Text>\n        <Divider orientation="vertical" height="6x" />\n        <Menu>\n          <MenuButton variant="ghost">{perPage} per page</MenuButton>\n          <MenuList>\n            <MenuItem onClick={() => selectPerPage(10)}>10</MenuItem>\n            <MenuItem onClick={() => selectPerPage(50)}>50</MenuItem>\n            <MenuItem onClick={() => selectPerPage(100)}>100</MenuItem>\n          </MenuList>\n        </Menu>\n        <Divider orientation="vertical" height="6x" />\n        <Space width="2x" />\n        <Input width={32} px={0} textAlign="center" onChange={handleInputChange} value={page} />\n        <Space width="2x" />\n        <Text>/</Text>\n        <Space width="2x" />\n        <Text>{totalPages}</Text>\n        <Space width="2x" />\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button\n            width="8x"\n            disabled={isPrevPageDisabled}\n            onClick={(event) => {\n              const prevPage = page > 1 ? page - 1 : page;\n              if (prevPage !== page) {\n                setPage(prevPage);\n              }\n            }}\n          >\n            <Icon icon="angle-left" />\n          </Button>\n          <Button\n            width="8x"\n            disabled={isNextPageDisabled}\n            onClick={(event) => {\n              const nextPage = page < totalPages ? page + 1 : page;\n              if (nextPage !== page) {\n                setPage(nextPage);\n              }\n            }}\n          >\n            <Icon icon="angle-right" />\n          </Button>\n        </ButtonGroup>\n      </Flex>\n    </Stack>\n  );\n}\n'})}),"\n",(0,a.jsx)(n.h2,{children:"Props"}),"\n",(0,a.jsx)(n.h3,{children:"Pagination"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{align:"left",children:"Name"}),(0,a.jsx)(n.th,{align:"left",children:"Type"}),(0,a.jsx)(n.th,{align:"left",children:"Default"}),(0,a.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"boundaryCount"}),(0,a.jsx)(n.td,{align:"left",children:"number"}),(0,a.jsx)(n.td,{align:"left",children:"1"}),(0,a.jsx)(n.td,{align:"left",children:"Number of always visible pages at the beginning and end."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"count"}),(0,a.jsx)(n.td,{align:"left",children:"number"}),(0,a.jsx)(n.td,{align:"left",children:"1"}),(0,a.jsx)(n.td,{align:"left",children:"Total number of pages."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"defaultPage"}),(0,a.jsx)(n.td,{align:"left",children:"number"}),(0,a.jsx)(n.td,{align:"left",children:"1"}),(0,a.jsx)(n.td,{align:"left",children:"The page selected by default when the component is uncontrolled."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"disabled"}),(0,a.jsx)(n.td,{align:"left",children:"boolean"}),(0,a.jsx)(n.td,{align:"left",children:"false"}),(0,a.jsxs)(n.td,{align:"left",children:["If ",(0,a.jsx)(n.code,{children:"true"}),", the component is disabled."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"onChange"}),(0,a.jsx)(n.td,{align:"left",children:"function"}),(0,a.jsx)(n.td,{align:"left"}),(0,a.jsxs)(n.td,{align:"left",children:["Callback fired when the page is changed. ",(0,a.jsx)("br",{}),(0,a.jsx)("br",{})," Signature: ",(0,a.jsx)("br",{})," ",(0,a.jsx)(n.code,{children:"function(event: object, page: number) => void"})," ",(0,a.jsx)("br",{}),"event: The event source of the callback. ",(0,a.jsx)("br",{}),"page: The page selected."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"page"}),(0,a.jsx)(n.td,{align:"left",children:"number"}),(0,a.jsx)(n.td,{align:"left"}),(0,a.jsx)(n.td,{align:"left",children:"The current page."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"renderItem"}),(0,a.jsx)(n.td,{align:"left",children:"function"}),(0,a.jsx)(n.td,{align:"left",children:(0,a.jsx)(n.code,{children:"(props) => <PaginationItem {...props} />"})}),(0,a.jsxs)(n.td,{align:"left",children:["Render the item.",(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),"Signature: ",(0,a.jsx)("br",{})," ",(0,a.jsx)(n.code,{children:"function(props) => ReactNode"})," ",(0,a.jsx)("br",{}),"props: The props to spread on a ",(0,a.jsx)(n.code,{children:"PaginationItem"}),"."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"siblingCount"}),(0,a.jsx)(n.td,{align:"left",children:"number"}),(0,a.jsx)(n.td,{align:"left",children:"1"}),(0,a.jsx)(n.td,{align:"left",children:"Number of always visible pages before and after the current page."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"slot"}),(0,a.jsx)(n.td,{align:"left",children:(0,a.jsx)(n.code,{children:"{ first?: boolean, last?: boolean, previous?: boolean, next?: boolean }"})}),(0,a.jsx)(n.td,{align:"left",children:(0,a.jsx)(n.code,{children:"{ first: false, last: false, previous: true, next: true }"})}),(0,a.jsx)(n.td,{align:"left",children:"Whether to render the first-page, last-page, previous-page, and next-page buttons."})]})]})]}),"\n",(0,a.jsx)(n.h3,{children:"PaginationItem"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{align:"left",children:"Name"}),(0,a.jsx)(n.th,{align:"left",children:"Type"}),(0,a.jsx)(n.th,{align:"left",children:"Default"}),(0,a.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"disabled"}),(0,a.jsx)(n.td,{align:"left",children:"boolean"}),(0,a.jsx)(n.td,{align:"left",children:"false"}),(0,a.jsxs)(n.td,{align:"left",children:["If ",(0,a.jsx)(n.code,{children:"true"}),", the component is disabled."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"page"}),(0,a.jsx)(n.td,{align:"left",children:"number"}),(0,a.jsx)(n.td,{align:"left"}),(0,a.jsx)(n.td,{align:"left",children:"The current page number."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"selected"}),(0,a.jsx)(n.td,{align:"left",children:"boolean"}),(0,a.jsx)(n.td,{align:"left",children:"false"}),(0,a.jsxs)(n.td,{align:"left",children:["If ",(0,a.jsx)(n.code,{children:"true"}),", the pagination item is selected."]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"slot"}),(0,a.jsx)(n.td,{align:"left",children:(0,a.jsx)(n.code,{children:"{ 'start-ellipsis'?: ReactNode, 'end-ellipsis'?: ReactNode, first?: ReactNode, previous?: ReactNode, next?: ReactNode, last?: ReactNode }"})}),(0,a.jsx)(n.td,{align:"left",children:(0,a.jsx)(n.code,{children:'{ \'start-ellipsis\': <Icon icon="more-horiz" />, \'end-ellipsis\': <Icon icon="more-horiz" />, first: <Icon icon="collapse-left" />, previous: <Icon icon="angle-left" />, next: <Icon icon="angle-right" />, last: <Icon icon="collapse-right" /> }'})}),(0,a.jsx)(n.td,{align:"left"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"type"}),(0,a.jsx)(n.td,{align:"left",children:"string"}),(0,a.jsx)(n.td,{align:"left",children:"'page'"}),(0,a.jsx)(n.td,{align:"left",children:"The type of the pagination item."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"variant"}),(0,a.jsx)(n.td,{align:"left",children:"string"}),(0,a.jsx)(n.td,{align:"left",children:"'ghost'"}),(0,a.jsx)(n.td,{align:"left",children:"The variant to use."})]})]})]})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,i.ah)(),e.components).wrapper;return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(l,e)})):l(e)}},7853:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/pagination",function(){return t(6258)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=7853)}),_N_E=e.O()}]);