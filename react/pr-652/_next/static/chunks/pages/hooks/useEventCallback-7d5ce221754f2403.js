(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6003],{6130:function(e,n,t){"use strict";t.r(n);var a=t(2322),l=t(5392);function s(e){var n=Object.assign({h1:"h1",p:"p",a:"a",code:"code",ul:"ul",li:"li",pre:"pre",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h4:"h4"},(0,l.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{children:"useEventCallback"}),"\n",(0,a.jsx)(n.p,{children:"A custom Hook to do escape hatch optimization for event callbacks."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://dev.to/yelouafi/a-simple-rule-for-using-callbacks-in-react-4jah",children:"https://dev.to/yelouafi/a-simple-rule-for-using-callbacks-in-react-4jah"})}),"\n",(0,a.jsxs)(n.p,{children:["The general rule is: use ",(0,a.jsx)(n.code,{children:"useEventCallback"})," when doing side effects, and use the built-in ",(0,a.jsx)(n.code,{children:"useCallback"})," when doing render work."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"useEventCallback"})," is more suited for callbacks waiting for some external input, then changing the state of the applicationo."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"useCallback"})," is more suited for callbacks that output something into the external world. In fact ",(0,a.jsx)(n.code,{children:"useCallback"})," is semantically really an alias for ",(0,a.jsx)(n.code,{children:"useMemo"})," since we're treating functions here the same as the values we output from JSX."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// import\nimport { useEventCallback } from '@tonic-ui/react-hooks';\n\n// usage\nconst memoizedCallback = useEventCallback(fn, dependencies);\n"})}),"\n",(0,a.jsx)(n.h3,{children:"Parameters"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{align:"left",children:"Name"}),(0,a.jsx)(n.th,{align:"left",children:"Type"}),(0,a.jsx)(n.th,{align:"left",children:"Default"}),(0,a.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"fn"}),(0,a.jsx)(n.td,{align:"left",children:(0,a.jsx)(n.code,{children:"(...rest: any[]) => void"})}),(0,a.jsx)(n.td,{align:"left"}),(0,a.jsx)(n.td,{align:"left",children:"The function to be called."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{align:"left",children:"dependencies?"}),(0,a.jsx)(n.td,{align:"left",children:"any[]"}),(0,a.jsx)(n.td,{align:"left"}),(0,a.jsx)(n.td,{align:"left",children:"The dependencies of the function."})]})]})]}),"\n",(0,a.jsx)(n.h3,{children:"Returns"}),"\n",(0,a.jsx)(n.p,{children:"Returns a memoized version of the event callback."}),"\n",(0,a.jsx)(n.h3,{children:"Example"}),"\n",(0,a.jsxs)(n.p,{children:["Try typing some text in the input fields and see the difference between ",(0,a.jsx)(n.code,{children:"useEventCallback"})," and ",(0,a.jsx)(n.code,{children:"useCallback"}),"."]}),"\n",(0,a.jsx)(n.h4,{children:"useEventCallback"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'function Component() {\n  const [value, setValue] = React.useState(\'\');\n  const onChange = useEventCallback((event) => {\n    const nextValue = event.target.value;\n    console.log(`prev=${value}, next=${nextValue}`);\n    setValue(nextValue);\n  }, [value]);\n  const prevOnChangeRef = React.useRef(onChange);\n  const invalidationCountRef = React.useRef(0);\n  if (prevOnChangeRef.current !== onChange) {\n    prevOnChangeRef.current = onChange;\n    invalidationCountRef.current++;\n  }\n\n  return (\n    <>\n      <Box mb="2x">"onChange" invalidation count: {invalidationCountRef.current}</Box>\n      <Input value={value} onChange={onChange} placeholder="Enter your text" />\n    </>\n  );\n}\n'})}),"\n",(0,a.jsx)(n.h4,{children:"useCallback"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'function Component() {\n  const [value, setValue] = React.useState(\'\');\n  const onChange = React.useCallback((event) => {\n    const nextValue = event.target.value;\n    console.log(`prev=${value}, next=${nextValue}`);\n    setValue(nextValue);\n  }, [value]);\n  const prevOnChangeRef = React.useRef(onChange);\n  const invalidationCountRef = React.useRef(0);\n  if (prevOnChangeRef.current !== onChange) {\n    prevOnChangeRef.current = onChange;\n    invalidationCountRef.current++;\n  }\n\n  return (\n    <>\n      <Box mb="2x">"onChange" invalidation count: {invalidationCountRef.current}</Box>\n      <Input value={value} onChange={onChange} placeholder="Enter your text" />\n    </>\n  );\n}\n'})})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,l.ah)(),e.components).wrapper;return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(s,e)})):s(e)}},7344:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useEventCallback",function(){return t(6130)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=7344)}),_N_E=e.O()}]);