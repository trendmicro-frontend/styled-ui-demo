(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4692],{53714:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return s}});var a=n(7896),o=n(59740),l=(n(2784),n(30876)),r=["components"],i={};function s(e){var t=e.components,n=(0,o.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",null,"Modal"),(0,l.kt)("p",null,"Modal dialogs are used to inform users about a task and can contain critical information, require decisions, or involve multiple tasks. Modal dialogs disable app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken."),(0,l.kt)("h2",null,"Import"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Modal"),": A ",(0,l.kt)("inlineCode",{parentName:"li"},"Provider")," component that provides the context to the components it wraps."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ModalOverlay"),": The overlay of the modal."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ModalContent"),": The content of the modal."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ModalHeader"),": The header of the modal."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ModalBody"),": The body of the modal."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ModalFooter"),": The footer of the modal.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from '@tonic-ui/react';\n")),(0,l.kt)("h2",null,"Modal components"),(0,l.kt)("p",null,"Below is a static modal example, including modal header (optional), modal body (required when padding is necessary), and modal footer (optional)."),(0,l.kt)("p",null,"You can also compose your modal components when customization is needed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'function Example() {\n  return (\n    <Stack direction="column" spacing="4x">\n      <ModalContent ml={0} width={480}>\n        <ModalHeader>\n          Modal Title\n        </ModalHeader>\n        <ModalBody>\n          <Alert variant="outline" severity="warning" mb="4x">\n            <Text>This is a warning alert</Text>\n          </Alert>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBody />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant="primary" minWidth="20x">Save Changes</Button>\n          <Space width="2x" />\n          <Button minWidth="20x">Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n      <ModalContent ml={0} width={480}>\n        <ModalBody>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBody />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant="primary" minWidth="20x">Save Changes</Button>\n          <Space width="2x" />\n          <Button minWidth="20x">Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n      <ModalContent ml={0} width={480}>\n        <ModalBody>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonBody />\n        </ModalBody>\n      </ModalContent>\n      <ModalContent ml={0} width={480}>\n        <Box px="4x" py="4x">\n          You can create a custom modal with any sort of content.\n        </Box>\n      </ModalContent>\n    </Stack>\n  );\n}\n\nrender(<Example />);\n')),(0,l.kt)("h2",null,"Usage"),(0,l.kt)("p",null,"Click the button below to toggle a modal. The modal will show up in the center of the screen."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst useToggle = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const toggle = () => setValue(value => !value);\n  return [value, toggle];\n};\n\nconst Divider = (props) => {\n  const [colorMode] = useColorMode();\n  const dividerColor = {\n    dark: \'white:secondary\',\n    light: \'black:secondary\',\n  }[colorMode];\n  return (\n    <Box mb="4x" pb="4x" borderBottom={1} borderBottomColor={dividerColor} {...props} />\n  );\n};\n\nconst FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nfunction Example() {\n  const initialFocusRef = React.useRef();\n  const [colorMode] = useColorMode();\n  const iconColor = {\n    dark: \'white:tertiary\',\n    light: \'black:tertiary\',\n  }[colorMode];\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [size, changeSizeBy] = useSelection(\'sm\');\n  const [height, changeHeightBy] = useSelection(\'auto\');\n  const [ensureFocus, toggleEnsureFocus] = useToggle(true);\n  const [autoFocus, toggleAutoFocus] = useToggle(true);\n  const [closeOnEsc, toggleCloseOnEsc] = useToggle(true);\n  const [closeOnOutsideClick, toggleCloseOnOutsideClick] = useToggle(true);\n  const [isClosable, toggleIsCloseButtonVisible] = useToggle(true);\n  const [isOverlayVisible, toggleIsOverlayVisible] = useToggle(true);\n  const [isHeaderVisible, toggleIsHeaderVisible] = useToggle(true);\n  const [isBodyVisible, toggleIsBodyVisible] = useToggle(true);\n  const [isFooterVisible, toggleIsFooterVisible] = useToggle(true);\n  const [isAlertVisible, toggleIsAlertVisible] = useToggle(true);\n\n  return (\n    <>\n      <Box>\n        <Button onClick={onOpen}>\n          Launch modal\n        </Button>\n      </Box>\n      <Divider />\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'auto\', \'xs\', \'sm\', \'md\', \'lg\', \'xl\', \'full\'].map(value => (\n            <SelectableButton\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </SelectableButton>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            height\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'auto\', \'100%\'].map(value => (\n            <SelectableButton\n              key={value}\n              selected={value === height}\n              onClick={changeHeightBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </SelectableButton>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <Space height="1x" />\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={ensureFocus}\n            onChange={toggleEnsureFocus}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ensureFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={autoFocus}\n            disabled={!ensureFocus}\n            onChange={toggleAutoFocus}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">autoFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnEsc}\n            disabled={!isClosable && !closeOnOutsideClick}\n            onChange={toggleCloseOnEsc}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnEsc</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnOutsideClick}\n            disabled={!isClosable && !closeOnEsc}\n            onChange={toggleCloseOnOutsideClick}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnOutsideClick</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={isClosable}\n            disabled={!closeOnEsc && !closeOnOutsideClick}\n            onChange={toggleIsCloseButtonVisible}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">isClosable</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isOverlayVisible} onChange={toggleIsOverlayVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalOverlay</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isHeaderVisible} onChange={toggleIsHeaderVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isBodyVisible} onChange={toggleIsBodyVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isFooterVisible} onChange={toggleIsFooterVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalFooter</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isAlertVisible} onChange={toggleIsAlertVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">Alert</Text>\n        </TextLabel>\n      </FormGroup>\n      <Modal\n        ensureFocus={ensureFocus}\n        autoFocus={autoFocus}\n        closeOnEsc={closeOnEsc}\n        closeOnOutsideClick={closeOnOutsideClick}\n        initialFocusRef={initialFocusRef}\n        isClosable={isClosable}\n        isOpen={isOpen}\n        onClose={onClose}\n        size={size}\n      >\n        {isOverlayVisible && (\n          <ModalOverlay />\n        )}\n        <ModalContent height={height}>\n          {isHeaderVisible && (\n            <ModalHeader>\n              {size === \'auto\' && <Text>Auto-sized Modal</Text>}\n              {size === \'xs\' && <Text>Extra Small Modal</Text>}\n              {size === \'sm\' && <Text>Small Modal</Text>}\n              {size === \'md\' && <Text>Medium Modal</Text>}\n              {size === \'lg\' && <Text>Large Modal</Text>}\n              {size === \'xl\' && <Text>Extra Large Modal</Text>}\n              {size === \'full\' && <Text>Full-width Modal</Text>}\n            </ModalHeader>\n          )}\n          {isBodyVisible && (\n            <ModalBody>\n              {isAlertVisible && (\n                <Alert variant="outline" severity="info" mb="4x" isClosable onClose={() => toggleIsAlertVisible()}>\n                  <Text>This is an info alert</Text>\n                </Alert>\n              )}\n              <Text mb="4x">\n                You can put any elements you want here.\n              </Text>\n              <Grid\n                templateColumns="auto 1fr"\n                rowGap="2x"\n                columnGap="3x"\n                alignItems="center"\n              >\n                <Icon icon="user" color={iconColor} />\n                <Input ref={initialFocusRef} placeholder="User name" />\n                <Icon icon="email" color={iconColor} />\n                <Input placeholder="Email address" />\n              </Grid>\n            </ModalBody>\n          )}\n          {isFooterVisible && (\n            <ModalFooter>\n              <Button variant="primary">\n                OK\n              </Button>\n              <Space width="2x" />\n              <Button onClick={onClose}>\n                Cancel\n              </Button>\n            </ModalFooter>\n          )}\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,l.kt)("h3",null,"Nested modals"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const { isOpen: isNestedOpen, onOpen: onNestedOpen, onClose: onNestedClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>Launch modal</Button>\n      <Modal\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isOpen}\n        onClose={onClose}\n        size="sm"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Modal\n          </ModalHeader>\n          <ModalBody>\n            Modal body text goes here.\n          </ModalBody>\n          <ModalFooter justifyContent="space-between">\n            <Button\n              disabled={isNestedOpen}\n              variant="primary"\n              onClick={onNestedOpen}\n            >\n              Launch nested modal\n            </Button>\n            <Box>\n              <Button minWidth="20x" onClick={onClose}>\n                Close\n              </Button>\n            </Box>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <Modal\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isNestedOpen}\n        onClose={onNestedClose}\n        size="xs"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Nested Modal\n          </ModalHeader>\n          <ModalBody>\n            Modal body text goes here.\n          </ModalBody>\n          <ModalFooter>\n            <Button variant="primary" onClick={onNestedClose} minWidth="20x">\n              Yes\n            </Button>\n            <Space width="2x" />\n            <Button onClick={onNestedClose} minWidth="20x">\n              No\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n')),(0,l.kt)("h2",null,"Props"),(0,l.kt)("h3",null,"Modal"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"ensureFocus"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", it will always bring the focus back to the ",(0,l.kt)("inlineCode",{parentName:"td"},"Modal")," descendants, which does not allow the focus to escape while open.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"autoFocus"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"ensureFocus")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"initialFocusRef")," is not set, it will automatically set focus on the first focusable element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"finalFocusRef"),(0,l.kt)("td",{parentName:"tr",align:"left"},"React.ref"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"The ",(0,l.kt)("inlineCode",{parentName:"td"},"ref")," of element to receive focus when the modal closes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"initialFocusRef"),(0,l.kt)("td",{parentName:"tr",align:"left"},"React.ref"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"The ",(0,l.kt)("inlineCode",{parentName:"td"},"ref")," of the element to receive focus when the modal opens.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"isClosable"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", a close button will appear on the right side.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"isOpen"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the modal is shown.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"closeOnEsc"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", close the modal when the ",(0,l.kt)("inlineCode",{parentName:"td"},"esc")," key is pressed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"closeOnOutsideClick"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"},"false"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", close the modal when click outside of the modal.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"onClose"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Callback fired when the modal closes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"size"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'auto'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Change the size of the modal. One of: 'auto', 'xs', 'sm', 'md', 'lg', 'xl', 'full'")))),(0,l.kt)("h3",null,"ModalOverlay"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"TransitionComponent"),(0,l.kt)("td",{parentName:"tr",align:"left"},"elementType"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Fade"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The component used for the transition.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"TransitionProps"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Props applied to the ",(0,l.kt)("a",{parentName:"td",href:"http://reactcommunity.org/react-transition-group/transition#Transition-props"},"Transition")," element.")))),(0,l.kt)("h3",null,"ModalContent"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"TransitionComponent"),(0,l.kt)("td",{parentName:"tr",align:"left"},"elementType"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Fade"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The component used for the transition.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"TransitionProps"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Props applied to the ",(0,l.kt)("a",{parentName:"td",href:"http://reactcommunity.org/react-transition-group/transition#Transition-props"},"Transition")," element.")))),(0,l.kt)("h3",null,"ModalHeader"),(0,l.kt)("h3",null,"ModalBody"),(0,l.kt)("h3",null,"ModalFooter"))}s.isMDXComponent=!0},36795:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/modal",function(){return n(53714)}])}},function(e){e.O(0,[9774,2888,179],(function(){return t=36795,e(e.s=t);var t}));var t=e.O();_N_E=t}]);