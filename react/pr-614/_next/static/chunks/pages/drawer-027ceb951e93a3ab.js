(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7279],{44168:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return s}});var o=t(7896),a=t(59740),r=(t(2784),t(30876)),l=["components"],i={};function s(e){var n=e.components,t=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Drawer"),(0,r.kt)("p",null,"A drawer dialog is a window overlaid on either the primary window or another dialog\nwindow. Contents behind a drawer dialog are ",(0,r.kt)("strong",{parentName:"p"},"inert")," meaning that users cannot\ninteract with content behind the dialog."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Drawer"),": A ",(0,r.kt)("inlineCode",{parentName:"li"},"Provider")," component that provides the context to the components it wraps."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DrawerOverlay"),": The overlay of the drawer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DrawerContent"),": The content of the drawer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DrawerHeader"),": The header of the drawer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DrawerBody"),": The body of the drawer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DrawerFooter"),": The footer of the drawer.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter,\n} from '@trendmicro/react-styled-ui';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("p",null,"Click the button below to toggle a drawer. The drawer will show up on either side of the screen."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const SelectableButton = ({ selected, ...props }) => {\n  const [colorMode] = useColorMode();\n  const { colors } = useTheme();\n  const focusColor = colors[\'blue:60\'];\n  let _selectedColor = {\n    dark: \'blue:60\',\n    light: \'blue:60\',\n  }[colorMode];\n  _selectedColor = colors[_selectedColor];\n  const getSelectedProps = {\n    bg: _selectedColor,\n    borderColor: _selectedColor,\n    color: \'white:emphasis\',\n    cursor: \'default\',\n    pointerEvents: \'none\',\n    zIndex: 1,\n    css: {\n      \'&::before\': {\n        backgroundColor: _selectedColor,\n      },\n      \'&:focus\': {\n        \':not(:active)\': {\n          borderColor: focusColor,\n          boxShadow: `inset 0 0 0 1px ${focusColor}`,\n        },\n        \'&::before\': {\n          backgroundColor: focusColor,\n        },\n      }\n    },\n    _hover: {\n      bg: _selectedColor,\n    },\n    _active: {\n      bg: _selectedColor,\n    },\n  };\n  return (\n    <Button\n      {...(selected && getSelectedProps)}\n      {...props}\n    />\n  );\n};\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst useToggle = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const toggle = () => setValue(value => !value);\n  return [value, toggle, setValue];\n};\n\nconst Divider = (props) => {\n  const [colorMode] = useColorMode();\n  const dividerColor = {\n    dark: \'white:secondary\',\n    light: \'black:secondary\',\n  }[colorMode];\n  return (\n    <Box mb="4x" pb="4x" borderBottom={1} borderBottomColor={dividerColor} {...props} />\n  );\n};\n\nconst FormGroup = (props) => (\n  <Box mb="4x">\n    <Flex display="inline-flex" {...props} />\n  </Box>\n);\n\nfunction Example() {\n  const initialFocusRef = React.useRef();\n  const [colorMode] = useColorMode();\n  const iconColor = {\n    dark: \'white:tertiary\',\n    light: \'black:tertiary\',\n  }[colorMode];\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [placement, changePlacementBy] = useSelection(\'right\');\n  const [ensureFocus, toggleEnsureFocus] = useToggle(true);\n  const [autoFocus, toggleAutoFocus] = useToggle(true);\n  const [backdrop, toggleBackdrop] = useToggle(true);\n  const [closeOnEsc, toggleCloseOnEsc] = useToggle(true);\n  const [closeOnOutsideClick, toggleCloseOnOutsideClick, setCloseOnOutsideClick] = useToggle(true);\n  const [isClosable, toggleIsClosable] = useToggle(true);\n  const [isOverlayVisible, toggleIsOverlayVisible, setIsOverlayVisible] = useToggle(true);\n  const [isHeaderVisible, toggleIsHeaderVisible] = useToggle(true);\n  const [isBodyVisible, toggleIsBodyVisible] = useToggle(true);\n  const [isFooterVisible, toggleIsFooterVisible] = useToggle(true);\n  const [isAlertVisible, toggleIsAlertVisible] = useToggle(true);\n  const [size, changeSizeBy] = useSelection(\'sm\');\n\n  return (\n    <>\n      <Box>\n        <Button onClick={onOpen}>\n          Launch drawer\n        </Button>\n      </Box>\n      <Divider />\n      <FormGroup>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'left\', \'right\'].map(value => (\n            <SelectableButton\n              key={value}\n              selected={value === placement} \n              onClick={changePlacementBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </SelectableButton>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'auto\', \'sm\', \'md\', \'lg\', \'full\'].map(value => (\n            <SelectableButton\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </SelectableButton>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={ensureFocus}\n            onChange={toggleEnsureFocus}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ensureFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={autoFocus}\n            disabled={!ensureFocus}\n            onChange={toggleAutoFocus}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">autoFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={backdrop}\n            onChange={(e) => {\n              const nextBackdrop = !backdrop;\n              if (!nextBackdrop) {\n                setCloseOnOutsideClick(false);\n                setIsOverlayVisible(false);\n              }\n\n              toggleBackdrop(e);\n            }}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">backdrop</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={isClosable}\n            disabled={!closeOnEsc && !closeOnOutsideClick}\n            onChange={toggleIsClosable}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">isClosable</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnEsc}\n            disabled={!isClosable && !closeOnOutsideClick}\n            onChange={toggleCloseOnEsc}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnEsc</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnOutsideClick}\n            disabled={(!isClosable && !closeOnEsc) || !backdrop}\n            onChange={toggleCloseOnOutsideClick}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnOutsideClick</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={isOverlayVisible}\n            disabled={!backdrop}\n            onChange={toggleIsOverlayVisible}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">DrawerOverlay</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isHeaderVisible} onChange={toggleIsHeaderVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">DrawerHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isBodyVisible} onChange={toggleIsBodyVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">DrawerBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isFooterVisible} onChange={toggleIsFooterVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">DrawerFooter</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isAlertVisible} onChange={toggleIsAlertVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">Alert</Text>\n        </TextLabel>\n      </FormGroup>\n      <Slide\n        in={isOpen}\n        duration={250}\n        from={placement}\n        finalHeight="100vh"\n      >\n        {styles => (\n          <Drawer\n            ensureFocus={ensureFocus}\n            autoFocus={autoFocus}\n            backdrop={backdrop}\n            initialFocusRef={initialFocusRef}\n            isClosable={isClosable}\n            isOpen={true} // Set to `true` if a transition is active\n            closeOnEsc={closeOnEsc}\n            closeOnOutsideClick={closeOnOutsideClick}\n            onClose={onClose}\n            placement={placement}\n            size={size}\n          >\n            {isOverlayVisible && (\n              <DrawerOverlay opacity={styles.opacity} />\n            )}\n            <DrawerContent {...styles}>\n              {isHeaderVisible && (\n                <DrawerHeader>\n                  Drawer Title\n                </DrawerHeader>\n              )}\n              {isBodyVisible && (\n                <DrawerBody>\n                  {isAlertVisible && (\n                    <Alert variant="outline" severity="info" mb="4x" isClosable onClose={() => toggleIsAlertVisible()}>\n                      <Text>This is an info alert</Text>\n                    </Alert>\n                  )}\n                  <Text mb="4x">\n                    You can put any elements you want here.\n                  </Text>\n                  <Grid\n                    templateColumns="auto 1fr"\n                    rowGap="2x"\n                    columnGap="3x"\n                    alignItems="center"\n                  >\n                    <Icon icon="user" color={iconColor} />\n                    <Input ref={initialFocusRef} placeholder="User name" />\n                    <Icon icon="email" color={iconColor} />\n                    <Input placeholder="Email address" />\n                  </Grid>\n                </DrawerBody>\n              )}\n              {isFooterVisible && (\n                <DrawerFooter>\n                  <Button variant="primary" onClick={onClose} minWidth="20x">\n                    OK\n                  </Button>\n                  <Space width="2x" />\n                  <Button onClick={onClose} minWidth="20x">\n                    Cancel\n                  </Button>\n                </DrawerFooter>\n              )}\n            </DrawerContent>\n          </Drawer>\n        )}\n      </Slide>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"Placements"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"placement")," prop to if you want to change the placement of the drawer. The value can be one of ",(0,r.kt)("inlineCode",{parentName:"p"},"right")," (default) or ",(0,r.kt)("inlineCode",{parentName:"p"},"left"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [placement, setPlacement] = React.useState(\'right\');\n  const handleClickBy = nextPlacement => (e) => {\n    setPlacement(nextPlacement);\n    onOpen();\n  };\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x">\n        <Button onClick={handleClickBy(\'left\')}>\n          <Flex align="center">\n            <Icon icon="chevron-right" mr="2x" />\n            Left\n          </Flex>\n        </Button>\n        <Button onClick={handleClickBy(\'right\')}>\n          <Flex align="center">\n            <Icon icon="chevron-left" mr="2x" />\n            Right\n          </Flex>\n        </Button>\n      </Stack>\n      <Drawer\n        ensureFocus\n        autoFocus\n        backdrop\n        isClosable\n        isOpen={isOpen}\n        closeOnEsc\n        closeOnOutsideClick\n        onClose={onClose}\n        placement={placement}\n        size="sm"\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader>\n            Drawer Title\n          </DrawerHeader>\n          <DrawerBody>\n            <Lorem count={2} />\n          </DrawerBody>\n          <DrawerFooter>\n            <Button onClick={onClose}>\n              Close\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n')),(0,r.kt)("h3",null,"Sizes"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," prop to change the size of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Drawer"),". You can set the value to ",(0,r.kt)("inlineCode",{parentName:"p"},"auto"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"md"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lg"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"full"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [size, setSize] = React.useState('auto');\n  const handleClickBy = nextSize => (e) => {\n    setSize(nextSize);\n    onOpen();\n  };\n\n  return (\n    <>\n      <Stack direction=\"row\" spacing=\"2x\">\n        <Button onClick={handleClickBy('auto')}>Auto width</Button>\n        <Button onClick={handleClickBy('sm')}>Small width</Button>\n        <Button onClick={handleClickBy('md')}>Medium width</Button>\n        <Button onClick={handleClickBy('lg')}>Large width</Button>\n        <Button onClick={handleClickBy('full')}>Full width</Button>\n      </Stack>\n      <Drawer\n        ensureFocus\n        autoFocus\n        backdrop\n        isClosable\n        isOpen={isOpen}\n        closeOnEsc\n        closeOnOutsideClick\n        onClose={onClose}\n        size={size}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader>\n            Drawer Title\n          </DrawerHeader>\n          <DrawerBody>\n            <Lorem count={2} />\n          </DrawerBody>\n          <DrawerFooter>\n            <Button onClick={onClose}>\n              Close\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n")),(0,r.kt)("h3",null,"Transitions"),(0,r.kt)("p",null,"The drawer doesn't come with transitions by default. You can use the ",(0,r.kt)("a",{parentName:"p",href:"./transition"},(0,r.kt)("inlineCode",{parentName:"a"},"Transition"))," components to provide simple transitions."),(0,r.kt)("p",null,"When using transitions, you have to set ",(0,r.kt)("inlineCode",{parentName:"p"},"isOpen")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", or the transition will not take effect when closing the drawer."),(0,r.kt)("h4",null,"Adding slide transition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import { Slide } from '@trendmicro/react-styled-ui';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>\n        Launch drawer\n      </Button>\n      <Slide\n        in={isOpen}\n        from="right"\n        finalHeight="100vh"\n      >\n        {styles => (\n          <Drawer\n            backdrop\n            isClosable\n            isOpen={true} // Set to `true` if a transition is active\n            closeOnEsc\n            closeOnOutsideClick\n            onClose={onClose}\n            placement="right"\n            size="sm"\n          >\n            <DrawerOverlay opacity={styles.opacity} />\n            <DrawerContent {...styles}>\n              <DrawerHeader>\n                Drawer Title\n              </DrawerHeader>\n              <DrawerBody>\n                <Lorem count={2} />\n              </DrawerBody>\n              <DrawerFooter>\n                <Button onClick={onClose}>\n                  Close\n                </Button>\n              </DrawerFooter>\n            </DrawerContent>\n          </Drawer>\n        )}\n      </Slide>\n    </>\n  );\n}\n')),(0,r.kt)("h2",null,"Props"),(0,r.kt)("h3",null,"Drawer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"ensureFocus"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", it will always bring the focus back to the ",(0,r.kt)("inlineCode",{parentName:"td"},"Drawer")," descendants, which does not allow the focus to escape while open.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"autoFocus"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"ensureFocus")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"initialFocusRef")," is not set, it will automatically set focus on the first focusable element.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"backdrop"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", it will wrap components with a backdrop to provide a click area for dismissing when clicking outside the drawer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"finalFocusRef"),(0,r.kt)("td",{parentName:"tr",align:"left"},"React.ref"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"ref")," of element to receive focus when the drawer closes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"initialFocusRef"),(0,r.kt)("td",{parentName:"tr",align:"left"},"React.ref"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"ref")," of the element to receive focus when the drawer opens.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"isOpen"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the drawer is shown.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"isClosable"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", a close button will appear on the right side.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"closeOnEsc"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", close the drawer when the ",(0,r.kt)("inlineCode",{parentName:"td"},"esc")," key is pressed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"closeOnOutsideClick"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", close the drawer when click outside of the drawer. Note that this value will not have any effect when ",(0,r.kt)("inlineCode",{parentName:"td"},"backdrop")," is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onClose"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback fired when the drawer closes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"placement"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'right'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The placement of the drawer. One of: ",(0,r.kt)("inlineCode",{parentName:"td"},"'left'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"'right'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"size"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'auto'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The size of the drawer. One of: ",(0,r.kt)("inlineCode",{parentName:"td"},"'auto'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"'sm'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"'md'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"'lg'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"'full'"))))),(0,r.kt)("h3",null,"DrawerOverlay"),(0,r.kt)("h3",null,"DrawerContent"),(0,r.kt)("h3",null,"DrawerHeader"),(0,r.kt)("h3",null,"DrawerBody"),(0,r.kt)("h3",null,"DrawerFooter"))}s.isMDXComponent=!0},35934:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/drawer",function(){return t(44168)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=35934,e(e.s=n);var n}));var n=e.O();_N_E=n}]);