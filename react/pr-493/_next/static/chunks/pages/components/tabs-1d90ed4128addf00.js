(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6316],{89889:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return d}});var a=n(7896),l=n(59740),r=(n(2784),n(30876)),o=["components"],i={};function d(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Tabs"),(0,r.kt)("p",null,"Tabs is used to group and display a set of related elements."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Tab,\n  Tabs,\n  TabList,\n  TabPanel,\n  TabPanels,\n} from '@tonic-ui/react';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("h3",null,"Basic tabs"),(0,r.kt)("p",null,"Here is a basic example of tabs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs>\n  <TabList>\n    <Tab>TAB 1</Tab>\n    <Tab>TAB 2</Tab>\n    <Tab>TAB 3</Tab>\n  </TabList>\n  <TabPanels px="3x" py="2x">\n    <TabPanel>\n      Tab Panel 1\n    </TabPanel>\n    <TabPanel>\n      Tab Panel 2\n    </TabPanel>\n    <TabPanel>\n      Tab Panel 3\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"TabList")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TabPanels")," are used to group the tabs and tab panels. If you don't need the tabs to be grouped, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Tab")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TabPanel")," directly.",(0,r.kt)("br",null),(0,r.kt)("br",null)),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled",disabled:!0},"<Tabs>\n  <Tab>TAB 1</Tab>\n  <Tab>TAB 2</Tab>\n  <Tab>TAB 3</Tab>\n  <TabPanel>Tab Panel 1</TabPanel>\n  <TabPanel>Tab Panel 2</TabPanel>\n  <TabPanel>Tab Panel 3</TabPanel>\n</Tabs>\n"))),(0,r.kt)("h3",null,"Controlled and uncontrolled tabs"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," prop is used to control which tab is selected. The ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," callback returns the selected tab index whenever the user changes the tab. If you intend to control the tabs programmatically, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," callback to update the ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const [index, setIndex] = React.useState(\'tab1\');\n\n  return (\n    <Tabs\n      index={index}\n      onChange={index => setIndex(index)}\n    >\n      <TabList>\n        <Tab index="tab1">TAB 1</Tab>\n        <Tab index="tab2">TAB 2</Tab>\n        <Tab index="tab3">TAB 3</Tab>\n      </TabList>\n      <TabPanels px="3x" py="2x">\n        <TabPanel index="tab1">\n          Tab Panel 1\n        </TabPanel>\n        <TabPanel index="tab2">\n          Tab Panel 2\n        </TabPanel>\n        <TabPanel index="tab3">\n          Tab Panel 3\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n')),(0,r.kt)("p",null,"For uncontrolled tabs, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultIndex")," prop to set the initial selected tab."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs defaultIndex={0}>\n  <TabList>\n    <Tab>TAB 1</Tab>\n    <Tab>TAB 2</Tab>\n    <Tab>TAB 3</Tab>\n  </TabList>\n  <TabPanels px="3x" py="2x">\n    <TabPanel>\n      Tab Panel 1\n    </TabPanel>\n    <TabPanel>\n      Tab Panel 2\n    </TabPanel>\n    <TabPanel>\n      Tab Panel 3\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n')),(0,r.kt)("h3",null,"Tabs with dropdown menu"),(0,r.kt)("p",null,"The tab with the dropdown menu is usually the last tab. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"event.preventDefault()")," to control whether the tab will be selected when the user clicks the dropdown menu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs variant="default">\n  <TabList>\n    <Tab>TAB 1</Tab>\n    <Tab>TAB 2</Tab>\n    <Tab\n      onClick={(event) => {\n        const value = event.target.getAttribute(\'value\');\n        if (!value) {\n          event.preventDefault();\n          return;\n        }\n\n        console.log(\'Menu Item \' + value + \' clicked\');\n      }}\n    >\n      <Menu>\n        <MenuToggle alignItems="center">\n          TAB 3\n          <Space width="1x" />\n          <MenuToggleIcon />\n        </MenuToggle>\n        <MenuList\n          offset={[-14, 10]}\n          width="max-content"\n        >\n          <MenuItem value={1}>Menu Item 1</MenuItem>\n          <MenuItem value={2}>Menu Item 2</MenuItem>\n          <MenuItem value={3}>Menu Item 3</MenuItem>\n        </MenuList>\n      </Menu>\n    </Tab>\n  </TabList>\n</Tabs>\n')),(0,r.kt)("h3",null,"Variants"),(0,r.kt)("p",null,"Tabs comes in 3 variants: ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"filled"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"unstyled"),". Pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," prop and set it to either of these values."),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"default")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs variant="default">\n  <TabList>\n    <Tab>TAB 1</Tab>\n    <Tab>TAB 2</Tab>\n    <Tab>TAB 3</Tab>\n  </TabList>\n</Tabs>\n')),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"filled")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs variant="filled">\n  <TabList>\n    <Tab>TAB 1</Tab>\n    <Tab>TAB 2</Tab>\n    <Tab>TAB 3</Tab>\n  </TabList>\n</Tabs>\n')),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"unstyled")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs variant="unstyled">\n  <TabList columnGap="3x">\n    <Tab>TAB 1</Tab>\n    <Tab>TAB 2</Tab>\n    <Tab>TAB 3</Tab>\n  </TabList>\n</Tabs>\n')),(0,r.kt)("h3",null,"Decorate tabs with a bottom border"),(0,r.kt)("p",null,"To decorate tabs with a bottom border, you can pass ",(0,r.kt)("inlineCode",{parentName:"p"},"__after")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"TabList")," to render a bottom border."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const MyTabGroup = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  return (\n    <TabList\n      position="relative"\n      __after={{\n        content: \'""\',\n        borderBottom: 1,\n        borderBottomColor: colorStyle.divider,\n        position: \'absolute\',\n        bottom: 0,\n        width: \'100%\',\n        ...props.__after,\n      }}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  return (\n    <Flex flexDirection="column" rowGap="4x">\n      <Box>\n        <Text fontSize="lg" lineHeight="lg" mb="2x">\n          Left-aligned\n        </Text>\n        <Box backgroundColor={colorStyle.background.secondary} p="4x">\n          <Tabs>\n            <MyTabGroup justifyContent="flex-start">\n              <Tab>TAB 1</Tab>\n              <Tab>TAB 2</Tab>\n              <Tab>TAB 3</Tab>\n            </MyTabGroup>\n          </Tabs>\n        </Box>\n      </Box>\n      <Box>\n        <Text fontSize="lg" lineHeight="lg" mb="2x">\n          Centered\n        </Text>\n        <Box backgroundColor={colorStyle.background.secondary} p="4x">\n          <Tabs>\n            <MyTabGroup justifyContent="center">\n              <Tab>TAB 1</Tab>\n              <Tab>TAB 2</Tab>\n              <Tab>TAB 3</Tab>\n            </MyTabGroup>\n          </Tabs>\n        </Box>\n      </Box>\n      <Box>\n        <Text fontSize="lg" lineHeight="lg" mb="2x">\n          Right-aligned\n        </Text>\n        <Box backgroundColor={colorStyle.background.secondary} p="4x">\n          <Tabs>\n            <MyTabGroup justifyContent="flex-end">\n              <Tab>TAB 1</Tab>\n              <Tab>TAB 2</Tab>\n              <Tab>TAB 3</Tab>\n            </MyTabGroup>\n          </Tabs>\n        </Box>\n      </Box>\n      <Box>\n        <Text fontSize="lg" lineHeight="lg" mb="2x">\n          Full width\n        </Text>\n        <Box backgroundColor={colorStyle.background.secondary} p="4x">\n          <Tabs>\n            <MyTabGroup>\n              <Tab width="100%">TAB 1</Tab>\n              <Tab width="100%">TAB 2</Tab>\n              <Tab width="100%">TAB 3</Tab>\n            </MyTabGroup>\n          </Tabs>\n        </Box>\n      </Box>\n      <Box>\n        <Text fontSize="lg" lineHeight="lg" mb="2x">\n          Auto-sizing\n        </Text>\n        <Box backgroundColor={colorStyle.background.secondary} p="4x">\n          <Tabs>\n            <MyTabGroup display="inline-flex">\n              <Tab>TAB 1</Tab>\n              <Tab>TAB 2</Tab>\n              <Tab>TAB 3</Tab>\n            </MyTabGroup>\n          </Tabs>\n        </Box>\n      </Box>\n    </Flex>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"Access the state of tabs"),(0,r.kt)("p",null,"Sometimes you need to access the state of tabs. For example, you may want to lazily load the content of a tab when that tab is selected."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Tabs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Tab"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"TabPanel")," components expose internal state using ",(0,r.kt)("strong",{parentName:"p"},"Function as Children (FaCC)"),". This is not a recommended approach, but it is useful for this use case."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs defaultIndex={1}>\n  {({ index: selectedIndex }) => (\n    <>\n      <Box mb="2x">\n        TAB {selectedIndex} is selected\n      </Box>\n      <TabList>\n        {[1, 2, 3].map(tabIndex => (\n          <Tab key={tabIndex} index={tabIndex}>\n            {({ getTabProps, disabled, index, variant }) => {\n              return (\n                <ButtonBase {...getTabProps()}>\n                  TAB {index}\n                </ButtonBase>\n              );\n            }}\n          </Tab>\n        ))}\n      </TabList>\n      <TabPanels px="3x" py="2x">\n        {[1, 2, 3].map(tabPanelIndex => (\n          <TabPanel key={tabPanelIndex} index={tabPanelIndex}>\n            {({ getTabPanelProps, index, variant }) => {\n              return (\n                <Box {...getTabPanelProps()}>\n                  Tab Panel {index}\n                </Box>\n              );\n            }}\n          </TabPanel>\n        ))}\n      </TabPanels>\n    </>\n  )}\n</Tabs>\n')),(0,r.kt)("h3",null,"Customization"),(0,r.kt)("p",null,"Tabs also come with an ",(0,r.kt)("inlineCode",{parentName:"p"},"unstyled")," variant. It's useful for doing customizations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const CustomTabList = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const styleProps = {\n    backgroundColor: colorStyle.background.primary,\n    pt: \'1x\',\n    pl: \'1x\',\n    position: \'relative\',\n    __after: {\n      content: \'""\',\n      borderBottom: 1,\n      borderBottomColor: colorStyle.divider,\n      position: \'absolute\',\n      bottom: 0,\n      width: \'100%\',\n      ...props.__after,\n    },\n  };\n\n  return (\n    <TabList\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nconst CustomTab = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const { colors } = useTheme();\n\n  const styleProps = {\n    backgroundColor: colorStyle.background.tertiary,\n    border: 1,\n    borderColor: colorStyle.divider,\n    color: colorStyle.color.secondary,\n    px: \'4x\',\n    py: \'3x\',\n    position: \'relative\',\n    transition: \'all 0.2s\',\n    zIndex: 1,\n    _disabled: {\n      color: colorStyle.color.disabled,\n      cursor: \'not-allowed\',\n    },\n    _hover: {\n      color: colorStyle.color.primary,\n    },\n    _notLastOfType: {\n      borderRight: \'none\',\n    },\n    _selected: {\n      borderBottomColor: colorStyle.background.primary,\n      background: colorStyle.background.primary,\n      color: colorStyle.color.primary,\n      \'::before\': {\n        content: \'""\',\n        position: \'absolute\',\n        top: -1,\n        left: -1,\n        right: 0,\n        height: 3,\n        backgroundColor: \'#2cc185\',\n      },\n    },\n  };\n\n  return (\n    <Tab\n      variant="unstyled"\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Tabs>\n      <CustomTabList>\n        <CustomTab>\n          <FontAwesomeIcon icon="fa-solid fa-home" />\n          <Space width="2x" />\n          HOME\n        </CustomTab>\n        <CustomTab>\n          <FontAwesomeIcon icon="fa-solid fa-boxes" />\n          <Space width="2x" />\n          INVENTORY\n        </CustomTab>\n        <CustomTab>\n          <FontAwesomeIcon icon="fa-solid fa-cogs" />\n          <Space width="2x" />\n          SETTINGS\n        </CustomTab>\n      </CustomTabList>\n      <TabPanels px="4x" py="3x">\n        <TabPanel>\n          <Text color={colorStyle.color.secondary} fontSize="4rem" lineHeight="1">\n            1\n          </Text>\n        </TabPanel>\n        <TabPanel>\n          <Text color={colorStyle.color.secondary} fontSize="4rem" lineHeight="1">\n            2\n          </Text>\n        </TabPanel>\n        <TabPanel>\n          <Text color={colorStyle.color.secondary} fontSize="4rem" lineHeight="1">\n            3\n          </Text>\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h2",null,"Props"),(0,r.kt)("h3",null,"Tab"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," ({ getTabProps, disabled, index, variant }) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function child can be used intead of a React element. This function is called with the following props:",(0,r.kt)("br",null),"\u2022 The ",(0,r.kt)("inlineCode",{parentName:"td"},"getTabProps")," function returns the props for the tab.",(0,r.kt)("br",null),"\u2022 The ",(0,r.kt)("inlineCode",{parentName:"td"},"disabled")," prop indicates whether the tab is disabled.",(0,r.kt)("br",null),"\u2022 The ",(0,r.kt)("inlineCode",{parentName:"td"},"index")," prop is the index of the tab.",(0,r.kt)("br",null),"\u2022 The ",(0,r.kt)("inlineCode",{parentName:"td"},"variant")," prop is the variant of the tab.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the tab is disabled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"index"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number ","|"," string"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the tab. An index number starting from 0 will be provided if not specified.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onClick"),(0,r.kt)("td",{parentName:"tr",align:"left"},"(event) => void"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"A callback for when the tab is clicked.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The variant of the tab.")))),(0,r.kt)("h3",null,"Tabs"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," (context) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function child can be used intead of a React element. This function is called with the context object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"defaultIndex"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number ","|"," string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The default index of the tab to be selected in uncontrolled mode.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the tabs should be disabled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"index"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number ","|"," string"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the tab to be selected in controlled mode.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onChange"),(0,r.kt)("td",{parentName:"tr",align:"left"},"(index: number","|","string) => void"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"A callback function that is called when the index changes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'default'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The variant of the tabs. One of: 'default', 'filled', 'unstyled'")))),(0,r.kt)("h3",null,"TabList"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"aria-label"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"A label for the tab list.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("h3",null,"TabPanel"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," ({ getTabPanelProps, index, variant }) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function child can be used intead of a React element. This function is called with the following props:",(0,r.kt)("br",null),"\u2022 The ",(0,r.kt)("inlineCode",{parentName:"td"},"getTabPanelProps")," function returns the props for the tab panel.",(0,r.kt)("br",null),"\u2022 The ",(0,r.kt)("inlineCode",{parentName:"td"},"index")," prop is the index of the tab panel.",(0,r.kt)("br",null),"\u2022 The ",(0,r.kt)("inlineCode",{parentName:"td"},"variant")," prop is the variant of the tab panel.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"index"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number ","|"," string"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the tab panel. An index number starting from 0 will be provided if not specified.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The variant of the tab panel.")))),(0,r.kt)("h3",null,"TabPanels"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("h2",null,"Further Reading"),(0,r.kt)("h3",null,(0,r.kt)("a",{parentName:"h3",href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tab_role"},"ARIA: tab role")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This example combines the role ",(0,r.kt)("inlineCode",{parentName:"p"},"tab")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"tablist")," and elements with ",(0,r.kt)("inlineCode",{parentName:"p"},"tabpanel")," to create an interactive group of tabbed content. Here we are enclosing our group of content in a ",(0,r.kt)("inlineCode",{parentName:"p"},"div"),", with our ",(0,r.kt)("inlineCode",{parentName:"p"},"tablist")," having an ",(0,r.kt)("inlineCode",{parentName:"p"},"aria-label")," which labels it for assistive technology. Each ",(0,r.kt)("inlineCode",{parentName:"p"},"tab")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"button")," with the attributes previously mentioned. The first ",(0,r.kt)("inlineCode",{parentName:"p"},"tab")," has both ",(0,r.kt)("inlineCode",{parentName:"p"},'tabindex="0"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'aria-selected="true"')," applied. These two attributes must always be coordinated as such\u2014so when another tab is selected, it will then have ",(0,r.kt)("inlineCode",{parentName:"p"},'tabindex="0"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'aria-selected="true"')," applied. All unselected tabs must have ",(0,r.kt)("inlineCode",{parentName:"p"},'aria-selected="false"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'tabindex="-1"'),".",(0,r.kt)("br",null),(0,r.kt)("br",null),"\nAll of the ",(0,r.kt)("inlineCode",{parentName:"p"},"tabpanel")," elements have ",(0,r.kt)("inlineCode",{parentName:"p"},'tabindex="0"')," to make them tabbable, and all but the currently active one have the ",(0,r.kt)("inlineCode",{parentName:"p"},"hidden")," attribute. The ",(0,r.kt)("inlineCode",{parentName:"p"},"hidden")," attribute will be removed when a ",(0,r.kt)("inlineCode",{parentName:"p"},"tabpanel")," becomes visible with JavaScript. There is some basic styling applied that restyles the buttons and changes the ",(0,r.kt)("inlineCode",{parentName:"p"},"z-index")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"tab")," elements to give the illusion of it connecting to the ",(0,r.kt)("inlineCode",{parentName:"p"},"tabpanel")," for active elements, and the illusion that inactive elements are behind the active ",(0,r.kt)("inlineCode",{parentName:"p"},"tabpanel"),".",(0,r.kt)("br",null),(0,r.kt)("br",null)),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},'  <div class="tabs">\n    <div role="tablist" aria-label="Sample Tabs">\n      <button role="tab" aria-selected="true" aria-controls="panel-1" id="tab-1" tabindex="0">\n        First Tab\n      </button>\n      <button role="tab" aria-selected="false" aria-controls="panel-2" id="tab-2" tabindex="-1">\n        Second Tab\n      </button>\n      <button role="tab" aria-selected="false" aria-controls="panel-3" id="tab-3" tabindex="-1">\n        Third Tab\n      </button>\n    </div>\n    <div id="panel-1" role="tabpanel" tabindex="0" aria-labelledby="tab-1">\n      <p>Content for the first panel</p>\n    </div>\n    <div id="panel-2" role="tabpanel" tabindex="0" aria-labelledby="tab-2" hidden>\n      <p>Content for the second panel</p>\n    </div>\n    <div id="panel-3" role="tabpanel" tabindex="0" aria-labelledby="tab-3" hidden>\n      <p>Content for the third panel</p>\n    </div>\n  </div>\n'))),(0,r.kt)("h3",null,(0,r.kt)("a",{parentName:"h3",href:"https://www.w3.org/TR/wai-aria-practices/#tabpanel"},"WAI-ARIA Roles, States, and Properties")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The element that serves as the container for the set of tabs has role ",(0,r.kt)("inlineCode",{parentName:"li"},"tablist"),"."),(0,r.kt)("li",{parentName:"ul"},"Each element that serves as a tab has role ",(0,r.kt)("inlineCode",{parentName:"li"},"tab")," and is contained within the element with role ",(0,r.kt)("inlineCode",{parentName:"li"},"tablist"),"."),(0,r.kt)("li",{parentName:"ul"},"Each element that contains the content panel for a ",(0,r.kt)("inlineCode",{parentName:"li"},"tab")," has role ",(0,r.kt)("inlineCode",{parentName:"li"},"tabpanel"),"."),(0,r.kt)("li",{parentName:"ul"},"If the tab list has a visible label, the element with role ",(0,r.kt)("inlineCode",{parentName:"li"},"tablist")," has ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-labelledby")," set to a value that refers to the labelling element. Otherwise, the ",(0,r.kt)("inlineCode",{parentName:"li"},"tablist")," element has a label provided by ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-label"),"."),(0,r.kt)("li",{parentName:"ul"},"Each element with role ",(0,r.kt)("inlineCode",{parentName:"li"},"tab")," has the property ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-controls")," referring to its associated ",(0,r.kt)("inlineCode",{parentName:"li"},"tabpanel")," element."),(0,r.kt)("li",{parentName:"ul"},"The active ",(0,r.kt)("inlineCode",{parentName:"li"},"tab")," element has the state ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-selected")," set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," and all other ",(0,r.kt)("inlineCode",{parentName:"li"},"tab")," elements have it set to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,r.kt)("li",{parentName:"ul"},"Each element with role ",(0,r.kt)("inlineCode",{parentName:"li"},"tabpanel")," has the property ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-labelledby")," referring to its associated ",(0,r.kt)("inlineCode",{parentName:"li"},"tab")," element."),(0,r.kt)("li",{parentName:"ul"},"If a ",(0,r.kt)("inlineCode",{parentName:"li"},"tab")," element has a popup menu, it has the property ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-haspopup")," set to either ",(0,r.kt)("inlineCode",{parentName:"li"},"menu")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,r.kt)("li",{parentName:"ul"},"If the ",(0,r.kt)("inlineCode",{parentName:"li"},"tablist")," element is vertically oriented, it has the property ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-orientation")," set to ",(0,r.kt)("inlineCode",{parentName:"li"},"vertical"),". The default value of ",(0,r.kt)("inlineCode",{parentName:"li"},"aria-orientation")," for a ",(0,r.kt)("inlineCode",{parentName:"li"},"tablist")," element is ",(0,r.kt)("inlineCode",{parentName:"li"},"horizontal"),".")))}d.isMDXComponent=!0},39072:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/tabs",function(){return n(89889)}])}},function(e){e.O(0,[9774,2888,179],(function(){return t=39072,e(e.s=t);var t}));var t=e.O();_N_E=t}]);