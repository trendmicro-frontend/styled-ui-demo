(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7807],{57673:function(e,n,t){"use strict";t.d(n,{Z:function(){return T}});var r=t(98922),o=t(49427),l=t(5632),a=t(2784),i=t(79525),c=t(98485),d=t(71561),s=t(28214),u=t(66824),m=["size"];function f(){return(f=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var h=(0,a.forwardRef)(function(e,n){var t=e.size,o=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,m);return a.createElement(r.SVGIcon,f({size:t,viewBox:"0 0 1024 1024"},o),a.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});h.displayName="CodeSandboxIcon";var g=t(30462);function p(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,r,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],a=!0,i=!1;try{for(o=o.call(e);!(a=(t=o.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(i)throw r}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return b(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return b(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}var y={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},x=function(e){var n=e.component,t=e.code,m=(0,l.useRouter)(),f=p((0,a.useReducer)(function(e){return!e},!1),2),b=f[0],x=f[1],T=p((0,r.useColorMode)(),1)[0],w={dark:d.y,light:d.q}[T],v=p((0,o.useToggle)(!1),2),C=v[0],j=v[1],S=(0,c.Z)(t),R=S.onCopy,D=S.hasCopied,k=(0,a.useCallback)(function(){R()},[R]),P=(0,a.useCallback)(function(){(0,s.b)({title:"Tonic UI",code:t})},[t]),z=(0,a.useCallback)(function(){x(),j(!1)},[x,j]);return a.createElement(i.nu,{code:t,disabled:!0,language:"jsx",theme:w},a.createElement(r.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[T],p:"4x"},a.createElement(r.Box,{fontSize:"sm",lineHeight:"sm"},a.createElement(a.Fragment,{key:b},a.createElement(n,null)))),a.createElement(r.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},a.createElement(g.Z,{"data-track":C?"CodeBlock|hide_source|".concat((0,u.Z)({path:m.pathname})):"CodeBlock|show_source|".concat((0,u.Z)({path:m.pathname})),onClick:j},a.createElement(r.Tooltip,{label:C?"Hide the source":"Show the source"},a.createElement(r.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),a.createElement(g.Z,{"data-track":"CodeBlock|copy_source|".concat((0,u.Z)({path:m.pathname})),onClick:k},a.createElement(r.Tooltip,{label:D?"Copied":"Copy the source"},a.createElement(r.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),a.createElement(g.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(m.pathname),onClick:P},a.createElement(r.Tooltip,{label:"Edit in CodeSandbox"},a.createElement(h,{size:{sm:"5x",md:"4x"}}))),a.createElement(g.Z,{"data-track":"CodeBlock|reset|".concat(m.pathname),onClick:z},a.createElement(r.Tooltip,{label:"Reset the demo"},a.createElement(r.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),a.createElement(r.Fade,{in:C},a.createElement(r.Collapse,{in:C,unmountOnExit:!0},a.createElement(i.uz,{style:y}))))};x.displayName="Demo";var T=x},35237:function(e,n,t){"use strict";t.r(n);var r=t(95412),o=t(73705),l=t(98922),a=t(2784);function i(){return(i=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach(function(n){var r,o;r=e,o=t[n],n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function s(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}var u=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}];n.default=function(){var e,n={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[(function(e){if(Array.isArray(e))return e}(e=(0,l.useColorMode)())||function(e,n){var t,r,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],a=!0,i=!1;try{for(o=o.call(e);!(a=(t=o.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(i)throw r}}return l}}(e,1)||function(e,n){if(e){if("string"==typeof e)return s(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return s(e,n)}}(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]],t=(0,a.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),c=(0,r.b7)({data:u,columns:t,defaultColumn:{minSize:40},getCoreRowModel:(0,o.sC)()});return a.createElement(l.Table,{layout:"flexbox"},a.createElement(l.TableHeader,null,c.getHeaderGroups().map(function(e){return a.createElement(l.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=d({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return a.createElement(l.TableHeaderCell,i({key:e.id},n),e.isPlaceholder?null:a.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.header,e.getContext())))}))})),a.createElement(l.TableBody,null,c.getRowModel().rows.map(function(e){return a.createElement(l.TableRow,{key:e.id,_hover:{backgroundColor:n}},e.getVisibleCells().map(function(e){var n=d({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return a.createElement(l.TableCell,i({key:e.id},n),a.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.cell,e.getContext())))}))})))}},25066:function(e,n,t){"use strict";t.r(n);var r=t(95412),o=t(73705),l=t(98922),a=t(1582),i=t(2784),c=t(92843),d=t(20103),s=t(28846),u=t(52797);function m(){return(m=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function f(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function h(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?f(Object(t),!0).forEach(function(n){var r,o;r=e,o=t[n],n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):f(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function g(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,r,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],a=!0,i=!1;try{for(o=o.call(e);!(a=(t=o.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(i)throw r}}return l}}(e,n)||p(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,n){if(e){if("string"==typeof e)return b(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return b(e,n)}}function b(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}var y=function(e){var n=e.canDrag,t=e.canDrop,r=e.children,o=e.item,l=e.onDrop,a=g((0,c.c)({type:"column",item:o,canDrag:n,collect:function(e){return{isDragging:e.isDragging()}}}),3),i=a[0],s=a[1],u=a[2],m=g((0,d.L)({accept:"column",drop:l,canDrop:t,collect:function(e){return{isOver:e.isOver()}}}),2),f=m[0];return r({dragRef:s,dragPreviewRef:u,dropRef:m[1],isDragging:i.isDragging,isOver:f.isOver})};n.default=function(){var e=g((0,l.useColorMode)(),1)[0],n={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[e],t={dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"}[e],c=(0,i.useMemo)(function(){return[{id:1,priority:1,policy:"Team Managers",modifiedTime:16258752e5,modifiedBy:"admin"},{id:2,priority:2,policy:"Marketing Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:3,priority:3,policy:"Sales Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:4,priority:4,policy:"Development Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:5,priority:5,policy:"IT Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:6,priority:null,policy:"Server policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"},{id:7,priority:null,policy:"Endpoint policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"}]},[]),d=(0,i.useMemo)(function(){return[{id:"priority",header:"Priority",accessorKey:"priority",cell:function(e){var n=(0,e.getValue)();return null!=n?n:"-"},size:80},{id:"policy",header:"Policy",accessorKey:"policy",size:240},{id:"modifiedTime",header:"Last Modified",accessorKey:"modifiedTime",cell:function(e){var n=(0,e.getValue)(),t=new Date(n);return"Invalid Date"===t.toString()?"-":i.createElement(l.Truncate,null,t.toLocaleString())},size:180},{id:"modifiedBy",header:"Last Editor",accessorKey:"modifiedBy",size:150}]},[]),f=g((0,i.useState)(d.map(function(e){return e.id})),2),x=f[0],T=f[1],w=(0,r.b7)({data:c,columns:d,defaultColumn:{minSize:40},state:{columnOrder:x},onColumnOrderChange:T,getCoreRowModel:(0,o.sC)()}),v=function(e,n){var t=function(e){if(Array.isArray(e))return b(e)}(x)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(x)||p(x)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();t.splice(t.indexOf(n),0,t.splice(t.indexOf(e),1)[0]),console.log("# columnOrder:",x,t),T(t)};return i.createElement(s.W,{backend:u.PD},i.createElement(l.Table,{layout:"flexbox"},i.createElement(l.TableHeader,null,w.getHeaderGroups().map(function(e){return i.createElement(l.TableHeaderRow,{key:e.id},e.headers.map(function(e){return i.createElement(y,{key:e.id,item:function(){return e},onDrop:function(n,t){v(n.column.id,e.column.id)}},function(n){var o=n.dragRef,c=n.dragPreviewRef,d=n.dropRef,s=n.isDragging,u=n.isOver,f=h({opacity:s?.28:1,minWidth:e.column.columnDef.minSize,width:e.getSize(),_selected:{backgroundColor:t}},e.column.columnDef.style),g="priority"!==e.column.columnDef.id,p="priority"!==e.column.columnDef.id;return i.createElement(l.TableHeaderCell,m({ref:p?d:void 0,"data-selected":(0,a.dataAttr)(u)},f),i.createElement(l.Flex,{ref:c,alignItems:"center",columnGap:"2x"},e.isPlaceholder?null:i.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.header,e.getContext())),g&&i.createElement(l.ButtonBase,{ref:o,cursor:"move",display:"none",sx:{"*:hover > &":{display:"inline-flex"}}},i.createElement(l.Icon,{icon:"menu"}))))})}))})),i.createElement(l.TableBody,null,w.getRowModel().rows.map(function(e,t){return i.createElement(l.TableRow,{key:e.id,_hover:{backgroundColor:n}},e.getVisibleCells().map(function(e){var n=h({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return i.createElement(l.TableCell,m({key:e.id},n),i.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.cell,e.getContext())))}))}))))}},67758:function(e,n,t){"use strict";t.r(n);var r=t(95412),o=t(73705),l=t(98922),a=t(2784),i=["isResizing"];function c(){return(c=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach(function(n){var r,o;r=e,o=t[n],n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function u(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,r,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],a=!0,i=!1;try{for(o=o.call(e);!(a=(t=o.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(i)throw r}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return m(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return m(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}var f=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],h=(0,a.forwardRef)(function(e,n){var t=e.isResizing,r=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,i),o=u((0,l.useColorMode)(),1)[0],d={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[o],s={dark:"gray:50",light:"gray:70"}[o];return a.createElement(l.Box,c({boxSizing:"content-box",position:"absolute",right:0,top:0,height:"100%",width:"1x",cursor:"col-resize",userSelect:"none",touchAction:"none",backgroundColor:t?d:void 0,borderLeft:t?1:void 0,borderLeftColor:t?s:void 0,_hover:{backgroundColor:d,borderLeft:1,borderLeftColor:s}},r))});h.displayName="ColumnResizer",n.default=function(){var e=(0,a.useRef)(),n={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[u((0,l.useColorMode)(),1)[0]],t=u((0,a.useState)("onChange"),2),i=t[0],d=t[1],m=u((0,a.useState)(!1),2),g=m[0],p=m[1],b=(0,a.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",enableResizing:!0,size:240},{header:"Affected Devices",accessorKey:"affectedDevices",enableResizing:!0,size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",enableResizing:!0,size:150,style:{textAlign:"right"}}]},[]),y=(0,r.b7)({data:f,columns:b,defaultColumn:{minSize:40},columnResizeMode:i,getCoreRowModel:(0,o.sC)()});return a.createElement(a.Fragment,null,a.createElement(l.Box,{mb:"4x",px:"3x"},a.createElement(l.Menu,null,a.createElement(l.MenuButton,{variant:"secondary"},"Resize: ",i),a.createElement(l.MenuList,{onClick:function(e){d(e.target.value)},width:"max-content"},a.createElement(l.MenuItem,{value:"onChange"},"Resize: onChange"),a.createElement(l.MenuItem,{value:"onEnd"},"Resize: onEnd")))),a.createElement(l.Table,{ref:e,layout:"flexbox",variant:"outline"},a.createElement(l.TableHeader,{onMouseEnter:function(){return p(!0)},onMouseLeave:function(){return p(!1)}},y.getHeaderGroups().map(function(n){return a.createElement(l.TableHeaderRow,{key:n.id},n.headers.map(function(n){var t,o=s({minWidth:n.column.columnDef.minSize,width:n.getSize()},n.column.columnDef.style),d=y.getState().columnSizingInfo,u=d.isResizingColumn===n.column.id,m={height:g||u?null===(t=e.current)||void 0===t?void 0:t.clientHeight:void 0,transform:"onEnd"===i&&u?"translateX(".concat(d.deltaOffset,"px)"):void 0};return a.createElement(l.TableHeaderCell,c({key:n.id,position:"relative"},o),n.isPlaceholder?null:a.createElement(l.Truncate,null,(0,r.ie)(n.column.columnDef.header,n.getContext())),!1!==n.column.columnDef.enableResizing&&a.createElement(h,{isResizing:u,onMouseDown:n.getResizeHandler(),onTouchStart:n.getResizeHandler(),style:m}))}))})),a.createElement(l.TableBody,null,y.getRowModel().rows.map(function(e){return a.createElement(l.TableRow,{key:e.id,_hover:{backgroundColor:n}},e.getVisibleCells().map(function(e){var n=s({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return a.createElement(l.TableCell,c({key:e.id},n),a.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.cell,e.getContext())))}))}))))}},78839:function(e,n,t){"use strict";t.r(n);var r=t(95412),o=t(73705),l=t(98922),a=t(1582),i=t(2784);function c(){return(c=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach(function(n){var r,o;r=e,o=t[n],n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function u(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,r,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],a=!0,i=!1;try{for(o=o.call(e);!(a=(t=o.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(i)throw r}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return m(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return m(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}var f=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}];n.default=function(){var e=u((0,l.useColorMode)(),1)[0],n={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[e],t={dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"}[e],d=u((0,i.useState)({}),2),m=d[0],h=d[1],g=(0,i.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),p=(0,r.b7)({data:f,columns:g,defaultColumn:{minSize:40},state:{columnVisibility:m},onColumnVisibilityChange:h,getCoreRowModel:(0,o.sC)()});return i.createElement(i.Fragment,null,i.createElement(l.Box,{mb:"4x",px:"3x"},i.createElement(l.Flex,{display:"inline-flex",flexDirection:"column"},i.createElement(l.Checkbox,{checked:p.getIsAllColumnsVisible(),indeterminate:p.getIsSomeColumnsVisible()&&!p.getIsAllColumnsVisible(),onChange:p.getToggleAllColumnsVisibilityHandler()},"Toggle All"),i.createElement(l.Divider,{my:"2x"}),i.createElement(l.Stack,{spacing:"1x"},p.getAllLeafColumns().map(function(e){return i.createElement(i.Fragment,{key:e.id},i.createElement(l.Checkbox,{checked:e.getIsVisible(),onChange:e.getToggleVisibilityHandler()},e.columnDef.header))})))),i.createElement(l.Table,{layout:"flexbox"},i.createElement(l.TableHeader,null,p.getHeaderGroups().map(function(e){return i.createElement(l.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=s({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return i.createElement(l.TableHeaderCell,c({key:e.id},n),e.isPlaceholder?null:i.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.header,e.getContext())))}))})),i.createElement(l.TableBody,null,p.getRowModel().rows.map(function(e){return i.createElement(l.TableRow,{key:e.id,"data-selected":(0,a.dataAttr)(e.getIsSelected()),_hover:{backgroundColor:n},_selected:{backgroundColor:t}},e.getVisibleCells().map(function(e){var n=s({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return i.createElement(l.TableCell,c({key:e.id},n),i.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.cell,e.getContext())))}))}))))}},82483:function(e,n,t){"use strict";t.r(n);var r=t(95412),o=t(73705),l=t(98922),a=t(5081),i=t(76635),c=t.n(i),d=t(2784);function s(){return(s=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach(function(n){var r,o;r=e,o=t[n],n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function f(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,r,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],a=!0,i=!1;try{for(o=o.call(e);!(a=(t=o.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(i)throw r}}return l}}(e,n)||h(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,n){if(e){if("string"==typeof e)return g(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return g(e,n)}}function g(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}var p=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],b=c().range(360).map(function(e){var n=c().sampleSize(p,c().random(0,p.length)),t=new Date(Date.now()-c().random(0,2592e6));return{id:e+1,endpoint:"Endpoint ".concat(e+1),detections:n,lastSeen:t}}),y=function(e){var n=e.count,t=e.defaultPage,r=e.defaultRowsPerPage,o=e.onPageChange,i=e.onRowsPerPageChange,c=e.page,s=e.rowsPerPage,u=e.rowsPerPageOptions,m=void 0===u?[10,25,50,100]:u;e.showFirstButton,e.showLastButton;var h=f((0,l.useColorMode)(),1)[0],g=f((0,l.useColorStyle)({colorMode:h}),1)[0],p=null!=r?r:(0,a.rY)(m)[0],b=f((0,d.useState)(null!=c?c:void 0===t?1:t),2),y=b[0],x=b[1],T=f((0,d.useState)(null!=s?s:p),2),w=T[0],v=T[1];(0,d.useEffect)(function(){void 0!==c&&x(c)},[c]),(0,d.useEffect)(function(){void 0!==s&&v(s)},[s]);var C=(0,d.useCallback)(function(e){void 0!==c||x(e),"function"==typeof o&&o(e)},[c,o]),j=(0,d.useCallback)(function(e){void 0!==s||v(e),"function"==typeof i&&i(e)},[s,i]),S=Math.ceil(n/w);return d.createElement(l.Flex,{alignItems:"center",justifyContent:"flex-end",backgroundColor:g.background.secondary,px:"6x",py:"3x"},d.createElement(l.Text,{mr:"2x"},"Total: ",n),d.createElement(l.Divider,{orientation:"vertical",height:"6x"}),d.createElement(l.Menu,null,d.createElement(l.MenuButton,{variant:"ghost"},w," per page"),d.createElement(l.MenuList,{onClick:function(e){var n=(0,a.q9)(e.target.value);n>0&&(C(1),j(n))},width:"100%"},m.map(function(e){return d.createElement(l.MenuItem,{key:e,value:e},e)}))),d.createElement(l.Divider,{orientation:"vertical",height:"6x"}),d.createElement(l.Space,{width:"2x"}),d.createElement(l.Input,{width:"10x",px:0,textAlign:"center",onChange:function(e){var n=(0,a.q9)(e.target.value);n<=1?C(1):n>=S?C(S):C(n)},value:y}),d.createElement(l.Space,{width:"2x"}),d.createElement(l.Text,null,"/"),d.createElement(l.Space,{width:"2x"}),d.createElement(l.Text,null,S),d.createElement(l.Space,{width:"2x"}),d.createElement(l.ButtonGroup,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},d.createElement(l.Button,{width:"8x",disabled:!(y>1),onClick:function(e){C(y-1)}},d.createElement(l.Icon,{icon:"angle-left"})),d.createElement(l.Button,{width:"8x",disabled:!(y<S),onClick:function(e){C(y+1)}},d.createElement(l.Icon,{icon:"angle-right"}))))},x=function(e){var n=e.children,t=e.condition,r=e.wrapper;return t?r(n):n};n.default=function(){var e={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[f((0,l.useColorMode)(),1)[0]],n=(0,d.useMemo)(function(){return[{header:"Endpoint",accessorKey:"endpoint",size:200},{header:"Detections",accessorKey:"detections",cell:function(e){var n;return(function(e){if(Array.isArray(e))return g(e)}(n=(0,e.getValue)())||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||h(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).length},size:150},{header:"Last Seen",accessorKey:"lastSeen",cell:function(e){return(0,e.getValue)().toISOString()},size:200}]},[]),t=(0,r.b7)({data:b,columns:n,defaultColumn:{minSize:40},getCoreRowModel:(0,o.sC)(),getPaginationRowModel:(0,o.G_)()}),i=t.getState().pagination.pageIndex+1,c=t.getCoreRowModel().rows.length,u={};return u={height:452},d.createElement(d.Fragment,null,d.createElement(l.Box,{mb:"4x",px:"3x"},d.createElement(l.Text,null,"Current page: ",i)),d.createElement(l.Table,s({layout:"flexbox"},u),d.createElement(l.TableHeader,null,t.getHeaderGroups().map(function(e){return d.createElement(l.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=m({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return d.createElement(l.TableHeaderCell,s({key:e.id},n),e.isPlaceholder?null:d.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.header,e.getContext())))}))})),d.createElement(x,{condition:!0,wrapper:function(e){return d.createElement(l.TableScrollbar,{height:"100%",overflow:"visible"},e)}},d.createElement(l.TableBody,null,t.getRowModel().rows.map(function(n){return d.createElement(l.TableRow,{key:n.id,_hover:{backgroundColor:e}},n.getVisibleCells().map(function(e){var n=m({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return d.createElement(l.TableCell,s({key:e.id},n),d.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.cell,e.getContext())))}))}))),d.createElement(y,{count:c,onPageChange:function(e){var n=Math.max((0,a.q9)(e)-1,0);t.setPageIndex(n)},onRowsPerPageChange:function(e){var n=Math.max((0,a.q9)(e),1);t.setPageSize(n)}})))}},96370:function(e,n,t){"use strict";t.r(n);var r=t(95412),o=t(73705),l=t(98922),a=t(1582),i=t(2784),c=["isExpanded"];function d(){return(d=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach(function(n){var r,o;r=e,o=t[n],n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function m(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}var f=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],h=(0,i.forwardRef)(function(e,n){var t=e.isExpanded,r=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,c),o=t?Math.floor(93.1):133,s=a.transitionEasing.easeOut,u=t?(0,a.getEnterTransitionProps)({timeout:o,easing:s}):(0,a.getExitTransitionProps)({timeout:o,easing:s}),m={transform:t?"rotate(90deg)":"rotate(0deg)",transition:(0,a.createTransitionStyle)("transform",u)};return i.createElement(l.ButtonBase,r,i.createElement(l.Icon,d({icon:"angle-right",size:"4x"},m)))});h.displayName="TableRowToggleIcon",n.default=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,l.useColorMode)())||function(e,n){var t,r,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],a=!0,i=!1;try{for(o=o.call(e);!(a=(t=o.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(i)throw r}}return l}}(e,1)||function(e,n){if(e){if("string"==typeof e)return m(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return m(e,n)}}(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],t={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[n],c={dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"}[n],s=function(e){var t=e.row;return i.createElement(l.Flex,{borderBottom:1,borderBottomColor:{dark:"gray:70",light:"gray:30"}[n]},i.createElement(l.Box,{width:"12x",borderRight:2,borderRightColor:{dark:"gray:60",light:"gray:30"}[n]}),i.createElement(l.Box,{as:"pre",fontFamily:"mono",m:0,px:"3x",py:"2x"},JSON.stringify(t.original,null,2)))},g=(0,i.useMemo)(function(){return[{id:"expand",header:function(){return null},cell:function(e){var n=e.row,t=n.getCanExpand(),r=n.getIsExpanded();return t?i.createElement(h,{isExpanded:r,onClick:n.getToggleExpandedHandler()}):null},size:48},{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),p=(0,r.b7)({data:f,columns:g,defaultColumn:{minSize:40},getRowCanExpand:function(){return!0},getCoreRowModel:(0,o.sC)(),getExpandedRowModel:(0,o.rV)()});return i.createElement(l.Table,{layout:"flexbox"},i.createElement(l.TableHeader,null,p.getHeaderGroups().map(function(e){return i.createElement(l.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=u({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return i.createElement(l.TableHeaderCell,d({key:e.id},n),e.isPlaceholder?null:i.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.header,e.getContext())))}))})),i.createElement(l.TableBody,null,p.getRowModel().rows.map(function(e){return i.createElement(i.Fragment,{key:e.id},i.createElement(l.TableRow,{"data-selected":(0,a.dataAttr)(e.getIsExpanded()),_hover:{backgroundColor:t},_selected:{backgroundColor:c}},e.getVisibleCells().map(function(e){var n=u({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return i.createElement(l.TableCell,d({key:e.id},n),i.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.cell,e.getContext())))})),e.getCanExpand()&&i.createElement(l.Collapse,{in:e.getIsExpanded()},s({row:e})),e.getCanExpand()&&!1)})))}},56869:function(e,n,t){"use strict";t.r(n);var r=t(95412),o=t(73705),l=t(98922),a=t(1582),i=t(2784),c=t(92843),d=t(20103),s=t(28846),u=t(52797);function m(){return(m=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function f(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function h(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?f(Object(t),!0).forEach(function(n){var r,o;r=e,o=t[n],n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):f(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function g(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,r,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],a=!0,i=!1;try{for(o=o.call(e);!(a=(t=o.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(i)throw r}}return l}}(e,n)||p(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,n){if(e){if("string"==typeof e)return b(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return b(e,n)}}function b(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}var y=function(e){var n=e.canDrag,t=e.canDrop,r=e.children,o=e.item,l=e.onDrop,a=g((0,c.c)({type:"row",item:o,canDrag:n,collect:function(e){return{isDragging:e.isDragging()}}}),3),i=a[0],s=a[1],u=a[2],m=g((0,d.L)({accept:"row",drop:l,canDrop:t,collect:function(e){return{isOver:e.isOver()}}}),2),f=m[0];return r({dragRef:s,dragPreviewRef:u,dropRef:m[1],isDragging:i.isDragging,isOver:f.isOver})};n.default=function(){var e=g((0,l.useColorMode)(),1)[0],n={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[e],t={dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"}[e],c=(0,i.useMemo)(function(){return[{id:1,priority:1,policy:"Team Managers",modifiedTime:16258752e5,modifiedBy:"admin"},{id:2,priority:2,policy:"Marketing Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:3,priority:3,policy:"Sales Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:4,priority:4,policy:"Development Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:5,priority:5,policy:"IT Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:6,priority:null,policy:"Server policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"},{id:7,priority:null,policy:"Endpoint policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"}]},[]),d=g((0,i.useState)(c),2),f=d[0],x=d[1],T=(0,i.useMemo)(function(){return[{id:"priority",header:"Priority",accessorKey:"priority",cell:function(e){var n=(0,e.getValue)();return null!=n?n:"-"},size:80},{id:"policy",header:"Policy",accessorKey:"policy",size:240},{id:"modifiedTime",header:"Last Modified",accessorKey:"modifiedTime",cell:function(e){var n=(0,e.getValue)(),t=new Date(n);return"Invalid Date"===t.toString()?"-":i.createElement(l.Truncate,null,t.toLocaleString())},size:180},{id:"modifiedBy",header:"Last Editor",accessorKey:"modifiedBy",size:150}]},[]),w=(0,r.b7)({data:f,columns:T,defaultColumn:{minSize:40},getCoreRowModel:(0,o.sC)(),getRowId:function(e){return e.id}}),v=function(e,n){var t=function(e){if(Array.isArray(e))return b(e)}(f)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(f)||p(f)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),r=g(t.splice(e,1),1)[0];t.splice(n,0,r);var o,l=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=p(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var l,a=!0,i=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return a=e.done,e},e:function(e){i=!0,l=e},f:function(){try{a||null==t.return||t.return()}finally{if(i)throw l}}}}(t.entries());try{for(l.s();!(o=l.n()).done;){var a=g(o.value,2),i=a[0],c=a[1];if(!c.priority)break;c.priority=i+1}}catch(e){l.e(e)}finally{l.f()}x(t)};return i.createElement(s.W,{backend:u.PD},i.createElement(l.Table,{layout:"flexbox"},i.createElement(l.TableHeader,null,w.getHeaderGroups().map(function(e){return i.createElement(l.TableHeaderRow,{key:e.id},i.createElement(l.TableHeaderCell,{width:"10x"}),e.headers.map(function(e){var n=h({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return i.createElement(l.TableHeaderCell,m({key:e.id},n),e.isPlaceholder?null:i.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.header,e.getContext())))}))})),i.createElement(l.TableBody,null,w.getRowModel().rows.map(function(e,o){return i.createElement(y,{key:e.id,item:function(){return e},onDrop:function(n,t){v(n.index,e.index)}},function(o){var c=o.dragRef,d=o.dragPreviewRef,s=o.dropRef,u=o.isDragging,f=o.isOver,g=e.original.priority>0,p=e.original.priority>0;return i.createElement(l.TableRow,m({ref:p?s:void 0,"data-selected":(0,a.dataAttr)(f)},{opacity:u?.28:1,_hover:{backgroundColor:n},_selected:{backgroundColor:t}}),i.createElement(l.TableCell,{width:"10x"},g&&i.createElement(l.ButtonBase,{ref:c,cursor:"move"},i.createElement(l.Icon,{ref:d,icon:"menu"}))),e.getVisibleCells().map(function(e){var n=h({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return i.createElement(l.TableCell,m({key:e.id},n),i.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.cell,e.getContext())))}))})}))))}},17228:function(e,n,t){"use strict";t.r(n);var r=t(95412),o=t(73705),l=t(98922),a=t(1582),i=t(2784);function c(){return(c=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach(function(n){var r,o;r=e,o=t[n],n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function u(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,r,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],a=!0,i=!1;try{for(o=o.call(e);!(a=(t=o.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(i)throw r}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return m(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return m(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}var f=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}];n.default=function(){var e=u((0,l.useColorMode)(),1)[0],n={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[e],t={dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"}[e],d=u((0,i.useState)({}),2),m=d[0],h=d[1],g=(0,i.useMemo)(function(){return[{id:"select",header:function(e){var n=e.table;return i.createElement(l.Flex,{height:"100%",alignItems:"center"},i.createElement(l.Checkbox,{checked:n.getIsAllRowsSelected(),indeterminate:n.getIsSomeRowsSelected(),onChange:n.getToggleAllRowsSelectedHandler()}))},cell:function(e){var n=e.row;return i.createElement(l.Flex,{height:"100%",alignItems:"center"},i.createElement(l.Checkbox,{checked:n.getIsSelected(),disabled:!n.getCanSelect(),indeterminate:n.getIsSomeSelected(),onChange:n.getToggleSelectedHandler()}))},size:40},{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),p=(0,r.b7)({data:f,columns:g,defaultColumn:{minSize:40},state:{rowSelection:m},enableRowSelection:!0,onRowSelectionChange:h,getCoreRowModel:(0,o.sC)()}),b=Object.keys(m).length;return i.createElement(i.Fragment,null,i.createElement(l.Box,{mb:"4x",px:"3x"},i.createElement(l.Text,null,b," selected")),i.createElement(l.Table,{layout:"flexbox"},i.createElement(l.TableHeader,null,p.getHeaderGroups().map(function(e){return i.createElement(l.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=s({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return i.createElement(l.TableHeaderCell,c({key:e.id},n),e.isPlaceholder?null:i.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.header,e.getContext())))}))})),i.createElement(l.TableBody,null,p.getRowModel().rows.map(function(e){return i.createElement(l.TableRow,{key:e.id,"data-selected":(0,a.dataAttr)(e.getIsSelected()),_hover:{backgroundColor:n},_selected:{backgroundColor:t}},e.getVisibleCells().map(function(e){var n=s({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return i.createElement(l.TableCell,c({key:e.id},n),i.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.cell,e.getContext())))}))}))))}},45429:function(e,n,t){"use strict";t.r(n);var r=t(95412),o=t(73705),l=t(98922),a=t(49427),i=t(2784);function c(){return(c=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach(function(n){var r,o;r=e,o=t[n],n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function u(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,r,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],a=!0,i=!1;try{for(o=o.call(e);!(a=(t=o.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(i)throw r}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return m(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return m(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}var f=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}];n.default=function(){var e=u((0,l.useColorMode)(),1)[0],n=u((0,l.useColorStyle)({colorMode:e}),1)[0],t={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[e],d=u((0,i.useState)([{id:"eventType",desc:!1}]),2),m=d[0],h=d[1],g=u((0,a.useToggle)(!1),2),p=g[0],b=g[1];(0,i.useEffect)(function(){p&&h([])},[p]);var y=(0,i.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),x=(0,r.b7)({data:f,columns:y,defaultColumn:{minSize:40},state:{sorting:m},enableSorting:!0,enableSortingRemoval:p,getCoreRowModel:(0,o.sC)(),getSortedRowModel:(0,o.tj)(),onSortingChange:function(e){h(e)}}),T=i.createElement(l.Box,{p:"1x"},i.createElement(l.Text,null,"If ",i.createElement(l.Code,null,"true")," then changing sort order will circle like: `none` → `desc` → `asc` → `none` → ..."),i.createElement(l.Text,null,"If ",i.createElement(l.Code,null,"false")," then changing sort order will circle like: `none` → `desc` → `asc` → `desc` → `asc` → ..."));return i.createElement(i.Fragment,null,i.createElement(l.Box,{mb:"4x",px:"3x"},i.createElement(l.Checkbox,{checked:p,onChange:function(){b()}},i.createElement(l.Flex,{alignItems:"center"},"Enables/Disables the ability to remove sorting for the table",i.createElement(l.Space,{width:"2x"}),i.createElement(l.Tooltip,{label:"dark"===e?i.createElement(l.LightMode,null,T):i.createElement(l.DarkMode,null,T)},i.createElement(l.Icon,{icon:"info-o"}))))),i.createElement(l.Table,{layout:"flexbox"},i.createElement(l.TableHeader,null,x.getHeaderGroups().map(function(e){return i.createElement(l.TableHeaderRow,{key:e.id},e.headers.map(function(e){var o,a=s({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return e.column.getCanSort()&&(a=s(s({},a),{},{cursor:"pointer",userSelect:"none",_hover:{backgroundColor:t}})),e.column.getIsSorted()&&(a=s(s({},a),{},{color:n.color.emphasis})),i.createElement(l.TableHeaderCell,c({key:e.id,onClick:e.column.getToggleSortingHandler()},a),e.isPlaceholder?null:i.createElement(l.Flex,{alignItems:"center"},i.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.header,e.getContext())),null!==(o=({asc:i.createElement(l.Icon,{icon:"sort-up",size:20,ml:"1x"}),desc:i.createElement(l.Icon,{icon:"sort-down",size:20,ml:"1x"})})[e.column.getIsSorted()])&&void 0!==o?o:null))}))})),i.createElement(l.TableBody,null,x.getRowModel().rows.map(function(e){return i.createElement(l.TableRow,{key:e.id,_hover:{backgroundColor:t}},e.getVisibleCells().map(function(e){var n=s({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return i.createElement(l.TableCell,c({key:e.id},n),i.createElement(l.Truncate,null,(0,r.ie)(e.column.columnDef.cell,e.getContext())))}))}))))}},81306:function(e,n,t){"use strict";t.r(n);var r=t(95412),o=t(73705),l=t(88510),a=t(98922),i=t(76635),c=t.n(i),d=t(2784);function s(){return(s=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach(function(n){var r,o;r=e,o=t[n],n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function f(e,n){if(e){if("string"==typeof e)return h(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return h(e,n)}}function h(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}var g=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],p=c().range(360).map(function(e){var n=c().sampleSize(g,c().random(0,g.length)),t=new Date(Date.now()-c().random(0,2592e6));return{id:e+1,endpoint:"Endpoint ".concat(e+1),detections:n,lastSeen:t}});n.default=function(){var e,n={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[(function(e){if(Array.isArray(e))return e}(e=(0,a.useColorMode)())||function(e,n){var t,r,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],a=!0,i=!1;try{for(o=o.call(e);!(a=(t=o.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(i)throw r}}return l}}(e,1)||f(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]],t=(0,d.useMemo)(function(){return[{header:"Endpoint",accessorKey:"endpoint",size:200},{header:"Detections",accessorKey:"detections",cell:function(e){var n;return(function(e){if(Array.isArray(e))return h(e)}(n=(0,e.getValue)())||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||f(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).length},size:100},{header:"Last Seen",accessorKey:"lastSeen",cell:function(e){return(0,e.getValue)().toISOString()},size:200}]},[]),i=(0,r.b7)({data:p,columns:t,defaultColumn:{minSize:40},getCoreRowModel:(0,o.sC)()}),c=(0,d.useRef)(),u=(0,l.MG)({count:i.getRowModel().rows.length,getScrollElement:function(){var e;return null===(e=c.current)||void 0===e?void 0:e.firstChild},estimateSize:function(e){return 36},overscan:10});return d.createElement(d.Fragment,null,d.createElement(a.Box,{mb:"4x",px:"3x"},d.createElement(a.Text,null,"Total: ",i.getRowModel().rows.length)),d.createElement(a.Table,s({layout:"flexbox"},{height:396}),d.createElement(a.TableHeader,null,i.getHeaderGroups().map(function(e){return d.createElement(a.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=m({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return d.createElement(a.TableHeaderCell,s({key:e.id},n),e.isPlaceholder?null:d.createElement(a.Truncate,null,(0,r.ie)(e.column.columnDef.header,e.getContext())))}))})),d.createElement(a.TableScrollbar,{ref:c,height:"100%",overflow:"visible"},d.createElement(a.Box,{position:"relative",width:"100%",style:{height:u.getTotalSize()}},d.createElement(a.TableBody,null,u.getVirtualItems().map(function(e){var t=i.getRowModel().rows[e.index];return d.createElement(a.Box,{key:e.key,position:"absolute",top:0,left:0,width:"100%",style:{height:"".concat(e.size,"px"),transform:"translateY(".concat(e.start,"px)")}},t&&d.createElement(a.TableRow,{_hover:{backgroundColor:n}},t.getVisibleCells().map(function(e){var n=m({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return d.createElement(a.TableCell,s({key:e.id},n),d.createElement(a.Truncate,null,(0,r.ie)(e.column.columnDef.cell,e.getContext())))})))}))))))}},25264:function(e,n,t){"use strict";t.r(n);var r=t(52322),o=t(45392),l=t(57673),a=t(81306),i=t(45429),c=t(17228),d=t(56869),s=t(96370),u=t(82483),m=t(78839),f=t(67758),h=t(25066),g=t(92326),p=t(35237),b=t(46326);function y(e){var n=Object.assign({div:"div",h1:"h1",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",code:"code",p:"p",h3:"h3",ol:"ol",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,o.ah)(),e.components);return(0,r.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,r.jsx)(n.h1,{id:"table",children:"Table"}),"\n",(0,r.jsxs)(n.h2,{id:"import",children:["Import",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import {\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n} from '@tonic-ui/react';\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"usage",children:["Usage",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(l.Z,{code:"import {\n  Box,\n  Button, \n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { callAll } from '@tonic-ui/utils';\nimport React, { useMemo, useReducer, useRef, useState } from 'react';\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst columns = [\n  {\n    id: 'priority',\n    header: 'Priority',\n    accessorKey: 'priority',\n    cell: (row) => row.priority ?? '-',\n    size: 80,\n  },\n  {\n    id: 'policy',\n    header: 'Policy',\n    accessorKey: 'policy',\n    size: 240,\n  },\n  {\n    id: 'modifiedTime',\n    header: 'Last Modified',\n    cell: (row) => {\n      const mtime = new Date(row.modifiedTime);\n      return (\n        <Truncate>\n          {mtime.toLocaleString()}\n        </Truncate>\n      );\n    },\n    size: 180,\n  },\n  {\n    id: 'modifiedBy',\n    header: 'Last Editor',\n    accessorKey: 'modifiedBy',\n    size: 150,\n  },\n];\n\nconst data = [\n  { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n];\n\nconst FormGroup = (props) => (\n  <Box mb=\"4x\" {...props} />\n);\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const [updateKey, forceUpdate] = useReducer((value) => !value, false);\n  const [layout, changeLayoutBy] = useSelection('flexbox');\n  const [variant, changeVariantBy] = useSelection('default');\n  const [size, changeSizeBy] = useSelection('md');\n  const [isTableHeaderVisible, toggleIsTableHeaderVisible] = useToggle(true);\n  const [isTableBodyVisible, toggleIsTableBodyVisible] = useToggle(true);\n  const [isTableScrollbarVisible, toggleIsTableScrollbarVisible] = useToggle(true);\n  const rows = useMemo(() => {\n    return data.map((row, rowIndex) => {\n      return {\n        id: rowIndex,\n        cells: columns.map((column, columnIndex) => {\n          return {\n            id: `${columnIndex}_${column.id}`,\n            column,\n            row,\n          };\n        }),\n        row,\n      };\n    });\n  }, []);\n  const tableHeaderRef = useRef();\n  const onScrollTableBody = (e) => {\n    const tableHeader = tableHeaderRef?.current;\n    if (!tableHeader) {\n      return;\n    }\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    const scrollLeft = e.target.scrollLeft;\n    if (tableHeader.scrollleft !== scrollLeft) {\n      tableHeader.scrollLeft = scrollLeft;\n    }\n  };\n  const isTableScrollingEnabled = isTableScrollbarVisible && layout !== 'table';\n  let tableStyleProps = {};\n  let tableHeaderStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const cellHeight = 36;\n    const headerHeight = 36;\n    const rowsToDisplay = 5;\n\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight,\n      // Uncomment the following line to specify the width and enable horizontal scrollbar\n      // width: 200,\n    };\n\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    tableHeaderStyleProps = {\n      overflow: 'hidden',\n    };\n  }\n\n  return (\n    <>\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            layout\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['flexbox', 'table'].map(value => (\n            <Button\n              key={value}\n              selected={value === layout}\n              onClick={callAll(\n                changeLayoutBy(value),\n                (event) => {\n                  if (value === 'table') {\n                    toggleIsTableScrollbarVisible(false);\n                  }\n                },\n              )}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            variant\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['default', 'outline'].map(value => (\n            <Button\n              key={value}\n              selected={value === variant}\n              onClick={changeVariantBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['sm', 'md', 'lg'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableHeaderVisible}\n            onChange={() => toggleIsTableHeaderVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableBodyVisible}\n            onChange={() => toggleIsTableBodyVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\" mb=\"3x\">\n          <Checkbox\n            checked={isTableScrollbarVisible}\n            disabled={layout === 'table'}\n            onChange={() => {\n              toggleIsTableScrollbarVisible();\n\n              // Force update to recalculate table width and height\n              forceUpdate();\n            }}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableScrollbar</Text>\n        </TextLabel>\n        <Box ml=\"6x\" mb=\"4x\">\n          <Text mb=\"2x\" color={colorStyle.color.secondary}>\n            Note: <Code>TableScrollbar</Code> is only supported when the <Code>layout</Code> prop is set to <Code>flexbox</Code>.\n          </Text>\n        </Box>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Flex alignItems=\"center\" columnGap=\"3x\" minHeight=\"5x\">\n        <Table\n          key={updateKey}\n          layout={layout}\n          variant={variant}\n          size={size}\n          {...tableStyleProps}\n        >\n          {isTableHeaderVisible && (\n            <TableHeader\n              ref={tableHeaderRef}\n              {...tableHeaderStyleProps}\n            >\n              <TableHeaderRow>\n                {columns.map(column => {\n                  const styleProps = {\n                    flex: 'none',\n                    width: column.size,\n                    ...column.style,\n                  };\n                  return (\n                    <TableHeaderCell key={column.id} {...styleProps}>\n                      <Truncate>\n                        {column.header}\n                      </Truncate>\n                    </TableHeaderCell>\n                  );\n                })}\n              </TableHeaderRow>\n            </TableHeader>\n          )}\n          {isTableBodyVisible && (\n            <ConditionalWrapper\n              condition={isTableScrollingEnabled}\n              wrapper={children => (\n                <TableScrollbar\n                  height=\"100%\"\n                  overflow=\"visible\" // Make the scrollbar visible\n                  onScroll={onScrollTableBody} // To sync the scroll position of the table header and table body for horizontal scrolling\n                >\n                  {children}\n                </TableScrollbar>\n              )}\n            >\n              <TableBody>\n                {rows.map(row => {\n                  const styleProps = {\n                    _hover: {\n                      backgroundColor: hoverBackgroundColor,\n                    },\n                  };\n                  return (\n                    <TableRow key={row.id} {...styleProps}>\n                      {row.cells.map((cell, cellIndex) => {\n                        const styleProps = {\n                          flex: 'none',\n                          width: cell.column.size,\n                          ...cell.column.style,\n                        };\n                        return (\n                          <TableCell key={cell.id} {...styleProps}>\n                            {typeof cell.column.cell === 'function'\n                              ? cell.column.cell(row.row)\n                              : <Truncate>{cell.row[cell.column.accessorKey]}</Truncate>\n                            }\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </ConditionalWrapper>\n          )}\n        </Table>\n      </Flex>\n    </>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;",component:b.default}),"\n",(0,r.jsxs)(n.h2,{id:"examples",children:["Examples",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#examples",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["In this section, we'll explore how to use the ",(0,r.jsx)(n.code,{children:"Table"})," component and various Hooks provided by ",(0,r.jsx)(n.code,{children:"react-table"})," to create tables with features such as sorting, filtering, pagination, and selection."]}),"\n",(0,r.jsxs)(n.p,{children:["To get started with ",(0,r.jsx)(n.code,{children:"react-table"}),", visit ",(0,r.jsx)(n.a,{href:"https://github.com/TanStack/table",children:"https://github.com/TanStack/table"})," to learn more."]}),"\n",(0,r.jsxs)(n.h3,{id:"basic",children:["Basic",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(l.Z,{code:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React, { useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  // If you want to manage your own state and override the state manager, you can uncomment and modify the following code:\n  /*\n  const [state, setState] = React.useState(table.initialState);\n  table.setOptions(prevOptions => ({\n    ...prevOptions,\n    state,\n    onStateChange: setState,\n  }));\n  */\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableHeaderRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableHeaderCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableHeaderCell>\n              );\n            })}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <TableRow\n            key={row.id}\n            _hover={{\n              backgroundColor: hoverBackgroundColor,\n            }}\n          >\n            {row.getVisibleCells().map(cell => {\n              const styleProps = {\n                minWidth: cell.column.columnDef.minSize,\n                width: cell.column.getSize(),\n                ...cell.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={cell.id}\n                  {...styleProps}\n                >\n                  <Truncate>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Truncate>\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default App;",component:p.default}),"\n",(0,r.jsxs)(n.h3,{id:"column-auto-sizing",children:["Column auto sizing",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-auto-sizing",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(l.Z,{code:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TextLabel,\n  Truncate,\n  useColorMode,\n  useTheme,\n} from '@tonic-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n\n  const [columns, setColumns] = useState([\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 'auto',\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: '25%',\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n    const getColumnHeaderTextWidth = (text) => getTextWidth(text, tableHeaderCellFont);\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = getColumnHeaderTextWidth(columnDef.header);\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = getColumnHeaderTextWidth(columnDef.header);\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n\n  return (\n    <Box width=\"100%\">\n      {columns.map((column, columnIndex) => (\n        <Box mb=\"4x\" key={columnIndex}>\n          <Box mb=\"2x\">\n            <TextLabel>\n              {column.header}\n            </TextLabel>\n          </Box>\n          <ButtonGroup\n            variant=\"secondary\"\n            css={{\n              '> *:not(:first-of-type)': {\n                marginLeft: -1\n              }\n            }}\n          >\n            {['auto', '25%', 150].map(value => (\n              <Button\n                key={value}\n                selected={value === columns[columnIndex].size}\n                onClick={() => {\n                  const newColumns = [\n                    ...columns.slice(0, columnIndex),\n                    {\n                      ...columns[columnIndex],\n                      size: value,\n                    },\n                    ...columns.slice(columnIndex + 1),\n                  ];\n                  setColumns(newColumns);\n                }}\n                minWidth=\"15x\"\n              >\n                {value}\n              </Button>\n            ))}\n          </ButtonGroup>\n        </Box>\n      ))}\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            variant={variant}\n            width={width}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n\n                    return (\n                      <TableHeaderCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Truncate>\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                          </Truncate>\n                        )}\n                      </TableHeaderCell>\n                    );\n                  })}\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  _hover={{\n                    backgroundColor: hoverBackgroundColor,\n                  }}\n                >\n                  {row.getVisibleCells().map(cell => {\n                    const styleProps = {\n                      minWidth: cell.column.columnDef.minSize,\n                      width: cell.column.getSize(),\n                      ...cell.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        {...styleProps}\n                      >\n                        <Truncate>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Truncate>\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </Box>\n  );\n};\n\nexport default App;",component:g.default}),"\n",(0,r.jsxs)(n.h3,{id:"column-ordering-dnd",children:["Column ordering (DnD)",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-ordering-dnd",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(l.Z,{code:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  ButtonBase,\n  Flex,\n  Icon,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorMode,\n} from '@tonic-ui/react';\nimport {\n  dataAttr,\n} from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nconst DraggableColumn = ({\n  canDrag: canDragProp,\n  canDrop: canDropProp,\n  children,\n  item: itemProp,\n  onDrop: onDropProp,\n}) => {\n  // https://react-dnd.github.io/react-dnd/docs/api/use-drag\n  const [collectedDragProps, dragRef, dragPreviewRef] = useDrag({\n    type: 'column',\n    item: itemProp,\n    canDrag: canDragProp,\n    collect: (monitor) => {\n      // DragSourceMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor\n      return {\n        isDragging: monitor.isDragging(),\n      };\n    },\n  })\n\n  // https://react-dnd.github.io/react-dnd/docs/api/use-drop\n  const [collectedDropProps, dropRef] = useDrop({\n    accept: 'column',\n    drop: onDropProp,\n    canDrop: canDropProp,\n    collect: (monitor) => {\n      // DropTargetMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor\n      return {\n        isOver: monitor.isOver(),\n      };\n    }\n  })\n\n  return children({\n    dragRef,\n    dragPreviewRef,\n    dropRef,\n    isDragging: collectedDragProps.isDragging,\n    isOver: collectedDropProps.isOver,\n  });\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const selectedBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.08)',\n    light: 'rgba(0, 0, 0, 0.08)',\n  }[colorMode];\n\n  const data = useMemo(() => [\n    { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n    { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  ], []);\n  const columns = useMemo(() => [\n    {\n      id: 'priority',\n      header: 'Priority',\n      accessorKey: 'priority',\n      cell: ({ getValue }) => {\n        const priority = getValue();\n        return priority ?? '-';\n      },\n      size: 80,\n    },\n    {\n      id: 'policy',\n      header: 'Policy',\n      accessorKey: 'policy',\n      size: 240,\n    },\n    {\n      id: 'modifiedTime',\n      header: 'Last Modified',\n      accessorKey: 'modifiedTime',\n      cell: ({ getValue }) => {\n        const mtime = getValue();\n        const date = new Date(mtime);\n        if (date.toString() === 'Invalid Date') {\n          return '-';\n        }\n        return (\n          <Truncate>\n            {date.toLocaleString()}\n          </Truncate>\n        );\n      },\n      size: 180,\n    },\n    {\n      id: 'modifiedBy',\n      header: 'Last Editor',\n      accessorKey: 'modifiedBy',\n      size: 150,\n    },\n  ], []);\n\n  const [columnOrder, setColumnOrder] = useState(columns.map(column => column.id));\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnOrder,\n    },\n    onColumnOrderChange: setColumnOrder,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const moveColumn = (draggedColumnId, targetColumnId) => {\n    const newColumnOrder = [...columnOrder];\n    newColumnOrder.splice(\n      newColumnOrder.indexOf(targetColumnId),\n      0,\n      newColumnOrder.splice(newColumnOrder.indexOf(draggedColumnId), 1)[0],\n    );\n    console.log('# columnOrder:', columnOrder, newColumnOrder);\n    setColumnOrder(newColumnOrder);\n  };\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                return (\n                  <DraggableColumn\n                    key={header.id}\n                    item={() => header}\n                    onDrop={(item, monitor) => {\n                      const draggedColumnId = item.column.id;\n                      const targetColumnId = header.column.id;\n                      moveColumn(draggedColumnId, targetColumnId);\n                    }}\n                  >\n                    {({\n                      dragRef,\n                      dragPreviewRef,\n                      dropRef,\n                      isDragging,\n                      isOver,\n                    }) => {\n                      const styleProps = {\n                        opacity: isDragging ? 0.28 : 1,\n                        minWidth: header.column.columnDef.minSize,\n                        width: header.getSize(),\n                        _selected: {\n                          backgroundColor: selectedBackgroundColor,\n                        },\n                        ...header.column.columnDef.style,\n                      };\n                      const canDrag = header.column.columnDef.id !== 'priority';\n                      const canDrop = header.column.columnDef.id !== 'priority';\n                      return (\n                        <TableHeaderCell\n                          ref={canDrop ? dropRef : undefined}\n                          data-selected={dataAttr(isOver)}\n                          {...styleProps}\n                        >\n                          <Flex\n                            ref={dragPreviewRef}\n                            alignItems=\"center\"\n                            columnGap=\"2x\"\n                          >\n                            {header.isPlaceholder ? null : (\n                              <Truncate>\n                                {flexRender(header.column.columnDef.header, header.getContext())}\n                              </Truncate>\n                            )}\n                            {canDrag && (\n                              <ButtonBase\n                                ref={dragRef}\n                                cursor=\"move\"\n                                display=\"none\"\n                                sx={{\n                                  '*:hover > &': {\n                                    display: 'inline-flex',\n                                  },\n                                }}\n                              >\n                                <Icon icon=\"menu\" />\n                              </ButtonBase>\n                            )}\n                          </Flex>\n                        </TableHeaderCell>\n                      );\n                    }}\n                  </DraggableColumn>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map((row, index) => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: hoverBackgroundColor,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </DndProvider>\n  );\n};\n\nexport default App;",component:h.default}),"\n",(0,r.jsxs)(n.h3,{id:"column-resizing",children:["Column resizing",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-resizing",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(l.Z,{code:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React, { forwardRef, useMemo, useRef, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const tableRef = useRef();\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n\n  const [columnResizeMode, setColumnResizeMode] = useState('onChange');\n  const [isHoveringOnTableHeader, setIsHoveringOnTableHeader] = useState(false);\n\n  // https://tanstack.com/table/v8/docs/api/features/column-sizing#column-def-options\n  //\n  // ```\n  // enableResizing?: boolean\n  // ```\n  // Enables or disables column resizing for the column\n  //\n  // ```\n  // size?: number\n  // ```\n  // The desired size for the column\n  //\n  // ```\n  // minSize?: number\n  // ```\n  // The minimum allowed size for the column\n  //\n  // ```\n  // maxSize?: number\n  // ```\n  // The maximum allowed size for the column\n  //\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      enableResizing: true,\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    columnResizeMode,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'outline'; // One of: 'default', 'outline'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Menu>\n          <MenuButton variant=\"secondary\">\n            Resize: {columnResizeMode}\n          </MenuButton>\n          <MenuList\n            onClick={(event) => {\n              const value = event.target.value;\n              setColumnResizeMode(value);\n            }}\n            width=\"max-content\"\n          >\n            <MenuItem value=\"onChange\">\n              Resize: onChange\n            </MenuItem>\n            <MenuItem value=\"onEnd\">\n              Resize: onEnd\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </Box>\n      <Table\n        ref={tableRef}\n        layout={layout}\n        variant={variant}\n      >\n        <TableHeader\n          onMouseEnter={() => setIsHoveringOnTableHeader(true)}\n          onMouseLeave={() => setIsHoveringOnTableHeader(false)}\n        >\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                const columnSizingInfo = table.getState().columnSizingInfo;\n                const isResizing = (columnSizingInfo.isResizingColumn === header.column.id);\n                const columnResizerStyle = {\n                  height: (isHoveringOnTableHeader || isResizing)\n                    ? tableRef.current?.clientHeight\n                    : undefined,\n                  transform: (columnResizeMode === 'onEnd' && isResizing)\n                    ? `translateX(${columnSizingInfo.deltaOffset}px)`\n                    : undefined,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    position=\"relative\"\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                    {(header.column.columnDef.enableResizing !== false) && (\n                      <ColumnResizer\n                        isResizing={isResizing}\n                        onMouseDown={header.getResizeHandler()}\n                        onTouchStart={header.getResizeHandler()}\n                        style={columnResizerStyle}\n                      />\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: hoverBackgroundColor,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nconst ColumnResizer = forwardRef((\n  {\n    isResizing,\n    ...rest\n  },\n  ref,\n) => {\n  const [colorMode] = useColorMode();\n  const resizerBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const resizerBorderColor = {\n    dark: 'gray:50',\n    light: 'gray:70',\n  }[colorMode];\n\n  return (\n    <Box\n      boxSizing=\"content-box\"\n      position=\"absolute\"\n      right={0}\n      top={0}\n      height=\"100%\"\n      width=\"1x\"\n      cursor=\"col-resize\"\n      userSelect=\"none\"\n      touchAction=\"none\"\n      backgroundColor={isResizing ? resizerBackgroundColor : undefined}\n      borderLeft={isResizing ? 1 : undefined}\n      borderLeftColor={isResizing ? resizerBorderColor : undefined}\n      _hover={{\n        backgroundColor: resizerBackgroundColor,\n        borderLeft: 1,\n        borderLeftColor: resizerBorderColor,\n      }}\n      {...rest}\n    />\n  );\n});\nColumnResizer.displayName = 'ColumnResizer';\n\nexport default App;",component:f.default}),"\n",(0,r.jsxs)(n.h3,{id:"column-visibility",children:["Column visibility",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-visibility",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(l.Z,{code:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Divider,\n  Flex,\n  Stack,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorMode,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { Fragment, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const selectedBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.08)',\n    light: 'rgba(0, 0, 0, 0.08)',\n  }[colorMode];\n\n  const [columnVisibility, setColumnVisibility] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Flex\n          display=\"inline-flex\"\n          flexDirection=\"column\"\n        >\n          <Checkbox\n            checked={table.getIsAllColumnsVisible()}\n            indeterminate={table.getIsSomeColumnsVisible() && !table.getIsAllColumnsVisible()}\n            onChange={table.getToggleAllColumnsVisibilityHandler()}\n          >\n            Toggle All\n          </Checkbox>\n          <Divider my=\"2x\" />\n          <Stack spacing=\"1x\">\n            {table.getAllLeafColumns().map(column => {\n              return (\n                <Fragment key={column.id}>\n                  <Checkbox\n                    checked={column.getIsVisible()}\n                    onChange={column.getToggleVisibilityHandler()}\n                  >\n                    {column.columnDef.header}\n                  </Checkbox>\n                </Fragment>\n              );\n            })}\n          </Stack>\n        </Flex>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: hoverBackgroundColor,\n              }}\n              _selected={{\n                backgroundColor: selectedBackgroundColor,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",component:m.default}),"\n",(0,r.jsxs)(n.h3,{id:"pagination",children:["Pagination",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#pagination",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(l.Z,{code:"import {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Icon,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray, ensureNumber } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n\n  const columns = useMemo(() => [\n    {\n      header: 'Endpoint',\n      accessorKey: 'endpoint',\n      size: 200,\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 150,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const isTableScrollingEnabled = layout !== 'table';\n  const currentPage = table.getState().pagination.pageIndex + 1;\n  const totalCount = table.getCoreRowModel().rows.length;\n  let tableStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const headerHeight = 36;\n    const cellHeight = 36;\n    const footerHeight = 56;\n    const rowsToDisplay = 10;\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight + footerHeight,\n    };\n  }\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>Current page: {currentPage}</Text>\n      </Box>\n      <Table\n        layout={layout}\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <ConditionalWrapper\n          condition={isTableScrollingEnabled}\n          wrapper={children => (\n            <TableScrollbar\n              height=\"100%\"\n              overflow=\"visible\" // Make the scrollbar visible\n            >\n              {children}\n            </TableScrollbar>\n          )}\n        >\n          <TableBody>\n            {table.getRowModel().rows.map(row => (\n              <TableRow\n                key={row.id}\n                _hover={{\n                  backgroundColor: hoverBackgroundColor,\n                }}\n              >\n                {row.getVisibleCells().map(cell => {\n                  const styleProps = {\n                    minWidth: cell.column.columnDef.minSize,\n                    width: cell.column.getSize(),\n                    ...cell.column.columnDef.style,\n                  };\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      {...styleProps}\n                    >\n                      <Truncate>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </Truncate>\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableBody>\n        </ConditionalWrapper>\n        <TablePagination\n          count={totalCount}\n          onPageChange={(nextPage) => {\n            const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n            table.setPageIndex(pageIndex);\n          }}\n          onRowsPerPageChange={(nextRowsPerPage) => {\n            const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n            table.setPageSize(pageSize);\n          }}\n        />\n      </Table>\n    </>\n  );\n};\n\nconst TablePagination = ({\n  count,\n  defaultPage = 1,\n  defaultRowsPerPage: defaultRowsPerPageProp,\n  onPageChange: onPageChangeProp,\n  onRowsPerPageChange: onRowsPerPageChangeProp,\n  page: pageProp,\n  rowsPerPage: rowsPerPageProp,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  showFirstButton = false,\n  showLastButton = false,\n}) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const defaultRowsPerPage = defaultRowsPerPageProp ?? ensureArray(rowsPerPageOptions)[0];\n  const [page, setPage] = useState(pageProp ?? defaultPage);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageProp ?? defaultRowsPerPage);\n\n  useEffect(() => {\n    const isControlled = (pageProp !== undefined);\n    if (isControlled) {\n      setPage(pageProp);\n    }\n  }, [pageProp]);\n\n  useEffect(() => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (isControlled) {\n      setRowsPerPage(rowsPerPageProp);\n    }\n  }, [rowsPerPageProp]);\n\n  const onPageChange = useCallback((nextPage) => {\n    const isControlled = (pageProp !== undefined);\n    if (!isControlled) {\n      setPage(nextPage);\n    }\n\n    if (typeof onPageChangeProp === 'function') {\n      onPageChangeProp(nextPage);\n    }\n  }, [pageProp, onPageChangeProp]);\n\n  const onRowsPerPageChange = useCallback((nextRowsPerPage) => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (!isControlled) {\n      setRowsPerPage(nextRowsPerPage);\n    }\n\n    if (typeof onRowsPerPageChangeProp === 'function') {\n      onRowsPerPageChangeProp(nextRowsPerPage);\n    }\n  }, [rowsPerPageProp, onRowsPerPageChangeProp]);\n\n  const totalPages = Math.ceil(count / rowsPerPage);\n  const handlePageChange = (event) => {\n    const nextPage = ensureNumber(event.target.value);\n    if (nextPage <= 1) {\n      onPageChange(1);\n    } else if (nextPage >= totalPages) {\n      onPageChange(totalPages);\n    } else {\n      onPageChange(nextPage);\n    }\n  };\n  const handleRowsPerPageChange = (event) => {\n    const nextRowsPerPage = ensureNumber(event.target.value);\n    if (nextRowsPerPage > 0) {\n      onPageChange(1);\n      onRowsPerPageChange(nextRowsPerPage);\n    }\n  };\n  const canPreviousPage = (page > 1);\n  const canNextPage = (page < totalPages);\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      justifyContent=\"flex-end\"\n      backgroundColor={colorStyle.background.secondary}\n      px=\"6x\"\n      py=\"3x\"\n    >\n      <Text mr=\"2x\">\n        Total: {count}\n      </Text>\n      <Divider\n        orientation=\"vertical\"\n        height=\"6x\"\n      />\n      <Menu>\n        <MenuButton variant=\"ghost\">\n          {rowsPerPage} per page\n        </MenuButton>\n        <MenuList\n          onClick={handleRowsPerPageChange}\n          width=\"100%\"\n        >\n          {rowsPerPageOptions.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n            >\n              {option}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      <Divider\n        orientation=\"vertical\"\n        height=\"6x\"\n      />\n      <Space width=\"2x\" />\n      <Input\n        width=\"10x\"\n        px={0}\n        textAlign=\"center\"\n        onChange={handlePageChange}\n        value={page}\n      />\n      <Space width=\"2x\" />\n      <Text>/</Text>\n      <Space width=\"2x\" />\n      <Text>{totalPages}</Text>\n      <Space width=\"2x\" />\n      <ButtonGroup\n        variant=\"secondary\"\n        sx={{\n          '> *:not(:first-of-type)': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button\n          width=\"8x\"\n          disabled={!canPreviousPage}\n          onClick={(event) => {\n            onPageChange(page - 1);\n          }}\n        >\n          <Icon icon=\"angle-left\" />\n        </Button>\n        <Button\n          width=\"8x\"\n          disabled={!canNextPage}\n          onClick={(event) => {\n            onPageChange(page + 1);\n          }}\n        >\n          <Icon icon=\"angle-right\" />\n        </Button>\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;",component:u.default}),"\n",(0,r.jsxs)(n.h3,{id:"row-expanding",children:["Row expanding",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-expanding",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(l.Z,{code:"import {\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  ButtonBase,\n  Collapse,\n  Flex,\n  Icon,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorMode,\n} from '@tonic-ui/react';\nimport {\n  createTransitionStyle,\n  dataAttr,\n  getEnterTransitionProps,\n  getExitTransitionProps,\n  transitionEasing,\n} from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const selectedBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.08)',\n    light: 'rgba(0, 0, 0, 0.08)',\n  }[colorMode];\n\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          {JSON.stringify(row.original, null, 2)}\n        </Box>\n      </Flex>\n    );\n  };\n\n  const columns = useMemo(() => [\n    {\n      id: 'expand',\n      header: () => null,\n      cell: ({ row }) => {\n        const canExpand = row.getCanExpand();\n        const isExpanded = row.getIsExpanded();\n\n        if (!canExpand) {\n          return null;\n        }\n\n        return (\n          <TableRowToggleIcon\n            isExpanded={isExpanded}\n            onClick={row.getToggleExpandedHandler()}\n          />\n        );\n      },\n      size: 48,\n    },\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getRowCanExpand: () => true,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableHeaderRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableHeaderCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableHeaderCell>\n              );\n            })}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <Fragment key={row.id}>\n            <TableRow\n              data-selected={dataAttr(row.getIsExpanded())}\n              _hover={{\n                backgroundColor: hoverBackgroundColor,\n              }}\n              _selected={{\n                backgroundColor: selectedBackgroundColor,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n            {(row.getCanExpand() && layout === 'flexbox') && (\n              <Collapse in={row.getIsExpanded()}>\n                {renderExpandedRow({ row })}\n              </Collapse>\n            )}\n            {(row.getCanExpand() && layout === 'table') && (\n              <TableRow>\n                <TableCell\n                  padding={0}\n                  borderBottom={0}\n                  colSpan={row.getVisibleCells().length}\n                >\n                  <Collapse in={row.getIsExpanded()}>\n                    {renderExpandedRow({ row })}\n                  </Collapse>\n                </TableCell>\n              </TableRow>\n            )}\n          </Fragment>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nconst TableRowToggleIcon = forwardRef((\n  {\n    isExpanded,\n    ...rest\n  },\n  ref,\n) => {\n  const timeout = isExpanded\n    ? Math.floor(133 * 0.7) // exit\n    : 133; // enter\n  const easing = transitionEasing.easeOut;\n  const transitionProps = isExpanded\n    ? getEnterTransitionProps({ timeout, easing })\n    : getExitTransitionProps({ timeout, easing });\n  const styleProps = {\n    transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',\n    transition: createTransitionStyle('transform', transitionProps),\n  };\n\n  return (\n    <ButtonBase {...rest}>\n      <Icon icon=\"angle-right\" size=\"4x\" {...styleProps} />\n    </ButtonBase>\n  );\n});\nTableRowToggleIcon.displayName = 'TableRowToggleIcon';\n\nexport default App;",component:s.default}),"\n",(0,r.jsxs)(n.p,{children:["The way the expanded row is displayed in the ",(0,r.jsx)(n.code,{children:"Table"})," component depends on the value of the ",(0,r.jsx)(n.code,{children:"layout"})," prop."]}),"\n",(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.code,{children:"layout"})," prop is set to ",(0,r.jsx)(n.code,{children:"flexbox"}),", the expanded row will appear below the current row. On the other hand, if the ",(0,r.jsx)(n.code,{children:"layout"})," prop is set to ",(0,r.jsx)(n.code,{children:"table"}),", the expanded row will be displayed within a ",(0,r.jsx)(n.code,{children:"TableCell"})," that spans across the visible cells in a new row."]}),"\n",(0,r.jsxs)(n.p,{children:["Below are the code snippets that demonstrate how to render the expanded row based on the ",(0,r.jsx)(n.code,{children:"layout"})," prop:"]}),"\n",(0,r.jsx)(n.pre,{disabled:!0,children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// layout='flexbox'\n<TableRow>\n  <TableCell>Cell 1</TableCell>\n  <TableCell>Cell 2</TableCell>\n  <TableCell>Cell 3</TableCell>\n</TableRow>\n{row.getCanExpand() && (\n  <Collapse in={row.getIsExpanded()}>\n    {renderExpandedRow({ row })}\n  </Collapse>\n)}\n"})}),"\n",(0,r.jsx)(n.pre,{disabled:!0,children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// layout='table'\n<TableRow>\n  <TableCell>Cell 1</TableCell>\n  <TableCell>Cell 2</TableCell>\n  <TableCell>Cell 3</TableCell>\n</TableRow>\n{row.getCanExpand() && (\n  <TableRow>\n    <TableCell\n      padding={0}\n      borderBottom={0}\n      colSpan={row.getVisibleCells().length}\n    >\n      <Collapse in={row.getIsExpanded()}>\n        {renderExpandedRow({ row })}\n      </Collapse>\n    </TableCell>\n  </TableRow>\n)}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"row-ordering-dnd",children:["Row ordering (DnD)",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-ordering-dnd",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(l.Z,{code:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  ButtonBase,\n  Icon,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorMode,\n} from '@tonic-ui/react';\nimport {\n  dataAttr,\n} from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nconst DraggableRow = ({\n  canDrag: canDragProp,\n  canDrop: canDropProp,\n  children,\n  item: itemProp,\n  onDrop: onDropProp,\n}) => {\n  // https://react-dnd.github.io/react-dnd/docs/api/use-drag\n  const [collectedDragProps, dragRef, dragPreviewRef] = useDrag({\n    type: 'row',\n    item: itemProp,\n    canDrag: canDragProp,\n    collect: (monitor) => {\n      // DragSourceMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor\n      return {\n        isDragging: monitor.isDragging(),\n      };\n    },\n  })\n\n  // https://react-dnd.github.io/react-dnd/docs/api/use-drop\n  const [collectedDropProps, dropRef] = useDrop({\n    accept: 'row',\n    drop: onDropProp,\n    canDrop: canDropProp,\n    collect: (monitor) => {\n      // DropTargetMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor\n      return {\n        isOver: monitor.isOver(),\n      };\n    }\n  })\n\n  return children({\n    dragRef,\n    dragPreviewRef,\n    dropRef,\n    isDragging: collectedDragProps.isDragging,\n    isOver: collectedDropProps.isOver,\n  });\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const selectedBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.08)',\n    light: 'rgba(0, 0, 0, 0.08)',\n  }[colorMode];\n\n  const initialData = useMemo(() => [\n    { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n    { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  ], []);\n  const [data, setData] = useState(initialData);\n  const columns = useMemo(() => [\n    {\n      id: 'priority',\n      header: 'Priority',\n      accessorKey: 'priority',\n      cell: ({ getValue }) => {\n        const priority = getValue();\n        return priority ?? '-';\n      },\n      size: 80,\n    },\n    {\n      id: 'policy',\n      header: 'Policy',\n      accessorKey: 'policy',\n      size: 240,\n    },\n    {\n      id: 'modifiedTime',\n      header: 'Last Modified',\n      accessorKey: 'modifiedTime',\n      cell: ({ getValue }) => {\n        const mtime = getValue();\n        const date = new Date(mtime);\n        if (date.toString() === 'Invalid Date') {\n          return '-';\n        }\n        return (\n          <Truncate>\n            {date.toLocaleString()}\n          </Truncate>\n        );\n      },\n      size: 180,\n    },\n    {\n      id: 'modifiedBy',\n      header: 'Last Editor',\n      accessorKey: 'modifiedBy',\n      size: 150,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: row => row.id, //good to have guaranteed unique row ids/keys for rendering\n  });\n\n  const moveRow = (draggedRowIndex, targetRowIndex) => {\n    const newData = [...data];\n    const [draggedRow] = newData.splice(draggedRowIndex, 1);\n    newData.splice(targetRowIndex, 0, draggedRow);\n    for (const [index, row] of newData.entries()) {\n      if (!row.priority) {\n        break;\n      }\n      row.priority = index + 1;\n    }\n    setData(newData);\n  };\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              <TableHeaderCell width=\"10x\" />\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map((row, index) => (\n            <DraggableRow\n              key={row.id}\n              item={() => row}\n              onDrop={(item, monitor) => {\n                const draggedRowIndex = item.index;\n                const targetRowIndex = row.index;\n                moveRow(draggedRowIndex, targetRowIndex);\n              }}\n            >\n              {({\n                dragRef,\n                dragPreviewRef,\n                dropRef,\n                isDragging,\n                isOver,\n              }) => {\n                const canDrag = row.original.priority > 0;\n                const canDrop = row.original.priority > 0;\n                const styleProps = {\n                  opacity: isDragging ? 0.28 : 1,\n                  _hover: {\n                    backgroundColor: hoverBackgroundColor,\n                  },\n                  _selected: {\n                    backgroundColor: selectedBackgroundColor,\n                  },\n                };\n                return (\n                  <TableRow\n                    ref={canDrop ? dropRef : undefined}\n                    data-selected={dataAttr(isOver)}\n                    {...styleProps}\n                  >\n                    <TableCell width=\"10x\">\n                      {canDrag && (\n                        <ButtonBase ref={dragRef} cursor=\"move\">\n                          <Icon ref={dragPreviewRef} icon=\"menu\" />\n                        </ButtonBase>\n                      )}\n                    </TableCell>\n                    {row.getVisibleCells().map(cell => {\n                      const styleProps = {\n                        minWidth: cell.column.columnDef.minSize,\n                        width: cell.column.getSize(),\n                        ...cell.column.columnDef.style,\n                      };\n                      return (\n                        <TableCell\n                          key={cell.id}\n                          {...styleProps}\n                        >\n                          <Truncate>\n                            {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                          </Truncate>\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              }}\n            </DraggableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </DndProvider>\n  );\n};\n\nexport default App;",component:d.default}),"\n",(0,r.jsxs)(n.h3,{id:"row-selection",children:["Row selection",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-selection",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(l.Z,{code:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Flex,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorMode,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const selectedBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.08)',\n    light: 'rgba(0, 0, 0, 0.08)',\n  }[colorMode];\n\n  const [rowSelection, setRowSelection] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      id: 'select',\n      header: ({ table }) => (\n        <Flex height=\"100%\" alignItems=\"center\">\n          <Checkbox\n            checked={table.getIsAllRowsSelected()}\n            indeterminate={table.getIsSomeRowsSelected()}\n            onChange={table.getToggleAllRowsSelectedHandler()}\n          />\n        </Flex>\n      ),\n      cell: ({ row }) => (\n        <Flex height=\"100%\" alignItems=\"center\">\n          <Checkbox\n            checked={row.getIsSelected()}\n            disabled={!row.getCanSelect()}\n            indeterminate={row.getIsSomeSelected()}\n            onChange={row.getToggleSelectedHandler()}\n          />\n        </Flex>\n      ),\n      size: 40,\n    },\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const selectedRowCount = Object.keys(rowSelection).length;\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: hoverBackgroundColor,\n              }}\n              _selected={{\n                backgroundColor: selectedBackgroundColor,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",component:c.default}),"\n",(0,r.jsxs)(n.h3,{id:"sorting",children:["Sorting",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#sorting",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(l.Z,{code:"import {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Code,\n  DarkMode,\n  Flex,\n  Icon,\n  LightMode,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Tooltip,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useToggle,\n} from '@tonic-ui/react-hooks';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n\n  const [sorting, setSorting] = useState([\n    { id: 'eventType', desc: false },\n  ]);\n  const [enableSortingRemoval, toggleEnableSortingRemoval] = useToggle(false);\n\n  useEffect(() => {\n    if (enableSortingRemoval) {\n      setSorting([]);\n    }\n  }, [enableSortingRemoval]);\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      sorting,\n    },\n    // https://tanstack.com/table/v8/docs/api/features/sorting\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval, // Enables/Disables the ability to remove sorting for the table\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const enableSortingRemovalTooltipLabel = (\n    <Box p=\"1x\">\n      <Text>\n        If <Code>true</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `none` → ...\n      </Text>\n      <Text>\n        If <Code>false</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `desc` → `asc` → ...\n      </Text>\n    </Box>\n  );\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Checkbox\n          checked={enableSortingRemoval}\n          onChange={() => {\n            toggleEnableSortingRemoval();\n          }}\n        >\n          <Flex alignItems=\"center\">\n            Enables/Disables the ability to remove sorting for the table\n            <Space width=\"2x\" />\n            <Tooltip\n              label={colorMode === 'dark'\n                ? <LightMode>{enableSortingRemovalTooltipLabel}</LightMode>\n                : <DarkMode>{enableSortingRemovalTooltipLabel}</DarkMode>\n              }\n            >\n              <Icon icon=\"info-o\" />\n            </Tooltip>\n          </Flex>\n        </Checkbox>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                let styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                if (header.column.getCanSort()) {\n                  styleProps = {\n                    ...styleProps,\n                    cursor: 'pointer',\n                    userSelect: 'none',\n                    _hover: {\n                      backgroundColor: hoverBackgroundColor,\n                    },\n                  };\n                }\n                if (header.column.getIsSorted()) {\n                  styleProps = {\n                    ...styleProps,\n                    color: colorStyle.color.emphasis,\n                  };\n                }\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    onClick={header.column.getToggleSortingHandler()}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Flex alignItems=\"center\">\n                        <Truncate>\n                          {flexRender(header.column.columnDef.header, header.getContext())}\n                        </Truncate>\n                        {{\n                          asc: (<Icon icon=\"sort-up\" size={20}  ml=\"1x\" />),\n                          desc: (<Icon icon=\"sort-down\" size={20} ml=\"1x\" />),\n                        }[header.column.getIsSorted()] ?? null}\n                      </Flex>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: hoverBackgroundColor,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n              </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",component:i.default}),"\n",(0,r.jsxs)(n.h3,{id:"virtualized-rows",children:["Virtualized rows",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#virtualized-rows",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(l.Z,{code:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport {\n  Box,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorMode,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useMemo, useRef } from 'react';\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n\n  const columns = useMemo(() => [\n    {\n      header: 'Endpoint',\n      accessorKey: 'endpoint',\n      size: 200,\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 100,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const scrollRef = useRef();\n  const headerHeight = 36;\n  const cellHeight = 36;\n  const rowsToDisplay = 10;\n  const tableStyleProps = {\n    height: headerHeight + rowsToDisplay * cellHeight,\n  };\n\n  // https://tanstack.com/virtual/v3/docs/api/virtualizer\n  const rowVirtualizer = useVirtualizer({\n    count: table.getRowModel().rows.length,\n    getScrollElement: () => scrollRef.current?.firstChild,\n    estimateSize: (index) => cellHeight,\n    overscan: rowsToDisplay,\n  });\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>Total: {table.getRowModel().rows.length}</Text>\n      </Box>\n      <Table\n        layout=\"flexbox\"\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableScrollbar\n          ref={scrollRef}\n          height=\"100%\"\n          overflow=\"visible\" // Make the scrollbar visible\n        >\n          <Box\n            position=\"relative\"\n            width=\"100%\"\n            style={{\n              height: rowVirtualizer.getTotalSize(),\n            }}\n          >\n            <TableBody>\n              {rowVirtualizer.getVirtualItems().map(virtualRow => {\n                const row = table.getRowModel().rows[virtualRow.index];\n                return (\n                  <Box\n                    key={virtualRow.key}\n                    position=\"absolute\"\n                    top={0}\n                    left={0}\n                    width=\"100%\"\n                    style={{\n                      height: `${virtualRow.size}px`,\n                      transform: `translateY(${virtualRow.start}px)`,\n                    }}\n                  >\n                    {row && (\n                      <TableRow\n                        _hover={{\n                          backgroundColor: hoverBackgroundColor,\n                        }}\n                      >\n                        {row.getVisibleCells().map(cell => {\n                          const styleProps = {\n                            minWidth: cell.column.columnDef.minSize,\n                            width: cell.column.getSize(),\n                            ...cell.column.columnDef.style,\n                          };\n                          return (\n                            <TableCell\n                              key={cell.id}\n                              {...styleProps}\n                            >\n                              <Truncate>\n                                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                              </Truncate>\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    )}\n                  </Box>\n                );\n              })}\n            </TableBody>\n          </Box>\n        </TableScrollbar>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",component:a.default}),"\n",(0,r.jsxs)(n.h2,{id:"commonly-asked-questions",children:["Commonly Asked Questions",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#commonly-asked-questions",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(n.h3,{id:"how-to-make-the-table-body-vertically-scrollable",children:["How to make the table body vertically scrollable?",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-to-make-the-table-body-vertically-scrollable",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(n.p,{children:"To make the table body vertically scrollable, you can follow these steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Calculate the height of the table based on the number of rows to display."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const cellHeight = 36;\nconst headerHeight = 36;\nconst rowsToDisplay = 10;\nconst tableHeight = headerHeight + rowsToDisplay * cellHeight;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["Wrap the ",(0,r.jsx)(n.code,{children:"TableBody"})," component with a ",(0,r.jsx)(n.code,{children:"TableScrollbar"})," component, and set the ",(0,r.jsx)(n.code,{children:"height"})," and ",(0,r.jsx)(n.code,{children:"overflow"})," props of the ",(0,r.jsx)(n.code,{children:"TableScrollbar"})," component to control the scrolling behavior."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{disabled:!0,children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<Table\n  layout="flexbox"\n  height={tableHeight}\n>\n  <TableHeader>\n    <TableRow>\n      <TableHeaderCell>Cell<TableHeaderCell>\n      <TableHeaderCell>Cell<TableHeaderCell>\n    </TableRow>\n  </TableHeader>\n  <TableScrollbar\n    height="100%"\n    overflow="visible" // Make scrollbar visible\n  >\n    <TableBody>\n      <TableRow>\n        <TableCell>Cell<TableCell>\n        <TableCell>Cell<TableCell>\n      </TableRow>\n    </TableBody>\n  </TableScrollbar>\n</Table>\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"how-to-control-whether-to-enable-the-scrolling-feature",children:["How to control whether to enable the scrolling feature?",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-to-control-whether-to-enable-the-scrolling-feature",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["If you want to control whether to enable the scrolling feature dynamically, you can use a custom ",(0,r.jsx)(n.code,{children:"ConditionWrapper"})," component to conditionally wrap ",(0,r.jsx)(n.code,{children:"TableBody"})," with the ",(0,r.jsx)(n.code,{children:"TableScrollbar"})," component."]}),"\n",(0,r.jsxs)(n.p,{children:["Here's an example implementation of the ",(0,r.jsx)(n.code,{children:"ConditionalWrapper"})," component:"]}),"\n",(0,r.jsx)(n.pre,{disabled:!0,children:(0,r.jsx)(n.code,{className:"language-jsx",children:"const ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"And here's how you can use it in your code:"}),"\n",(0,r.jsx)(n.pre,{disabled:!0,children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<Table\n  height={isTableScrollingEnabled ? tableHeight : undefined}\n>\n  <TableHeader>\n    <TableRow>\n      <TableHeaderCell>Cell<TableHeaderCell>\n      <TableHeaderCell>Cell<TableHeaderCell>\n    </TableRow>\n  </TableHeader>\n  <ConditionalWrapper\n    condition={isTableScrollingEnabled}\n    wrapper={children => (\n      <TableScrollbar\n        height="100%"\n        overflow="visible" // Make scrollbar visible\n      >\n        {children}\n      </TableScrollbar>\n    )}\n  >\n    <TableBody>\n      <TableRow>\n        <TableCell>Cell<TableCell>\n        <TableCell>Cell<TableCell>\n      </TableRow>\n    </TableBody>\n  </ConditionalWrapper>  \n</Table>\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"props",children:["Props",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(n.h3,{id:"table-1",children:["Table",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#table-1",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{align:"left",children:"Name"}),(0,r.jsx)(n.th,{align:"left",children:"Type"}),(0,r.jsx)(n.th,{align:"left",children:"Default"}),(0,r.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"layout"}),(0,r.jsx)(n.td,{align:"left",children:"string"}),(0,r.jsx)(n.td,{align:"left",children:"'flexbox'"}),(0,r.jsx)(n.td,{align:"left",children:"The layout of the table. One of: 'flexbox', 'table'"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"size"}),(0,r.jsx)(n.td,{align:"left",children:"string"}),(0,r.jsx)(n.td,{align:"left",children:"'md'"}),(0,r.jsx)(n.td,{align:"left",children:"The size of TableCells. One of: 'sm', 'md', 'lg'"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"variant"}),(0,r.jsx)(n.td,{align:"left",children:"string"}),(0,r.jsx)(n.td,{align:"left",children:"'default'"}),(0,r.jsx)(n.td,{align:"left",children:"The variant of the table style to use. One of: 'default', 'outline'"})]})]})]}),"\n",(0,r.jsxs)(n.h3,{id:"tableheader",children:["TableHeader",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheader",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{align:"left",children:"Name"}),(0,r.jsx)(n.th,{align:"left",children:"Type"}),(0,r.jsx)(n.th,{align:"left",children:"Default"}),(0,r.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"children"}),(0,r.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,r.jsxs)(n.h3,{id:"tableheaderrow",children:["TableHeaderRow",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheaderrow",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{align:"left",children:"Name"}),(0,r.jsx)(n.th,{align:"left",children:"Type"}),(0,r.jsx)(n.th,{align:"left",children:"Default"}),(0,r.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"children"}),(0,r.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,r.jsxs)(n.h3,{id:"tableheadercell",children:["TableHeaderCell",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheadercell",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{align:"left",children:"Name"}),(0,r.jsx)(n.th,{align:"left",children:"Type"}),(0,r.jsx)(n.th,{align:"left",children:"Default"}),(0,r.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"children"}),(0,r.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,r.jsxs)(n.h3,{id:"tablebody",children:["TableBody",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablebody",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{align:"left",children:"Name"}),(0,r.jsx)(n.th,{align:"left",children:"Type"}),(0,r.jsx)(n.th,{align:"left",children:"Default"}),(0,r.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"children"}),(0,r.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,r.jsxs)(n.h3,{id:"tablerow",children:["TableRow",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablerow",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{align:"left",children:"Name"}),(0,r.jsx)(n.th,{align:"left",children:"Type"}),(0,r.jsx)(n.th,{align:"left",children:"Default"}),(0,r.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"children"}),(0,r.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,r.jsxs)(n.h3,{id:"tablecell",children:["TableCell",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablecell",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{align:"left",children:"Name"}),(0,r.jsx)(n.th,{align:"left",children:"Type"}),(0,r.jsx)(n.th,{align:"left",children:"Default"}),(0,r.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"children"}),(0,r.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,r.jsxs)(n.h3,{id:"tablescrollbar",children:["TableScrollbar",(0,r.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablescrollbar",children:(0,r.jsx)(n.svg,{children:(0,r.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"TableScrollbar"})," component shares the same API as the ",(0,r.jsx)(n.code,{children:"Scrollbar"})," component."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{align:"left",children:"Name"}),(0,r.jsx)(n.th,{align:"left",children:"Type"}),(0,r.jsx)(n.th,{align:"left",children:"Default"}),(0,r.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"children"}),(0,r.jsx)(n.td,{align:"left",children:"ReactNode | function"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left",children:"The content of the scrollbar."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"width"}),(0,r.jsx)(n.td,{align:"left",children:"number | string"}),(0,r.jsx)(n.td,{align:"left",children:"'auto'"}),(0,r.jsxs)(n.td,{align:"left",children:["The width of the scrollbar. If set to 'auto', you can constrain the width using the ",(0,r.jsx)(n.code,{children:"minWidth"})," and ",(0,r.jsx)(n.code,{children:"maxWidth"})," props."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"height"}),(0,r.jsx)(n.td,{align:"left",children:"number | string"}),(0,r.jsx)(n.td,{align:"left",children:"'auto'"}),(0,r.jsxs)(n.td,{align:"left",children:["The height of the scrollbar. If set to 'auto', you can constrain the height using the ",(0,r.jsx)(n.code,{children:"minHeight"})," and ",(0,r.jsx)(n.code,{children:"maxHeight"})," props."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"minWidth"}),(0,r.jsx)(n.td,{align:"left",children:"number | string"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left",children:"The minimum width of the scrollbar."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"maxWidth"}),(0,r.jsx)(n.td,{align:"left",children:"number | string"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left",children:"The maximum width of the scrollbar."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"minHeight"}),(0,r.jsx)(n.td,{align:"left",children:"number | string"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left",children:"The minimum height of the scrollbar."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"maxHeight"}),(0,r.jsx)(n.td,{align:"left",children:"number | string"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left",children:"The maximum height of the scrollbar."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"minThumbWidth"}),(0,r.jsx)(n.td,{align:"left",children:"number"}),(0,r.jsx)(n.td,{align:"left",children:"32"}),(0,r.jsx)(n.td,{align:"left",children:"The minimum width of the thumb in pixels."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"minThumbHeight"}),(0,r.jsx)(n.td,{align:"left",children:"number"}),(0,r.jsx)(n.td,{align:"left",children:"32"}),(0,r.jsx)(n.td,{align:"left",children:"The minimum height of the thumb in pixels."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"onScroll"}),(0,r.jsx)(n.td,{align:"left",children:"function"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left",children:"A callback function that is called when the scrollbar is scrolled."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"onUpdate"}),(0,r.jsx)(n.td,{align:"left",children:"function"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left",children:"A callback function that is called when the scrollbar is updated."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"overflow"}),(0,r.jsx)(n.td,{align:"left",children:"string"}),(0,r.jsx)(n.td,{align:"left",children:"'auto'"}),(0,r.jsx)(n.td,{align:"left",children:"The overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"overflowX"}),(0,r.jsx)(n.td,{align:"left",children:"string"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left",children:"The horizontal overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{align:"left",children:"overflowY"}),(0,r.jsx)(n.td,{align:"left",children:"string"}),(0,r.jsx)(n.td,{align:"left"}),(0,r.jsx)(n.td,{align:"left",children:"The vertical overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]})]})]})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,o.ah)(),e.components).wrapper;return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(y,e)})):y(e)}},26592:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/table",function(){return t(25264)}])}},function(e){e.O(0,[5412,754,8510,6326,2326,9774,2888,179],function(){return e(e.s=26592)}),_N_E=e.O()}]);