(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2153],{71574:function(n,o,e){"use strict";e.r(o);var r=e(52322),s=e(45392);function c(n){var o=Object.assign({div:"div",h1:"h1",p:"p",code:"code",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",h3:"h3"},(0,s.ah)(),n.components);return(0,r.jsxs)(o.div,{className:"main-content",id:"main-content",children:[(0,r.jsx)(o.h1,{id:"usecolormode",children:"useColorMode"}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.code,{children:"useColorMode"})," is a custom Hook that gives you access to the current color mode, and a function to change the color mode."]}),"\n",(0,r.jsxs)(o.h2,{id:"import",children:["Import",(0,r.jsx)(o.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,r.jsx)(o.svg,{children:(0,r.jsx)(o.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",children:"import { useColorStyle } from '@tonic-ui/react';\n"})}),"\n",(0,r.jsxs)(o.h2,{id:"usage",children:["Usage",(0,r.jsx)(o.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,r.jsx)(o.svg,{children:(0,r.jsx)(o.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(o.pre,{disabled:!0,children:(0,r.jsx)(o.code,{className:"language-jsx",children:"import { css, Global } from '@emotion/react';\nimport { Button, useColorMode } from '@tonic-ui/react';\nimport React from 'react';\n\nconst App = () => {\n  const [colorMode, setColorMode] = useColorMode(); // One of: 'dark', 'light'\n  const toggleColorMode = () => {\n    const nextColorMode = {\n      'dark': 'light',\n      'light': 'dark',\n    }[colorMode];\n    setColorMode(nextColorMode);\n  };\n\n  return (\n    <>\n      <Global\n        styles={css`\n          :root {\n            color-scheme: ${colorMode};\n          }\n        `}\n      />\n      <Button onClick={toggleColorMode}>\n        Toggle Color Mode\n      </Button>\n    </>\n  );\n};\n"})}),"\n",(0,r.jsxs)(o.h3,{id:"returns",children:["Returns",(0,r.jsx)(o.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#returns",children:(0,r.jsx)(o.svg,{children:(0,r.jsx)(o.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(o.p,{children:"Returns an array with the current color mode and a function to change the color mode."}),"\n",(0,r.jsxs)(o.h2,{id:"demos",children:["Demos",(0,r.jsx)(o.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#demos",children:(0,r.jsx)(o.svg,{children:(0,r.jsx)(o.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(o.pre,{noInline:!0,children:(0,r.jsx)(o.code,{className:"language-jsx",children:"render(() => {\n  const [colorMode, setColorMode] = useColorMode(); // One of: 'dark', 'light'\n  const toggleColorMode = () => {\n    const nextColorMode = {\n      'dark': 'light',\n      'light': 'dark',\n    }[colorMode];\n    setColorMode(nextColorMode);\n  };\n\n  return (\n    <>\n      <Global\n        styles={css`\n          :root {\n            color-scheme: ${colorMode};\n          }\n        `}\n      />\n      <Button onClick={toggleColorMode}>\n        Toggle Color Mode\n      </Button>\n    </>\n  );\n});\n"})})]})}o.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=Object.assign({},(0,s.ah)(),n.components).wrapper;return o?(0,r.jsx)(o,Object.assign({},n,{children:(0,r.jsx)(c,n)})):c(n)}},20014:function(n,o,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/color-mode/useColorMode",function(){return e(71574)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=20014)}),_N_E=n.O()}]);