(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7322],{2715:function(n,t,o){"use strict";o.r(t),o.d(t,{default:function(){return p}});o(2784);var e=o(876),i=["components"];function u(){return u=Object.assign?Object.assign.bind():function(n){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var e in o)Object.prototype.hasOwnProperty.call(o,e)&&(n[e]=o[e])}return n},u.apply(this,arguments)}function r(n,t){if(null==n)return{};var o,e,i=function(n,t){if(null==n)return{};var o,e,i={},u=Object.keys(n);for(e=0;e<u.length;e++)o=u[e],t.indexOf(o)>=0||(i[o]=n[o]);return i}(n,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(n);for(e=0;e<u.length;e++)o=u[e],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(n,o)&&(i[o]=n[o])}return i}var l={};function p(n){var t=n.components,o=r(n,i);return(0,e.kt)("wrapper",u({},l,o,{components:t,mdxType:"MDXLayout"}),(0,e.kt)("h1",null,"useCopyToClipboard"),(0,e.kt)("p",null,"A custom Hook that provides a ",(0,e.kt)("inlineCode",{parentName:"p"},"copy")," method to copy text to the clipboard. If anything does not work, it will output an error message and the value will be set to ",(0,e.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,e.kt)("pre",null,(0,e.kt)("code",{parentName:"pre",className:"language-js"},"// import\nimport { useCopyToClipboard } from '@tonic-ui/react-hooks';\n\n// usage\nconst [value, copy] = useCopyToClipboard();\n")),(0,e.kt)("h3",null,"Returns"),(0,e.kt)("p",null,"Returns an array with the value and the copy function."),(0,e.kt)("h3",null,"Example"),(0,e.kt)("pre",null,(0,e.kt)("code",{parentName:"pre",className:"language-jsx"},"function Component() {\n  const [buttonIsCopied, setButtonIsCopied] = React.useState(null);\n  const [linkIsCopied, setLinkIsCopied] = React.useState(null);\n  const [value, copy] = useCopyToClipboard();\n\n  return (\n    <>\n      <Flex columnGap=\"2x\" mb=\"2x\">\n        <Button\n          minWidth={120}\n          onClick={async function () {\n            const ok = await copy('https://github.com/trendmicro-frontend/tonic-ui')\n            setButtonIsCopied(!!ok);\n            setTimeout(() => setButtonIsCopied(null), 1000);\n          }}\n        >\n          {buttonIsCopied === null && 'Click to copy'}\n          {buttonIsCopied === true && 'Copied'}\n          {buttonIsCopied === false && 'Copy failed'}\n        </Button>\n        <LinkButton\n          onClick={async function () {\n            const ok = await copy('https://github.com/trendmicro-frontend/tonic-ui')\n            setLinkIsCopied(!!ok);\n            setTimeout(() => setLinkIsCopied(null), 1000);\n          }}\n        >\n          {linkIsCopied === null && 'Click to copy'}\n          {linkIsCopied === true && 'Copied'}\n          {linkIsCopied === false && 'Copy failed'}\n        </LinkButton>\n      </Flex>\n      <Text>Copied value: {value}</Text>\n    </>\n  );\n}\n")))}p.isMDXComponent=!0},1952:function(n,t,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useCopyToClipboard",function(){return o(2715)}])}},function(n){n.O(0,[9774,2888,179],(function(){return t=1952,n(n.s=t);var t}));var t=n.O();_N_E=t}]);