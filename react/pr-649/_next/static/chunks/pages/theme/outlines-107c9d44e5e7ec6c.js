(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8402],{8980:function(e,n,t){"use strict";var o=t(3921),l=t(2784),i=t(9769),r=t(2767);function u(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==t)return;var o,l,i=[],r=!0,u=!1;try{for(t=t.call(e);!(r=(o=t.next()).done)&&(i.push(o.value),!n||i.length!==n);r=!0);}catch(a){u=!0,l=a}finally{try{r||null==t.return||t.return()}finally{if(u)throw l}}return i}(e,n)||function(e,n){if(!e)return;if("string"===typeof e)return a(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return a(e,n)}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}n.Z=function(e){var n,t=e.theme,a=(0,o.useTheme)(),s=u((0,o.useColorMode)(),1)[0],c=null!==(n=u((0,o.useColorStyle)({colorMode:s}),1)[0][t])&&void 0!==n?n:a[t];if(!c)return"Theme field not found";"space"!==t&&"sizes"!==t||(c=Object.keys(c).filter((function(e){return!e.toString().match(/[qh]$/)})).reduce((function(e,n){return e[n]=c[n],e}),{}));return l.createElement(o.Box,{mb:"6x"},l.createElement(i.Z,null,"const ".concat(t," = ").concat((0,r.Z)(c,!1))))}},2767:function(e,n){"use strict";n.Z=function(e){return JSON.stringify(e,null,2).replace(/"/g,"'").replace(/'(\d+|[a-z]+)':/g,"$1:")}},2320:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return s}});t(2784);var o=t(876),l=(t(3921),t(8980)),i=["components"];function r(){return r=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},r.apply(this,arguments)}function u(e,n){if(null==e)return{};var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var a={};function s(e){var n=e.components,t=u(e,i);return(0,o.kt)("wrapper",r({},a,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",null,"Outlines"),(0,o.kt)("h2",null,"Design Tokens"),(0,o.kt)(l.Z,{theme:"outlines",mdxType:"ThemeParser"}),(0,o.kt)("h2",null,"Examples"),(0,o.kt)("p",null,"The outline shorthand property sets all the outline properties in one declaration."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'/* style */\noutline="solid"\n\n/* color | style */\noutline="#f66 dashed"\n\n/* style | width */\noutline="inset thick"\n\n/* color | style | width */\noutline="green solid 3px"\n\n/* Global values */\noutline="inherit"\noutline="initial"\noutline="revert"\noutline="unset"\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"outline")," property may be specified using one, two, or three of the values listed below. The order of the value does not matter. See ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/outline"},"outline")," in MDN for more details."),(0,o.kt)("p",null,"Note: The outline will be invisible if its style is not defined. This is because the style defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"none"),". A notable exception is ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," elements, which are given default styling by browsers."),(0,o.kt)("h3",null,"Values"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<outline-color>"),"\nSets the color of the outline. Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"currentcolor")," if absent."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<outline-style>"),"\nSets the style of the outline. Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"none")," if absent."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<outline-width>"),"\nSets the thickness of the outline. Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"medium")," if absent."),(0,o.kt)("h3",null,"Nonnegative length"),(0,o.kt)("p",null,"If the outline is a numeric value defined in the theme, the ",(0,o.kt)("inlineCode",{parentName:"p"},"solid")," outline style will be applied as a shorthand for the ",(0,o.kt)("inlineCode",{parentName:"p"},"outlineWidth")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"outlineStyle")," properties."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const Block = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Flex\n      px="4x"\n      py="3x"\n      alignItems="flex-start"\n      justifyContent="center"\n      flexDirection="column"\n      backgroundColor={colorStyle.background.secondary}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const theme = useTheme();\n  const [colorMode] = useColorMode();\n  const outlineColor = {\n    dark: \'gray:60\',\n    light: \'gray:30\',\n  }[colorMode];\n  const outlineWidths = [1, 2, 3, 4, 5];\n  const [outlineWidth, setOutlineWidth] = React.useState(outlineWidths[0]);\n  const outlineValue = theme.outlines[outlineWidth] || outlineWidth;\n  const outlineColorValue = theme.colors[outlineColor] || outlineColor;\n\n  return (\n    <>\n      <Flex alignItems="center" mb="5x">\n        <TextLabel>outline =</TextLabel>\n        <Space width="2x" />\n        <Stack direction="row" spacing="2x">\n          {outlineWidths.map((width) => (\n            <Button\n              key={width}\n              onClick={() => setOutlineWidth(width)}\n              variant={width === outlineWidth ? \'primary\' : \'secondary\'}\n            >\n              <Text fontFamily="mono">{width}</Text>\n            </Button>\n          ))}\n        </Stack>\n      </Flex>\n      <Flex>\n        <Block\n          outline={outlineWidth}\n          outlineColor={outlineColor}\n        >\n          <Text>outline="{outlineValue}"</Text>\n          <Text>outlineColor="{outlineColorValue}"</Text>\n        </Block>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,o.kt)("h3",null,"Keyword"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"thin"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"medium"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"thick")," are keywords that indicate the outline width. You can use them in the ",(0,o.kt)("inlineCode",{parentName:"p"},"outline")," property, but you have to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"outlineStyle")," property to ",(0,o.kt)("inlineCode",{parentName:"p"},"solid")," as well."),(0,o.kt)("p",null,"Note: Because the specification doesn't define the exact thickness denoted by each keyword, the precise result when using one of them is implementation-specific. Nevertheless, they always follow the pattern ",(0,o.kt)("inlineCode",{parentName:"p"},"thin \u2264 medium \u2264 thick"),", and the values are constant within a single document."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const Block = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Flex\n      px="4x"\n      py="3x"\n      alignItems="flex-start"\n      justifyContent="center"\n      flexDirection="column"\n      backgroundColor={colorStyle.background.secondary}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const theme = useTheme();\n  const [colorMode] = useColorMode();\n  const outlineColor = {\n    dark: \'gray:60\',\n    light: \'gray:30\',\n  }[colorMode];\n  const outlineStyle = \'solid\';\n  const outlineWidths = [\'thin\', \'medium\', \'thick\'];\n  const [outlineWidth, setOutlineWidth] = React.useState(outlineWidths[0]);\n  const outlineValue = theme.outlines[outlineWidth] || outlineWidth;\n  const outlineColorValue = theme.colors[outlineColor] || outlineColor;\n\n  return (\n    <>\n      <Flex alignItems="center" mb="5x">\n        <TextLabel>outline =</TextLabel>\n        <Space width="2x" />\n        <Stack direction="row" spacing="2x">\n          {outlineWidths.map((width) => (\n            <Button\n              key={width}\n              onClick={() => setOutlineWidth(width)}\n              variant={width === outlineWidth ? \'primary\' : \'secondary\'}\n            >\n              <Text fontFamily="mono">{width}</Text>\n            </Button>\n          ))}\n        </Stack>\n      </Flex>\n      <Flex>\n        <Block\n          outline={outlineWidth}\n          outlineColor={outlineColor}\n          outlineStyle={outlineStyle}\n        >\n          <Text>outline="{outlineValue}"</Text>\n          <Text>outlineColor="{outlineColorValue}"</Text>\n          <Text>outlineStyle="{outlineStyle}"</Text>\n        </Block>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,o.kt)("h2",null,"Borders vs. outlines"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"./borders"},"Borders")," and outlines are very similar. However, outlines differ from borders in the following ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Outlines never take up space, as they are drawn outside of an element's content."),(0,o.kt)("li",{parentName:"ul"},"According to the spec, outlines don't have to be rectangular, although they usually are.")))}s.isMDXComponent=!0},2596:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/theme/outlines",function(){return t(2320)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=2596,e(e.s=n);var n}));var n=e.O();_N_E=n}]);