(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3637],{14545:function(n,e,o){"use strict";o.r(e),o.d(e,{default:function(){return d}});var t=o(7896),r=o(59740),a=(o(2784),o(30876)),l=["components"],c={};function d(n){var e=n.components,o=(0,r.Z)(n,l);return(0,a.kt)("wrapper",(0,t.Z)({},c,o,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",null,"Accordion"),(0,a.kt)("p",null,"Accordion is a container that allows the user to toggle sections of related content."),(0,a.kt)("h2",null,"Import"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AccordionHeader")," is composed of ",(0,a.kt)("inlineCode",{parentName:"li"},"AccordionToggle")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"AccordionToggleIndicator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AccordionBody")," is composed of ",(0,a.kt)("inlineCode",{parentName:"li"},"AccordionCollapse"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionBody,\n  AccordionToggle,\n  AccordionToggleIndicator,\n  AccordionCollapse,\n} from '@tonic-ui/react';\n")),(0,a.kt)("h2",null,"Usage"),(0,a.kt)("h3",null,"Basic accordion"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Accordion rowGap={1}>\n  <AccordionItem>\n    <AccordionHeader>\n      <Text>\n        Accordion 1\n      </Text>\n    </AccordionHeader>\n    <AccordionBody>\n      <SkeletonBody px="4x" py="3x" />\n    </AccordionBody>\n  </AccordionItem>\n  <AccordionItem>\n    <AccordionHeader>\n      <Text>\n        Accordion 2\n      </Text>\n    </AccordionHeader>\n    <AccordionBody>\n      <SkeletonBody px="4x" py="3x" />\n    </AccordionBody>\n  </AccordionItem>\n  <AccordionItem disabled>\n    <AccordionHeader>\n      <Text>\n        Disabled Accordion\n      </Text>\n    </AccordionHeader>\n    <AccordionBody>\n      <SkeletonBody px="4x" py="3x" />\n    </AccordionBody>\n  </AccordionItem>\n</Accordion>\n')),(0,a.kt)("h3",null,"Controlled accordion"),(0,a.kt)("p",null,"Extend the default behavior to create an accordion with controlled state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const [expandedItem, setExpandedItem] = React.useState(null);\n  const handleToggle = item => ({ isExpanded }) => {\n    setExpandedItem(isExpanded ? item : null);\n  };\n\n  return (\n    <Accordion rowGap={1}>\n      <AccordionItem\n        isExpanded={expandedItem === 'item1'}\n        onToggle={handleToggle('item1')}\n      >\n        <AccordionHeader>\n          <Text>\n            Accordion 1\n          </Text>\n        </AccordionHeader>\n        <AccordionBody>\n          <SkeletonBody px=\"4x\" py=\"3x\" />\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem\n        isExpanded={expandedItem === 'item2'}\n        onToggle={handleToggle('item2')}\n      >\n        <AccordionHeader>\n          <Text>\n            Accordion 2\n          </Text>\n        </AccordionHeader>\n        <AccordionBody>\n          <SkeletonBody px=\"4x\" py=\"3x\" />\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem\n        disabled\n        isExpanded={expandedItem === 'item3'}\n        onToggle={handleToggle('item3')}\n      >\n        <AccordionHeader>\n          <Text>\n            Disabled Accordion\n          </Text>\n        </AccordionHeader>\n        <AccordionBody>\n          <SkeletonBody px=\"4x\" py=\"3x\" />\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n")),(0,a.kt)("h3",null,"Customization"),(0,a.kt)("p",null,"Here is an example of how you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionToggle"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionToggleIndicator"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"AccordionCollapse")," to customize the accordion."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const itemStyleProps = {\n    border: 1,\n    borderColor,\n    borderStyle: 'solid',\n    borderBottomWidth: 0,\n    _lastOfType: {\n      borderBottomWidth: 1,\n    },\n  };\n  const toggleStyleProps = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    backgroundColor: {\n      dark: 'gray:90',\n      light: 'white',\n    }[colorMode],\n    color: {\n      dark: 'white:primary',\n      light: 'black:primary',\n    }[colorMode],\n    px: '4x',\n    minHeight: '12x',\n    width: '100%',\n  };\n  const [expandedItem, setExpandedItem] = React.useState(null);\n  const handleToggle = item => ({ isExpanded }) => {\n    setExpandedItem(isExpanded ? item : null);\n  };\n\n  return (\n    <Accordion>\n      <AccordionItem\n        isExpanded={expandedItem === 'item1'}\n        onToggle={handleToggle('item1')}\n        {...itemStyleProps}\n      >\n        <AccordionToggle {...toggleStyleProps}>\n          <AccordionToggleIndicator>\n            {({ ref, style: styleProps }) => {\n              styleProps.transform = expandedItem === 'item1' ? 'rotate(0deg)' : 'rotate(-90deg)';\n              return (\n                <Icon ref={ref} icon=\"chevron-down\" size=\"4x\" {...styleProps} />\n              );\n            }}\n          </AccordionToggleIndicator>\n          <Space width=\"2x\" />\n          <Text>\n            Collapsible Item #1\n          </Text>\n        </AccordionToggle>\n        <AccordionCollapse>\n          <SkeletonBody px=\"4x\" py=\"3x\" />\n        </AccordionCollapse>\n      </AccordionItem>\n      <AccordionItem\n        isExpanded={expandedItem === 'item2'}\n        onToggle={handleToggle('item2')}\n        {...itemStyleProps}\n      >\n        <AccordionToggle {...toggleStyleProps}>\n          <AccordionToggleIndicator>\n            {({ ref, style: styleProps }) => {\n              styleProps.transform = expandedItem === 'item2' ? 'rotate(0deg)' : 'rotate(-90deg)';\n              return (\n                <Icon ref={ref} icon=\"chevron-down\" size=\"4x\" {...styleProps} />\n              );\n            }}\n          </AccordionToggleIndicator>\n          <Space width=\"2x\" />\n          <Text>\n            Collapsible Item #2\n          </Text>\n        </AccordionToggle>\n        <AccordionCollapse>\n          <SkeletonBody px=\"4x\" py=\"3x\" />\n        </AccordionCollapse>\n      </AccordionItem>\n      <AccordionItem\n        isExpanded={expandedItem === 'item3'}\n        onToggle={handleToggle('item3')}\n        {...itemStyleProps}\n      >\n        <AccordionToggle {...toggleStyleProps}>\n          <AccordionToggleIndicator>\n            {({ ref, style: styleProps }) => {\n              styleProps.transform = expandedItem === 'item3' ? 'rotate(0deg)' : 'rotate(-90deg)';\n              return (\n                <Icon ref={ref} icon=\"chevron-down\" size=\"4x\" {...styleProps} />\n              );\n            }}\n          </AccordionToggleIndicator>\n          <Space width=\"2x\" />\n          <Text>\n            Collapsible Item #3\n          </Text>\n        </AccordionToggle>\n        <AccordionCollapse>\n          <SkeletonBody px=\"4x\" py=\"3x\" />\n        </AccordionCollapse>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n")),(0,a.kt)("h2",null,"Props"),(0,a.kt)("h3",null,"Accordion"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"TODO")),(0,a.kt)("h2",null,"Props"),(0,a.kt)("h3",null,"Accordion"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description")))),(0,a.kt)("h3",null,"AccordionItem"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description")))),(0,a.kt)("h3",null,"AccordionToggle"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description")))),(0,a.kt)("h3",null,"AccordionToggleIndicator"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description")))),(0,a.kt)("h3",null,"AccordionCollapse"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description")))))}d.isMDXComponent=!0},82684:function(n,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/accordion",function(){return o(14545)}])}},function(n){n.O(0,[9774,2888,179],(function(){return e=82684,n(n.s=e);var e}));var e=n.O();_N_E=e}]);