(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9091],{37431:function(t,n,e){"use strict";e.r(n),e.d(n,{default:function(){return u}});var a=e(7896),o=e(59740),r=(e(2784),e(30876)),i=["components"],l={};function u(t){var n=t.components,e=(0,o.Z)(t,i);return(0,r.kt)("wrapper",(0,a.Z)({},l,e,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Button"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Button")," is used to trigger an action or event, such as submitting a form, opening a ",(0,r.kt)("a",{parentName:"p",href:"modal"},(0,r.kt)("inlineCode",{parentName:"a"},"Modal")),", canceling an action, or performing a delete operation."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Button } from '@tonic-ui/react';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Button>Default Button</Button>\n")),(0,r.kt)("h3",null,"Variants"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the visual style of ",(0,r.kt)("inlineCode",{parentName:"p"},"Button"),". You can set the value to ",(0,r.kt)("inlineCode",{parentName:"p"},"emphasis"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"primary"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"secondary"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"ghost"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Flex display="inline-flex" direction="column" rowGap="4x">\n  <Button variant="emphasis">Emphasis Button</Button>\n  <Button variant="primary">Primary Button</Button>\n  <Button variant="default">Default Button</Button>\n  <Button variant="secondary">Secondary Button</Button>\n  <Button variant="ghost">Ghost Button</Button>\n</Flex>\n')),(0,r.kt)("h3",null,"Sizes"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," prop to change the size of the button. You can set the value to ",(0,r.kt)("inlineCode",{parentName:"p"},"sm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"md"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"lg"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="column" spacing="4x">\n  <Stack direction="row" spacing="2x" alignItems="center">\n    <Button variant="primary" size="sm">Small</Button>\n    <Button variant="primary" size="md">Medium</Button>\n    <Button variant="primary" size="lg">Large</Button>\n  </Stack>\n  <Stack direction="row" spacing="2x" alignItems="center">\n    <Button size="sm">Small</Button>\n    <Button size="md">Medium</Button>\n    <Button size="lg">Large</Button>\n  </Stack>\n  <Stack direction="row" spacing="2x" alignItems="center">\n    <Button variant="secondary" size="sm">Small</Button>\n    <Button variant="secondary" size="md">Medium</Button>\n    <Button variant="secondary" size="lg">Large</Button>\n  </Stack>\n  <Stack direction="row" spacing="2x" alignItems="center">\n    <Button variant="ghost" size="sm">Small</Button>\n    <Button variant="ghost" size="md">Medium</Button>\n    <Button variant="ghost" size="lg">Large</Button>\n  </Stack>\n</Stack>\n')),(0,r.kt)("h3",null,"States"),(0,r.kt)("p",null,"You can make buttons look inactive or active by adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"selected")," prop. In either case, the button will not be clickable in disabled or selected state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Flex>\n  <Grid\n    templateColumns="1fr 1fr 1fr"\n    columnGap="2x"\n    rowGap="4x"\n  >\n    <TextLabel textAlign="center">Normal</TextLabel>\n    <TextLabel textAlign="center">Disabled</TextLabel>\n    <TextLabel textAlign="center">Selected</TextLabel>\n    <Button variant="emphasis">Emphasis</Button>\n    <Button variant="emphasis" disabled>Emphasis</Button>\n    <Button variant="emphasis" selected>Emphasis</Button>\n    <Button variant="primary">Primary</Button>\n    <Button variant="primary" disabled>Primary</Button>\n    <Button variant="primary" selected>Primary</Button>\n    <Button variant="default">Default</Button>\n    <Button variant="default" disabled>Default</Button>\n    <Button variant="default" selected>Default</Button>\n    <Button variant="secondary">Secondary</Button>\n    <Button variant="secondary" disabled>Secondary</Button>\n    <Button variant="secondary" selected>Secondary</Button>\n    <Button variant="ghost">Ghost</Button>\n    <Button variant="ghost" disabled>Ghost</Button>\n    <Button variant="ghost" selected>Ghost</Button>\n  </Grid>\n</Flex>\n')),(0,r.kt)("h4",null,"Disabled state"),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," prop is set (or set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"), the button will have a ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," attribute and not respond to user interactions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// DOM element\n<button type="button" disabled aria-disabled="true">Button</button>\n')),(0,r.kt)("p",null,"To customize the visual appearance of the disabled state, pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"_disabled")," style prop to override the default style."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const disabledBackgroundColor = {\n    dark: 'gray:60',\n    light: 'gray:20',\n  }[colorMode];\n  const disabledColor = colorStyle.color.emphasis;\n  const disabledOpacity = {\n    dark: '0.28',\n    light: '0.3',\n  }[colorMode];\n\n  return (\n    <Button\n      disabled\n      // Customize the visual appearance of the selected state\n      _disabled={{\n        backgroundColor: disabledBackgroundColor,\n        color: disabledColor,\n        cursor: 'not-allowed',\n        opacity: disabledOpacity,\n      }}\n    >\n      Custom Button\n    </Button>\n  );\n}\n")),(0,r.kt)("h4",null,"Selected state"),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"selected")," prop is set (or set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"), the button will have both ",(0,r.kt)("inlineCode",{parentName:"p"},"pointer-events: none")," style and ",(0,r.kt)("inlineCode",{parentName:"p"},'tabindex="-1"')," attribute. This will prevent the button from receiving pointer events and will not be reachable via sequential keyboard navigation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// DOM element\n<button type="button" aria-selected="true" tabindex="-1">Button</button>\n\n// Element style\n{ pointer-events: none; }\n')),(0,r.kt)("p",null,"To customize the visual appearance of the selected state, pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"_selected")," style prop to override the default style."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const selectedBackgroundColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const selectedColor = colorStyle.color.emphasis;\n\n  return (\n    <Button\n      selected\n      // Customize the visual appearance of the selected state\n      _selected={{\n        backgroundColor: selectedBackgroundColor,\n        color: selectedColor,\n        pointerEvents: 'none',\n      }}\n    >\n      Custom Button\n    </Button>\n  );\n}\n")),(0,r.kt)("h3",null,"Icons"),(0,r.kt)("p",null,"Icons are commonly used in toolbar buttons. You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"columnGap")," style prop or the ",(0,r.kt)("a",{parentName:"p",href:"space"},"Space")," component to adjust the spacing between the icon and the label."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Flex direction="column" rowGap="4x">\n  <Flex columnGap="4x">\n    <Button variant="primary" width="8x" height="8x" borderRadius="circle">\n      <Icon icon="add" />\n    </Button>\n    <Button variant="primary" width="8x" height="8x">\n      <Icon icon="add" />\n    </Button>\n    <Button variant="primary" borderRadius="2rem" columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button variant="primary" columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button variant="primary" borderRadius="2rem" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n    <Button variant="primary" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n  </Flex>\n  <Flex columnGap="4x">\n    <Button width="8x" height="8x" borderRadius="circle">\n      <Icon icon="add" />\n    </Button>\n    <Button width="8x" height="8x">\n      <Icon icon="add" />\n    </Button>\n    <Button borderRadius="2rem"  columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button borderRadius="2rem" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n    <Button columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n  </Flex>\n  <Flex columnGap="4x">\n    <Button variant="secondary" width="8x" height="8x" borderRadius="circle">\n      <Icon icon="add" />\n    </Button>\n    <Button variant="secondary" width="8x" height="8x">\n      <Icon icon="add" />\n    </Button>\n    <Button variant="secondary" borderRadius="2rem" columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button variant="secondary" columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button variant="secondary" borderRadius="2rem" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n    <Button variant="secondary" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n  </Flex>\n  <Flex columnGap="4x">\n    <Button variant="ghost" width="8x" height="8x" borderRadius="circle">\n      <Icon icon="add" />\n    </Button>\n    <Button variant="ghost" width="8x" height="8x">\n      <Icon icon="add" />\n    </Button>\n    <Button variant="ghost" borderRadius="2rem" columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button variant="ghost" columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button variant="ghost" borderRadius="2rem" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n    <Button variant="ghost" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n  </Flex>\n</Flex>\n')),(0,r.kt)("h2",null,"Custom Button"),(0,r.kt)("p",null,"To create a custom button, you can use the style props for the ",(0,r.kt)("a",{parentName:"p",href:"buttonbase"},"ButtonBase")," component."),(0,r.kt)("h2",null,"Props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the button will have a ",(0,r.kt)("inlineCode",{parentName:"td"},"disabled")," attribute and not respond to user interactions.",(0,r.kt)("br",null),"You can pass the ",(0,r.kt)("inlineCode",{parentName:"td"},"_disabled")," style prop to customize the visual appearance of the disabled state.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"selected"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the button will have a ",(0,r.kt)("inlineCode",{parentName:"td"},'tabIndex="-1"')," attribute and will not receive pointer events (i.e. ",(0,r.kt)("inlineCode",{parentName:"td"},"pointer-events: none;"),").",(0,r.kt)("br",null),"You can pass the ",(0,r.kt)("inlineCode",{parentName:"td"},"_selected")," style prop to customize the visual appearance of the selected state.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"size"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'md'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The size of the button. Acceptable values: 'sm', 'md', 'lg'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'default'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The variant of the button style to use. Acceptable values: 'emphasis', 'primary', 'default', 'secondary', 'ghost'")))))}u.isMDXComponent=!0},79708:function(t,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/button",function(){return e(37431)}])}},function(t){t.O(0,[9774,2888,179],(function(){return n=79708,t(t.s=n);var n}));var n=t.O();_N_E=n}]);