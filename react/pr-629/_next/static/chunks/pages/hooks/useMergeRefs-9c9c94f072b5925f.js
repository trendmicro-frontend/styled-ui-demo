(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1209],{8839:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return f}});var r=t(7896),a=t(59740),o=(t(2784),t(30876)),l=["components"],s={};function f(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",null,"useMergeRefs"),(0,o.kt)("p",null,"A custom Hook that merges React refs into a single memoized function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// import\nimport { useMergeRefs } from '@tonic-ui/react-hooks';\n\n// usage\nconst refs = useMergeRefs(ref1, ref2);\n")),(0,o.kt)("h3",null,"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"...refs"),(0,o.kt)("td",{parentName:"tr",align:"left"},"RefObject"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"The refs to merge.")))),(0,o.kt)("h3",null,"Returns"),(0,o.kt)("p",null,"Returns a single function that can be used to set multiple refs."),(0,o.kt)("h2",null,"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const Component = React.forwardRef(function Component(props, ref) {\n  const internalRef = React.useRef();\n  const refs = useMergeRefs(internalRef, ref);\n\n  React.useEffect(() => {\n    console.log('ref.current:', ref.current);\n    console.log('internalRef.current:', internalRef.current);\n  }, []);\n\n  return (\n    <Box ref={refs} {...props}>\n      A component with multiple refs\n    </Box>\n  );\n});\n\nrender(() => {\n  const externalRef = React.useRef();\n\n  React.useEffect(() => {\n    console.log('externalRef.current:', externalRef.current);\n  }, []);\n\n  return (\n    <Component ref={externalRef} />\n  );\n});\n")))}f.isMDXComponent=!0},73777:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useMergeRefs",function(){return t(8839)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=73777,e(e.s=n);var n}));var n=e.O();_N_E=n}]);