(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7546],{71787:function(e,n,t){"use strict";t.r(n);var l=t(52322),r=t(45392);function i(e){var n=Object.assign({h1:"h1",p:"p",code:"code",a:"a",h2:"h2",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h3:"h3",h4:"h4",h5:"h5"},(0,r.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{children:"Flex"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Flex"})," is a ",(0,l.jsx)(n.a,{href:"box",children:(0,l.jsx)(n.code,{children:"Box"})})," with ",(0,l.jsx)(n.code,{children:"display: flex"})," and comes with helpful style shorthand props."]}),"\n",(0,l.jsx)(n.h2,{children:"Import"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import { Flex } from '@tonic-ui/react';\n"})}),"\n",(0,l.jsx)(n.h2,{children:"Usage"}),"\n",(0,l.jsx)(n.p,{children:"Flex provides the following style shorthand props:"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Style Prop"}),(0,l.jsx)(n.th,{align:"left",children:"Shorthand Prop"}),(0,l.jsx)(n.th,{align:"left",children:"CSS Property"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"alignItems"}),(0,l.jsx)(n.td,{align:"left",children:"align"}),(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/align-items",children:"align-items"})}),(0,l.jsxs)(n.td,{align:"left",children:["Sets the ",(0,l.jsx)(n.code,{children:"align-self"})," value on all direct children as a group."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"flexDirection"}),(0,l.jsx)(n.td,{align:"left",children:"direction"}),(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction",children:"flex-direction"})}),(0,l.jsx)(n.td,{align:"left",children:"Sets how flex items are placed in the flex container."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"flexWrap"}),(0,l.jsx)(n.td,{align:"left",children:"wrap"}),(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap",children:"flex-wrap"})}),(0,l.jsx)(n.td,{align:"left",children:"Sets whether flex items are forced onto one line or can wrap onto multiple lines."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"justifyContent"}),(0,l.jsx)(n.td,{align:"left",children:"justify"}),(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content",children:"justify-content"})}),(0,l.jsx)(n.td,{align:"left",children:"Defines how the browser distributes space between and around content items along the main axis of a flex container."})]})]})]}),"\n",(0,l.jsx)(n.h3,{children:"Flex items"}),"\n",(0,l.jsxs)(n.p,{children:["You can use the ",(0,l.jsx)(n.code,{children:"flex"})," property to set how a flex item will grow or shrink to fit the available space in its flex container. It is a shorthand for ",(0,l.jsx)(n.code,{children:"flex-grow"}),", ",(0,l.jsx)(n.code,{children:"flex-shrink"}),", and ",(0,l.jsx)(n.code,{children:"flex-basis"}),". For most purposes, you should set ",(0,l.jsx)(n.code,{children:"flex"})," to one of the following values: ",(0,l.jsx)(n.code,{children:"auto"}),", ",(0,l.jsx)(n.code,{children:"initial"}),", ",(0,l.jsx)(n.code,{children:"none"}),", or a positive unitless number."]}),"\n",(0,l.jsx)(n.h4,{children:"Values"}),"\n",(0,l.jsx)(n.h5,{children:(0,l.jsx)(n.code,{children:"initial"})}),"\n",(0,l.jsxs)(n.p,{children:["The item is sized according to its ",(0,l.jsx)(n.code,{children:"width"})," and ",(0,l.jsx)(n.code,{children:"height"})," properties. It shrinks to its minimum size to fit the container, but does not grow to absorb any extra free space in the flex container. This is equivalent to setting ",(0,l.jsx)(n.code,{children:"flex: 0 1 auto"}),"."]}),"\n",(0,l.jsx)(n.h5,{children:(0,l.jsx)(n.code,{children:"auto"})}),"\n",(0,l.jsxs)(n.p,{children:["The item is sized according to its ",(0,l.jsx)(n.code,{children:"width"})," and ",(0,l.jsx)(n.code,{children:"height"})," properties, but grows to absorb any extra free space in the flex container, and shrinks to its minimum size to fit the container. This is equivalent to setting ",(0,l.jsx)(n.code,{children:"flex: 1 1 auto"}),"."]}),"\n",(0,l.jsx)(n.h5,{children:(0,l.jsx)(n.code,{children:"none"})}),"\n",(0,l.jsxs)(n.p,{children:["The item is sized according to its ",(0,l.jsx)(n.code,{children:"width"})," and ",(0,l.jsx)(n.code,{children:"height"})," properties. It is fully inflexible: it neither shrinks nor grows in relation to the flex container. This is equivalent to setting ",(0,l.jsx)(n.code,{children:"flex: 0 0 auto"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"To see the effect of these values, try resizing the flex containers below:"}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const FlexItem = (props) => (\n  <Box bg="teal:50" border={1} borderColor="teal:60" p="3x" mr="4x" mb="4x" {...props} />\n);\n\nfunction Example() {\n  return (\n    <>\n      <Flex bg="gray:10" p="4x" pb={0} pr={0} mb="4x">\n        <FlexItem flex="auto">auto</FlexItem>\n        <FlexItem flex="auto">auto</FlexItem>\n        <FlexItem flex="auto">auto</FlexItem>\n      </Flex>\n      <Flex bg="gray:10" p="4x" pb={0} pr={0} mb="4x">\n        <FlexItem flex="auto">auto</FlexItem>\n        <FlexItem flex="initial">initial</FlexItem>\n        <FlexItem flex="initial">initial</FlexItem>\n      </Flex>\n      <Flex bg="gray:10" p="4x" pb={0} pr={0} mb="4x">\n        <FlexItem flex="auto">auto</FlexItem>\n        <FlexItem flex="auto">auto</FlexItem>\n        <FlexItem flex="none">none</FlexItem>\n      </Flex>\n      <Flex bg="gray:10" p="4x" pb={0} pr={0} mb="4x">\n        <FlexItem flex="initial">initial</FlexItem>\n        <FlexItem flex="none">none</FlexItem>\n        <FlexItem flex="none">none</FlexItem>\n      </Flex>\n      <Flex bg="gray:10" p="4x" pb={0} pr={0}>\n        <FlexItem flex={4}>4</FlexItem>\n        <FlexItem flex={2}>2</FlexItem>\n        <FlexItem flex={1}>1</FlexItem>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,l.jsxs)(n.h3,{children:["The ",(0,l.jsx)(n.code,{children:"flexDirection"})," property"]}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const FlexItem = (props) => (\n  <Box bg="teal:50" border={1} borderColor="teal:60" p="3x" mr="4x" mb="4x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'row\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'row\')}>row</Button>\n        <Button variant="outline" onClick={() => setValue(\'row-reverse\')}>row-reverse</Button>\n        <Button variant="outline" onClick={() => setValue(\'column\')}>column</Button>\n        <Button variant="outline" onClick={() => setValue(\'column-reverse\')}>column-reverse</Button>\n      </Stack>\n      <pre>\n        {`<Flex flexDirection="${value}">`}\n      </pre>\n      <Flex flexDirection={value} bg="gray:10" p="4x" pb={0} pr={0}>\n        <FlexItem flex="auto">One</FlexItem>\n        <FlexItem flex="auto">Two</FlexItem>\n        <FlexItem flex="auto">Three</FlexItem>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,l.jsxs)(n.h3,{children:["The ",(0,l.jsx)(n.code,{children:"flexWrap"})," property"]}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const FlexItem = (props) => (\n  <Box bg="teal:50" border={1} borderColor="teal:60" p="3x" mr="4x" mb="4x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'nowrap\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'nowrap\')}>nowrap</Button>\n        <Button variant="outline" onClick={() => setValue(\'wrap\')}>wrap</Button>\n        <Button variant="outline" onClick={() => setValue(\'wrap-reverse\')}>wrap-reverse</Button>\n      </Stack>\n      <pre>\n        {`<Flex wrap="${value}">`}\n      </pre>\n      <Flex wrap={value} width={480} bg="gray:10" p="4x" pb={0} pr={0}>\n        <FlexItem flex="auto" minWidth={120}>One</FlexItem>\n        <FlexItem flex="auto" minWidth={120}>Two</FlexItem>\n        <FlexItem flex="auto" minWidth={120}>Three</FlexItem>\n        <FlexItem flex="auto" minWidth={120}>Four</FlexItem>\n        <FlexItem flex="auto" minWidth={120}>Five</FlexItem>\n        <FlexItem flex="auto" minWidth={120}>Six</FlexItem>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,l.jsxs)(n.h3,{children:["The ",(0,l.jsx)(n.code,{children:"alignItems"})," property"]}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const FlexItem = (props) => (\n  <Box bg="teal:50" border={1} borderColor="teal:60" p="3x" mr="4x" mb="4x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'stretch\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'stretch\')}>stretch</Button>\n        <Button variant="outline" onClick={() => setValue(\'flex-start\')}>flex-start</Button>\n        <Button variant="outline" onClick={() => setValue(\'center\')}>center</Button>\n        <Button variant="outline" onClick={() => setValue(\'flex-end\')}>flex-end</Button>\n      </Stack>\n      <pre>\n        {`<Flex alignItems="${value}">`}\n      </pre>\n      <Flex alignItems={value} height={240} bg="gray:10" p="4x" pb={0} pr={0}>\n        <FlexItem flex="auto">One</FlexItem>\n        <FlexItem flex="auto">Two</FlexItem>\n        <FlexItem flex="auto">Three</FlexItem>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,l.jsxs)(n.h3,{children:["The ",(0,l.jsx)(n.code,{children:"justifyContent"})," property"]}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const FlexItem = (props) => (\n  <Box bg="teal:50" border={1} borderColor="teal:60" p="3x" mr="4x" mb="4x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'start\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'flex-start\')}>flex-start</Button>\n        <Button variant="outline" onClick={() => setValue(\'center\')}>center</Button>\n        <Button variant="outline" onClick={() => setValue(\'flex-end\')}>flex-end</Button>\n        <Button variant="outline" onClick={() => setValue(\'space-between\')}>space-between</Button>\n        <Button variant="outline" onClick={() => setValue(\'space-around\')}>space-around</Button>\n        <Button variant="outline" onClick={() => setValue(\'space-evenly\')}>space-evenly</Button>\n      </Stack>\n      <pre>\n        {`<Flex justifyContent="${value}">`}\n      </pre>\n      <Flex justifyContent={value} bg="gray:10" p="4x" pb={0} pr={0}>\n        <FlexItem>One</FlexItem>\n        <FlexItem>Two</FlexItem>\n        <FlexItem>Three</FlexItem>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n'})})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,r.ah)(),e.components).wrapper;return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(i,e)})):i(e)}},63837:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/flex",function(){return t(71787)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=63837)}),_N_E=e.O()}]);