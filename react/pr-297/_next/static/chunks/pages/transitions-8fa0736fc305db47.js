(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2975],{60813:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return d}});var a=n(7896),r=n(59740),i=(n(2784),n(30876)),l=["components"],o={};function d(t){var e=t.components,n=(0,r.Z)(t,l);return(0,i.kt)("wrapper",(0,a.Z)({},o,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",null,"Transitions"),(0,i.kt)("p",null,"Transition helps make a UI expressive and easy to use."),(0,i.kt)("p",null,"The transition components use ",(0,i.kt)("inlineCode",{parentName:"p"},"react-transition-group")," internally to perform animation effects and manage component states (including mounting and unmounting) over time. You can check out all the transition props at ",(0,i.kt)("a",{parentName:"p",href:"https://reactcommunity.org/react-transition-group/transition/#Transition-props"},"https://reactcommunity.org/react-transition-group/transition/#Transition-props"),". For more information, visit ",(0,i.kt)("a",{parentName:"p",href:"http://reactcommunity.org/react-transition-group/transition"},"http://reactcommunity.org/react-transition-group/transition")," for detailed usage."),(0,i.kt)("h2",null,"Import"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Collapse, // internally used in `Accordion` and `Menu`\n  Fade, // internally used in `Modal`\n  Grow, // internally used in `Popover` and `Tooltip`\n  Scale,\n  Slide, // internally used in `Drawer`\n  Zoom,\n} from '@trendmicro/react-styled-ui';\n")),(0,i.kt)("h2",null,"Usage"),(0,i.kt)("h3",null,"Collapse"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Collapse")," transition is used to animate the height of a component. The ",(0,i.kt)("inlineCode",{parentName:"p"},"collapsedHeight")," prop is used to set the height of the component when it is collapsed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Stack\n      direction="column"\n      spacing="4x"\n      overflow="hidden"\n      shouldWrapChildren\n    >\n      <Flex as="label" display="inline-flex" align="center" cursor="pointer" userSelect="none">\n        <ToggleSwitch checked={isOpen} onChange={onToggle} size="sm" />\n        <Space width="2x" />\n        <Text>Show</Text>\n      </Flex>\n      <Collapse\n        in={isOpen}\n        collapsedHeight={0}\n        unmountOnExit={false}\n      >\n        <SkeletonContent>\n          <SkeletonBody />\n        </SkeletonContent>\n      </Collapse>\n    </Stack>\n  );\n}\n')),(0,i.kt)("h3",null,"Fade"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Fade")," transition is used to animate the opacity of a component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Stack\n      direction="column"\n      spacing="4x"\n      overflow="hidden"\n      shouldWrapChildren\n    >\n      <Flex as="label" display="inline-flex" align="center" cursor="pointer" userSelect="none">\n        <ToggleSwitch checked={isOpen} onChange={onToggle} size="sm" />\n        <Space width="2x" />\n        <Text>Show</Text>\n      </Flex>\n      <Fade\n        in={isOpen}\n        unmountOnExit={false}\n      >\n        <SkeletonContent>\n          <SkeletonBody />\n        </SkeletonContent>\n      </Fade>\n    </Stack>\n  );\n}\n')),(0,i.kt)("h3",null,"Grow"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Grow")," transition is used to animate the width and height of a component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Stack\n      direction="column"\n      spacing="4x"\n      overflow="hidden"\n      shouldWrapChildren\n    >\n      <Flex as="label" display="inline-flex" align="center" cursor="pointer" userSelect="none">\n        <ToggleSwitch checked={isOpen} onChange={onToggle} size="sm" />\n        <Space width="2x" />\n        <Text>Show</Text>\n      </Flex>\n      <Grow\n        in={isOpen}\n        unmountOnExit={false}\n      >\n        <SkeletonContent>\n          <SkeletonBody />\n        </SkeletonContent>\n      </Grow>\n    </Stack>\n  );\n}\n')),(0,i.kt)("h3",null,"Scale"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Scale")," transition is used to animate the scale of a component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Stack\n      direction="column"\n      spacing="4x"\n      overflow="hidden"\n      shouldWrapChildren\n    >\n      <Flex as="label" display="inline-flex" align="center" cursor="pointer" userSelect="none">\n        <ToggleSwitch checked={isOpen} onChange={onToggle} size="sm" />\n        <Space width="2x" />\n        <Text>Show</Text>\n      </Flex>\n      <Scale\n        in={isOpen}\n        unmountOnExit={false}\n        initialScale={[0.9, 0.9**2]}\n      >\n        <SkeletonContent>\n          <SkeletonBody />\n        </SkeletonContent>\n      </Scale>\n    </Stack>\n  );\n}\n')),(0,i.kt)("h3",null,"Slide"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Slide")," transition is used to slide a component in and out of view."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nfunction Example() {\n  const { isOpen, onClose, onToggle } = useDisclosure();\n  const [direction, changeDirectionBy] = useSelection(\'up\');\n\n  return (\n    <Stack\n      direction="column"\n      spacing="4x"\n      overflow="hidden"\n      shouldWrapChildren\n    >\n      <Flex as="label" display="inline-flex" align="center" cursor="pointer" userSelect="none">\n        <ToggleSwitch checked={isOpen} onChange={onToggle} size="sm" />\n        <Space width="2x" />\n        <Text>Show</Text>\n      </Flex>\n      <ButtonGroup\n        variant="secondary"\n        css={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        {[\'up\', \'down\', \'left\', \'right\'].map(value => {\n          const changeDirection = changeDirectionBy(value);\n          const onClick = () => {\n            changeDirection();\n            onClose();\n          };\n\n          return (\n            <SelectableButton\n              key={value}\n              selected={value === direction}\n              onClick={onClick}\n              minWidth="15x"\n            >\n              {value}\n            </SelectableButton>\n          );\n        })}\n      </ButtonGroup>\n      <Box overflow="hidden">\n        <Slide\n          in={isOpen}\n          direction={direction}\n          unmountOnExit={false}\n        >\n          <SkeletonContent>\n            <SkeletonBody />\n          </SkeletonContent>\n        </Slide>\n      </Box>\n    </Stack>\n  );\n}\n\nrender(<Example />);\n')),(0,i.kt)("h3",null,"Zoom"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Zoom")," transition is used to zoom in and out of a component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Stack\n      direction="column"\n      spacing="4x"\n      overflow="hidden"\n      shouldWrapChildren\n    >\n      <Flex as="label" display="inline-flex" align="center" cursor="pointer" userSelect="none">\n        <ToggleSwitch checked={isOpen} onChange={onToggle} size="sm" />\n        <Space width="2x" />\n        <Text>Show</Text>\n      </Flex>\n      <Zoom\n        in={isOpen}\n        unmountOnExit={false}\n      >\n        <SkeletonContent>\n          <SkeletonBody />\n        </SkeletonContent>\n      </Zoom>\n    </Stack>\n  );\n}\n')),(0,i.kt)("h2",null,"Transition Components"),(0,i.kt)("h3",null,"Transition easing & timeout"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<TransitionComponent\n  easing={{\n    enter: 'ease-in-out',\n    exit: 'cubic-bezier(0.42, 0, 0.58, 1)',\n  }}\n  timeout={{\n    enter: 225,\n    exit: 195,\n  }}\n/>\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<TransitionComponent\n  easing="ease-in-out"\n  timeout={300}\n/>\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Transition"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Enter Easing"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Exit Easing"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Enter Timeout"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Exit Timeout"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Collapse"),(0,i.kt)("td",{parentName:"tr",align:"left"},"easeInOut"),(0,i.kt)("td",{parentName:"tr",align:"left"},"easeInOut"),(0,i.kt)("td",{parentName:"tr",align:"left"},"standard (300ms)"),(0,i.kt)("td",{parentName:"tr",align:"left"},"standard (300ms)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Fade"),(0,i.kt)("td",{parentName:"tr",align:"left"},"easeInOut"),(0,i.kt)("td",{parentName:"tr",align:"left"},"easeInOut"),(0,i.kt)("td",{parentName:"tr",align:"left"},"enteringScreen (225ms)"),(0,i.kt)("td",{parentName:"tr",align:"left"},"leavingScreen (195ms)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Grow"),(0,i.kt)("td",{parentName:"tr",align:"left"},"easeInOut"),(0,i.kt)("td",{parentName:"tr",align:"left"},"easeInOut"),(0,i.kt)("td",{parentName:"tr",align:"left"},"'auto'"),(0,i.kt)("td",{parentName:"tr",align:"left"},"'auto'")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Scale"),(0,i.kt)("td",{parentName:"tr",align:"left"},"easeOut"),(0,i.kt)("td",{parentName:"tr",align:"left"},"easeIn"),(0,i.kt)("td",{parentName:"tr",align:"left"},"150ms"),(0,i.kt)("td",{parentName:"tr",align:"left"},"150ms")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Slide"),(0,i.kt)("td",{parentName:"tr",align:"left"},"easeOut"),(0,i.kt)("td",{parentName:"tr",align:"left"},"sharp"),(0,i.kt)("td",{parentName:"tr",align:"left"},"enteringScreen (225ms)"),(0,i.kt)("td",{parentName:"tr",align:"left"},"leavingScreen (195ms)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Zoom"),(0,i.kt)("td",{parentName:"tr",align:"left"},"easeInOut"),(0,i.kt)("td",{parentName:"tr",align:"left"},"easeInOut"),(0,i.kt)("td",{parentName:"tr",align:"left"},"enteringScreen (225ms)"),(0,i.kt)("td",{parentName:"tr",align:"left"},"leavingScreen (195ms)")))),(0,i.kt)("h4",null,"Easing"),(0,i.kt)("p",null,"The timing functions are commonly called ",(0,i.kt)("i",null,"easing functions"),", and can be defined using a predefined keyword value, a stepping function, or a cubic Bezier curve."),(0,i.kt)("p",null,"The following specifies the easing functions that are used internally transition components."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Value"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"easeInOut"),(0,i.kt)("td",{parentName:"tr",align:"left"},"'cubic-bezier(0.4, 0, 0.2, 1)'"),(0,i.kt)("td",{parentName:"tr",align:"left"},"This is the most common easing curve.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"easeOut"),(0,i.kt)("td",{parentName:"tr",align:"left"},"'cubic-bezier(0.0, 0, 0.2, 1)'"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Objects enter the screen at full velocity from off-screen and slowly decelerate to a resting point.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"easeIn"),(0,i.kt)("td",{parentName:"tr",align:"left"},"'cubic-bezier(0.4, 0, 1, 1)'"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Objects leave the screen at full velocity. They do not decelerate when off-screen.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"sharp"),(0,i.kt)("td",{parentName:"tr",align:"left"},"'cubic-bezier(0.4, 0, 0.6, 1)'"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The sharp curve is used by objects that may return to the screen at any time.")))),(0,i.kt)("h4",null,"Timeout"),(0,i.kt)("p",null,"The duration for the transition, in milliseconds."),(0,i.kt)("p",null,"The following specifies the duration for the transition that is used internally for transition components."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Value"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"shortest"),(0,i.kt)("td",{parentName:"tr",align:"left"},"150ms"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"shorter"),(0,i.kt)("td",{parentName:"tr",align:"left"},"200ms"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"short"),(0,i.kt)("td",{parentName:"tr",align:"left"},"250ms"),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"standard"),(0,i.kt)("td",{parentName:"tr",align:"left"},"300ms"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The standard duration for transitions.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"enteringScreen"),(0,i.kt)("td",{parentName:"tr",align:"left"},"225ms"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The duration for the transition when an element is entering the screen.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"leavingScreen"),(0,i.kt)("td",{parentName:"tr",align:"left"},"195ms"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The duration for the transition when an element is leaving the screen.")))),(0,i.kt)("h3",null,"Transition style"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Transition"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Entering"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Entered"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Exiting"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Exited"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Collapse"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"heght: auto;")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"heght: auto;")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"height: 0")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"height: 0;"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Fade"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"opacity: 1;")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"opacity: 1;")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"opacity: 0;")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"opacity: 0;"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Grow"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"opacity: 1;",(0,i.kt)("br",null),"transform: scale(1, 1);")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"opacity: 1;",(0,i.kt)("br",null),"transform: none;")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"opacity: 0;",(0,i.kt)("br",null),"transform: scale(0.75, 0.5625);"),(0,i.kt)("sup",null,(0,i.kt)("inlineCode",{parentName:"td"},"Note: 0.75 x 0.75 = 0.5625"))),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"opacity: 0;",(0,i.kt)("br",null),"transform: scale(0.75, 0.5625);"),(0,i.kt)("sup",null,(0,i.kt)("inlineCode",{parentName:"td"},"Note: 0.75 x 0.75 = 0.5625")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Scale"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"transform: none;")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"transform: none;")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"transform: scale(0.95, 0.95);")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"transform: scale(0.95, 0.95)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Slide"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"transform: none;")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"transform: none;")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"transform: translateX(+100%); // LEFT",(0,i.kt)("br",null),"transform: translateX(-100%); // RIGHT",(0,i.kt)("br",null),"transform: translateY(+100%); // UP",(0,i.kt)("br",null),"transform: translateY(-100%); // DOWN")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"transform: translateX(+100%); // LEFT",(0,i.kt)("br",null),"transform: translateX(-100%); // RIGHT",(0,i.kt)("br",null),"transform: translateY(+100%); // UP",(0,i.kt)("br",null),"transform: translateY(-100%); // DOWN"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Zoom"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"transform: none;")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"transform: none;")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"transform: scale(0);")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("pre",null,"transform: scale(0);"))))),(0,i.kt)("h2",null,"Props"),(0,i.kt)("h3",null,"Collapse"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"children"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ReactNode")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"(state, props) => ReactNode")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"A function child can be used instead of a React element. This function is called with the current transition state ('entering', 'entered', 'exiting', 'exited'), ref, style, and context specific props for a component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"easing"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"{ enter?: string, exit?: string }")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"{ enter: easing.easeInOut, exit: easing.easeInOut }")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The timing function that describes how intermediate values are calculated during a transition. You may specify a single timing function for all transitions, or individually with an object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"in"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", the component will transition in.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"mountOnEnter"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),', it will "lazy mount" the component on the first ',(0,i.kt)("inlineCode",{parentName:"td"},"in={true}"),". After the first enter transition the component will stay mounted, even on the 'exited' state, unless you also specify ",(0,i.kt)("inlineCode",{parentName:"td"},"unmountOnExit"),". By default the child component is mounted immediately along with the parent transition component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"{ appear?: number, enter?: number, exit?: number }")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"{ enter: duration.standard, exit: duration.standard }")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"unmountOnExit"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", it will unmount the child component when ",(0,i.kt)("inlineCode",{parentName:"td"},"in={false}")," and the animation has finished. By default the child component stays mounted after it reaches the 'exited' state.")))),(0,i.kt)("h3",null,"Fade"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"children"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ReactNode")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"(state, props) => ReactNode")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"A function child can be used instead of a React element. This function is called with the current transition state ('entering', 'entered', 'exiting', 'exited'), ref, style, and context specific props for a component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"easing"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"{ enter?: string, exit?: string }")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"{ enter: easing.easeInOut, exit: easing.easeInOut }")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The timing function that describes how intermediate values are calculated during a transition. You may specify a single timing function for all transitions, or individually with an object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"in"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", the component will transition in.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"mountOnEnter"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),', it will "lazy mount" the component on the first ',(0,i.kt)("inlineCode",{parentName:"td"},"in={true}"),". After the first enter transition the component will stay mounted, even on the 'exited' state, unless you also specify ",(0,i.kt)("inlineCode",{parentName:"td"},"unmountOnExit"),". By default the child component is mounted immediately along with the parent transition component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"{ appear?: number, enter?: number, exit?: number }")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"{ enter: duration.enterScreen, exit: duration.levingScreen }")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"unmountOnExit"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", it will unmount the child component when ",(0,i.kt)("inlineCode",{parentName:"td"},"in={false}")," and the animation has finished. By default the child component stays mounted after it reaches the 'exited' state.")))),(0,i.kt)("h3",null,"Grow"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"children"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ReactNode")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"(state, props) => ReactNode")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"A function child can be used instead of a React element. This function is called with the current transition state ('entering', 'entered', 'exiting', 'exited'), ref, style, and context specific props for a component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"easing"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"{ enter?: string, exit?: string }")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"{ enter: easing.easeInOut, exit: easing.easeInOut }")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The timing function that describes how intermediate values are calculated during a transition. You may specify a single timing function for all transitions, or individually with an object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"in"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", the component will transition in.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"mountOnEnter"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),', it will "lazy mount" the component on the first ',(0,i.kt)("inlineCode",{parentName:"td"},"in={true}"),". After the first enter transition the component will stay mounted, even on the 'exited' state, unless you also specify ",(0,i.kt)("inlineCode",{parentName:"td"},"unmountOnExit"),". By default the child component is mounted immediately along with the parent transition component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"{ appear?: number, enter?: number, exit?: number }")),(0,i.kt)("td",{parentName:"tr",align:"left"},"'auto'"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"unmountOnExit"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", it will unmount the child component when ",(0,i.kt)("inlineCode",{parentName:"td"},"in={false}")," and the animation has finished. By default the child component stays mounted after it reaches the 'exited' state.")))),(0,i.kt)("h3",null,"Scale"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"children"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ReactNode")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"(state, props) => ReactNode")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"A function child can be used instead of a React element. This function is called with the current transition state ('entering', 'entered', 'exiting', 'exited'), ref, style, and context specific props for a component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"easing"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"{ enter?: string, exit?: string }")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"{ enter: easing.easeOut, exit: easing.easeIn }")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The timing function that describes how intermediate values are calculated during a transition. You may specify a single timing function for all transitions, or individually with an object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"in"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", the component will transition in.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"initialScale"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},"0.95"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The initial scale of the element.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"mountOnEnter"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),', it will "lazy mount" the component on the first ',(0,i.kt)("inlineCode",{parentName:"td"},"in={true}"),". After the first enter transition the component will stay mounted, even on the 'exited' state, unless you also specify ",(0,i.kt)("inlineCode",{parentName:"td"},"unmountOnExit"),". By default the child component is mounted immediately along with the parent transition component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"{ appear?: number, enter?: number, exit?: number }")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"{ enter: 150, exit: 150 }")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"unmountOnExit"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", it will unmount the child component when ",(0,i.kt)("inlineCode",{parentName:"td"},"in={false}")," and the animation has finished. By default the child component stays mounted after it reaches the 'exited' state.")))),(0,i.kt)("h3",null,"Slide"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"children"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ReactNode")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"(state, props) => ReactNode")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"A function child can be used instead of a React element. This function is called with the current transition state ('entering', 'entered', 'exiting', 'exited'), ref, style, and context specific props for a component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"easing"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"{ enter?: string, exit?: string }")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"{ enter: easing.easeOut, exit: easing.sharp }")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The timing function that describes how intermediate values are calculated during a transition. You may specify a single timing function for all transitions, or individually with an object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"direction"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"'down'"),(0,i.kt)("td",{parentName:"tr",align:"left"},"One of: 'up', 'down', 'left', 'right'")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"in"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", the component will transition in.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"mountOnEnter"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),', it will "lazy mount" the component on the first ',(0,i.kt)("inlineCode",{parentName:"td"},"in={true}"),". After the first enter transition the component will stay mounted, even on the 'exited' state, unless you also specify ",(0,i.kt)("inlineCode",{parentName:"td"},"unmountOnExit"),". By default the child component is mounted immediately along with the parent transition component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"{ appear?: number, enter?: number, exit?: number }")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"{ enter: duration.enterScreen, exit: duration.levingScreen }")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"unmountOnExit"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", it will unmount the child component when ",(0,i.kt)("inlineCode",{parentName:"td"},"in={false}")," and the animation has finished. By default the child component stays mounted after it reaches the 'exited' state.")))),(0,i.kt)("h3",null,"Zoom"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"children"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ReactNode")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"(state, props) => ReactNode")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"A function child can be used instead of a React element. This function is called with the current transition state ('entering', 'entered', 'exiting', 'exited'), ref, style, and context specific props for a component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"easing"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"{ enter?: string, exit?: string }")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"{ enter: easing.easeInOut, exit: easing.easeInOut }")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The timing function that describes how intermediate values are calculated during a transition. You may specify a single timing function for all transitions, or individually with an object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"in"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", the component will transition in.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"mountOnEnter"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),', it will "lazy mount" the component on the first ',(0,i.kt)("inlineCode",{parentName:"td"},"in={true}"),". After the first enter transition the component will stay mounted, even on the 'exited' state, unless you also specify ",(0,i.kt)("inlineCode",{parentName:"td"},"unmountOnExit"),". By default the child component is mounted immediately along with the parent transition component.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"{ appear?: number, enter?: number, exit?: number }")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"{ enter: duration.enterScreen, exit: duration.levingScreen }")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"unmountOnExit"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),", it will unmount the child component when ",(0,i.kt)("inlineCode",{parentName:"td"},"in={false}")," and the animation has finished. By default the child component stays mounted after it reaches the 'exited' state.")))))}d.isMDXComponent=!0},65505:function(t,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/transitions",function(){return n(60813)}])}},function(t){t.O(0,[9774,2888,179],(function(){return e=65505,t(t.s=e);var e}));var e=t.O();_N_E=e}]);