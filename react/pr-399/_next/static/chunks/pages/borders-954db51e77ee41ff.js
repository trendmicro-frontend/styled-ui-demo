(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7385],{58980:function(e,n,r){"use strict";var o=r(12215),t=r(58693),d=(r(2784),r(92582)),l=r(70345),i=r(81436);n.Z=function(e){var n,r=e.theme,a=(0,t.useTheme)(),s=(0,t.useColorMode)(),h=(0,o.Z)(s,1)[0],c=(0,t.useColorStyle)({colorMode:h}),p=null!==(n=(0,o.Z)(c,1)[0][r])&&void 0!==n?n:a[r];if(!p)return"Theme field not found";"space"!==r&&"sizes"!==r||(p=Object.keys(p).filter((function(e){return!e.toString().match(/[qh]$/)})).reduce((function(e,n){return e[n]=p[n],e}),{}));return(0,i.jsx)(t.Box,{mb:"6x"},(0,i.jsx)(d.Z,null,"export const ".concat(r," = ").concat((0,l.Z)(p,!1))))}},70345:function(e,n){"use strict";n.Z=function(e){return JSON.stringify(e,null,2).replace(/"/g,"'").replace(/'(\d+|[a-z]+)':/g,"$1:")}},22139:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return s}});var o=r(7896),t=r(59740),d=(r(2784),r(30876)),l=(r(58693),r(58980)),i=["components"],a={};function s(e){var n=e.components,r=(0,t.Z)(e,i);return(0,d.kt)("wrapper",(0,o.Z)({},a,r,{components:n,mdxType:"MDXLayout"}),(0,d.kt)("h1",null,"Borders"),(0,d.kt)(l.Z,{theme:"borders",mdxType:"ThemeParser"}),(0,d.kt)("h2",null,"Border"),(0,d.kt)("p",null,"The border shorthand property sets all the border properties in one declaration."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},'/* style */\nborder="solid"\n\n/* width | style */\nborder="2px dotted"\n\n/* style | color */\nborder="outset #f33"\n\n/* width | style | color */\nborder="medium dashed green"\n\n/* Global values */\nborder="inherit"\nborder="initial"\nborder="unset"\n')),(0,d.kt)("p",null,"The ",(0,d.kt)("inlineCode",{parentName:"p"},"border")," property may be specified using one, two, or three of the values listed below. The order of the value does not matter. See ",(0,d.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border"},"border")," in MDN for more details."),(0,d.kt)("p",null,"Note: The border will be invisible if its style is not defined. This is because the style defaults to ",(0,d.kt)("inlineCode",{parentName:"p"},"none"),"."),(0,d.kt)("h3",null,"Values"),(0,d.kt)("p",null,(0,d.kt)("inlineCode",{parentName:"p"},"<border-color>"),"\nSets the color of the border. Defaults to ",(0,d.kt)("inlineCode",{parentName:"p"},"currentcolor")," if absent."),(0,d.kt)("p",null,(0,d.kt)("inlineCode",{parentName:"p"},"<border-style>"),"\nSets the style of the border. Defaults to ",(0,d.kt)("inlineCode",{parentName:"p"},"none")," if absent."),(0,d.kt)("p",null,(0,d.kt)("inlineCode",{parentName:"p"},"<border-width>"),"\nSets the thickness of the border. Defaults to ",(0,d.kt)("inlineCode",{parentName:"p"},"medium")," if absent."),(0,d.kt)("h3",null,"Nonnegative length"),(0,d.kt)("p",null,"If the border is a numeric value defined in the theme, the ",(0,d.kt)("inlineCode",{parentName:"p"},"solid")," border style will be applied as a shorthand for the ",(0,d.kt)("inlineCode",{parentName:"p"},"borderWidth")," and ",(0,d.kt)("inlineCode",{parentName:"p"},"borderStyle")," properties."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const Block = (props) => {\n  const [colorMode] = useColorMode();\n  const backgroundColor = {\n    dark: \'gray:90\',\n    light: \'gray:10\',\n  }[colorMode];\n  return (\n    <Flex\n      px="4x"\n      py="3x"\n      alignItems="center"\n      justifyContent="center"\n      backgroundColor={backgroundColor}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const borderWidths = [1, 2, 3, 4, 5];\n  const [borderWidth, setBorderWidth] = React.useState(borderWidths[0]);\n  const borderStyle = theme.borders[borderWidth] || borderWidth;\n\n  return (\n    <>\n      <Flex align="center" mb="5x">\n        <TextLabel>Border width:</TextLabel>\n        <Space width="2x" />\n        <Stack direction="row" spacing="2x">\n          {borderWidths.map((width) => (\n            <Button\n              key={width}\n              onClick={() => setBorderWidth(width)}\n              variant={width === borderWidth ? \'primary\' : \'secondary\'}\n            >\n              <Text fontFamily="mono">{width}</Text>\n            </Button>\n          ))}\n        </Stack>\n      </Flex>\n      <Flex>\n        <Grid\n          templateColumns="1fr 1fr 1fr"\n          columnGap="6x"\n          rowGap="6x"\n        >\n          <Box />\n          <Block\n            borderTop={borderWidth}\n            borderTopColor="gray:50"\n          >\n            borderTop="{borderStyle}"\n          </Block>\n          <Box />\n          <Block\n            borderLeft={borderWidth}\n            borderLeftColor="gray:50"\n          >\n            borderLeft="{borderStyle}"\n          </Block>\n          <Block\n            border={borderWidth}\n            borderColor="gray:50"\n          >\n            border="{borderStyle}"\n          </Block>\n          <Block\n            borderRight={borderWidth}\n            borderRightColor="gray:50"\n          >\n            borderRight="{borderStyle}"\n          </Block>\n          <Box />\n          <Block\n            borderBottom={borderWidth}\n            borderBottomColor="gray:50"\n          >\n            borderBottom="{borderStyle}"\n          </Block>\n          <Box />\n        </Grid>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,d.kt)("h3",null,"Keyword"),(0,d.kt)("p",null,(0,d.kt)("inlineCode",{parentName:"p"},"thin"),", ",(0,d.kt)("inlineCode",{parentName:"p"},"medium"),", and ",(0,d.kt)("inlineCode",{parentName:"p"},"thick")," are keywords that indicate the border width. You can use them in the ",(0,d.kt)("inlineCode",{parentName:"p"},"border")," property, but you have to set the ",(0,d.kt)("inlineCode",{parentName:"p"},"borderStyle")," property to ",(0,d.kt)("inlineCode",{parentName:"p"},"solid")," as well."),(0,d.kt)("p",null,"Note: Because the specification doesn't define the exact thickness denoted by each keyword, the precise result when using one of them is implementation-specific. Nevertheless, they always follow the pattern ",(0,d.kt)("inlineCode",{parentName:"p"},"thin \u2264 medium \u2264 thick"),", and the values are constant within a single document."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const Block = (props) => {\n  const [colorMode] = useColorMode();\n  const backgroundColor = {\n    dark: \'gray:90\',\n    light: \'gray:10\',\n  }[colorMode];\n  return (\n    <Flex\n      px="4x"\n      py="3x"\n      alignItems="center"\n      justifyContent="center"\n      backgroundColor={backgroundColor}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const borderWidths = [\'thin\', \'medium\', \'thick\'];\n  const [borderWidth, setBorderWidth] = React.useState(borderWidths[0]);\n  const borderStyle = theme.borders[borderWidth] || borderWidth;\n\n  return (\n    <>\n      <Flex align="center" mb="5x">\n        <TextLabel>Border width:</TextLabel>\n        <Space width="2x" />\n        <Stack direction="row" spacing="2x">\n          {borderWidths.map((width) => (\n            <Button\n              key={width}\n              onClick={() => setBorderWidth(width)}\n              variant={width === borderWidth ? \'primary\' : \'secondary\'}\n            >\n              <Text fontFamily="mono">{width}</Text>\n            </Button>\n          ))}\n        </Stack>\n      </Flex>\n      <Flex>\n        <Grid\n          templateColumns="1fr 1fr 1fr"\n          columnGap="6x"\n          rowGap="6x"\n        >\n          <Box />\n          <Block\n            borderTop={borderWidth}\n            borderTopColor="gray:50"\n            borderTopStyle="solid"\n          >\n            borderTop="{borderStyle}"\n          </Block>\n          <Box />\n          <Block\n            borderLeft={borderWidth}\n            borderLeftColor="gray:50"\n            borderLeftStyle="solid"\n          >\n            borderLeft="{borderStyle}"\n          </Block>\n          <Block\n            border={borderWidth}\n            borderColor="gray:50"\n            borderStyle="solid"\n          >\n            border="{borderStyle}"\n          </Block>\n          <Block\n            borderRight={borderWidth}\n            borderRightColor="gray:50"\n            borderRightStyle="solid"\n          >\n            borderRight="{borderStyle}"\n          </Block>\n          <Box />\n          <Block\n            borderBottom={borderWidth}\n            borderBottomColor="gray:50"\n            borderBottomStyle="solid"\n          >\n            borderBottom="{borderStyle}"\n          </Block>\n          <Box />\n        </Grid>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,d.kt)("h2",null,"Border Radius"),(0,d.kt)(l.Z,{theme:"radii",mdxType:"ThemeParser"}),(0,d.kt)("h3",null,(0,d.kt)("inlineCode",{parentName:"h3"},'borderRadius="circle"')),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-jsx"},'<Box\n  backgroundColor="gray:80"\n  border={1}\n  borderColor="gray:40"\n  borderRadius="circle"\n  width="18x"\n  height="18x"\n/>\n')),(0,d.kt)("h3",null,(0,d.kt)("inlineCode",{parentName:"h3"},'borderRadius="sm"')),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-jsx"},'<Box\n  backgroundColor="gray:80"\n  border={1}\n  borderColor="gray:40"\n  borderRadius="sm"\n  width="18x"\n  height="18x"\n/>\n')),(0,d.kt)("h3",null,(0,d.kt)("inlineCode",{parentName:"h3"},'borderRadius="md"')),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-jsx"},'<Box\n  backgroundColor="gray:80"\n  border={1}\n  borderColor="gray:40"\n  borderRadius="md"\n  width="18x"\n  height="18x"\n/>\n')),(0,d.kt)("h3",null,(0,d.kt)("inlineCode",{parentName:"h3"},'borderRadius="lg"')),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-jsx"},'<Box\n  backgroundColor="gray:80"\n  border={1}\n  borderColor="gray:40"\n  borderRadius="lg"\n  width="18x"\n  height="18x"\n/>\n')),(0,d.kt)("h2",null,"Borders vs. outlines"),(0,d.kt)("p",null,"Borders and ",(0,d.kt)("a",{parentName:"p",href:"./outlines"},"outlines")," are very similar. However, outlines differ from borders in the following ways:"),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"Outlines never take up space, as they are drawn outside of an element's content."),(0,d.kt)("li",{parentName:"ul"},"According to the spec, outlines don't have to be rectangular, although they usually are.")))}s.isMDXComponent=!0},87224:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/borders",function(){return r(22139)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=87224,e(e.s=n);var n}));var n=e.O();_N_E=n}]);