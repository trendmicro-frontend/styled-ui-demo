(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[168],{8505:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return c}});var o=t(7896),a=t(59740),i=(t(2784),t(30876)),r=["components"],l={};function c(n){var e=n.components,t=(0,a.Z)(n,r);return(0,i.kt)("wrapper",(0,o.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",null,"Icon"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Icon")," is used to render SVG icons in a more convenient way. You can extend icons by defining icon keys in ",(0,i.kt)("inlineCode",{parentName:"p"},"theme.icons"),"."),(0,i.kt)("h2",null,"Import"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { Icon } from '@trendmicro/react-styled-ui';\n")),(0,i.kt)("h2",null,"Usage"),(0,i.kt)("p",null,"Use an icon by passing the ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," prop. This ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," property value must match an icon key defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"theme.icons"),". By default, the icon inherits the font size and color of its parent."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="row" spacing="4x" alignItems="center">\n  <Icon icon="face-smile-o" />\n  <Icon icon="face-smile-o" size="6x" color="red:50" />\n  <Icon icon="face-smile-o" size="8x" color="yellow:50" />\n  <Icon icon="face-smile-o" size="12x" color="teal:40" />\n</Stack>\n')),(0,i.kt)("h3",null,"Animating icons"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"spin")," prop to get any icon to rotate either in the clockwise (CW) or counterclockwise (CCW) direction."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const useToggle = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const toggle = () => setValue(value => !value);\n  return [value, toggle, setValue];\n};\n\nfunction Example() {\n  const [checked, toggle] = useToggle(true);\n  const playState = checked ? \'running\' : \'paused\';\n\n  return (\n    <>\n      <Flex mb="4x">\n        <Switch size="sm" checked={checked} onChange={toggle} /><Space width="4x" />Toggle animation\n      </Flex>\n      <Stack direction="row" spacing="4x">\n        <Icon icon="spinner" size="6x" spin animationPlayState={playState} />\n        <Icon icon="spinner" size="6x" spin animationDuration="4s" animationPlayState={playState} />\n        <Icon icon="clock" size="6x" spin animationPlayState={playState} animationTimingFunction="steps(8)" />\n        <Icon icon="redo" size="6x" spin="cw" animationPlayState={playState} />\n        <Icon icon="undo" size="6x" spin="ccw" animationPlayState={playState} />\n      </Stack>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"animation")," prop can be used to override default animation, it is a shorthand property for:"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-name"},"animationName"),(0,i.kt)("br",null),"\n\u2022 ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-duration"},"animationDuration"),(0,i.kt)("br",null),"\n\u2022 ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function"},"animationTimingFunction"),(0,i.kt)("br",null),"\n\u2022 ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay"},"animationDelay"),(0,i.kt)("br",null),"\n\u2022 ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count"},"animationIterationCount"),(0,i.kt)("br",null),"\n\u2022 ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction"},"animationDirection"),(0,i.kt)("br",null),"\n\u2022 ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode"},"animationFillMode"),(0,i.kt)("br",null),"\n\u2022 ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state"},"animationPlayState"),(0,i.kt)("br",null)),(0,i.kt)("h2",null,"Adding custom icons"),(0,i.kt)("p",null,"First, you have to add custom icons to the theme. Each icon must be an object containing ",(0,i.kt)("inlineCode",{parentName:"p"},"path")," and optional style props passed to ",(0,i.kt)("a",{parentName:"p",href:"./svgicon"},"SVGIcon"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled noInline",disabled:!0,noInline:!0},'const customIcons = {\n  icon1: {\n    path: (\n      <path fill="currentColor" d="..." />\n    ),\n  },\n  icon2: {\n    path: (\n      <g fill="currentColor">\n        <path d="..." />\n      </g>\n    ),\n\n    // optional style props\n    viewBox: \'0 0 48 48\',\n  },\n};\n\nconst customTheme = {\n  ...theme,\n  icons: {\n    ...theme.icons,\n    ...customIcons,\n  },\n};\n')),(0,i.kt)("p",null,"After that simply wrap your app into ",(0,i.kt)("inlineCode",{parentName:"p"},"ThemeProvider")," component and pass your theme as a ",(0,i.kt)("inlineCode",{parentName:"p"},"theme")," prop. Just like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled noInline",disabled:!0,noInline:!0},"<ThemeProvider theme={customTheme}>\n  <App />\n</ThemeProvider>\n")),(0,i.kt)("p",null,"Pass the icon name as a prop to the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Icon>")," component to render the SVG icon:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled noInline",disabled:!0,noInline:!0},'<Icon icon="icon1" color="blue:50" />\n')),(0,i.kt)("h3",null,"Search icons"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const getIcons = (keyword) => tmicons.map(({ group, icons }) => {\n    const filteredIcons = icons.filter(({ iconset, name }) => (!keyword || name.indexOf(keyword) >= 0));\n    if (filteredIcons.length === 0) {\n      return null\n    }\n    return { group, icons: filteredIcons }\n  }\n);\n\nconst FlexItem = (props) => (\n  <Box {...props} />\n);\n\nconst renderIconGroup = (iconSet, keyword, showCharCode, color) => {\n  if(!iconSet) {\n    return null;\n  }\n  return (<Box key={iconSet.group.name}>\n    <FlexItem pt={iconSet.group.id !== 0 && \'2x\'}>\n      <Text fontSize={"2xl"}>{iconSet.group.name}</Text>    \n    </FlexItem>\n    {<Grid\n      gap="2x"\n      templateColumns="repeat(auto-fill, minmax(300px, 1fr));"\n      p="4x"\n      pl="6x"\n      pr="4x"\n    >\n      {iconSet.icons.map(icon => (\n        <Flex direction="row" align="center" pb={0} pr={0} overflow="hidden" key={icon.code}>\n          <FlexItem flex="initial" pr="2x">\n            <Icon icon={icon.name}/>\n          </FlexItem>\n          <FlexItem flex="none" pr="2x">\n            <Text display={"inline-block"} fontSize={"md"} color={color}>\n              {icon.name}\n            </Text>\n          </FlexItem>\n          {showCharCode && <FlexItem flex="none" pr="1x" color={color}>\n            <Text fontSize={"md"}>\n              {`(&#x${icon.code})`}\n            </Text>\n          </FlexItem>\n          }\n          <FlexItem flex="none" pb="1x">\n            {icon.new && <Badge variantColor="green" badgeContent={"new"} />}\n          </FlexItem>\n        </Flex>\n      ))}\n    </Grid>}\n  </Box>)\n}\n\nfunction Example() {\n  const [keyword, setKeyword] = React.useState(\'\');\n  const [showCharCode, setShowCharCode] = React.useState(false);\n  const [colorMode] = useColorMode();\n  const color = {\n    light: \'black:secondary\',\n    dark: \'white:secondary\',\n  }[colorMode];\n\n  const onChange = (e) => {\n    const keyword = e.target.value;\n    setKeyword(keyword);\n  };\n\n  const onClearInput = (e) => {\n    const keyword = \'\';\n    setKeyword(keyword);\n  };\n\n  const onChecked = () => {\n    setShowCharCode(!showCharCode);\n  }\n\n  return (\n    <>\n      <Flex direction="row" align="center" position="relative">\n        <Box pl="4x">\n          <SearchInput\n            fontSize="md"\n            placeholder="Search"\n            onChange={onChange}\n            onClearInput={onClearInput}\n            width={430}\n          />\n        </Box>\n        <Box position="absolute" right="5px">\n          <Checkbox\n            size="md"\n            onChange={() => onChecked()}>\n            Display character codes\n          </Checkbox>\n        </Box>\n      </Flex>\n      <Grid\n        gap={0}\n        templateRows="1fr"\n        p="4x"\n        transition="all .3s ease-in"\n      >\n        {getIcons(keyword).map((iconSet) => renderIconGroup(iconSet, keyword, showCharCode, color))}\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,i.kt)("h2",null,"Props"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"icon"),(0,i.kt)("td",{parentName:"tr",align:"left"},"string"),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"The name of the icon.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"spin"),(0,i.kt)("td",{parentName:"tr",align:"left"},"boolean ","|"," string"),(0,i.kt)("td",{parentName:"tr",align:"left"},"false"),(0,i.kt)("td",{parentName:"tr",align:"left"},"If ",(0,i.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"'cw'"),", it will rotate in the clockwise direction. If ",(0,i.kt)("inlineCode",{parentName:"td"},"'ccw'"),", it will rotate in the counterclockwise direction. Otherwise, no rotation occurs.")))))}c.isMDXComponent=!0},95007:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/icon",function(){return t(8505)}])}},function(n){n.O(0,[9774,2888,179],(function(){return e=95007,n(n.s=e);var e}));var e=n.O();_N_E=e}]);