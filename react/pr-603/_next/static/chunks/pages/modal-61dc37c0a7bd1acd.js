(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4692],{59815:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return s}});var o=t(7896),l=t(59740),a=(t(2784),t(30876)),r=["components"],i={};function s(e){var n=e.components,t=(0,l.Z)(e,r);return(0,a.kt)("wrapper",(0,o.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",null,"Modal"),(0,a.kt)("p",null,"Modal dialogs are used to inform users about a task and can contain critical information, require decisions, or involve multiple tasks. Modal dialogs disable app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken."),(0,a.kt)("h2",null,"Import"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Modal"),": A ",(0,a.kt)("inlineCode",{parentName:"li"},"Provider")," component that provides the context to the components it wraps."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalOverlay"),": The overlay of the modal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalContent"),": The content of the modal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalHeader"),": The header of the modal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalBody"),": The body of the modal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModalFooter"),": The footer of the modal.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from '@trendmicro/react-styled-ui';\n")),(0,a.kt)("h2",null,"Modal components"),(0,a.kt)("p",null,"Below is a static modal example, including modal header (optional), modal body (required when padding is necessary), and modal footer (optional)."),(0,a.kt)("p",null,"You can also compose your modal components when customization is needed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const SkeletonContent = (props) => (\n  <Flex {...props}>\n    <Flex flex="none" mr="4x" align="center">\n      <Skeleton variant="circle" width="10x" height="10x" />\n    </Flex>\n    <Box flex="auto">\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </Box>\n  </Flex>\n);\n\nfunction Example() {\n  return (\n    <Stack direction="column" spacing="4x">\n      <ModalContent ml={0} width={480}>\n        <ModalHeader>\n          Modal Title\n        </ModalHeader>\n        <ModalBody>\n          <Alert variant="outline" severity="warning" mb="4x">\n            <Text>This is a warning alert</Text>\n          </Alert>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonContent />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant="primary" minWidth="20x">Save Changes</Button>\n          <Space width="2x" />\n          <Button minWidth="20x">Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n      <ModalContent ml={0} width={480}>\n        <ModalBody>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonContent />\n        </ModalBody>\n        <ModalFooter>\n          <Button variant="primary" minWidth="20x">Save Changes</Button>\n          <Space width="2x" />\n          <Button minWidth="20x">Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n      <ModalContent ml={0} width={480}>\n        <ModalBody>\n          <Text mb="4x">\n            Modal body text goes here.\n          </Text>\n          <SkeletonContent />\n        </ModalBody>\n      </ModalContent>\n      <ModalContent ml={0} width={480}>\n        <Box px="4x" py="4x">\n          You can create a custom modal with any sort of content.\n        </Box>\n      </ModalContent>\n    </Stack>\n  );\n}\n\nrender(<Example />);\n')),(0,a.kt)("h2",null,"Usage"),(0,a.kt)("p",null,"Click the button below to toggle a modal. The modal will show up in the center of the screen."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const SelectableButton = ({ selected, ...props }) => {\n  const [colorMode] = useColorMode();\n  const { colors } = useTheme();\n  const focusColor = colors[\'blue:60\'];\n  let _selectedColor = {\n    dark: \'blue:60\',\n    light: \'blue:60\',\n  }[colorMode];\n  _selectedColor = colors[_selectedColor];\n  const getSelectedProps = {\n    bg: _selectedColor,\n    borderColor: _selectedColor,\n    color: \'white:emphasis\',\n    cursor: \'default\',\n    pointerEvents: \'none\',\n    zIndex: 1,\n    css: {\n      \'&::before\': {\n        backgroundColor: _selectedColor,\n      },\n      \'&:focus\': {\n        \':not(:active)\': {\n          borderColor: focusColor,\n          boxShadow: `inset 0 0 0 1px ${focusColor}`,\n        },\n        \'&::before\': {\n          backgroundColor: focusColor,\n        },\n      }\n    },\n    _hover: {\n      bg: _selectedColor,\n    },\n    _active: {\n      bg: _selectedColor,\n    },\n  };\n  return (\n    <Button\n      {...(selected && getSelectedProps)}\n      {...props}\n    />\n  );\n};\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst useToggle = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const toggle = () => setValue(value => !value);\n  return [value, toggle];\n};\n\nconst FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst modalWithBodyScrollLockCode = `\n<Modal>\n  <Global\n    styles={css\\`\n      body {\n        overflow: hidden;\n      }\n    \\`}\n  />\n  <ModalOverlay />\n  <ModalContent />\n</Modal>\n`.trim();\n\nfunction Example() {\n  const initialFocusRef = React.useRef();\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const iconColor = {\n    dark: \'white:tertiary\',\n    light: \'black:tertiary\',\n  }[colorMode];\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [ensureFocus, toggleEnsureFocus] = useToggle(true);\n  const [autoFocus, toggleAutoFocus] = useToggle(true);\n  const [closeOnEsc, toggleCloseOnEsc] = useToggle(true);\n  const [closeOnOutsideClick, toggleCloseOnOutsideClick] = useToggle(true);\n  const [isClosable, toggleIsClosable] = useToggle(true);\n  const [isOverlayVisible, toggleIsOverlayVisible] = useToggle(true);\n  const [isHeaderVisible, toggleIsHeaderVisible] = useToggle(true);\n  const [isBodyVisible, toggleIsBodyVisible] = useToggle(true);\n  const [isFooterVisible, toggleIsFooterVisible] = useToggle(true);\n  const [isAlertVisible, toggleIsAlertVisible] = useToggle(true);\n  const [size, changeSizeBy] = useSelection(\'sm\');\n  const [scrollBehavior, changeScrollBehaviorBy] = useSelection(\'inside\');\n  const [height, changeHeightBy] = useSelection(\'default\');\n  const [enableBodyScrollLock, toggleBodyScrollLock] = useToggle(true);\n  const [enableModalOverflowBehavior, toggleModalOverflowBehavior] = useToggle(true);\n\n  return (\n    <>\n      <Box>\n        <Button onClick={onOpen}>\n          Launch modal\n        </Button>\n      </Box>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'auto\', \'xs\', \'sm\', \'md\', \'lg\', \'xl\', \'full\'].map(value => (\n            <SelectableButton\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </SelectableButton>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            scrollBehavior\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'inside\', \'outside\'].map(value => (\n            <SelectableButton\n              key={value}\n              selected={value === scrollBehavior}\n              onClick={changeScrollBehaviorBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </SelectableButton>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            height\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'default\', \'100%\'].map(value => (\n            <SelectableButton\n              key={value}\n              selected={value === height}\n              onClick={changeHeightBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </SelectableButton>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={ensureFocus}\n            onChange={toggleEnsureFocus}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ensureFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={autoFocus}\n            disabled={!ensureFocus}\n            onChange={toggleAutoFocus}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">autoFocus</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnEsc}\n            disabled={!isClosable && !closeOnOutsideClick}\n            onChange={toggleCloseOnEsc}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnEsc</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={closeOnOutsideClick}\n            disabled={!isClosable && !closeOnEsc}\n            onChange={toggleCloseOnOutsideClick}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">closeOnOutsideClick</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={isClosable}\n            disabled={!closeOnEsc && !closeOnOutsideClick}\n            onChange={toggleIsClosable}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">isClosable</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Modal composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isOverlayVisible} onChange={toggleIsOverlayVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalOverlay</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isHeaderVisible} onChange={toggleIsHeaderVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isBodyVisible} onChange={toggleIsBodyVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isFooterVisible} onChange={toggleIsFooterVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">ModalFooter</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox checked={isAlertVisible} onChange={toggleIsAlertVisible} />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">Alert</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Extra modal setup\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center" mb="3x">\n          <Checkbox\n            checked={enableModalOverflowBehavior}\n            onChange={() => toggleModalOverflowBehavior()}\n          />\n          <Space width="2x" />\n          <Text>\n            Enable modal overflow behavior to make scrollbar visible\n          </Text>\n        </TextLabel>\n        <Box ml="6x">\n          <Text mb="2x">\n            Enable this option will increase the content height to overflow the viewport and make the content scrollable.\n          </Text>\n          <Text mb="2x">\n            You can use the <Code>scrollBehavior</Code> prop to control how scrolling should behave:\n          </Text>\n          <Box as="ul" my="2x">\n            <li>If set to <Code>inside</Code>, only the <Code>ModalBody</Code> will scroll.</li>\n            <li>If set to <Code>outside</Code>, the entire <Code>ModalContent</Code> will scroll within the viewport.</li>\n          </Box>\n        </Box>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center" mb="3x">\n          <Checkbox\n            checked={enableBodyScrollLock}\n            onChange={() => toggleBodyScrollLock()}\n          />\n          <Space width="2x" />\n          <Text>\n            Enable body scroll locking\n          </Text>\n        </TextLabel>\n        <Box ml="6x">\n          <Box mb="4x">\n            <Text mb="2x">\n              When setting <Code>scrollBehavior="outside"</Code> to enable outside scrolling, you should also use <strong>Body Scroll Locking</strong> to prevent the user from scrolling the page while the modal is open.\n            </Text>\n            <Text mb="2x">\n              <strong>Body Scroll Locking</strong> is currently not available with default setup, you can follow the instructions below to append global styles to the body to prevent scrolling.\n            </Text>\n          </Box>\n          <Box\n            backgroundColor={colorStyle.background.secondary}\n            fontFamily="mono"\n            px="3x"\n            py="2x"\n            mb="4x"\n            whiteSpace="pre"\n          >\n            {`import { Global } from \'@emotion/react\'`}\n          </Box>\n          <Box\n            backgroundColor={colorStyle.background.secondary}\n            fontFamily="mono"\n            px="3x"\n            py="2x"\n            whiteSpace="pre"\n          >\n            {modalWithBodyScrollLockCode}\n          </Box>\n        </Box>\n      </FormGroup>\n      <Scale\n        in={isOpen}\n        duration={150}\n      >\n        {styles => (\n          <Modal\n            ensureFocus={ensureFocus}\n            autoFocus={autoFocus}\n            closeOnEsc={closeOnEsc}\n            closeOnOutsideClick={closeOnOutsideClick}\n            initialFocusRef={initialFocusRef}\n            isClosable={isClosable}\n            isOpen={true} // Set to `true` if a transition is active\n            onClose={onClose}\n            size={size}\n            scrollBehavior={scrollBehavior}\n          >\n            {enableBodyScrollLock && (\n              <Global\n                styles={css`\n                  body {\n                    overflow: hidden;\n                  }\n                `}\n              />\n            )}\n            {isOverlayVisible && (\n              <ModalOverlay opacity={styles.opacity} />\n            )}\n            <ModalContent\n              {...styles}\n              height={height !== \'default\' ? height : undefined}\n            >\n              {isHeaderVisible && (\n                <ModalHeader>\n                  Modal Title\n                </ModalHeader>\n              )}\n              {isBodyVisible && (\n                <ModalBody>\n                  {isAlertVisible && (\n                    <Alert variant="outline" severity="info" mb="4x" isClosable onClose={() => toggleIsAlertVisible()}>\n                      <Text>This is an info alert</Text>\n                    </Alert>\n                  )}\n                  <Text mb="4x">\n                    You can put any elements you want here.\n                  </Text>\n                  <Grid\n                    templateColumns="auto 1fr"\n                    rowGap="2x"\n                    columnGap="3x"\n                    alignItems="center"\n                    mb="4x"\n                  >\n                    <Icon icon="user" color={iconColor} />\n                    <Input ref={initialFocusRef} placeholder="User name" />\n                    <Icon icon="email" color={iconColor} />\n                    <Input placeholder="Email address" />\n                  </Grid>\n                  {enableModalOverflowBehavior && (\n                    <Box\n                      backgroundColor={colorStyle.background.tertiary}\n                      mb="4x"\n                      minHeight={1000}\n                      px="3x"\n                      py="2x"\n                    >\n                      <Text>\n                        This is a very long content that will overflow the modal\n                      </Text>\n                    </Box>\n                  )}\n                  <RadioGroup defaultValue="1">\n                    <Stack direction="row" spacing="3x">\n                      <Radio value="1">Radio 1</Radio>\n                      <Radio value="2">Radio 2</Radio>\n                    </Stack>\n                  </RadioGroup>\n                </ModalBody>\n              )}\n              {isFooterVisible && (\n                <ModalFooter>\n                  <Button variant="primary">\n                    OK\n                  </Button>\n                  <Space width="2x" />\n                  <Button onClick={onClose}>\n                    Cancel\n                  </Button>\n                </ModalFooter>\n              )}\n            </ModalContent>\n          </Modal>\n        )}\n      </Scale>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,a.kt)("h3",null,"Sizes"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"size")," prop to change the size of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Modal"),". You can set the value to ",(0,a.kt)("inlineCode",{parentName:"p"},"auto"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"xs"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"sm"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"md"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"lg"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"xl"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"full"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [size, setSize] = React.useState(\'auto\');\n  const handleClickBy = nextSize => (e) => {\n    setSize(nextSize);\n    onOpen();\n  };\n\n  return (\n    <>\n      <Stack direction="row" spacing="3x" flexWrap="wrap" mt={-12}>\n        <Button onClick={handleClickBy(\'auto\')} mt="3x">Auto width</Button>\n        <Button onClick={handleClickBy(\'xs\')} mt="3x">Extra small width</Button>\n        <Button onClick={handleClickBy(\'sm\')} mt="3x">Small width</Button>\n        <Button onClick={handleClickBy(\'md\')} mt="3x">Medium width</Button>\n        <Button onClick={handleClickBy(\'lg\')} mt="3x">Large width</Button>\n        <Button onClick={handleClickBy(\'xl\')} mt="3x">Extra large width</Button>\n        <Button onClick={handleClickBy(\'full\')} mt="3x">Full width</Button>\n      </Stack>\n      <Modal\n        ensureFocus\n        autoFocus\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isOpen}\n        onClose={onClose}\n        size={size}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Modal Title\n          </ModalHeader>\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n')),(0,a.kt)("h3",null,"Nested modals"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const { isOpen: isNestedOpen, onOpen: onNestedOpen, onClose: onNestedClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>Launch modal</Button>\n      <Modal\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isOpen}\n        onClose={onClose}\n        size="auto"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Modal Title\n          </ModalHeader>\n          <ModalBody>\n            <Lorem count={2} />\n          </ModalBody>\n          <ModalFooter justifyContent="space-between">\n            <Button\n              disabled={isNestedOpen}\n              variant="primary"\n              onClick={onNestedOpen}\n            >\n              Launch nested modal\n            </Button>\n            <Box>\n              <Button minWidth="20x" onClick={onClose}>\n                Close\n              </Button>\n            </Box>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <Modal\n        closeOnEsc\n        closeOnOutsideClick\n        isClosable\n        isOpen={isNestedOpen}\n        onClose={onNestedClose}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            Nested modal title\n          </ModalHeader>\n          <ModalBody>\n            <Lorem count={1} />\n          </ModalBody>\n          <ModalFooter>\n            <Button variant="primary" onClick={onNestedClose} minWidth="20x">\n              Yes\n            </Button>\n            <Space width="2x" />\n            <Button onClick={onNestedClose} minWidth="20x">\n              No\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n')),(0,a.kt)("h3",null,"Transitions"),(0,a.kt)("p",null,"The modal doesn't come with transitions by default. You can use the ",(0,a.kt)("a",{parentName:"p",href:"./transition"},(0,a.kt)("inlineCode",{parentName:"a"},"Transition"))," components to provide simple transitions."),(0,a.kt)("p",null,"When using transitions, you have to set ",(0,a.kt)("inlineCode",{parentName:"p"},"isOpen")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", or the transition will not take effect when closing the modal."),(0,a.kt)("h4",null,"Adding scale transition"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import { Scale } from '@trendmicro/react-styled-ui';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>\n        Launch modal\n      </Button>\n      <Scale in={isOpen}>\n        {styles => (\n          <Modal\n            ensureFocus\n            autoFocus\n            closeOnEsc\n            closeOnOutsideClick\n            isClosable\n            isOpen={true} // Set to `true` if a transition is active\n            onClose={onClose}\n          >\n            <ModalOverlay opacity={styles.opacity} />\n            <ModalContent {...styles}>\n              <ModalHeader>\n                Modal Title\n              </ModalHeader>\n              <ModalBody>\n                <Lorem count={2} />\n              </ModalBody>\n              <ModalFooter>\n                <Button onClick={onClose}>\n                  Close\n                </Button>\n              </ModalFooter>\n            </ModalContent>\n          </Modal>\n        )}\n      </Scale>\n    </>\n  );\n}\n")),(0,a.kt)("h4",null,"Adding slide-in transition"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import { SlideIn } from '@trendmicro/react-styled-ui';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button onClick={onOpen}>\n        Launch modal\n      </Button>\n      <SlideIn in={isOpen}>\n        {styles => (\n          <Modal\n            ensureFocus\n            autoFocus\n            closeOnEsc\n            closeOnOutsideClick\n            isClosable\n            isOpen={true} // Set to `true` if a transition is active\n            onClose={onClose}\n          >\n            <ModalOverlay opacity={styles.opacity} />\n            <ModalContent {...styles}>\n              <ModalHeader>\n                Modal Title\n              </ModalHeader>\n              <ModalBody>\n                <Lorem count={2} />\n              </ModalBody>\n              <ModalFooter>\n                <Button onClick={onClose}>\n                  Close\n                </Button>\n              </ModalFooter>\n            </ModalContent>\n          </Modal>\n        )}\n      </SlideIn>\n    </>\n  );\n}\n")),(0,a.kt)("h2",null,"Props"),(0,a.kt)("h3",null,"Modal"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"ensureFocus"),(0,a.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"},"If ",(0,a.kt)("inlineCode",{parentName:"td"},"true"),", it will always bring the focus back to the ",(0,a.kt)("inlineCode",{parentName:"td"},"Modal")," descendants, which does not allow the focus to escape while open.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"autoFocus"),(0,a.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"},"If ",(0,a.kt)("inlineCode",{parentName:"td"},"true")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"ensureFocus")," is ",(0,a.kt)("inlineCode",{parentName:"td"},"true")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"initialFocusRef")," is not set, it will automatically set focus on the first focusable element.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"finalFocusRef"),(0,a.kt)("td",{parentName:"tr",align:"left"},"React.ref"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"},"The ",(0,a.kt)("inlineCode",{parentName:"td"},"ref")," of element to receive focus when the modal closes.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"initialFocusRef"),(0,a.kt)("td",{parentName:"tr",align:"left"},"React.ref"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"},"The ",(0,a.kt)("inlineCode",{parentName:"td"},"ref")," of the element to receive focus when the modal opens.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"isClosable"),(0,a.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"},"If ",(0,a.kt)("inlineCode",{parentName:"td"},"true"),", a close button will appear on the right side.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"isOpen"),(0,a.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"},"If ",(0,a.kt)("inlineCode",{parentName:"td"},"true"),", the modal is shown.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"closeOnEsc"),(0,a.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"},"If ",(0,a.kt)("inlineCode",{parentName:"td"},"true"),", close the modal when the ",(0,a.kt)("inlineCode",{parentName:"td"},"esc")," key is pressed.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"closeOnOutsideClick"),(0,a.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"},"If ",(0,a.kt)("inlineCode",{parentName:"td"},"true"),", close the modal when click outside of the modal.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"onClose"),(0,a.kt)("td",{parentName:"tr",align:"left"},"function"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"},"Callback fired when the modal closes.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"size"),(0,a.kt)("td",{parentName:"tr",align:"left"},"string"),(0,a.kt)("td",{parentName:"tr",align:"left"},"'auto'"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The size of the modal. One of: ",(0,a.kt)("inlineCode",{parentName:"td"},"'auto'"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"'xs'"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"'sm'"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"'md'"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"'lg'"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"'xl'"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"'full'"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"scrollBehavior"),(0,a.kt)("td",{parentName:"tr",align:"left"},"string"),(0,a.kt)("td",{parentName:"tr",align:"left"},"'inside'"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Control the scroll behavior of the modal if the content overflows. One of: 'inside', 'outside'")))),(0,a.kt)("h3",null,"ModalOverlay"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"children"),(0,a.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"})))),(0,a.kt)("h3",null,"ModalContent"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"children"),(0,a.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"})))),(0,a.kt)("h3",null,"ModalHeader"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"children"),(0,a.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"})))),(0,a.kt)("h3",null,"ModalBody"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"children"),(0,a.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"})))),(0,a.kt)("h3",null,"ModalFooter"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"children"),(0,a.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,a.kt)("td",{parentName:"tr",align:"left"}),(0,a.kt)("td",{parentName:"tr",align:"left"})))))}s.isMDXComponent=!0},82821:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/modal",function(){return t(59815)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=82821,e(e.s=n);var n}));var n=e.O();_N_E=n}]);