(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2237],{82658:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return d}});var a=n(7896),l=n(59740),r=(n(2784),n(30876)),i=["components"],o={};function d(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Tabs"),(0,r.kt)("p",null,"An accessible tabs component."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Tab")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TabPanel")," elements are associated by their order in the tree.\nNone of the components are empty wrappers, each is associated with a real DOM\nelement in the document, giving you maximum control over styling and\ncomposition."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n} from '@trendmicro/react-styled-ui';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("p",null,"You can render any element within ",(0,r.kt)("inlineCode",{parentName:"p"},"Tabs"),", but ",(0,r.kt)("inlineCode",{parentName:"p"},"TabList")," should only have ",(0,r.kt)("inlineCode",{parentName:"p"},"Tab"),"\nas children, and ",(0,r.kt)("inlineCode",{parentName:"p"},"TabPanels")," should have ",(0,r.kt)("inlineCode",{parentName:"p"},"TabPanel")," as children."),(0,r.kt)("p",null,"Tabs expects ",(0,r.kt)("inlineCode",{parentName:"p"},"TabList")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TabPanels")," as children. The order doesn't matter,\nyou can have tabs at the top, at the bottom, or both."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Tabs>\n  <TabList>\n    <Tab>One</Tab>\n    <Tab>Two</Tab>\n    <Tab>Three</Tab>\n  </TabList>\n\n  <TabPanels>\n    <TabPanel>\n      <p>one!</p>\n    </TabPanel>\n    <TabPanel>\n      <p>two!</p>\n    </TabPanel>\n    <TabPanel>\n      <p>three!</p>\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n")),(0,r.kt)("h2",null,"Accessing Internal state"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<TabPanel>")," provides access to one internal state:  ",(0,r.kt)("inlineCode",{parentName:"p"},"isActive"),". Use the render prop pattern to access the internal states."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Tabs>\n  <TabList>\n    <Tab>One</Tab>\n    <Tab>Two</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>\n      <p>one!</p>\n    </TabPanel>\n    <TabPanel>\n      {({ isActive }) => {\n        if (isActive) {\n          return (<p>two!</p>);\n        }\n        return null;\n      }}\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n")),(0,r.kt)("h3",null,"Tab variants and color"),(0,r.kt)("p",null,"Tabs come in 3 different variants to style the tabs: ",(0,r.kt)("inlineCode",{parentName:"p"},"line"),",",(0,r.kt)("inlineCode",{parentName:"p"},"enclosed"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"unstyled")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs variant="enclosed">\n  <TabList>\n    <Tab>One</Tab>\n    <Tab>Two</Tab>\n    <Tab>Three</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>\n      <p>one!</p>\n    </TabPanel>\n    <TabPanel>\n      <p>two!</p>\n    </TabPanel>\n    <TabPanel>\n      <p>three!</p>\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n')),(0,r.kt)("h3",null,"Make a Tab disabled"),(0,r.kt)("p",null,"When a ",(0,r.kt)("inlineCode",{parentName:"p"},"Tab")," is disabled, it's skipped during keyboard navigation and it's not\nclickable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  return (\n    <Tabs>\n      <TabList>\n        <Tab>One</Tab>\n        <Tab disabled>Two</Tab>\n        <Tab>Three</Tab>\n      </TabList>\n      <TabPanels>\n        <TabPanel><p>1</p></TabPanel>\n        <TabPanel><p>2</p></TabPanel>\n        <TabPanel><p>3</p></TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n")),(0,r.kt)("h3",null,"Change the tabs alignment"),(0,r.kt)("p",null,"You can change the alignment of the ",(0,r.kt)("inlineCode",{parentName:"p"},"TabList")," by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"align")," prop. We\nsupport 3 sizes ",(0,r.kt)("inlineCode",{parentName:"p"},"left"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"center"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"right"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs align="right" variant="enclosed">\n  <TabList>\n    <Tab>One</Tab>\n    <Tab>Two</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>\n      <p>one!</p>\n    </TabPanel>\n    <TabPanel>\n      <p>two!</p>\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n')),(0,r.kt)("h3",null,"Fitted Tabs"),(0,r.kt)("p",null,"Stretch the tab list to fit the container by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"isFitted")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs isFitted variant="enclosed">\n  <TabList mb="1em">\n    <Tab>One</Tab>\n    <Tab>Two</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>\n      <p>one!</p>\n    </TabPanel>\n    <TabPanel>\n      <p>two!</p>\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n')),(0,r.kt)("h3",null,"Styling the tab states manually"),(0,r.kt)("p",null,"In event you need to create custom styles for the tabs. Simply set the variant\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"unstyled"),", and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"_selected"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_hover"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_active")," style props."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs variant="unstyled">\n  <TabList>\n    <Tab _selected={{ color: "white", bg: "blue:50" }}>Tab 1</Tab>\n    <Tab _selected={{ color: "white", bg: "green:40" }}>Tab 2</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>\n      <p>one!</p>\n    </TabPanel>\n    <TabPanel>\n      <p>two!</p>\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n')),(0,r.kt)("h3",null,"AutoSizer Table in the tab"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"function FullWidthTable() {\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Event Type',\n      id: 'eventType',\n      accessor: 'eventType',\n      width: 'auto',\n    },\n    {\n      Header: 'Affected Devices',\n      id: 'affectedDevices',\n      accessor: 'affectedDevices',\n      width: 160,\n    },\n    {\n      Header: 'Detections',\n      id: 'detections',\n      accessor: 'detections',\n      width: '10%',\n    },\n  ], []);\n\n  const data = React.useMemo(() => [\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  ], []);\n\n  const getCalculatedColumns = ({ initColumns, tableWidth }) => {\n    const columns = initColumns.map(column => {\n      let columnWidth = column.width;\n      if (typeof columnWidth === 'string') {\n        const lastChar = columnWidth.substr(columnWidth.length - 1);\n        if (lastChar === '%') {\n          columnWidth = tableWidth * (parseFloat(columnWidth) / 100);\n          return {\n            ...column,\n            width: columnWidth\n          };\n        }\n        if (columnWidth === 'auto') {\n          return {\n            ...column,\n            width: 0\n          };\n        }\n      }\n      return column;\n    });\n    const customWidthColumns = columns.filter(column => !!column.width);\n    const totalCustomWidth = customWidthColumns.reduce((accumulator, column) => accumulator + column.width, 0);\n    let defaultCellWidth = (tableWidth - totalCustomWidth) / (columns.length - customWidthColumns.length);\n    defaultCellWidth = defaultCellWidth <= 0 ? 150 : defaultCellWidth;\n    return columns.map(column => {\n      if (!!column.width) {\n        return column;\n      }\n      return {\n        ...column,\n        width: defaultCellWidth\n      };\n    });\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useBlockLayout,\n  );\n\n  return (\n    <AutoSizer>\n      {({ height, width }) => {\n        if (height === 0 || width === 0) {\n          return null;\n        }\n        const newColumns = getCalculatedColumns({ initColumns: columns, tableWidth: width });\n        return (\n          <Table\n            {...getTableProps()}\n          >\n            <TableHeader>\n              {headerGroups.map(headerGroup => (\n                <TableHeaderRow {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map(column => {\n                    const columnId = column.id;\n                    const _column = newColumns.filter(column => column.id === columnId);\n                    const _columnWidth = _column[0].width;\n                    return (\n                      <TableHeaderCell\n                        width={_columnWidth}\n                        {...column.getHeaderProps()}\n                      >\n                        {column.render('Header')}\n                      </TableHeaderCell>\n                    );\n                  })}\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <TableBody {...getTableBodyProps()}>\n              {rows.map((row, i) => {\n                prepareRow(row);\n                return (\n                  <TableRow {...row.getRowProps()}>\n                    {\n                      row.cells.map(cell => {\n                        const columnId = cell.column.id;\n                        const _column = newColumns.filter(column => column.id === columnId);\n                        const _columnWidth = _column[0].width;\n                        return (\n                          <TableCell\n                            width={_columnWidth}\n                            {...cell.getCellProps()}\n                          >\n                            {cell.render('Cell')}\n                          </TableCell>\n                        );\n                      })\n                    }\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        );\n      }}\n    </AutoSizer>\n  );\n}\n\nrender(\n  <Tabs height=\"300px\">\n    <TabList>\n      <Tab>Auto height Panel</Tab>\n      <Tab>Full height Panel</Tab>\n    </TabList>\n    <TabPanels height=\"calc(100% - 40px)\">\n      <TabPanel border=\"1\" borderColor=\"green\" marginTop=\"1x\" padding=\"1x\">\n        Hi~~~\n      </TabPanel>\n      <TabPanel height=\"100%\" border=\"1\" borderColor=\"green\" marginTop=\"1x\" padding=\"1x\">\n        <FullWidthTable />\n      </TabPanel>\n    </TabPanels>\n  </Tabs>\n);\n")),(0,r.kt)("h3",null,"Manually Activated Tabs"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"Tabs")," are activated automatically. This means when you use the\narrow keys to change tabs, the tab is activated and focused."),(0,r.kt)("p",null,"The content of a ",(0,r.kt)("inlineCode",{parentName:"p"},"TabPanel")," should ideally be preloaded. However, if switching to a tab panel causes a network request and possibly a page refresh, there might be some notable latency and this might affect the experience for keyboard and screen reader users."),(0,r.kt)("p",null,"In this scenario, you should use a manually activated tab, it moves focus\nwithout activating the tabs. With focus on a specifc tab, users can activate a\ntab by pressing ",(0,r.kt)("kbd",null,"Space")," or ",(0,r.kt)("kbd",null,"Enter"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs isManual variant="line">\n  <TabList>\n    <Tab>One</Tab>\n    <Tab>Two</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>\n      <p>one!</p>\n    </TabPanel>\n    <TabPanel>\n      <p>two!</p>\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n')),(0,r.kt)("h3",null,"Data Tabs"),(0,r.kt)("p",null,"If you'd like to drive your tabs with an array instead of using the granular\ncomponents, you can create your own DataTabs component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  // First, you create the component...\n  function DataTabs({ data }) {\n    return (\n      <Tabs>\n        <TabList>\n          {data.map((tab, index) => (\n            <Tab key={index}>{tab.label}</Tab>\n          ))}\n        </TabList>\n        <TabPanels>\n          {data.map((tab, index) => (\n            <TabPanel p={4} key={index}>\n              {tab.content}\n            </TabPanel>\n          ))}\n        </TabPanels>\n      </Tabs>\n    );\n  }\n\n  // Next, you have an array of data...\n  const tabData = [\n    {\n      label: "Nigerian Jollof",\n      content: "Perhaps the greatest dish ever invented.",\n    },\n    {\n      label: "Pounded Yam & Egusi",\n      content:\n        "Perhaps the surest dish ever invented but fills the stomach more than rice.",\n    },\n  ];\n\n  // you can just pass it in:\n  return <DataTabs data={tabData} />;\n}\n')),(0,r.kt)("h2",null,"Accessibility"),(0,r.kt)("h3",null,"Keyboard"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Action"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ArrowLeft")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Moves focus to the next tab")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ArrowUp")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Moves focus to the previous tab")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Tab")),(0,r.kt)("td",{parentName:"tr",align:"left"},"When focus moves into the tab list, places focus on the active tab element")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Space")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"Enter")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Activates the tab if it was not activated automatically on focus")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Home")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Moves focus to the first tab")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"End")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Moves focus to the last tab")))),(0,r.kt)("h3",null,"ARIA roles"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Component"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Aria"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Usage"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Tab"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},'role="tab"')),(0,r.kt)("td",{parentName:"tr",align:"left"},"Indicates that it's a tab")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"aria-selected")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," a tab is selected and all other Tabs have it set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"aria-controls")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Set to the ",(0,r.kt)("inlineCode",{parentName:"td"},"id")," of its associated ",(0,r.kt)("inlineCode",{parentName:"td"},"TabPanel"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"TabList"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"id")," of the ",(0,r.kt)("inlineCode",{parentName:"td"},"TabPanel")," that's referencd by its associated ",(0,r.kt)("inlineCode",{parentName:"td"},"Tab"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"aria-orientation")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Set to vertical or horizontal based on the value of the ",(0,r.kt)("inlineCode",{parentName:"td"},"orientation")," prop.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},'role="tablist"')),(0,r.kt)("td",{parentName:"tr",align:"left"},"Indicates that it's a tablist")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"aria-labelledby")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Set to the ",(0,r.kt)("inlineCode",{parentName:"td"},"id")," of the ",(0,r.kt)("inlineCode",{parentName:"td"},"Tab")," that labels the ",(0,r.kt)("inlineCode",{parentName:"td"},"TabPanel"),".")))),(0,r.kt)("h2",null,"Props"),(0,r.kt)("h3",null,"Tabs"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"onChange")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(index: number) => void")),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The callback to update the active tab index.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"index")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The controlled index of the tabs.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"defaultIndex")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the initial active tab.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"activateOnKeypress")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", keyboard navigation changes focus between tabs but doens't activate it. User will have to press ",(0,r.kt)("inlineCode",{parentName:"td"},"Enter")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"Space")," to active it. This is deprecated and will be removed in the v1 release")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"isManual")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", keyboard navigation changes focus between tabs but doens't activate it. User will have to press ",(0,r.kt)("inlineCode",{parentName:"td"},"Enter")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"Space")," to active it")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"children")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ReactNode")),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The children of the switch.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"variant")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"line"),",",(0,r.kt)("inlineCode",{parentName:"td"},"enclosed"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"unstyled")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"line")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The visual style of the tab.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"orientation")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"horizontal"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"vertical")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"horizontal")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The orientation of the tabs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"isFitted")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the tabs will stretch to fill the available space")))),(0,r.kt)("h3",null,"Tab"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"disabled")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the user cannot interact with the control. This sets ",(0,r.kt)("inlineCode",{parentName:"td"},"aria-disabled=true")," and you can style this state by passing the ",(0,r.kt)("inlineCode",{parentName:"td"},"_disabled")," prop.")))),(0,r.kt)("h3",null,"TabPanel"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode, (props: InternalState) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The children of the ",(0,r.kt)("inlineCode",{parentName:"td"},"TabPanel"),".")))))}d.isMDXComponent=!0},73976:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tabs",function(){return n(82658)}])}},function(e){e.O(0,[9774,2888,179],(function(){return t=73976,e(e.s=t);var t}));var t=e.O();_N_E=t}]);