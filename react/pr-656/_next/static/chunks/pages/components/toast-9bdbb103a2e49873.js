(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7449],{9965:function(n,t,e){"use strict";e.r(t);var o=e(52322),s=e(45392);function i(n){var t=Object.assign({h1:"h1",p:"p",h2:"h2",pre:"pre",code:"code",h3:"h3",ul:"ul",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",strong:"strong",em:"em"},(0,s.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{children:"Toast"}),"\n",(0,o.jsx)(t.p,{children:"A toast notification is a small popup that appears at either side of the screen, and disappears after a short time. The toast notification is used to notify the user of something that has happened, but it is not intended to be used as a permanent message."}),"\n",(0,o.jsx)(t.h2,{children:"Import"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import {\n  Toast,\n  ToastProvider,\n  useToast,\n} from '@tonic-ui/react';\n"})}),"\n",(0,o.jsx)(t.h2,{children:"Usage"}),"\n",(0,o.jsxs)(t.p,{children:["Add ",(0,o.jsx)(t.code,{children:"ToastProvider"})," to the root."]}),"\n",(0,o.jsx)(t.pre,{disabled:!0,children:(0,o.jsx)(t.code,{className:"language-jsx",children:'<ToastProvider placement="bottom-right">\n  <App />\n</ToastProvider>\n'})}),"\n",(0,o.jsxs)(t.p,{children:["For the Hook version, use the ",(0,o.jsx)(t.code,{children:"useToast"})," Hook to get all the methods, properties, and state. See the ",(0,o.jsx)("b",{children:"useToast Hook"})," section for detailed usage."]}),"\n",(0,o.jsx)(t.pre,{disabled:!0,children:(0,o.jsx)(t.code,{className:"language-jsx",children:"function Example() {\n  const toast = useToast();\n  const handleClick = () => {\n    toast(({ onClose, placement }) => (\n      <Box>toast</Box>\n    ));\n  };\n\n  return (\n    <Button onClick={handleClick}>\n      Trigger Toast\n    </Button>\n  );\n}\n"})}),"\n",(0,o.jsx)(t.h3,{children:"Layout"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Increase the vertical padding space to ",(0,o.jsx)(t.code,{children:"4x"})," (or ",(0,o.jsx)(t.code,{children:"1rem"}),") for a multiline paragraph."]}),"\n",(0,o.jsxs)(t.li,{children:["Set the minimum horizontal margin space to ",(0,o.jsx)(t.code,{children:"4x"})," (or ",(0,o.jsx)(t.code,{children:"1rem"}),") before the close button."]}),"\n",(0,o.jsxs)(t.li,{children:["Set the minimum horizontal margin space to ",(0,o.jsx)(t.code,{children:"4x"})," (or ",(0,o.jsx)(t.code,{children:"1rem"}),") between the icon and the content."]}),"\n",(0,o.jsxs)(t.li,{children:["Apply vertical margin space with ",(0,o.jsx)(t.code,{children:"2x"})," (or ",(0,o.jsx)(t.code,{children:".5rem"}),") between the title and its content."]}),"\n",(0,o.jsxs)(t.li,{children:["Apply vertical margin space with ",(0,o.jsx)(t.code,{children:"6x"})," (or ",(0,o.jsx)(t.code,{children:"1.5rem"}),") between the end of the content and the action button (or action link)."]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{noInline:!0,children:(0,o.jsx)(t.code,{className:"language-jsx",children:'const ActionButton = React.forwardRef((props, ref) => (\n  <Button\n    ref={ref}\n    variant="secondary"\n    borderColor="black:primary"\n    color="black:primary"\n    css={sx({\n      \':active\': {\n        color: \'black:primary\',\n      },\n      \':focus\': {\n        color: \'black:primary\',\n      },\n      \':hover\': {\n        background: \'rgba(0, 0, 0, 0.12)\',\n        color: \'black:primary\',\n      },\n      \':hover:not(:focus)\': {\n        boxShadow: \'none\',\n      },\n    })}\n    {...props}\n  />\n));\n\nconst ToastSimple = ({ onClose }) => (\n  <Toast isClosable onClose={onClose}>\n    <Text>This is a toast notification.</Text>\n  </Toast>\n);\n\nconst ToastWithIcon = ({ onClose }) => (\n  <Toast isClosable onClose={onClose} py="4x">\n    <Flex alignItems="flex-start">\n      <Box\n        bg="gray:40"\n        height={48}\n        minWidth={48}\n      />\n      <Space minWidth="4x" />\n      <Text>This is a toast notification.</Text>\n    </Flex>\n  </Toast>\n);\n\nconst ToastWithTitle = ({ onClose }) => (\n  <Toast isClosable onClose={onClose} py="4x">\n    <Box mb="2x">\n      <Text fontWeight="bold">Notification Title</Text>\n    </Box>\n    <Box mr="-9x">\n      <Text>This is a toast notification.</Text>\n    </Box>\n  </Toast>\n);\n\nconst ToastWithActionButton = ({ onClose }) => (\n  <Toast isClosable onClose={onClose} py="4x">\n    <Box mb="6x">\n      <Text>This is a toast notification.</Text>\n    </Box>\n    <Flex justifyContent="flex-end" mr="-9x">\n      <ActionButton\n        // See above for the ActionButton component\n        size="sm"\n      >\n        Action Button\n      </ActionButton>\n    </Flex>\n  </Toast>\n);\n\nconst ToastWithActionLink = ({ onClose }) => (\n  <Toast isClosable onClose={onClose} py="4x">\n    <Box mb="6x">\n      <Text>This is a toast notification.</Text>\n    </Box>\n    <Flex justifyContent="flex-end" mr="-9x">\n      <Link>Action Link</Link>\n    </Flex>\n  </Toast>\n);\n\nconst ToastWithAllTogether = ({ onClose }) => (\n  <Toast isClosable onClose={onClose} py="4x">\n    <Box mb="2x">\n      <Text fontWeight="bold">Notification Title</Text>\n    </Box>\n    <Flex alignItems="flex-start" mb="6x">\n      <Box\n        bg="gray:40"\n        height={48}\n        minWidth={48}\n      />\n      <Space minWidth="4x" />\n      <Text>This is a toast notification.</Text>\n    </Flex>\n    <Flex justifyContent="flex-end" mr="-9x">\n      <ActionButton\n        // See above for the ActionButton component\n        size="sm"\n      >\n        Action Button\n      </ActionButton>\n    </Flex>\n  </Toast>\n);\n\nconst ToastLayout = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const boxShadow = colorStyle.shadow.thin;\n\n  return (\n    <Box\n      fontSize="sm"\n      lineHeight="sm"\n      textAlign="left"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (ToastNotification) => () => {\n    toast(({ onClose, placement }) => {\n      const styleProps = {\n        \'top-left\': { pt: \'2x\', px: \'4x\' },\n        \'top\': { pt: \'2x\', px: \'4x\' },\n        \'top-right\': { pt: \'2x\', px: \'4x\' },\n        \'bottom-left\': { pb: \'2x\', px: \'4x\' },\n        \'bottom\': { pb: \'2x\', px: \'4x\' },\n        \'bottom-right\': { pb: \'2x\', px: \'4x\' },\n      }[placement];\n\n      return (\n        <Box {...styleProps}>\n          <ToastLayout>\n            <ToastNotification onClose={onClose} />\n          </ToastLayout>\n        </Box>\n      );\n    }, {\n      placement: \'bottom-right\',\n      duration: 5000,\n    });\n  };\n\n  return (\n    <>\n      <Stack direction="column" spacing="6x">\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(ToastSimple)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <ToastSimple />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(ToastWithIcon)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <ToastWithIcon />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(ToastWithTitle)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <ToastWithTitle />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(ToastWithActionButton)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <ToastWithActionButton />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(ToastWithActionLink)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <ToastWithActionLink />\n          </ToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(ToastWithAllTogether)}\n          >\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <ToastWithAllTogether />\n          </ToastLayout>\n        </Box>\n      </Stack>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,o.jsx)(t.h3,{children:"Appearances"}),"\n",(0,o.jsxs)(t.p,{children:["You can control the appearance of a toast notification. If specified, the value can be one of ",(0,o.jsx)(t.code,{children:"success"}),", ",(0,o.jsx)(t.code,{children:"info"}),", ",(0,o.jsx)(t.code,{children:"warning"}),", or ",(0,o.jsx)(t.code,{children:"error"}),"."]}),"\n",(0,o.jsx)(t.pre,{noInline:!0,children:(0,o.jsx)(t.code,{className:"language-jsx",children:"const ToastSuccess = ({ onClose }) => (\n  <Toast\n    isClosable\n    onClose={onClose}\n    appearance=\"success\"\n  >\n    This is a success toast.\n  </Toast>\n);\n\nconst ToastInfo = ({ onClose }) => (\n  <Toast\n    isClosable\n    onClose={onClose}\n    appearance=\"info\"\n  >\n    This is an info toast.\n  </Toast>\n);\n\nconst ToastWarning = ({ onClose }) => (\n  <Toast\n    isClosable\n    onClose={onClose}\n    appearance=\"warning\"\n  >\n    This is a warning toast.\n  </Toast>\n);\n\nconst ToastError = ({ onClose }) => (\n  <Toast\n    isClosable\n    onClose={onClose}\n    appearance=\"error\"\n  >\n    This is an error toast.\n  </Toast>\n);\n\nconst ToastLayout = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const boxShadow = colorStyle.shadow.thin;\n\n  return (\n    <Box\n      fontSize=\"sm\"\n      lineHeight=\"sm\"\n      textAlign=\"left\"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (ToastNotification) => () => {\n    toast(({ onClose, placement }) => {\n      const styleProps = {\n        'top-left': { pt: '2x', px: '4x' },\n        'top': { pt: '2x', px: '4x' },\n        'top-right': { pt: '2x', px: '4x' },\n        'bottom-left': { pb: '2x', px: '4x' },\n        'bottom': { pb: '2x', px: '4x' },\n        'bottom-right': { pb: '2x', px: '4x' },\n      }[placement];\n\n      return (\n        <Box {...styleProps}>\n          <ToastLayout>\n            <ToastNotification onClose={onClose} />\n          </ToastLayout>\n        </Box>\n      );\n    }, {\n      placement: 'bottom-right',\n      duration: 5000,\n    });\n  };\n  const toastComponents = [\n    ToastSuccess,\n    ToastInfo,\n    ToastWarning,\n    ToastError,\n  ];\n\n  return (\n    <Stack direction=\"column\" spacing=\"6x\">\n      {toastComponents.map((ToastNotification, idx) => (\n        <Box key={idx}>\n          <Button variant=\"secondary\" onClick={handleClickBy(ToastNotification)}>\n            Show\n          </Button>\n          <ToastLayout mt=\"4x\">\n            <ToastNotification />\n          </ToastLayout>\n        </Box>\n      ))}\n    </Stack>\n  );\n}\n\nrender(<Example />);\n"})}),"\n",(0,o.jsx)(t.h3,{children:"Icons"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"icon"})," prop allows you to override the default icon for the specified appearance."]}),"\n",(0,o.jsxs)(t.p,{children:["Setting the ",(0,o.jsx)(t.code,{children:"icon"})," prop to ",(0,o.jsx)(t.code,{children:"false"})," will remove the icon altogether."]}),"\n",(0,o.jsx)(t.pre,{noInline:!0,children:(0,o.jsx)(t.code,{className:"language-jsx",children:"const ToastWithDefaultIcon = ({ onClose }) => (\n  <Toast\n    isClosable\n    onClose={onClose}\n    appearance=\"success\"\n  >\n    This is a success toast.\n  </Toast>\n);\n\nconst ToastWithAnotherIcon = ({ onClose }) => (\n  <Toast\n    isClosable\n    onClose={onClose}\n    appearance=\"success\"\n    icon=\"check-circle-o\"\n  >\n    This is a success toast.\n  </Toast>\n);\n\nconst ToastWithProprietaryIcon = ({ onClose }) => (\n  <Toast\n    isClosable\n    onClose={onClose}\n    appearance=\"success\"\n    icon={<Icon icon=\"check-circle-o\" color=\"gray:80\" />}\n  >\n    This is a success toast.\n  </Toast>\n);\n\nconst ToastWithoutIcon = ({ onClose }) => (\n  <Toast\n    isClosable\n    onClose={onClose}\n    appearance=\"success\"\n    icon={false}\n  >\n    This is a success toast.\n  </Toast>\n);\n\nconst ToastLayout = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const boxShadow = colorStyle.shadow.thin;\n\n  return (\n    <Box\n      fontSize=\"sm\"\n      lineHeight=\"sm\"\n      textAlign=\"left\"\n      boxShadow={boxShadow}\n      width={320}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (ToastNotification) => () => {\n    toast(({ onClose, placement }) => {\n      const styleProps = {\n        'top-left': { pt: '2x', px: '4x' },\n        'top': { pt: '2x', px: '4x' },\n        'top-right': { pt: '2x', px: '4x' },\n        'bottom-left': { pb: '2x', px: '4x' },\n        'bottom': { pb: '2x', px: '4x' },\n        'bottom-right': { pb: '2x', px: '4x' },\n      }[placement];\n\n      return (\n        <Box {...styleProps}>\n          <ToastLayout>\n            <ToastNotification onClose={onClose} />\n          </ToastLayout>\n        </Box>\n      );\n    }, {\n      placement: 'bottom-right',\n      duration: 5000,\n    });\n  };\n  const alertToasts = [\n    ToastWithDefaultIcon,\n    ToastWithAnotherIcon,\n    ToastWithProprietaryIcon,\n    ToastWithoutIcon,\n  ];\n\n  return (\n    <Stack direction=\"column\" spacing=\"6x\">\n      {alertToasts.map((ToastNotification, idx) => (\n        <Box key={idx}>\n          <Button variant=\"secondary\" onClick={handleClickBy(ToastNotification)}>\n            Show\n          </Button>\n          <ToastLayout mt=\"4x\">\n            <ToastNotification />\n          </ToastLayout>\n        </Box>\n      ))}\n    </Stack>\n  );\n}\n\nrender(<Example />);\n"})}),"\n",(0,o.jsx)(t.h3,{children:"Toast on modal and drawer"}),"\n",(0,o.jsx)(t.p,{children:"Toasts can be rendered on top of a modal or drawer. It is useful when you want to show a toast message after a user has completed or failed an action on a modal or drawer."}),"\n",(0,o.jsx)(t.p,{children:"The vertical placement of the toast is 48px from the top. The minimum width is 280px. If the message content is wider than 280px, the toast will expand to fit the content without exceeding 80% of the modal/drawer width."}),"\n",(0,o.jsx)(t.pre,{noInline:!0,children:(0,o.jsx)(t.code,{className:"language-jsx",children:'const CustomToastContainer = (props) => (\n  <Flex\n    position="absolute"\n    top="12x"\n    width="100%"\n    zIndex="toast"\n  >\n    <Box\n      minWidth={280} // The minimum width is 280px\n      maxWidth="80%" // The maximum width is 80% of the modal width\n      margin="0 auto"\n      {...props}\n    />\n  </Flex>\n);\n\nlet autoIncrementIndex = 0;\n\nrender(() => {\n  const [toasts, setToasts] = React.useState([]);\n  const addToast = (options) => {\n    const {\n      appearance,\n      content,\n      duration = null,\n      isClosable = true,\n    } = { ...options };\n\n    setToasts(prevState => {\n      const id = ++autoIncrementIndex;\n      const onClose = () => {\n        setToasts(toasts => toasts.filter(x => x.id !== id));\n      };\n      // You can decide how many toasts you want to show at the same time depending on your use case\n      const nextState = [\n        ...prevState.slice(-2),\n        {\n          id,\n          appearance,\n          content,\n          duration,\n          isClosable,\n          onClose,\n        },\n      ];\n      return nextState;\n    });\n  };\n  const removeToasts = () => setToasts([]);\n\n  const handleClickAddToastByAppearance = (appearance) => (event) => {\n    const content = {\n      success: \'This is a success toast\',\n      info: \'This is an info toast\',\n      warning: \'This is a warning toast\',\n      error: \'This is an error toast\',\n    }[appearance];\n\n    addToast({\n      appearance,\n      content,\n      duration: 5000,\n    });\n  };\n\n  const handleClickClearToasts = () => {\n    removeToasts();\n  };\n\n  return (\n    <>\n      <Flex justifyContent="space-between">\n        <Flex columnGap="2x">\n          <Button variant="secondary" onClick={handleClickAddToastByAppearance(\'success\')}>\n            Show Success Toast\n          </Button>\n          <Button variant="secondary" onClick={handleClickAddToastByAppearance(\'info\')}>\n            Show Info Toast\n          </Button>\n          <Button variant="secondary" onClick={handleClickAddToastByAppearance(\'warning\')}>\n            Show Warning Toast\n          </Button>\n          <Button variant="secondary" onClick={handleClickAddToastByAppearance(\'error\')}>\n            Show Error Toast\n          </Button>\n        </Flex>\n        <Button variant="secondary" onClick={handleClickClearToasts}>\n          <Icon icon="close" />\n          <Space width="2x" />\n          Clear Toasts\n        </Button>\n      </Flex>\n      <Divider my="4x" />\n      <Flex\n        columnGap="4x"\n      >\n        <ModalContent\n          flex="1"\n          minHeight={400}\n        >\n          <CustomToastContainer>\n            <TransitionGroup\n              component={null} // Pass in `component={null}` to avoid a wrapping `<div>` element \n            >\n              {toasts.map(toast => (\n                <ToastTransition\n                  in={true}\n                  key={toast?.id}\n                  unmountOnExit\n                  style={{\n                    display: \'flex\',\n                    justifyContent: \'center\',\n                  }}\n                >\n                  <ToastController\n                    duration={toast?.duration}\n                    onClose={toast?.onClose}\n                  >\n                    <Toast\n                      appearance={toast?.appearance}\n                      isClosable={toast?.isClosable}\n                      onClose={toast?.onClose}\n                      mb="2x"\n                    >\n                      {toast?.content}\n                    </Toast>\n                  </ToastController>\n                </ToastTransition>\n              ))}\n            </TransitionGroup>\n          </CustomToastContainer>\n          <ModalHeader>\n            Modal Title\n          </ModalHeader>\n          <ModalBody>\n            <Stack direction="column" spacing="4x">\n              <Skeleton width={160} />\n              <Skeleton width={240} />\n              <Skeleton width={240} />\n            </Stack>\n          </ModalBody>\n          <DrawerFooter columnGap="2x">\n            <Button variant="primary">\n              OK\n            </Button>\n            <Button>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n        <DrawerContent\n          flex="1"\n          minHeight={400}\n        >\n          <CustomToastContainer>\n            <TransitionGroup\n              component={null} // Pass in `component={null}` to avoid a wrapping `<div>` element \n            >\n              {toasts.map(toast => (\n                <ToastTransition\n                  in={true}\n                  key={toast?.id}\n                  unmountOnExit\n                  style={{\n                    display: \'flex\',\n                    justifyContent: \'center\',\n                  }}\n                >\n                  <ToastController\n                    duration={toast?.duration}\n                    onClose={toast?.onClose}\n                  >\n                    <Toast\n                      appearance={toast?.appearance}\n                      isClosable={toast?.isClosable}\n                      onClose={toast?.onClose}\n                      mb="2x"\n                    >\n                      {toast?.content}\n                    </Toast>\n                  </ToastController>\n                </ToastTransition>\n              ))}\n            </TransitionGroup>\n          </CustomToastContainer>\n          <DrawerHeader>\n            Drawer Title\n          </DrawerHeader>\n          <DrawerBody>\n            <Stack direction="column" spacing="4x">\n              <Skeleton width={160} />\n              <Skeleton width={240} />\n              <Skeleton width={240} />\n            </Stack>\n          </DrawerBody>\n          <DrawerFooter columnGap="2x">\n            <Button variant="primary">\n              OK\n            </Button>\n            <Button>\n              Cancel\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Flex>\n    </>\n  );\n});\n'})}),"\n",(0,o.jsx)(t.h2,{children:"Toast"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{align:"left",children:"Name"}),(0,o.jsx)(t.th,{align:"left",children:"Type"}),(0,o.jsx)(t.th,{align:"left",children:"Default"}),(0,o.jsx)(t.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"isClosable"}),(0,o.jsx)(t.td,{align:"left",children:"boolean"}),(0,o.jsx)(t.td,{align:"left"}),(0,o.jsxs)(t.td,{align:"left",children:["If ",(0,o.jsx)(t.code,{children:"true"}),", a close button will appear on the right side."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"onClose"}),(0,o.jsx)(t.td,{align:"left",children:"function"}),(0,o.jsx)(t.td,{align:"left"}),(0,o.jsx)(t.td,{align:"left",children:"A callback called when the close button is clicked."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"appearance"}),(0,o.jsx)(t.td,{align:"left",children:"string"}),(0,o.jsx)(t.td,{align:"left",children:"'none'"}),(0,o.jsx)(t.td,{align:"left",children:"One of: 'none', 'success', 'info', 'warning', 'error'"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"icon"}),(0,o.jsx)(t.td,{align:"left",children:"ReactNode | boolean | string"}),(0,o.jsx)(t.td,{align:"left"}),(0,o.jsxs)(t.td,{align:"left",children:["Override the icon displayed before the children. Unless provided, the icon is mapped to the value of the ",(0,o.jsx)(t.code,{children:"appearance"})," prop."]})]})]})]}),"\n",(0,o.jsx)(t.h2,{children:"ToastProvider"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{align:"left",children:"Name"}),(0,o.jsx)(t.th,{align:"left",children:"Type"}),(0,o.jsx)(t.th,{align:"left",children:"Default"}),(0,o.jsx)(t.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"children"}),(0,o.jsxs)(t.td,{align:"left",children:["ReactNode | ",(0,o.jsx)(t.code,{children:"(context) => ReactNode"})]}),(0,o.jsx)(t.td,{align:"left"}),(0,o.jsx)(t.td,{align:"left",children:"A function child can be used intead of a React element. This function is called with the context object."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"container"}),(0,o.jsx)(t.td,{align:"left",children:"DOM element"}),(0,o.jsx)(t.td,{align:"left"}),(0,o.jsx)(t.td,{align:"left"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"placement"}),(0,o.jsx)(t.td,{align:"left",children:"string"}),(0,o.jsx)(t.td,{align:"left",children:"'bottom-right'"}),(0,o.jsx)(t.td,{align:"left",children:"Set the default placement to place toasts. One of: 'top', 'top-right', 'top-left', 'bottom', 'bottom-left', 'bottom-right'"})]})]})]}),"\n",(0,o.jsx)(t.h2,{children:"useToast Hook"}),"\n",(0,o.jsx)(t.p,{children:"The useToast hook has the following signature:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"const {\n  // Methods\n  close,\n  closeAll,\n  find,\n  findIndex,\n  notify,\n  update,\n\n  // Properties\n  placement,\n\n  // State\n  state,\n} = useToast();\n"})}),"\n",(0,o.jsx)(t.h3,{children:"toast.close(id)"}),"\n",(0,o.jsx)(t.p,{children:"Close a toast at its placement."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Arguments"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"id"})," ",(0,o.jsx)(t.em,{children:"(string)"}),": The id to close the toast."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Returns"})}),"\n",(0,o.jsxs)(t.p,{children:["This method returns ",(0,o.jsx)(t.code,{children:"undefined"}),"."]}),"\n",(0,o.jsxs)(t.h3,{children:["toast.closeAll([options=","])"]}),"\n",(0,o.jsxs)(t.p,{children:["Close all toasts at once with the given placements, including ",(0,o.jsx)(t.code,{children:"top"}),", ",(0,o.jsx)(t.code,{children:"top-left"}),", ",(0,o.jsx)(t.code,{children:"top-right"}),", ",(0,o.jsx)(t.code,{children:"bottom"}),", ",(0,o.jsx)(t.code,{children:"bottom-left"}),", ",(0,o.jsx)(t.code,{children:"bottom-right"}),"."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Arguments"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"[options={}]"})," ",(0,o.jsx)(t.em,{children:"(Object)"}),": The options object."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"[options.placements=[]]"})," ",(0,o.jsx)(t.em,{children:"(Array)"}),": An array of placements to close toasts."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Returns"})}),"\n",(0,o.jsxs)(t.p,{children:["This method returns ",(0,o.jsx)(t.code,{children:"undefined"}),"."]}),"\n",(0,o.jsx)(t.h3,{children:"toast.find(id)"}),"\n",(0,o.jsxs)(t.p,{children:["Find the first toast in the array that matches the provided toast id. Otherwise, ",(0,o.jsx)(t.code,{children:"undefined"})," is returned if not found.\nIf no values satisfy the testing function, undefined is returned."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Arguments"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"id"})," ",(0,o.jsx)(t.em,{children:"(string)"}),": The id to find the toast."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Returns"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.em,{children:"(Object)"}),": Returns the toast object."]}),"\n",(0,o.jsx)(t.h3,{children:"toast.findIndex(id)"}),"\n",(0,o.jsx)(t.p,{children:"Find the first toast in the array that matches the provided toast id. Otherwise, -1 is returned if not found."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Arguments"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"id"})," ",(0,o.jsx)(t.em,{children:"(string)"}),": The id to find the toast."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Returns"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.em,{children:"(number)"}),": Returns the array index."]}),"\n",(0,o.jsxs)(t.h3,{children:["toast.notify(message, [options=","])"]}),"\n",(0,o.jsx)(t.p,{children:"Create a toast at the specified placement and return the toast id."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Arguments"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"message"})," ",(0,o.jsx)(t.em,{children:"(Function|string)"}),": The toast message to render."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"[options={}]"})," ",(0,o.jsx)(t.em,{children:"(Object)"}),": The options object."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"[options.duration=null]"})," ",(0,o.jsx)(t.em,{children:"(number)"}),": The duration (in milliseconds) that the toast should remain on the screen. If set to null, toast will never dismiss."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"[options.id]"})," ",(0,o.jsx)(t.em,{children:"(string)"}),": A unique ID of the toast."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"[options.placement]"})," ",(0,o.jsx)(t.em,{children:"(string)"}),": The placement of the toast."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Aliases"})}),"\n",(0,o.jsxs)(t.p,{children:["toast(message, [options=","])"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Returns"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.em,{children:"(string)"}),": Returns the toast id."]}),"\n",(0,o.jsxs)(t.h3,{children:["toast.update(id, [options=","])"]}),"\n",(0,o.jsx)(t.p,{children:"Update a specific toast with new options based on the given toast id."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Arguments"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"id"})," ",(0,o.jsx)(t.em,{children:"(string)"}),": The id to update the toast."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"[options={}]"})," ",(0,o.jsx)(t.em,{children:"(Object)"}),": The options object."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"[options.duration=null]"})," ",(0,o.jsx)(t.em,{children:"(number)"}),": The duration (in milliseconds) that the toast should remain on the screen. If set to null, toast will never dismiss."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"[options.message]"})," ",(0,o.jsx)(t.em,{children:"(Function|string)"}),": The toast message to render."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Returns"})}),"\n",(0,o.jsxs)(t.p,{children:["Returns ",(0,o.jsx)(t.code,{children:"true"})," if the toast exists, else ",(0,o.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,o.jsx)(t.h3,{children:"toast.placement"}),"\n",(0,o.jsx)(t.p,{children:"Specify the placement to place the toast. The default placement will be used if the placement option is not explicitly specified."}),"\n",(0,o.jsx)(t.h3,{children:"toast.state"}),"\n",(0,o.jsx)(t.p,{children:"The toast state is a placement object, each placement contains an array of objects representing the current toasts."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"{\n  'top': [\n    {\n      id: '1', // A unique identifier that represents the toast message\n      message: ({ id, onClose, placement }) => <Toast />, // The toast message to render\n      placement: 'top', // The placement of the toast\n      duration: null, // The duration (in milliseconds) that the toast should remain on the screen. If set to null, toast will never dismiss.\n      onClose: () => toast.close(id, placement), // The function to close the toast\n    },\n  ],\n  'top-left': [],\n  'top-right': [],\n  'bottom': [],\n  'bottom-left': [],\n  'bottom-right': [],\n}\n"})})]})}t.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},(0,s.ah)(),n.components).wrapper;return t?(0,o.jsx)(t,Object.assign({},n,{children:(0,o.jsx)(i,n)})):i(n)}},63820:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/toast",function(){return e(9965)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=63820)}),_N_E=n.O()}]);