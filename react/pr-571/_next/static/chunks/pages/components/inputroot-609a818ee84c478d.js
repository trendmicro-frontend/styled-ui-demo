(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7644],{39800:function(t,n,e){"use strict";e.r(n),e.d(n,{default:function(){return p}});var a=e(7896),o=e(59740),r=(e(2784),e(30876)),l=["components"],i={};function p(t){var n=t.components,e=(0,o.Z)(t,l);return(0,r.kt)("wrapper",(0,a.Z)({},i,e,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"InputRoot"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"InputRoot")," is built on top of ",(0,r.kt)("inlineCode",{parentName:"p"},"Input"),". It is basically the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"Input"),", but allows you to prepend/append adornments to the input."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  InputRoot,\n  InputAdornment,\n} from '@tonic-ui/react';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("p",null,"For more information about the usage, please check out the ",(0,r.kt)("a",{parentName:"p",href:"input"},"Input")," documentation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nrender(() => {\n  const [size, changeSizeBy] = useSelection(\'md\');\n  const [variant, changeVariantBy] = useSelection(\'outline\');\n\n  return (\n    <>\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          InputRoot props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'sm\', \'md\', \'lg\'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            variant\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'outline\', \'filled\', \'unstyled\'].map(value => (\n            <Button\n              key={value}\n              selected={value === variant}\n              onClick={changeVariantBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <Divider my="4x" />\n      <InputRoot\n        placeholder="Basic example"\n        size={size}\n        variant={variant}\n      />\n    </>\n  );\n});\n')),(0,r.kt)("h3",null,"Input adornments"),(0,r.kt)("p",null,"The main way to prepend or append an input adornment is to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"InputAdornment")," component. This can be used to add a prefix, a suffix, or an action to an input. For instance, you can use an icon button to hide or reveal the password."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const [view, setView] = React.useState(false);\n  const toggleView = () => setView(view => !view);\n  const iconColor = colorStyle.color.tertiary;\n  const inputType = view ? \'text\' : \'password\';\n\n  return (\n    <Flex direction="column" rowGap="4x">\n      <InputRoot\n        placeholder="Mobile phone number"\n        startAdornment={(\n          <InputAdornment>\n            <Icon icon="mobile" color={iconColor} />\n          </InputAdornment>\n        )}\n      />\n      <InputRoot\n        placeholder="yyyy-MM-dd"\n        defaultValue={new Date().toISOString().substr(0, 10)}\n        startAdornment={(\n          <InputAdornment>\n            <Icon icon="calendar" color={iconColor} />\n          </InputAdornment>\n        )}\n      />\n      <InputRoot\n        placeholder="Enter the amount"\n        startAdornment={(\n          <InputAdornment>\n            <Text width="4x" textAlign="center" color={iconColor}>$</Text>\n          </InputAdornment>\n        )}\n        endAdornment={(\n          <InputAdornment>\n            <Icon icon="check" color="green:50" />\n          </InputAdornment>\n        )}\n      />\n      <InputRoot\n        type={view ? \'text\' : \'password\'}\n        defaultValue="Revealed Password"\n        placeholder="Password"\n        endAdornment={(\n          <InputAdornment>\n            <ButtonBase onClick={toggleView}>\n              <Icon\n                icon={view ? \'view\' : \'view-off\'}\n                color={iconColor}\n              />\n            </ButtonBase>\n          </InputAdornment>\n        )}\n      />\n    </Flex>\n  );\n}\n')),(0,r.kt)("h2",null,"Props"),(0,r.kt)("h3",null,"InputRoot"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the user cannot interact with the control. This sets ",(0,r.kt)("inlineCode",{parentName:"td"},"aria-disabled=true")," and you can style this state by passing the ",(0,r.kt)("inlineCode",{parentName:"td"},"_disabled")," prop.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"endAdornment"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"End ",(0,r.kt)("inlineCode",{parentName:"td"},"InputAdornment")," for this component.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"isInvalid"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the input will indicate an error. You can style this state by passing the ",(0,r.kt)("inlineCode",{parentName:"td"},"_invalid")," prop.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"readOnly"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", prevents the value of the input from being edited.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"size"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'md'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The visual size of the ",(0,r.kt)("inlineCode",{parentName:"td"},"input")," element. One of: 'sm', 'md', 'lg'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'outline'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The variant of the input style to use. One of: 'outline', 'filled', 'unstyled'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"startAdornment"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Start ",(0,r.kt)("inlineCode",{parentName:"td"},"InputAdornment")," for this component.")))),(0,r.kt)("h3",null,"InputAdornment"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})))))}p.isMDXComponent=!0},74968:function(t,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/inputroot",function(){return e(39800)}])}},function(t){t.O(0,[9774,2888,179],(function(){return n=74968,t(t.s=n);var n}));var n=t.O();_N_E=n}]);