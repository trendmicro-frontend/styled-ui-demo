(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7644],{39800:function(t,n,e){"use strict";e.r(n),e.d(n,{default:function(){return p}});var a=e(7896),r=e(59740),o=(e(2784),e(30876)),l=["components"],i={};function p(t){var n=t.components,e=(0,r.Z)(t,l);return(0,o.kt)("wrapper",(0,a.Z)({},i,e,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",null,"InputRoot"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"InputRoot")," is basically the same as ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," but it allows you to add adornments to the input."),(0,o.kt)("h2",null,"Import"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  InputRoot,\n  InputAdornment,\n} from '@tonic-ui/react';\n")),(0,o.kt)("h2",null,"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<>\n  <TextLabel mb="1x">Label:</TextLabel>\n  <InputRoot placeholder="Basic example" />\n  <Text size="xs" mt="1x">Help text for the text input</Text>\n</>\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"InputRoot")," is built on top of ",(0,o.kt)("inlineCode",{parentName:"p"},"Input"),". Visit the ",(0,o.kt)("a",{parentName:"p",href:"input"},"Input")," page for more information.")),(0,o.kt)("h3",null,"Input adornments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled",disabled:!0},'<InputRoot\n  placeholder="yyyy-MM-dd"\n  defaultValue={new Date().toISOString().substr(0, 10)}\n  startAdornment={(\n    <InputAdornment>\n      <Icon icon="calendar" />\n    </InputAdornment>\n  )}\n  endAdornment={(\n    <InputAdornment>\n      <Icon icon="check" />\n    </InputAdornment>\n  )}\n/>\n')),(0,o.kt)("p",null,"The main way to prepend or append an input adornment is to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"InputAdornment")," component. This can be used to add a prefix, a suffix, or an action to an input. For instance, you can use an icon button to hide or reveal the password."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const [view, setView] = React.useState(false);\n  const toggleView = () => setView(view => !view);\n  const [colorMode] = useColorMode();\n  const adornmentColor = {\n    dark: \'white:tertiary\',\n    light: \'black:tertiary\',\n  }[colorMode];\n  const adornmentIconName = view ? \'view\' : \'view-off\';\n  const inputType = view ? \'text\' : \'password\';\n\n  return (\n    <Flex direction="column" rowGap="4x">\n      <InputRoot\n        placeholder="Mobile phone number"\n        startAdornment={(\n          <InputAdornment>\n            <Icon icon="mobile" color={adornmentColor} />\n          </InputAdornment>\n        )}\n      />\n      <InputRoot\n        placeholder="Enter the amount"\n        startAdornment={(\n          <InputAdornment>\n            <Text width="4x" textAlign="center" color={adornmentColor}>$</Text>\n          </InputAdornment>\n        )}\n        endAdornment={(\n          <InputAdornment>\n            <Icon icon="check" color="green:50" />\n          </InputAdornment>\n        )}\n      />\n      <InputRoot\n        type={inputType}\n        defaultValue="Revealed Password"\n        placeholder="Password"\n        endAdornment={(\n          <InputAdornment>\n            <ButtonBase onClick={toggleView}>\n              <Icon icon={adornmentIconName} color={adornmentColor} />\n            </ButtonBase>\n          </InputAdornment>\n        )}\n      />\n    </Flex>\n  );\n}\n')),(0,o.kt)("h2",null,"Props"),(0,o.kt)("h3",null,"InputRoot"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,o.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"If ",(0,o.kt)("inlineCode",{parentName:"td"},"true"),", the user cannot interact with the control. This sets ",(0,o.kt)("inlineCode",{parentName:"td"},"aria-disabled=true")," and you can style this state by passing the ",(0,o.kt)("inlineCode",{parentName:"td"},"_disabled")," prop.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"endAdornment"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"End ",(0,o.kt)("inlineCode",{parentName:"td"},"InputAdornment")," for this component.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"isInvalid"),(0,o.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"If ",(0,o.kt)("inlineCode",{parentName:"td"},"true"),", the input will indicate an error. You can style this state by passing the ",(0,o.kt)("inlineCode",{parentName:"td"},"_invalid")," prop.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"readOnly"),(0,o.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"If ",(0,o.kt)("inlineCode",{parentName:"td"},"true"),", prevents the value of the input from being edited.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"string"),(0,o.kt)("td",{parentName:"tr",align:"left"},"'md'"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The visual size of the ",(0,o.kt)("inlineCode",{parentName:"td"},"input")," element. One of: 'sm', 'md', 'lg'")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,o.kt)("td",{parentName:"tr",align:"left"},"string"),(0,o.kt)("td",{parentName:"tr",align:"left"},"'outline'"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The variant of the input style to use. One of: 'outline', 'filled', 'unstyled'")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"startAdornment"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"Start ",(0,o.kt)("inlineCode",{parentName:"td"},"InputAdornment")," for this component.")))))}p.isMDXComponent=!0},74968:function(t,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/inputroot",function(){return e(39800)}])}},function(t){t.O(0,[9774,2888,179],(function(){return n=74968,t(t.s=n);var n}));var n=t.O();_N_E=n}]);