(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8367],{4147:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var a=n(7896),l=n(9740),r=(n(2784),n(876)),o=["components"],i={};function p(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Input"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Input")," component is used to get user input in a text field."),(0,r.kt)("p",null,"Check out the ",(0,r.kt)("a",{parentName:"p",href:"inputcontrol"},"InputControl")," component if you want to do more advanced stuff with the input."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Input } from '@tonic-ui/react';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<>\n  <TextLabel mb="1x">Label:</TextLabel>\n  <Input placeholder="Basic example" />\n  <Text size="xs" mt="1x">Help text for the text input</Text>\n</>\n')),(0,r.kt)("h3",null,"Sizes"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," prop to change the size of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Input"),". You can set the value to ",(0,r.kt)("inlineCode",{parentName:"p"},"sm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"md"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"lg"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="column" spacing="4x">\n  <Box>\n    <TextLabel mb="1x" size="sm">Label:</TextLabel>\n    <Input size="sm" placeholder="Small size (24px)" />\n  </Box>\n  <Box>\n    <TextLabel mb="1x" size="md">Label:</TextLabel>\n    <Input size="md" placeholder="Default size (32px)" />\n  </Box>\n  <Box>\n    <TextLabel mb="1x" size="lg">Label:</TextLabel>\n    <Input size="lg" placeholder="Large size (40px)" />\n  </Box>\n</Stack>\n')),(0,r.kt)("h3",null,"Variants"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Input")," component comes in 3 variants: ",(0,r.kt)("inlineCode",{parentName:"p"},"outline"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"filled"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"unstyled"),". Pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," prop and set it to either of these values."),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"outline")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Input variant="outline" placeholder="John Doe" />\n')),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"filled")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Input variant="filled" placeholder="John Doe" />\n')),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"unstyled")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Input variant="unstyled" placeholder="John Doe" />\n')),(0,r.kt)("h3",null,"Attributes"),(0,r.kt)("p",null,"Standard input attributes are supported, e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"readOnly"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"required"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"list"),", etc."),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"type")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Grid\n  templateColumns="min-content auto"\n  columnGap="3x"\n  rowGap="3x"\n>\n  <Grid>\n    <TextLabel>Name:</TextLabel>\n  </Grid>\n  <Grid>\n    <Input type="text" placeholder="John Doe" />\n  </Grid>\n  <Grid>\n    <TextLabel>Password:</TextLabel>\n  </Grid>\n  <Grid>\n    <Input type="password" placeholder="Password" />\n  </Grid>\n</Grid>\n')),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"disabled")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack directin="column" spacing="4x">\n  <Input disabled placeholder="Placeholder text" />\n  <Input disabled placeholder="Placeholder text" defaultValue="Disabled" />\n</Stack>\n')),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"readOnly")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack directin="column" spacing="4x">\n  <Input readOnly placeholder="Placeholder text" />\n  <Input readOnly placeholder="Placeholder text" defaultValue="Read-only" />\n</Stack>\n')),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"required")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Input required placeholder="Placeholder text" />\n')),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"list")),(0,r.kt)("p",null,"The value of ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," is the id attribute of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<datalist>")," of autocomplete options. The HTML ",(0,r.kt)("inlineCode",{parentName:"p"},"<datalist>")," element contains a set of ",(0,r.kt)("inlineCode",{parentName:"p"},"<option>")," elements that represent the permissible or recommended options available to choose from within other controls."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<>\n  <Flex alignItems="center">\n    <TextLabel htmlFor="browser-choice" mr="2x">\n      Choose a browser from the list:\n    </TextLabel>\n    <Input list="browsers" id="browser-choice" width="auto" />\n  </Flex>\n  <Box as="datalist" id="browsers">\n    <option value="Chrome" />\n    <option value="Firefox" />\n    <option value="Internet Explorer" />\n    <option value="Opera" />\n    <option value="Safari" />\n    <option value="Microsoft Edge" />\n  </Box>\n</>\n')),(0,r.kt)("h3",null,"Validation"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," prop to indicate that the value entered into an input field does not conform to the format expected by the application. It can also be used to indicate that a required field has not been filled in."),(0,r.kt)("p",null,"Set ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," on the fields that have failed validation, otherwise set it to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," if no errors detected."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const InlineError = (props) => (\n  <Text fontSize="sm" lineHeight="sm" color="red:50" {...props} />\n);\n\nconst InputField = ({\n  value,\n  onChange,\n  ...props\n}) => {\n  const error = (value === \'\');\n\n  return (\n    <>\n      <Flex position="relative" alignItems="center" mb="1x">\n        <Input\n          placeholder="Enter your name here"\n          value={value}\n          onChange={onChange}\n          error={error}\n          pr={error ? \'10x\' : undefined}\n        />\n        {error && (\n          <Box position="absolute" right={0}>\n            <Icon icon="warning-circle" mx="3x" color="red:50" />\n          </Box>\n        )}\n      </Flex>\n      <Box>\n        {error && (\n          <InlineError>This is a required field.</InlineError>\n        )}\n      </Box>\n    </>\n  );\n};\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'\');\n  const onChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <InputField value={value} onChange={onChange} />\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h2",null,"Props"),(0,r.kt)("h3",null,"Input"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the user cannot interact with the control.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"error"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the input will display an error state.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"readOnly"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", prevents the value of the input from being edited.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"size"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'md'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The visual size of the ",(0,r.kt)("inlineCode",{parentName:"td"},"input")," element. One of: 'sm', 'md', 'lg'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'outline'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The variant of the input style to use. One of: 'outline', 'filled', 'unstyled'")))))}p.isMDXComponent=!0},7332:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/input",function(){return n(4147)}])}},function(e){e.O(0,[9774,2888,179],(function(){return t=7332,e(e.s=t);var t}));var t=e.O();_N_E=t}]);