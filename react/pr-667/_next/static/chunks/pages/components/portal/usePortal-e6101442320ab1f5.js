(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1484],{6327:function(e,n,o){"use strict";o.r(n);var r=o(52322),t=o(45392);function l(e){var n=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",pre:"pre",h3:"h3",h4:"h4",strong:"strong",ul:"ul",li:"li",em:"em"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{children:"usePortal"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"usePortal"})," Hook allows you to create and remove portals in your React application. A portal is a way to render a component outside of its parent component hierarchy, in a different part of the DOM."]}),"\n",(0,r.jsx)(n.h2,{children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:["First, you need to wrap your root component with the ",(0,r.jsx)(n.code,{children:"PortalProvider"})," component. This provides a context for ",(0,r.jsx)(n.code,{children:"usePortal"})," to work. Then, you can use the ",(0,r.jsx)(n.code,{children:"usePortal"})," Hook in any component to create and remove portals."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import {\n  PortalProvider,\n  usePortal,\n} from '@tonic-ui/react';\n\nfunction App() {\n  return (\n    <PortalProvider>\n      <MyComponent />\n    </PortalProvider>\n  );\n}\n\nfunction MyComponent() {\n  const portal = usePortal();\n  const openModal = () => {\n    portal.add((close) => (\n      <MyModal onClose={close} />\n    ));\n  };\n\n  return (\n    <Button onClick={openModal}>Open Modal</Button>\n  );\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"usePortal"})," Hook returns an object with two methods: ",(0,r.jsx)(n.code,{children:"add"})," and ",(0,r.jsx)(n.code,{children:"remove"}),"."]}),"\n",(0,r.jsx)(n.h3,{children:"Methods"}),"\n",(0,r.jsxs)(n.h4,{children:["portal.add(render, [options=","{}","])"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"add"})," method creates a new portal and returns a unique id for the portal."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"render"})," ",(0,r.jsx)(n.em,{children:"(Function)"}),":  A function that returns a React element. This function is passed a ",(0,r.jsx)(n.code,{children:"close"})," function that can be used to close the portal."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[options={}]"})," ",(0,r.jsx)(n.em,{children:"(Object)"}),": An optional object that provides additional options for the portal."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[options.id]"})," ",(0,r.jsx)(n.em,{children:"(string)"}),": A unique identifier for the portal. If not provided, a unique ID will be generated."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[options.appendToParentPortal=false]"})," ",(0,r.jsx)(n.em,{children:"(boolean)"}),": If ",(0,r.jsx)(n.code,{children:"true"}),", the portal will be appended to the parent portal. If ",(0,r.jsx)(n.code,{children:"false"}),", the portal will be appended to the body. Defaults to ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[options.containerRef=null]"})," ",(0,r.jsx)(n.em,{children:"(React.RefObject)"}),": A reference to the container element. If provided, the portal will be appended to the container element. Otherwise, the portal will be appended to the body. Defaults to ",(0,r.jsx)(n.code,{children:"null"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"(string)"}),": A unique identifier for the portal."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{children:"portal.remove(id)"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"remove"})," method removes a portal by its id."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"})," ",(0,r.jsx)(n.em,{children:"(string)"}),": The id of the portal to be removed."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns"})}),"\n",(0,r.jsx)(n.p,{children:"This method does not return anything."}),"\n",(0,r.jsx)(n.h2,{children:"Demos"}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example of how to use ",(0,r.jsx)(n.code,{children:"usePortal"})," to create and remove a modal:"]}),"\n",(0,r.jsx)(n.pre,{noInline:!0,children:(0,r.jsx)(n.code,{className:"language-jsx",children:'render(() => {\n  const portal = usePortal();\n  const openModal = React.useCallback(() => {\n    portal.add((close) => (\n      <MyModal onClose={close} />\n    ));\n  }, [portal]);\n\n  return (\n    <Button onClick={openModal}>\n      Open Modal\n    </Button>\n  );\n});\n\nconst MyModal = ({ onClose, ...rest }) => (\n  <Modal\n    closeOnEsc\n    closeOnOutsideClick\n    isOpen\n    onClose={onClose}\n    size="sm"\n    {...rest}\n  >\n    <ModalOverlay />\n    <ModalContent>\n      <ModalHeader>\n        Modal Header\n      </ModalHeader>\n      <ModalBody>\n        Modal Body\n      </ModalBody>\n      <ModalFooter>\n        <Button onClick={onClose}>\n          Close\n        </Button>\n      </ModalFooter>\n    </ModalContent>\n  </Modal>\n);\n'})})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,t.ah)(),e.components).wrapper;return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(l,e)})):l(e)}},91915:function(e,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/portal/usePortal",function(){return o(6327)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=91915)}),_N_E=e.O()}]);