(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4289],{47642:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return s}});var c=t(7896),u=t(59740),o=(t(2784),t(30876)),a=["components"],r={};function s(n){var e=n.components,t=(0,u.Z)(n,a);return(0,o.kt)("wrapper",(0,c.Z)({},r,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",null,"useEffectOnce"),(0,o.kt)("p",null,"A custom Hook that runs a callback at most once when a condition becomes true."),(0,o.kt)("h2",null,"Import"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { useEffectOnce } from '@tonic-ui/react-hooks';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { useEffect, useRef } from 'react';\n\nconst useEffectOnce = (callback, when) => {\n  const runOnceRef = useRef(false);\n  const callbackRef = useRef(callback);\n\n  callbackRef.current = callback;\n\n  useEffect(() => {\n    if (!when || runOnceRef.current) {\n      return;\n    }\n\n    (typeof callbackRef.current === 'function') && callbackRef.current();\n    runOnceRef.current = true;\n  }, [when]);\n};\n")),(0,o.kt)("h2",null,"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  const [clicked, setClicked] = React.useState(false);\n  const [touched, setTouched] = React.useState(false);\n\n  useEffectOnce(() => {\n    setTouched(true);\n  }, clicked);\n\n  return (\n    <>\n      <Box mb=\"4x\">\n        {touched ? 'Touched' : 'Untouched'}\n      </Box>\n      <Button onClick={() => setClicked(true)}>\n        Click Me\n      </Button>\n    </>\n  );\n}\n")))}s.isMDXComponent=!0},20370:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/use-effect-once",function(){return t(47642)}])}},function(n){n.O(0,[9774,2888,179],(function(){return e=20370,n(n.s=e);var e}));var e=n.O();_N_E=e}]);