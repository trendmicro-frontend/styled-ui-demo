(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9004],{1154:function(n,e,t){"use strict";t.r(e);var i=t(2322),l=t(5392);function r(n){var e=Object.assign({h1:"h1",p:"p",code:"code",a:"a",h2:"h2",pre:"pre",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,l.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{children:"Transitions / Slide"}),"\n",(0,i.jsx)(e.p,{children:"Transition helps make a UI expressive and easy to use."}),"\n",(0,i.jsxs)(e.p,{children:["The transition components use ",(0,i.jsx)(e.code,{children:"react-transition-group"})," internally to perform animation effects and manage component states (including mounting and unmounting) over time. You can check out all the transition props at ",(0,i.jsx)(e.a,{href:"https://reactcommunity.org/react-transition-group/transition/#Transition-props",children:"https://reactcommunity.org/react-transition-group/transition/#Transition-props"}),". For more information, visit ",(0,i.jsx)(e.a,{href:"http://reactcommunity.org/react-transition-group/transition",children:"http://reactcommunity.org/react-transition-group/transition"})," for detailed usage."]}),"\n",(0,i.jsx)(e.h2,{children:"Import"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"import {\n  Slide, // internally used in `Drawer`\n} from '@tonic-ui/react';\n"})}),"\n",(0,i.jsx)(e.h2,{children:"Usage"}),"\n",(0,i.jsx)(e.h3,{children:"Slide"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"Slide"})," transition is used to slide a component in and out of view."]}),"\n",(0,i.jsx)(e.pre,{noInline:!0,children:(0,i.jsx)(e.code,{className:"language-jsx",children:'const useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nfunction Example() {\n  const [isOpen, onToggle] = useToggle(false);\n  const [direction, changeDirectionBy] = useSelection(\'up\');\n\n  return (\n    <Flex direction="column" rowGap="4x">\n      <TextLabel display="inline-flex" alignItems="center">\n        <Switch checked={isOpen} onChange={() => onToggle()} size="md" />\n        <Space width="2x" />\n        <Text>Show</Text>\n      </TextLabel>\n      <ButtonGroup\n        variant="secondary"\n        css={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        {[\'up\', \'down\', \'left\', \'right\'].map(value => {\n          const changeDirection = changeDirectionBy(value);\n          const onClick = () => {\n            changeDirection();\n            onToggle(false);\n          };\n\n          return (\n            <Button\n              key={value}\n              selected={value === direction}\n              onClick={onClick}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          );\n        })}\n      </ButtonGroup>\n      <Box overflow="hidden">\n        <Slide\n          in={isOpen}\n          direction={direction}\n          unmountOnExit={false}\n        >\n          <SkeletonContent>\n            <SkeletonBody />\n          </SkeletonContent>\n        </Slide>\n      </Box>\n    </Flex>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,i.jsx)(e.h2,{children:"Props"}),"\n",(0,i.jsx)(e.h3,{children:"Slide"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"appear"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left",children:"false"}),(0,i.jsxs)(e.td,{align:"left",children:["By default the child component does not perform the enter transition when it first mounts, regardless of the value of ",(0,i.jsx)(e.code,{children:"in"}),". If you want this behavior, set both ",(0,i.jsx)(e.code,{children:"appear"})," and ",(0,i.jsx)(e.code,{children:"in"})," to true."]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsxs)(e.td,{align:"left",children:["ReactNode | ",(0,i.jsx)(e.code,{children:"(state, props) => ReactNode"})]}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"A function child can be used instead of a React element. This function is called with the current transition state ('entering', 'entered', 'exiting', 'exited'), ref, style, and context specific props for a component."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"easing"}),(0,i.jsxs)(e.td,{align:"left",children:["string | ",(0,i.jsx)(e.code,{children:"{ enter?: string, exit?: string }"})]}),(0,i.jsx)(e.td,{align:"left",children:(0,i.jsx)(e.code,{children:"{ enter: easing.easeOut, exit: easing.sharp }"})}),(0,i.jsx)(e.td,{align:"left",children:"The timing function that describes how intermediate values are calculated during a transition. You may specify a single timing function for all transitions, or individually with an object."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"direction"}),(0,i.jsx)(e.td,{align:"left",children:"string"}),(0,i.jsx)(e.td,{align:"left",children:"'down'"}),(0,i.jsx)(e.td,{align:"left",children:"One of: 'up', 'down', 'left', 'right'"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"in"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsxs)(e.td,{align:"left",children:["If ",(0,i.jsx)(e.code,{children:"true"}),", the component will transition in."]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"mountOnEnter"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsxs)(e.td,{align:"left",children:["If ",(0,i.jsx)(e.code,{children:"true"}),', it will "lazy mount" the component on the first ',(0,i.jsx)(e.code,{children:"in={true}"}),". After the first enter transition the component will stay mounted, even on the 'exited' state, unless you also specify ",(0,i.jsx)(e.code,{children:"unmountOnExit"}),". By default the child component is mounted immediately along with the parent transition component."]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"timeout"}),(0,i.jsxs)(e.td,{align:"left",children:["number | ",(0,i.jsx)(e.code,{children:"{ appear?: number, enter?: number, exit?: number }"})]}),(0,i.jsx)(e.td,{align:"left",children:(0,i.jsx)(e.code,{children:"{ enter: duration.enterScreen, exit: duration.levingScreen }"})}),(0,i.jsx)(e.td,{align:"left",children:"The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"unmountOnExit"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsxs)(e.td,{align:"left",children:["If ",(0,i.jsx)(e.code,{children:"true"}),", it will unmount the child component when ",(0,i.jsx)(e.code,{children:"in={false}"})," and the animation has finished. By default the child component stays mounted after it reaches the 'exited' state."]})]})]})]})]})}e.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,l.ah)(),n.components).wrapper;return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(r,n)})):r(n)}},3798:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/transitions/slide",function(){return t(1154)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=3798)}),_N_E=n.O()}]);