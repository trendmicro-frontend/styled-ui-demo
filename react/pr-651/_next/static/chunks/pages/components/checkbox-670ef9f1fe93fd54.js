(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4927],{7189:function(e,n,c){"use strict";c.r(n);var t=c(2322),l=c(5392);function i(e){var n=Object.assign({h1:"h1",p:"p",code:"code",a:"a",h2:"h2",pre:"pre",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,l.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:"Checkbox"}),"\n",(0,t.jsxs)(n.p,{children:["Use a ",(0,t.jsx)(n.code,{children:"Checkbox"})," in forms when a user needs to select multiple values from a list of options."]}),"\n",(0,t.jsxs)(n.p,{children:["Since native HTML checkboxes are 100% accessible by default, a common ",(0,t.jsx)(n.a,{href:"https://dev.to/lkopacz/create-custom-keyboard-accessible-checkboxes-2036",children:"CSS technique"})," is used to style checkboxes."]}),"\n",(0,t.jsx)(n.h2,{children:"Import"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { Checkbox } from '@tonic-ui/react';\n"})}),"\n",(0,t.jsx)(n.h2,{children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"<Checkbox defaultChecked>Checkbox</Checkbox>\n"})}),"\n",(0,t.jsx)(n.h3,{children:"Colors"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"variantColor"})," prop to change the color scheme of the checkbox. ",(0,t.jsx)(n.code,{children:"variantColor"})," can be any color key with key ",(0,t.jsx)(n.code,{children:"50"})," (hover) or ",(0,t.jsx)(n.code,{children:"60"})," (checked, active) that exist in ",(0,t.jsx)(n.code,{children:"theme.colors"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'<Stack direction="row" spacing="6x">\n  <Checkbox variantColor="red" defaultChecked>\n    Checkbox\n  </Checkbox>\n  <Checkbox variantColor="green" defaultChecked>\n    Checkbox\n  </Checkbox>\n  <Checkbox variantColor="purple" indeterminate>\n    Checkbox\n  </Checkbox>\n</Stack>\n'})}),"\n",(0,t.jsx)(n.h3,{children:"Sizes"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"size"})," prop to change the size of the checkbox. You can set the value to ",(0,t.jsx)(n.code,{children:"sm"}),", ",(0,t.jsx)(n.code,{children:"md"}),", or ",(0,t.jsx)(n.code,{children:"lg"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'<Stack direction="row" spacing="4x">\n  <Checkbox size="sm">Checkbox</Checkbox>\n  <Checkbox size="md">Checkbox</Checkbox>\n  <Checkbox size="lg">Checkbox</Checkbox>\n</Stack>\n'})}),"\n",(0,t.jsx)(n.h3,{children:"States"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'<Stack direction="row" spacing="6x" alignItems="center">\n  <Stack spacing="2x" alignItems="center">\n    <Checkbox>Checkbox</Checkbox>\n    <Checkbox disabled>Checkbox</Checkbox>\n  </Stack>\n  <Stack spacing="2x" alignItems="center">\n    <Checkbox defaultChecked>Checkbox</Checkbox>\n    <Checkbox disabled defaultChecked>Checkbox</Checkbox>\n  </Stack>\n  <Stack spacing="2x" alignItems="center">\n    <Checkbox indeterminate>Checkbox</Checkbox>\n    <Checkbox disabled indeterminate>Checkbox</Checkbox>\n  </Stack>\n</Stack>\n'})}),"\n",(0,t.jsx)(n.h3,{children:"Indeterminate"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'function IndeterminateExample() {\n  const [checkedItems, setCheckedItems] = React.useState([true, false]);\n  const allChecked = checkedItems.every(Boolean);\n  const isIndeterminate = checkedItems.some(Boolean) && !allChecked;\n\n  return (\n    <>\n      <Checkbox\n        checked={allChecked}\n        indeterminate={isIndeterminate}\n        onChange={e => setCheckedItems([e.target.checked, e.target.checked])}\n        children="Parent Checkbox"\n      />\n      <Stack direction="column" pl="6x" mt="1x" spacing="1x" shouldWrapChildren>\n        <Checkbox\n          checked={checkedItems[0]}\n          onChange={e => setCheckedItems([e.target.checked, checkedItems[1]])}\n          children="Child Checkbox 1"\n        />\n        <Checkbox\n          checked={checkedItems[1]}\n          onChange={e => setCheckedItems([checkedItems[0], e.target.checked])}\n          children="Child Checkbox 2"\n        />\n      </Stack>\n    </>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h2,{children:"Props"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"Name"}),(0,t.jsx)(n.th,{align:"left",children:"Type"}),(0,t.jsx)(n.th,{align:"left",children:"Default"}),(0,t.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"id"}),(0,t.jsx)(n.td,{align:"left",children:"string"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["The ",(0,t.jsx)(n.code,{children:"id"})," attribute of the input field."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"name"}),(0,t.jsx)(n.td,{align:"left",children:"string"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"The name of a input field in a checkbox. The name is useful for form submissions."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"value"}),(0,t.jsx)(n.td,{align:"left",children:"string | number"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"The value for checkbox input. This is the return value for form submissions."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"variantColor"}),(0,t.jsx)(n.td,{align:"left",children:"string"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"The color of the checkbox when it is selected. The color should be one of the color keys in the theme (for example, 'green', 'red')"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"size"}),(0,t.jsx)(n.td,{align:"left",children:"string"}),(0,t.jsx)(n.td,{align:"left",children:"'md'"}),(0,t.jsx)(n.td,{align:"left",children:"The size (width and height) of the checkbox. Acceptable values: 'sm', 'md', 'lg'"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"defaultChecked"}),(0,t.jsx)(n.td,{align:"left",children:"boolean"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["If ",(0,t.jsx)(n.code,{children:"true"}),", the checkbox will be selected initially."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"checked"}),(0,t.jsx)(n.td,{align:"left",children:"boolean"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["If ",(0,t.jsx)(n.code,{children:"true"}),", the checkbox will be selected. Use onChange to update the state for a controlled component."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"disabled"}),(0,t.jsx)(n.td,{align:"left",children:"boolean"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["If ",(0,t.jsx)(n.code,{children:"true"}),", the checkbox will be disabled. This sets ",(0,t.jsx)(n.code,{children:"aria-disabled=true"})," and you can set this state by using the ",(0,t.jsx)(n.code,{children:"_disabled"})," prop."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"indeterminate"}),(0,t.jsx)(n.td,{align:"left",children:"boolean"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["If ",(0,t.jsx)(n.code,{children:"true"}),", the checkbox will be indeterminate. This only affects the icon shown inside the checkbox."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"children"}),(0,t.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"The children of the checkbox."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"onChange"}),(0,t.jsx)(n.td,{align:"left",children:"function"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"A callback called when the state is changed."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"onBlur"}),(0,t.jsx)(n.td,{align:"left",children:"function"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"A callback called when the checkbox loses focus."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"onFocus"}),(0,t.jsx)(n.td,{align:"left",children:"function"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"A callback called when the checkbox receives focus."})]})]})]})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,l.ah)(),e.components).wrapper;return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(i,e)})):i(e)}},1315:function(e,n,c){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/checkbox",function(){return c(7189)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=1315)}),_N_E=e.O()}]);