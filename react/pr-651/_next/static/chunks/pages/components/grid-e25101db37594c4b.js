(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[891],{1424:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return m}});n(2784);var r=n(876),a=["components"];function o(){return o=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o.apply(this,arguments)}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var i={};function m(t){var e=t.components,n=l(t,a);return(0,r.kt)("wrapper",o({},i,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Grid"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Grid")," is a ",(0,r.kt)("a",{parentName:"p",href:"box"},(0,r.kt)("inlineCode",{parentName:"a"},"Box"))," with ",(0,r.kt)("inlineCode",{parentName:"p"},"display: grid")," and comes with helpful style shorthand props."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Grid } from '@tonic-ui/react';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("p",null,"Grid provides the following style shorthand props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Shorthand Prop"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Style Prop"),(0,r.kt)("th",{parentName:"tr",align:"left"},"CSS Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"gap"),(0,r.kt)("td",{parentName:"tr",align:"left"},"gridGap"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/gap"},"grid-gap")),(0,r.kt)("td",{parentName:"tr",align:null},"Sets the gaps (gutters) between rows and columns. It is a shorthand for ",(0,r.kt)("inlineCode",{parentName:"td"},"row-gap")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"column-gap"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"rowGap"),(0,r.kt)("td",{parentName:"tr",align:"left"},"gridRowGap"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap"},"grid-row-gap")),(0,r.kt)("td",{parentName:"tr",align:null},"Sets the size of the gap (gutter) between an element's grid rows.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"columnGap"),(0,r.kt)("td",{parentName:"tr",align:"left"},"gridColumnGap"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap"},"grid-column-gap")),(0,r.kt)("td",{parentName:"tr",align:null},"Sets the size of the gap (gutter) between an element's columns.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"row"),(0,r.kt)("td",{parentName:"tr",align:"left"},"gridRow"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row"},"grid-row")),(0,r.kt)("td",{parentName:"tr",align:null},"a shorthand property for ",(0,r.kt)("inlineCode",{parentName:"td"},"grid-row-start")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"grid-row-end"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"column"),(0,r.kt)("td",{parentName:"tr",align:"left"},"gridColumn"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column"},"grid-column")),(0,r.kt)("td",{parentName:"tr",align:null},"A shorthand property for ",(0,r.kt)("inlineCode",{parentName:"td"},"grid-column-start")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"grid-column-end"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"area"),(0,r.kt)("td",{parentName:"tr",align:"left"},"gridArea"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area"},"grid-area")),(0,r.kt)("td",{parentName:"tr",align:null},"A shorthand property for ",(0,r.kt)("inlineCode",{parentName:"td"},"grid-row-start"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"grid-column-start"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"grid-row-end")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"grid-column-end"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"autoFlow"),(0,r.kt)("td",{parentName:"tr",align:"left"},"gridAutoFlow"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow"},"grid-auto-flow")),(0,r.kt)("td",{parentName:"tr",align:null},"Controls how the auto-placement algorithm works.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"autoRows"),(0,r.kt)("td",{parentName:"tr",align:"left"},"gridAutoRows"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows"},"grid-auto-rows")),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the size of an implicitly-created grid row track or pattern of tracks.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"autoColumns"),(0,r.kt)("td",{parentName:"tr",align:"left"},"gridAutoColumns"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns"},"grid-auto-columns")),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the size of an implicitly-created grid column track or pattern of tracks.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"templateRows"),(0,r.kt)("td",{parentName:"tr",align:"left"},"gridTemplateRows"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows"},"grid-template-rows")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines the line names and track sizing functions of the grid rows.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"templateColumns"),(0,r.kt)("td",{parentName:"tr",align:"left"},"gridTemplateColumns"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns"},"grid-template-columns")),(0,r.kt)("td",{parentName:"tr",align:null},"Defines the line names and track sizing functions of the grid columns.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"templateAreas"),(0,r.kt)("td",{parentName:"tr",align:"left"},"gridTemplateAreas"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas"},"grid-template-areas")),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies named grid areas.")))),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"gap")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"gridGap"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'0\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'0\')}>0</Button>\n        <Button variant="outline" onClick={() => setValue(\'10%\')}>10%</Button>\n        <Button variant="outline" onClick={() => setValue(\'1rem\')}>1rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'10px 20px\')}>10px 20px</Button>\n        <Button variant="outline" onClick={() => setValue(\'calc(20px + 10%)\')}>calc(20px + 10%)</Button>\n      </Stack>\n      <pre>\n        {`<Grid gap="${value}">`}\n      </pre>\n      <Grid\n        gap={value}\n        templateColumns="1fr 1fr"\n        bg="gray:10"\n        p="4x"\n        transition="all .3s ease-in"\n      >\n        <GridItem>One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"rowGap")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"gridRowGap"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'0\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'0\')}>0</Button>\n        <Button variant="outline" onClick={() => setValue(\'10%\')}>10%</Button>\n        <Button variant="outline" onClick={() => setValue(\'1rem\')}>1rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'20px\')}>20px</Button>\n      </Stack>\n      <pre>\n        {`<Grid rowGap="${value}">`}\n      </pre>\n      <Grid\n        rowGap={value}\n        templateColumns="1fr 1fr"\n        bg="gray:10"\n        p="4x"\n        transition="all .3s ease-in"\n      >\n        <GridItem>One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"columnGap")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"gridColumnGap"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'0\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'0\')}>0</Button>\n        <Button variant="outline" onClick={() => setValue(\'10%\')}>10%</Button>\n        <Button variant="outline" onClick={() => setValue(\'1rem\')}>1rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'20px\')}>20px</Button>\n      </Stack>\n      <pre>\n        {`<Grid columnGap="${value}">`}\n      </pre>\n      <Grid\n        columnGap={value}\n        templateColumns="1fr 1fr"\n        bg="gray:10"\n        p="4x"\n        transition="all .3s ease-in"\n      >\n        <GridItem>One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"row")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"gridRow"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'1\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'1\')}>1</Button>\n        <Button variant="outline" onClick={() => setValue(\'1 / 3\')}>1 / 3</Button>\n        <Button variant="outline" onClick={() => setValue(\'2 / -1\')}>2 / -1</Button>\n        <Button variant="outline" onClick={() => setValue(\'1 / span 2\')}>1 / span 2</Button>\n      </Stack>\n      <Grid\n        templateRows="repeat(3,minmax(3rem,auto))"\n        templateColumns="1fr 1.5fr 1fr"\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem row={value} bg="blue:50" borderColor="blue:60">One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"column")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"gridColumn"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'1\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'1\')}>1</Button>\n        <Button variant="outline" onClick={() => setValue(\'1 / 3\')}>1 / 3</Button>\n        <Button variant="outline" onClick={() => setValue(\'2 / -1\')}>2 / -1</Button>\n        <Button variant="outline" onClick={() => setValue(\'1 / span 2\')}>1 / span 2</Button>\n      </Stack>\n      <Grid\n        templateRows="repeat(3,minmax(3rem,auto))"\n        templateColumns="1fr 1.5fr 1fr"\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem column={value} bg="blue:50" borderColor="blue:60">One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"area")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"gridArea"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'a\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'a\')}>a</Button>\n        <Button variant="outline" onClick={() => setValue(\'b\')}>b</Button>\n        <Button variant="outline" onClick={() => setValue(\'c\')}>c</Button>\n        <Button variant="outline" onClick={() => setValue(\'2 / 1 / 2 / 4\')}>2 / 1 / 2 / 4</Button>\n      </Stack>\n      <Grid\n        templateRows="repeat(3,minmax(3rem,auto))"\n        templateColumns="1fr 1fr 1fr"\n        templateAreas={`\n          "a a a"\n          "b c c"\n          "b c c"\n        `}\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem area={value}>Example</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"autoFlow")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"gridAutoFlow"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'row\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'row\')}>row</Button>\n        <Button variant="outline" onClick={() => setValue(\'column\')}>column</Button>\n        <Button variant="outline" onClick={() => setValue(\'row dense\')}>row dense</Button>\n      </Stack>\n      <pre>\n        {`<Grid autoFlow="${value}">`}\n      </pre>\n      <Grid\n        autoFlow={value}\n        templateRows="repeat(3,minmax(3rem,auto))"\n        templateColumns="1fr 1fr 1fr"\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem column="auto/span 2">One</GridItem>\n        <GridItem column="auto/span 2">Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"autoRows")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"gridAutoRows"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'auto\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'auto\')}>auto</Button>\n        <Button variant="outline" onClick={() => setValue(\'3rem\')}>3rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'min-content\')}>min-content</Button>\n        <Button variant="outline" onClick={() => setValue(\'minmax(2rem, auto)\')}>minmax(2rem, auto)</Button>\n      </Stack>\n      <pre>\n        {`<Grid autoRows="${value}">`}\n      </pre>\n      <Grid\n        autoRows={value}\n        templateColumns="1fr 1fr"\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem>One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem></GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"autoColumns")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"gridAutoColumns"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'auto\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'auto\')}>auto</Button>\n        <Button variant="outline" onClick={() => setValue(\'1fr\')}>1fr</Button>\n        <Button variant="outline" onClick={() => setValue(\'min-content\')}>min-content</Button>\n        <Button variant="outline" onClick={() => setValue(\'minmax(3rem, auto)\')}>minmax(3rem, auto)</Button>\n      </Stack>\n      <pre>\n        {`<Grid autoColumns="${value}">`}\n      </pre>\n      <Grid\n        autoColumns={value}\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem column="1/3">One</GridItem>\n        <GridItem column="2">Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"templateRows")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"gridTemplateRows"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'auto\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'auto\')}>auto</Button>\n        <Button variant="outline" onClick={() => setValue(\'3rem 4rem 3rem\')}>3rem 4rem 3rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'1fr 2fr 1fr\')}>1fr 2fr 1fr</Button>\n        <Button variant="outline" onClick={() => setValue(\'3rem auto minmax(3rem, 4rem)\')}>3rem auto minmax(3rem, 4rem)</Button>\n      </Stack>\n      <pre>\n        {`<Grid templateRows="${value}">`}\n      </pre>\n      <Grid\n        templateRows={value}\n        templateColumns="1fr 1fr"\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem>One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"templateColumns")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"gridTemplateColumns"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'4rem 4rem\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'4rem 4rem\')}>4rem 4rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'1fr 4rem\')}>1fr 4rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'1fr auto\')}>1fr auto</Button>\n        <Button variant="outline" onClick={() => setValue(\'1fr 2fr\')}>1fr 2fr</Button>\n      </Stack>\n      <pre>\n        {`<Grid templateColumns="${value}">`}\n      </pre>\n      <Grid\n        templateColumns={value}\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem>One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h3",null,"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"templateAreas")," (",(0,r.kt)("inlineCode",{parentName:"h3"},"gridTemplateAreas"),") property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'"a a a" "b c c" "b c c"\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'"a a a" "b c c" "b c c"\')}>\n          <Box fontFamily="mono" py="1x">\n            <Box>"a a a"</Box>\n            <Box>"b c c"</Box>\n            <Box>"b c c"</Box>\n          </Box>\n        </Button>\n        <Button variant="outline" onClick={() => setValue(\'"b b a" "b b c" "b b c"\')}>\n          <Box fontFamily="mono" py="1x">\n            <Box>"b b a"</Box>\n            <Box>"b b c"</Box>\n            <Box>"b b c"</Box>\n          </Box>\n        </Button>\n        <Button variant="outline" onClick={() => setValue(\'"a a ." "a a ." ". b c"\')}>\n          <Box fontFamily="mono" py="1x">\n            <Box>"a a ."</Box>\n            <Box>"a a ."</Box>\n            <Box>". b c"</Box>\n          </Box>\n        </Button>\n      </Stack>\n      <pre>\n        {`<Grid templateAreas=${JSON.stringify(value)}>`}\n      </pre>\n      <Grid\n        templateAreas={value}\n        templateRows="repeat(3,minmax(3rem,auto))"\n        templateColumns="1fr 1fr 1fr"\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem area="a" bg="blue:50" borderColor="blue:60">One (a)</GridItem>\n        <GridItem area="b" bg="red:50" borderColor="red:60">Two (b)</GridItem>\n        <GridItem area="c" bg="teal:50" borderColor="teal:60">Three (c)</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n')))}m.isMDXComponent=!0},6239:function(t,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/grid",function(){return n(1424)}])}},function(t){t.O(0,[9774,2888,179],(function(){return e=6239,t(t.s=e);var e}));var e=t.O();_N_E=e}]);