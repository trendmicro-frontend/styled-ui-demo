(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7456],{8255:function(e,n,t){"use strict";t.r(n);var l=t(2322),i=t(5392);function s(e){var n=Object.assign({h1:"h1",p:"p",h2:"h2",ul:"ul",li:"li",code:"code",pre:"pre",h3:"h3",h4:"h4",strong:"strong",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",a:"a"},(0,i.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{children:"Menu"}),"\n",(0,l.jsx)(n.p,{children:"A menu is used to display a list of options to the user. It appears when the user interacts with a button, link, or other control that triggers an action."}),"\n",(0,l.jsx)(n.h2,{children:"Import"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Menu"}),": The component that provides the menu functionality."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MenuButton"}),": A button that composes ",(0,l.jsx)(n.code,{children:"Button"}),", ",(0,l.jsx)(n.code,{children:"MenuToggle"}),", and ",(0,l.jsx)(n.code,{children:"MenuToggleIcon"})," to create a menu button."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MenuContent"}),": An unstyled component that provides the menu content."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MenuDivider"}),": A divider that separates menu items."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MenuGroup"}),": A component that groups menu items."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MenuItem"}),": The individual menu items."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MenuList"}),": A styled ",(0,l.jsx)(n.code,{children:"MenuContent"})," that wraps the menu items."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MenuToggle"}),": The toggle that opens the menu. This is usually a button or link."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MenuToggleIcon"}),": An indicator that appears next to the toggle. This is usually a chevron or arrow."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Submenu"}),": The component that provides the submenu functionality."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"SubmenuList"}),": The list of menu items that appear in the submenu."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"SubmenuToggle"}),": The toggle that opens the submenu when the menu item is hovered over."]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import {\n  Menu,\n  MenuButton,\n  MenuContent,\n  MenuDivider,\n  MenuGroup,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  MenuToggleIcon,\n  Submenu,\n  SubmenuList,\n  SubmenuToggle,\n  useMenu,\n  useSubmenu,\n} from '@tonic-ui/react';\n"})}),"\n",(0,l.jsx)(n.h2,{children:"Usage"}),"\n",(0,l.jsx)(n.h3,{children:"Basic menu structure"}),"\n",(0,l.jsx)(n.p,{children:"Below is a simple example that shows the basic menu structure."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Flex\n  display="inline-flex"\n  flexDirection="column"\n>\n  <MenuItem value="general">\n    <Icon icon="settings" mr="2x" />\n    <Text>General</Text>\n  </MenuItem>\n  <MenuItem value="accounts">\n    <Icon icon="user-team" mr="2x" />\n    <Text>Accounts</Text>\n  </MenuItem>\n  <MenuItem value="privacy">\n    <Icon icon="lock" mr="2x" />\n    <Text>Privacy</Text>\n  </MenuItem>\n  <MenuDivider />\n  <MenuItem disabled value="restore-defaults">\n    <Icon icon="undo" mr="2x" />\n    <Text>Restore Defaults</Text>\n  </MenuItem>\n</Flex>\n'})}),"\n",(0,l.jsx)(n.h3,{children:"Cascading submenus"}),"\n",(0,l.jsx)(n.p,{children:"The following example shows a menu with cascading submenus."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Flex\n  justify="space-between"\n>\n  <Flex\n    flexDirection="column"\n  >\n    <MenuItem>\n      <Text>List item</Text>\n    </MenuItem>\n    <MenuItem>\n      <Text>List item</Text>\n    </MenuItem>\n    <MenuDivider />\n    <Submenu>\n      <SubmenuToggle>\n        <MenuItem>\n          <Flex\n            alignItems="center"\n            columnGap="2x"\n            justifyContent="space-between"\n            width="100%"\n          >\n            <Text>Submenu</Text>\n            <Icon icon="angle-right" />\n          </Flex>\n        </MenuItem>\n      </SubmenuToggle>\n      <SubmenuList width="max-content">\n        <MenuItem>\n          <Text>List item</Text>\n        </MenuItem>\n        <MenuItem>\n          <Text>List item</Text>\n        </MenuItem>\n        <Submenu>\n          <SubmenuToggle>\n            <MenuItem>\n              <Flex\n                alignItems="center"\n                columnGap="2x"\n                justifyContent="space-between"\n                width="100%"\n              >\n                <Text>Submenu</Text>\n                <Icon icon="angle-right" />\n              </Flex>\n            </MenuItem>\n          </SubmenuToggle>\n          <SubmenuList width="max-content">\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n          </SubmenuList>\n        </Submenu>\n      </SubmenuList>\n    </Submenu>\n  </Flex>\n  <Flex\n    flexDirection="column"\n  >\n    <MenuItem pl="9x">\n      <Text>List item</Text>\n    </MenuItem>\n    <MenuItem pl="9x">\n      <Text>List item</Text>\n    </MenuItem>\n    <MenuDivider />\n    <Submenu placement="left-start">\n      <SubmenuToggle>\n        <MenuItem>\n          <Flex\n            alignItems="center"\n            columnGap="2x"\n            justifyContent="space-between"\n            width="100%"\n          >\n            <Icon icon="angle-left" />\n            <Text>Submenu</Text>\n          </Flex>\n        </MenuItem>\n      </SubmenuToggle>\n      <SubmenuList width="max-content">\n        <MenuItem pl="9x">\n          <Text>List item</Text>\n        </MenuItem>\n        <MenuItem pl="9x">\n          <Text>List item</Text>\n        </MenuItem>\n        <Submenu placement="left-start">\n          <SubmenuToggle>\n            <MenuItem>\n              <Flex\n                alignItems="center"\n                columnGap="2x"\n                justifyContent="space-between"\n                width="100%"\n              >\n                <Icon icon="angle-left" />\n                <Text>Submenu</Text>\n              </Flex>\n            </MenuItem>\n          </SubmenuToggle>\n          <SubmenuList\n            width="max-content"\n          >\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n          </SubmenuList>\n        </Submenu>\n      </SubmenuList>\n    </Submenu>\n  </Flex>\n</Flex>\n'})}),"\n",(0,l.jsx)(n.h3,{children:"Controlled menu"}),"\n",(0,l.jsx)(n.p,{children:"The menu opens over the anchor element by default, and closes when the user clicks outside of the menu."}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:'render(() => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const [selectedValue, setSelectedValue] = React.useState(null);\n  const handleOpenMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n    setIsOpen(!isOpen);\n  };\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n    setIsOpen(false);\n  };\n  const handleClickMenuItem = (event) => {\n    const value = event.target.getAttribute(\'value\');\n    setSelectedValue(value);\n  };\n  const handleMenuItemClick = (event) => {\n    const value = event.target.getAttribute(\'value\');\n    console.log(`List item ${value} clicked`);\n  };\n\n  return (\n    <Flex columnGap="4x" alignItems="center">\n      <Button\n        aria-controls="basic-menu"\n        aria-haspopup="true"\n        aria-expanded={isOpen ? \'true\' : undefined}\n        onClick={handleOpenMenu}\n      >\n        Options\n      </Button>\n      <Text>Selected: {selectedValue}</Text>\n      {isOpen && (\n        <Menu\n          id="basic-menu"\n          anchorEl={anchorEl}\n          isOpen={isOpen}\n          onClose={handleCloseMenu}\n        >\n          <MenuList\n            onClick={handleClickMenuItem}\n            width="max-content"\n          >\n            <MenuItem value={1}>\n              List item 1\n            </MenuItem>\n            <MenuItem value={2}>\n              List item 2\n            </MenuItem>\n            <MenuDivider />\n            <Submenu>\n              <SubmenuToggle>\n                <MenuItem>\n                  <Flex\n                    alignItems="center"\n                    columnGap="2x"\n                    justifyContent="space-between"\n                    width="100%"\n                  >\n                    Submenu\n                    <Icon icon="angle-right" />\n                  </Flex>\n                </MenuItem>\n              </SubmenuToggle>\n              <SubmenuList width="max-content">\n                <MenuItem value={3}>\n                  List item 3\n                </MenuItem>\n                <MenuItem value={4}>\n                  List item 4\n                </MenuItem>\n              </SubmenuList>\n            </Submenu>\n          </MenuList>\n        </Menu>\n      )}\n    </Flex>\n  );\n});\n'})}),"\n",(0,l.jsx)(n.h3,{children:"MenuToggle"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"MenuToggle"})," is a toggle that opens the menu when clicked. It is usually a button or link. The ",(0,l.jsx)(n.code,{children:"MenuToggleIcon"})," can be added to the toggle to indicate the menu is open or closed."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Flex alignItems="center">\n  <Menu>\n    <MenuToggle>\n      <Text>Options</Text>\n    </MenuToggle>\n    <MenuList width="max-content">\n      <MenuItem>\n        List item 1\n      </MenuItem>\n      <MenuItem>\n        List item 2\n      </MenuItem>\n      <MenuItem>\n        List item 3\n      </MenuItem>\n    </MenuList>\n  </Menu>\n  <Divider\n    variant="solid"\n    orientation="vertical"\n    height="5x"\n    mx="4x"\n  />\n  <Menu>\n    <MenuToggle>\n      <Flex alignItems="center" userSelect="none">\n        <Text>Options</Text>\n        <Space width="1x" />\n        <MenuToggleIcon />\n      </Flex>\n    </MenuToggle>\n    <MenuList width="max-content">\n      <MenuItem>\n        List item 1\n      </MenuItem>\n      <MenuItem>\n        List item 2\n      </MenuItem>\n      <MenuItem>\n        List item 3\n      </MenuItem>\n    </MenuList>\n  </Menu>\n  <Divider\n    variant="solid"\n    orientation="vertical"\n    height="5x"\n    mx="4x"\n  />\n  <Menu>\n    <MenuToggle>\n      {({ getMenuToggleProps }) => {\n        return (\n          <Button\n            {...getMenuToggleProps()}\n            variant="secondary"\n          >\n            <Text>Options</Text>\n            <Space width="1x" />\n            <MenuToggleIcon />\n          </Button>\n        );\n      }}\n    </MenuToggle>\n    <MenuList width="max-content">\n      <MenuItem>\n        List item 1\n      </MenuItem>\n      <MenuItem>\n        List item 2\n      </MenuItem>\n      <MenuItem>\n        List item 3\n      </MenuItem>\n    </MenuList>\n  </Menu>\n</Flex>\n'})}),"\n",(0,l.jsx)(n.h3,{children:"MenuButton"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"MenuButton"})," composes ",(0,l.jsx)(n.code,{children:"Button"}),", ",(0,l.jsx)(n.code,{children:"MenuToggle"}),", and ",(0,l.jsx)(n.code,{children:"MenuToggleIcon"})," to create a button that opens the menu. It's an useful alternative to ",(0,l.jsx)(n.code,{children:"MenuToggle"})," when the toggle is a button."]}),"\n",(0,l.jsx)(n.pre,{disabled:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const MenuButton = (props) => {\n  const styleProps = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    columnGap: '1x',\n  };\n\n  return (\n    <MenuToggle>\n      {({ getMenuToggleProps }) => (\n        <Button\n          {...getMenuToggleProps()}\n          {...styleProps}\n          {...props}\n        >\n          {children && (\n            <Box>{children}</Box>\n          )}\n          <MenuToggleIcon />\n        </Button>\n      )}\n    </MenuToggle>\n  );\n};\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Menu>\n  <MenuButton variant="secondary">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width="max-content">\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,l.jsx)(n.h3,{children:"MenuToggleIcon"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"MenuToggleIcon"})," is an indicator that indicates the menu is open or closed."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Menu>\n  <MenuToggle>\n    <MenuToggleIcon />\n  </MenuToggle>\n  <MenuList width="max-content">\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,l.jsx)(n.p,{children:"You can also customize the indicator by passing a component as children or a function as children that returns a component."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"<Menu placement=\"bottom-start\">\n  {({ isOpen, direction }) => {\n    return (\n      <>\n        <MenuToggle>\n          <MenuToggleIcon>\n            {(state, { ref, style: styleProps }) => {\n              // direction is either 'up' or 'down'\n              const icon = `arrow-${direction}`;\n              styleProps.transform = isOpen ? 'scaleY(-1)' : 'scaleY(1)';\n\n              return (\n                <Icon\n                  ref={ref}\n                  icon={icon}\n                  size=\"4x\"\n                  {...styleProps}\n                />\n              );\n            }}\n          </MenuToggleIcon>\n        </MenuToggle>\n        <MenuList width=\"max-content\">\n          <MenuItem>\n            List item 1\n          </MenuItem>\n          <MenuItem>\n            List item 2\n          </MenuItem>\n          <MenuItem>\n            List item 3\n          </MenuItem>\n        </MenuList>\n      </>\n    );\n  }}\n</Menu>\n"})}),"\n",(0,l.jsx)(n.h3,{children:"MenuGroup"}),"\n",(0,l.jsxs)(n.p,{children:["To group related menu items, wrap them in a ",(0,l.jsx)(n.code,{children:"MenuGroup"})," and pass a ",(0,l.jsx)(n.code,{children:"title"})," prop for the group title."]}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const Avatar = (props) => (\n  <Flex\n    p="1x"\n    borderRadius="50%"\n    alignItems="center"\n    justifyContent="center"\n    fontSize="xs"\n    lineHeight="1"\n    {...props}\n  />\n);\n\nrender(\n  <Menu>\n    <MenuToggle>\n      <Avatar\n        bg="gray:50"\n        color="white:secondary"\n        _hover={{\n          color: \'white:primary\',\n        }}\n      >\n        <Icon icon="user-team" size="5x" />\n      </Avatar>\n    </MenuToggle>\n    <MenuList width="max-content">\n      <MenuItem>\n        <Text>Profile</Text>\n      </MenuItem>\n      <MenuDivider />\n      <MenuGroup\n        title={(\n          <Flex justifyContent="space-between">\n            <Text>Other profiles</Text>\n            <Space minWidth="10x" />\n            <ButtonBase title="Manage profiles">\n              <Icon icon="settings" size="3x" />\n            </ButtonBase>\n          </Flex>\n        )}\n      >\n        <MenuItem px="4x">\n          <Avatar color="white" bg="blue:50" mr="2x">\n            JD\n          </Avatar>\n          John Doe\n        </MenuItem>\n        <MenuItem px="4x">\n          <Avatar color="white" bg="gray:50" mr="2x">\n            <Icon icon="user" size="3x" />\n          </Avatar>\n          Guest\n        </MenuItem>\n      </MenuGroup>\n    </MenuList>\n  </Menu>\n);\n'})}),"\n",(0,l.jsx)(n.h3,{children:"Menu sizing"}),"\n",(0,l.jsxs)(n.p,{children:["To change the width of the menu, pass ",(0,l.jsx)(n.code,{children:"width"})," prop to the ",(0,l.jsx)(n.code,{children:"MenuList"})," component."]}),"\n",(0,l.jsx)(n.h4,{children:"fixed width"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Menu>\n  <MenuButton variant="secondary">\n    <Text>This is a very long menu button</Text>\n  </MenuButton>\n  <MenuList width={200}>\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,l.jsx)(n.h4,{children:"full width"}),"\n",(0,l.jsxs)(n.p,{children:["Set ",(0,l.jsx)(n.code,{children:'display="block"'})," on the ",(0,l.jsx)(n.code,{children:"Menu"})," and set ",(0,l.jsx)(n.code,{children:'width="100%"'})," on ",(0,l.jsx)(n.code,{children:"MenuButton"})," and ",(0,l.jsx)(n.code,{children:"MenuList"})," to make the menu as wide as the content."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Menu display="block">\n  <MenuButton variant="secondary" width="100%">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width="100%">\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,l.jsx)(n.h4,{children:(0,l.jsx)(n.code,{children:"min-content"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Menu>\n  <MenuButton variant="secondary">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width="min-content">\n    <MenuItem >\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,l.jsx)(n.h4,{children:(0,l.jsx)(n.code,{children:"max-content"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Menu>\n  <MenuButton variant="secondary">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width="max-content">\n    <MenuItem>\n      This is a very long list item 1\n    </MenuItem>\n    <MenuItem>\n      This is a very long list item 2\n    </MenuItem>\n    <MenuItem>\n      This is a very long list item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,l.jsx)(n.h3,{children:"Placement"}),"\n",(0,l.jsxs)(n.p,{children:["To position the menu relative to the toggle, pass a ",(0,l.jsx)(n.code,{children:"placement"})," prop to ",(0,l.jsx)(n.code,{children:"Menu"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"The value can be one of the following:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"top"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"top-start"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"top-end"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"bottom"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"bottom-start"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"bottom-end"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{noInline:!0,children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst gridAreas = [\n  ['top-start', 'top', 'top-end'],\n  ['.', '.', '.'],\n  ['.', 'center', '.'],\n  ['.', '.', '.'],\n  ['bottom-start', 'bottom', 'bottom-end'],\n];\n\nfunction Example() {\n  const [placement, changePlacementBy] = useSelection('bottom-start');\n  const gridTemplateAreas = gridAreas.map((row) => {\n    const rowString = '\"' + row.join(' ') + '\"';\n    return rowString;\n  }).join(' ');\n\n  return (\n    <Flex>\n      <Grid\n        templateAreas={gridTemplateAreas}\n        autoColumns=\"minmax(0, 1fr)\"\n        autoFlow=\"row\"\n        gap=\"2x\"\n      >\n        {gridAreas.flat().map((value, key) => {\n          if (value === '.') {\n            return (<Box key={key} />);\n          }\n\n          if (value === 'center') {\n            return (\n              <Box key={key}>\n                <Menu placement={placement}>\n                  <MenuButton variant=\"secondary\" width={150}>\n                    <Text>Options</Text>\n                  </MenuButton>\n                  <MenuList>\n                    <MenuItem>\n                      List item 1\n                    </MenuItem>\n                    <MenuItem>\n                      List item 2\n                    </MenuItem>\n                    <MenuItem>\n                      List item 3\n                    </MenuItem>\n                  </MenuList>\n                </Menu>\n              </Box>\n            );\n          }\n\n          const changePlacement = changePlacementBy(value);\n          const onClick = () => {\n            changePlacement();\n          };\n\n          return (\n            <Box key={key}>\n              <Button\n                selected={value === placement}\n                onClick={onClick}\n                width=\"100%\"\n              >\n                {value}\n              </Button>\n            </Box>\n          );\n        })}\n      </Grid>\n    </Flex>\n  );\n}\n\nrender(<Example />);\n"})}),"\n",(0,l.jsx)(n.h3,{children:"Change menu position"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"offset"})," prop can be used to change the menu position. It accepts an array with two numbers in the form of ",(0,l.jsx)(n.code,{children:"[skidding, distance]"}),"."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Skidding"})}),"\n",(0,l.jsxs)(n.p,{children:["The first number, ",(0,l.jsx)(n.code,{children:"skidding"}),", displaces the menu along the toggle. This value is specified in pixels."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Distance"})}),"\n",(0,l.jsxs)(n.p,{children:["The second number, ",(0,l.jsx)(n.code,{children:"distance"}),", controls the distance between the menu and the toggle. This value is specified in pixels."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Menu offset={[16, 8]}>\n  <MenuButton variant="secondary">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList>\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,l.jsx)(n.h3,{children:"Scrolling"}),"\n",(0,l.jsxs)(n.p,{children:["To make the menu scrollable, pass ",(0,l.jsx)(n.code,{children:'overflow="auto"'})," and ",(0,l.jsx)(n.code,{children:"maxHeight"})," to ",(0,l.jsx)(n.code,{children:"MenuList"}),". The menu will become scrollable when the menu items exceed the height of the menu."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Menu display="block">\n  <MenuButton variant="secondary" width={200}>\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList\n    maxHeight={200}\n    overflow="auto"\n    width={200}\n  >\n    {Array.from({ length: 100 }).map((_, key) => (\n      <MenuItem key={key}>\n        List item {key + 1}\n      </MenuItem>\n    ))}\n  </MenuList>\n</Menu>\n'})}),"\n",(0,l.jsxs)(n.p,{children:["You can also use the ",(0,l.jsx)(n.code,{children:"Scrollbar"})," component to override the default scrollbar."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'<Menu display="block">\n  <MenuButton variant="secondary" width={200}>\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width={200}>\n    <Scrollbar height={200} overflowY="visible">\n      {Array.from({ length: 100 }).map((_, key) => (\n        <MenuItem key={key}>\n          List item {key + 1}\n        </MenuItem>\n      ))}\n    </Scrollbar>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,l.jsx)(n.h3,{children:"Input controls"}),"\n",(0,l.jsxs)(n.p,{children:["Set ",(0,l.jsx)(n.code,{children:"closeOnSelect"})," to ",(0,l.jsx)(n.code,{children:"false"})," to keep the menu open after selecting a menu item."]}),"\n",(0,l.jsxs)(n.p,{children:["You can use arrow keys to navigate the menu, and press ",(0,l.jsx)(n.code,{children:"Enter"})," or ",(0,l.jsx)(n.code,{children:"Space"})," to select an item."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'function menuWithCheckbox() {\n  const [checkedItems, setCheckedItems] = React.useState([\'host\', \'ip\']);\n  const onCheckboxGroupChange = (value) => {\n    setCheckedItems(value);\n  };\n  const handleKeyDown = (event) => {\n    if (event.key === \'Enter\' || event.key === \' \') {\n      const el = event.currentTarget.querySelector(\'input\');\n      if (el) {\n        const value = el.value;\n        const items = [...checkedItems];\n        items.indexOf(value) === -1 ? items.push(value) : items.splice(items.indexOf(value), 1);\n        setCheckedItems(items);\n      }\n    }\n  };\n  return (\n    <Menu closeOnSelect={false}>\n      <MenuButton variant="secondary">\n        <Text>Selected ({checkedItems.length})</Text>\n      </MenuButton>\n      <MenuList width="max-content">\n        <CheckboxGroup\n          size="sm"\n          value={checkedItems}\n          onChange={onCheckboxGroupChange}\n        >\n          <MenuItem onKeyDown={handleKeyDown}>\n            <Checkbox value="host">\n              Endpoint name</Checkbox>\n          </MenuItem>\n          <MenuItem onKeyDown={handleKeyDown}>\n            <Checkbox value="ip">\n              IP address\n            </Checkbox>\n          </MenuItem>\n          <MenuItem onKeyDown={handleKeyDown}>\n            <Checkbox value="os">\n              Operating system\n            </Checkbox>\n          </MenuItem>\n        </CheckboxGroup>\n      </MenuList>\n    </Menu>\n  );\n}\n'})}),"\n",(0,l.jsx)(n.h2,{children:"Accessibility"}),"\n",(0,l.jsx)(n.h3,{children:"Keyboard Interaction"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Key"}),(0,l.jsx)(n.th,{align:"left",children:"Action"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsxs)(n.td,{align:"left",children:[(0,l.jsx)(n.code,{children:"Enter"})," | ",(0,l.jsx)(n.code,{children:"Space"})]}),(0,l.jsxs)(n.td,{align:"left",children:["When ",(0,l.jsx)(n.code,{children:"MenuToggle"})," or ",(0,l.jsx)(n.code,{children:"MenuButton"})," is focused, opens the menu."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsxs)(n.td,{align:"left",children:[(0,l.jsx)(n.code,{children:"ArrowDown"})," | ",(0,l.jsx)(n.code,{children:"ArrowUp"})]}),(0,l.jsxs)(n.td,{align:"left",children:["When ",(0,l.jsx)(n.code,{children:"MenuList"})," is focused, moves the focus to the next menu item."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"Escape"})}),(0,l.jsx)(n.td,{align:"left",children:"When a menu item is focused, closes the menu and moves the focus to the toggle."})]})]})]}),"\n",(0,l.jsx)(n.h2,{children:"Props"}),"\n",(0,l.jsx)(n.h3,{children:"Menu"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"anchorEl"}),(0,l.jsx)(n.td,{align:"left",children:"ElementType"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"The element to which the menu is attached."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"autoSelect"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"true"}),(0,l.jsx)(n.td,{align:"left",children:"Whether to automatically select the first menu item when the menu is opened."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsxs)(n.td,{align:"left",children:["ReactNode | ",(0,l.jsx)(n.code,{children:"(context) => ReactNode"})]}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"A function child can be used intead of a React element. This function is called with the context object."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"closeOnBlur"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"true"}),(0,l.jsx)(n.td,{align:"left",children:"Whether to close the menu when the user clicks outside of the menu."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"closeOnSelect"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"true"}),(0,l.jsx)(n.td,{align:"left",children:"Whether to close the menu when the user selects a menu item."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"defaultActiveIndex"}),(0,l.jsx)(n.td,{align:"left",children:"number"}),(0,l.jsx)(n.td,{align:"left",children:"-1"}),(0,l.jsx)(n.td,{align:"left",children:"The index of the menu item to be selected by default."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"defaultIsOpen"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"false"}),(0,l.jsx)(n.td,{align:"left",children:"Whether the menu is open by default."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"isOpen"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Whether the menu is open."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"offset"}),(0,l.jsx)(n.td,{align:"left",children:"[skidding, distance]"}),(0,l.jsx)(n.td,{align:"left",children:"[0, 0]"}),(0,l.jsx)(n.td,{align:"left",children:"The skidding and distance of the menu."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onBlur"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when the menu loses focus."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onClick"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when a menu item is clicked."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onClose"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when the menu is closed."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onKeyDown"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when the user presses a key."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onOpen"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when the menu is opened."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"placement"}),(0,l.jsx)(n.td,{align:"left",children:"string"}),(0,l.jsx)(n.td,{align:"left",children:"'bottom-start'"}),(0,l.jsx)(n.td,{align:"left",children:"The placement of the menu. One of: 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end'"})]})]})]}),"\n",(0,l.jsx)(n.h3,{children:"MenuButton"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"disabled"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Whether the menu button is disabled."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onClick"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when the menu button is clicked."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onKeyDown"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when the user presses a key."})]})]})]}),"\n",(0,l.jsx)(n.h3,{children:"MenuContent"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"PopperComponent"}),(0,l.jsx)(n.td,{align:"left",children:"ElementType"}),(0,l.jsx)(n.td,{align:"left",children:"Popper"}),(0,l.jsx)(n.td,{align:"left",children:"The component used for the popover."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"PopperProps"}),(0,l.jsx)(n.td,{align:"left",children:"object"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Props applied to the Popper component."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,l.jsx)(n.td,{align:"left",children:"ElementType"}),(0,l.jsx)(n.td,{align:"left",children:"Collapse"}),(0,l.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,l.jsx)(n.td,{align:"left",children:"object"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,l.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"TransitionProps.appear"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"true"}),(0,l.jsx)(n.td,{align:"left"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})]})]}),"\n",(0,l.jsx)(n.h3,{children:"MenuDivider"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,l.jsx)(n.h3,{children:"MenuGroup"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"title"}),(0,l.jsx)(n.td,{align:"left",children:"string"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"The title of the menu group."})]})]})]}),"\n",(0,l.jsx)(n.h3,{children:"MenuItem"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"disabled"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Whether the menu item is disabled."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onClick"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when the menu item is clicked."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onKeyDown"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when the user presses a key."})]})]})]}),"\n",(0,l.jsx)(n.h3,{children:"MenuList"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"PopperComponent"}),(0,l.jsx)(n.td,{align:"left",children:"ElementType"}),(0,l.jsx)(n.td,{align:"left",children:"Popper"}),(0,l.jsx)(n.td,{align:"left",children:"The component used for the popover."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"PopperProps"}),(0,l.jsx)(n.td,{align:"left",children:"object"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Props applied to the Popper component."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,l.jsx)(n.td,{align:"left",children:"ElementType"}),(0,l.jsx)(n.td,{align:"left",children:"Collapse"}),(0,l.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,l.jsx)(n.td,{align:"left",children:"object"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,l.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"TransitionProps.appear"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"true"}),(0,l.jsx)(n.td,{align:"left"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})]})]}),"\n",(0,l.jsx)(n.h3,{children:"MenuToggle"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsxs)(n.td,{align:"left",children:["ReactNode | ",(0,l.jsx)(n.code,{children:"({ getMenuToggleProps }) => ReactNode"})]}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"disabled"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Whether the menu toggle is disabled."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onClick"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when the menu toggle is clicked."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onKeyDown"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when the user presses a key."})]})]})]}),"\n",(0,l.jsx)(n.h3,{children:"MenuToggleIcon"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"appear"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"false"}),(0,l.jsxs)(n.td,{align:"left",children:["By default the child component does not perform the enter transition when it first mounts, regardless of the value of ",(0,l.jsx)(n.code,{children:"in"}),". If you want this behavior, set both ",(0,l.jsx)(n.code,{children:"appear"})," and ",(0,l.jsx)(n.code,{children:"in"})," to true."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsxs)(n.td,{align:"left",children:["ReactNode | ",(0,l.jsx)(n.code,{children:"(state, props) => ReactNode"})]}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"A function child can be used instead of a React element. This function is called with the current transition state ('entering', 'entered', 'exiting', 'exited'), ref, style, and context specific props for a component."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"disabled"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Whether the menu toggle icon is disabled."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"easing"}),(0,l.jsxs)(n.td,{align:"left",children:["string | ",(0,l.jsx)(n.code,{children:"{ enter?: string, exit?: string }"})]}),(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"{ enter: easing.easeInOut, exit: easing.easeInOut }"})}),(0,l.jsx)(n.td,{align:"left",children:"The timing function that describes how intermediate values are calculated during a transition. You may specify a single timing function for all transitions, or individually with an object."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"in"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsxs)(n.td,{align:"left",children:["If ",(0,l.jsx)(n.code,{children:"true"}),", the component will transition in."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"mountOnEnter"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsxs)(n.td,{align:"left",children:["If ",(0,l.jsx)(n.code,{children:"true"}),', it will "lazy mount" the component on the first ',(0,l.jsx)(n.code,{children:"in={true}"}),". After the first enter transition the component will stay mounted, even on the 'exited' state, unless you also specify ",(0,l.jsx)(n.code,{children:"unmountOnExit"}),". By default the child component is mounted immediately along with the parent transition component."]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"timeout"}),(0,l.jsxs)(n.td,{align:"left",children:["number | ",(0,l.jsx)(n.code,{children:"{ appear?: number, enter?: number, exit?: number }"})]}),(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"{ enter: duration.enterScreen, exit: duration.levingScreen }"})}),(0,l.jsx)(n.td,{align:"left",children:"The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"unmountOnExit"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsxs)(n.td,{align:"left",children:["If ",(0,l.jsx)(n.code,{children:"true"}),", it will unmount the child component when ",(0,l.jsx)(n.code,{children:"in={false}"})," and the animation has finished. By default the child component stays mounted after it reaches the 'exited' state."]})]})]})]}),"\n",(0,l.jsx)(n.h3,{children:"Submenu"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"defaultIsOpen"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left",children:"false"}),(0,l.jsx)(n.td,{align:"left",children:"Whether the submenu is open by default."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"isOpen"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Whether the submenu is open."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onClose"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when the submenu is closed."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"onOpen"}),(0,l.jsx)(n.td,{align:"left",children:"function"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Callback when the submenu is opened."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"placement"}),(0,l.jsx)(n.td,{align:"left",children:"string"}),(0,l.jsx)(n.td,{align:"left",children:"'right-start'"}),(0,l.jsx)(n.td,{align:"left",children:"The placement of the submenu. One of: 'right-start', 'right-end', 'left-start', 'left-end'"})]})]})]}),"\n",(0,l.jsx)(n.h3,{children:"SubmenuList"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,l.jsx)(n.h3,{children:"SubmenuToggle"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"Name"}),(0,l.jsx)(n.th,{align:"left",children:"Type"}),(0,l.jsx)(n.th,{align:"left",children:"Default"}),(0,l.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"children"}),(0,l.jsxs)(n.td,{align:"left",children:["ReactNode | ",(0,l.jsx)(n.code,{children:"({ getSubmenuToggleProps }) => ReactNode"})]}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"disabled"}),(0,l.jsx)(n.td,{align:"left",children:"boolean"}),(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"Whether the submenu toggle is disabled."})]})]})]})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,i.ah)(),e.components).wrapper;return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(s,e)})):s(e)}},1911:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/menu",function(){return t(8255)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=1911)}),_N_E=e.O()}]);