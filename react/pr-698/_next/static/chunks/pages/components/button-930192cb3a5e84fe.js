(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9091],{44855:function(n,t,e){"use strict";e.r(t);var o=e(52322),a=e(45392);function i(n){var t=Object.assign({h1:"h1",p:"p",code:"code",a:"a",h2:"h2",pre:"pre",h3:"h3",h4:"h4",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,a.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{children:"Button"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"Button"})," is used to trigger an action or event, such as submitting a form, opening a ",(0,o.jsx)(t.a,{href:"modal",children:(0,o.jsx)(t.code,{children:"Modal"})}),", canceling an action, or performing a delete operation."]}),"\n",(0,o.jsx)(t.h2,{children:"Import"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { Button } from '@tonic-ui/react';\n"})}),"\n",(0,o.jsx)(t.h2,{children:"Usage"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"<Button>Default Button</Button>\n"})}),"\n",(0,o.jsx)(t.h3,{children:"Variants"}),"\n",(0,o.jsxs)(t.p,{children:["Use the ",(0,o.jsx)(t.code,{children:"variant"})," prop to change the visual style of ",(0,o.jsx)(t.code,{children:"Button"}),". You can set the value to ",(0,o.jsx)(t.code,{children:"emphasis"}),", ",(0,o.jsx)(t.code,{children:"primary"}),", ",(0,o.jsx)(t.code,{children:"default"}),", ",(0,o.jsx)(t.code,{children:"secondary"}),", or ",(0,o.jsx)(t.code,{children:"ghost"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'<Flex display="inline-flex" direction="column" rowGap="4x">\n  <Button variant="emphasis">Emphasis Button</Button>\n  <Button variant="primary">Primary Button</Button>\n  <Button variant="default">Default Button</Button>\n  <Button variant="secondary">Secondary Button</Button>\n  <Button variant="ghost">Ghost Button</Button>\n</Flex>\n'})}),"\n",(0,o.jsx)(t.h3,{children:"Sizes"}),"\n",(0,o.jsxs)(t.p,{children:["Use the ",(0,o.jsx)(t.code,{children:"size"})," prop to change the size of the button. You can set the value to ",(0,o.jsx)(t.code,{children:"sm"}),", ",(0,o.jsx)(t.code,{children:"md"}),", or ",(0,o.jsx)(t.code,{children:"lg"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'<Stack direction="column" spacing="4x">\n  <Stack direction="row" spacing="2x" alignItems="center">\n    <Button variant="primary" size="sm">Small</Button>\n    <Button variant="primary" size="md">Medium</Button>\n    <Button variant="primary" size="lg">Large</Button>\n  </Stack>\n  <Stack direction="row" spacing="2x" alignItems="center">\n    <Button size="sm">Small</Button>\n    <Button size="md">Medium</Button>\n    <Button size="lg">Large</Button>\n  </Stack>\n  <Stack direction="row" spacing="2x" alignItems="center">\n    <Button variant="secondary" size="sm">Small</Button>\n    <Button variant="secondary" size="md">Medium</Button>\n    <Button variant="secondary" size="lg">Large</Button>\n  </Stack>\n  <Stack direction="row" spacing="2x" alignItems="center">\n    <Button variant="ghost" size="sm">Small</Button>\n    <Button variant="ghost" size="md">Medium</Button>\n    <Button variant="ghost" size="lg">Large</Button>\n  </Stack>\n</Stack>\n'})}),"\n",(0,o.jsx)(t.h3,{children:"States"}),"\n",(0,o.jsxs)(t.p,{children:["You can make buttons look inactive or active by adding the ",(0,o.jsx)(t.code,{children:"disabled"})," or ",(0,o.jsx)(t.code,{children:"selected"})," prop. In either case, the button will not be clickable in disabled or selected state."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'<Flex>\n  <Grid\n    templateColumns="1fr 1fr 1fr"\n    columnGap="2x"\n    rowGap="4x"\n  >\n    <TextLabel textAlign="center">Normal</TextLabel>\n    <TextLabel textAlign="center">Disabled</TextLabel>\n    <TextLabel textAlign="center">Selected</TextLabel>\n    <Button variant="emphasis">Emphasis</Button>\n    <Button variant="emphasis" disabled>Emphasis</Button>\n    <Button variant="emphasis" selected>Emphasis</Button>\n    <Button variant="primary">Primary</Button>\n    <Button variant="primary" disabled>Primary</Button>\n    <Button variant="primary" selected>Primary</Button>\n    <Button variant="default">Default</Button>\n    <Button variant="default" disabled>Default</Button>\n    <Button variant="default" selected>Default</Button>\n    <Button variant="secondary">Secondary</Button>\n    <Button variant="secondary" disabled>Secondary</Button>\n    <Button variant="secondary" selected>Secondary</Button>\n    <Button variant="ghost">Ghost</Button>\n    <Button variant="ghost" disabled>Ghost</Button>\n    <Button variant="ghost" selected>Ghost</Button>\n  </Grid>\n</Flex>\n'})}),"\n",(0,o.jsx)(t.h4,{children:"Disabled state"}),"\n",(0,o.jsxs)(t.p,{children:["If the ",(0,o.jsx)(t.code,{children:"disabled"})," prop is set (or set to ",(0,o.jsx)(t.code,{children:"true"}),"), the button will have a ",(0,o.jsx)(t.code,{children:"disabled"})," attribute and not respond to user interactions."]}),"\n",(0,o.jsx)(t.pre,{disabled:!0,children:(0,o.jsx)(t.code,{className:"language-jsx",children:'<button type="button" disabled aria-disabled="true">Button</button>\n'})}),"\n",(0,o.jsxs)(t.p,{children:["To customize the visual appearance of the disabled state, pass the ",(0,o.jsx)(t.code,{children:"_disabled"})," style prop to override the default style."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"function Example() {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const disabledBackgroundColor = {\n    dark: 'gray:60',\n    light: 'gray:20',\n  }[colorMode];\n  const disabledColor = colorStyle.color.emphasis;\n  const disabledOpacity = {\n    dark: '0.28',\n    light: '0.3',\n  }[colorMode];\n\n  return (\n    <Button\n      disabled\n      // Customize the visual appearance of the selected state\n      _disabled={{\n        backgroundColor: disabledBackgroundColor,\n        color: disabledColor,\n        cursor: 'not-allowed',\n        opacity: disabledOpacity,\n      }}\n    >\n      Custom Button\n    </Button>\n  );\n}\n"})}),"\n",(0,o.jsx)(t.h4,{children:"Selected state"}),"\n",(0,o.jsxs)(t.p,{children:["If the ",(0,o.jsx)(t.code,{children:"selected"})," prop is set (or set to ",(0,o.jsx)(t.code,{children:"true"}),"), the button will have both ",(0,o.jsx)(t.code,{children:"pointer-events: none"})," style and ",(0,o.jsx)(t.code,{children:'tabindex="-1"'})," attribute. This will prevent the button from receiving pointer events and will not be reachable via sequential keyboard navigation."]}),"\n",(0,o.jsx)(t.pre,{disabled:!0,children:(0,o.jsx)(t.code,{className:"language-jsx",children:'<button type="button" aria-selected="true" tabindex="-1">Button</button>\n'})}),"\n",(0,o.jsxs)(t.p,{children:["To customize the visual appearance of the selected state, pass the ",(0,o.jsx)(t.code,{children:"_selected"})," style prop to override the default style."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"function Example() {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const selectedBackgroundColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const selectedColor = colorStyle.color.emphasis;\n\n  return (\n    <Button\n      selected\n      // Customize the visual appearance of the selected state\n      _selected={{\n        backgroundColor: selectedBackgroundColor,\n        color: selectedColor,\n        pointerEvents: 'none',\n      }}\n    >\n      Custom Button\n    </Button>\n  );\n}\n"})}),"\n",(0,o.jsx)(t.h3,{children:"Icons"}),"\n",(0,o.jsxs)(t.p,{children:["Icons are commonly used in toolbar buttons. You can use the ",(0,o.jsx)(t.code,{children:"columnGap"})," style prop or the ",(0,o.jsx)(t.a,{href:"space",children:"Space"})," component to adjust the spacing between the icon and the label."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'<Flex direction="column" rowGap="4x">\n  <Flex columnGap="4x">\n    <Button variant="primary" width="8x" height="8x" borderRadius="circle">\n      <Icon icon="add" />\n    </Button>\n    <Button variant="primary" width="8x" height="8x">\n      <Icon icon="add" />\n    </Button>\n    <Button variant="primary" borderRadius="2rem" columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button variant="primary" columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button variant="primary" borderRadius="2rem" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n    <Button variant="primary" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n  </Flex>\n  <Flex columnGap="4x">\n    <Button width="8x" height="8x" borderRadius="circle">\n      <Icon icon="add" />\n    </Button>\n    <Button width="8x" height="8x">\n      <Icon icon="add" />\n    </Button>\n    <Button borderRadius="2rem"  columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button borderRadius="2rem" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n    <Button columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n  </Flex>\n  <Flex columnGap="4x">\n    <Button variant="secondary" width="8x" height="8x" borderRadius="circle">\n      <Icon icon="add" />\n    </Button>\n    <Button variant="secondary" width="8x" height="8x">\n      <Icon icon="add" />\n    </Button>\n    <Button variant="secondary" borderRadius="2rem" columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button variant="secondary" columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button variant="secondary" borderRadius="2rem" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n    <Button variant="secondary" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n  </Flex>\n  <Flex columnGap="4x">\n    <Button variant="ghost" width="8x" height="8x" borderRadius="circle">\n      <Icon icon="add" />\n    </Button>\n    <Button variant="ghost" width="8x" height="8x">\n      <Icon icon="add" />\n    </Button>\n    <Button variant="ghost" borderRadius="2rem" columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button variant="ghost" columnGap="2x">\n      <Icon icon="settings" />\n      Settings\n    </Button>\n    <Button variant="ghost" borderRadius="2rem" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n    <Button variant="ghost" columnGap="2x">\n      Next\n      <Icon icon="angle-right" />\n    </Button>\n  </Flex>\n</Flex>\n'})}),"\n",(0,o.jsx)(t.h2,{children:"Custom Button"}),"\n",(0,o.jsxs)(t.p,{children:["To create a custom button, you can use the style props for the ",(0,o.jsx)(t.a,{href:"buttonbase",children:"ButtonBase"})," component."]}),"\n",(0,o.jsx)(t.h2,{children:"Props"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{align:"left",children:"Name"}),(0,o.jsx)(t.th,{align:"left",children:"Type"}),(0,o.jsx)(t.th,{align:"left",children:"Default"}),(0,o.jsx)(t.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"disabled"}),(0,o.jsx)(t.td,{align:"left",children:"boolean"}),(0,o.jsx)(t.td,{align:"left"}),(0,o.jsxs)(t.td,{align:"left",children:["If ",(0,o.jsx)(t.code,{children:"true"}),", the button will have a ",(0,o.jsx)(t.code,{children:"disabled"})," attribute and not respond to user interactions.",(0,o.jsx)("br",{}),"You can pass the ",(0,o.jsx)(t.code,{children:"_disabled"})," style prop to customize the visual appearance of the disabled state."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"selected"}),(0,o.jsx)(t.td,{align:"left",children:"boolean"}),(0,o.jsx)(t.td,{align:"left"}),(0,o.jsxs)(t.td,{align:"left",children:["If ",(0,o.jsx)(t.code,{children:"true"}),", the button will have a ",(0,o.jsx)(t.code,{children:'tabIndex="-1"'})," attribute and will not receive pointer events (i.e. ",(0,o.jsx)(t.code,{children:"pointer-events: none;"}),").",(0,o.jsx)("br",{}),"You can pass the ",(0,o.jsx)(t.code,{children:"_selected"})," style prop to customize the visual appearance of the selected state."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"size"}),(0,o.jsx)(t.td,{align:"left",children:"string"}),(0,o.jsx)(t.td,{align:"left",children:"'md'"}),(0,o.jsx)(t.td,{align:"left",children:"The size of the button. Acceptable values: 'sm', 'md', 'lg'"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{align:"left",children:"variant"}),(0,o.jsx)(t.td,{align:"left",children:"string"}),(0,o.jsx)(t.td,{align:"left",children:"'default'"}),(0,o.jsx)(t.td,{align:"left",children:"The variant of the button style to use. Acceptable values: 'emphasis', 'primary', 'default', 'secondary', 'ghost'"})]})]})]})]})}t.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},(0,a.ah)(),n.components).wrapper;return t?(0,o.jsx)(t,Object.assign({},n,{children:(0,o.jsx)(i,n)})):i(n)}},79708:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/button",function(){return e(44855)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=79708)}),_N_E=n.O()}]);