(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3696],{72896:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return d}});var a=n(7896),l=n(59740),r=(n(2784),n(30876)),o=["components"],i={};function d(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"DatePicker"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Datepicker")," is used to select a date from a calendar or type in a date value manually. It is composed of ",(0,r.kt)("inlineCode",{parentName:"p"},"Calendar"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"DateInput"),"."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DatePicker"),": The component that provides the date picker functionality."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DatePickerToggle"),": The toggle that opens the date picker."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DatePickerPopper"),": A wrapper that contains the calendar. Must be a direct child of the ",(0,r.kt)("inlineCode",{parentName:"li"},"DatePicker")," component."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Calendar"),": The calendar component."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DateInput"),": The input component.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Calendar,\n  DateInput,\n  DatePicker,\n  DatePickerToggle,\n  DatePickerPopper,\n} from '@tonic-ui/react';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("h3",null,"Calendar"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Calendar defaultValue="2022-03-29" onChange={value => console.log(value)} />\n')),(0,r.kt)("h4",null,"Calendar start day"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"calendarStartDay")," prop to chage the first day of the calendar week. for example, 0 = Sunday, 1 = Monday."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="row" spacing="4x">\n  <Stack direction="column" spacing="4x" shouldWrapChildren>\n    <Text size="lg">calendarStartDay={0} (default)</Text>\n    <Calendar />\n  </Stack>\n  <Stack direction="column" spacing="4x" shouldWrapChildren>\n    <Text size="lg">calendarStartDay={3}</Text>\n    <Calendar calendarStartDay={3} />\n  </Stack>\n</Stack>\n')),(0,r.kt)("h4",null,"Date format"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"dateFormat")," prop to change The format of date. Format of the string is based on Unicode Technical Standard #35: ",(0,r.kt)("a",{parentName:"p",href:"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table"},"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const [value1, setValue1] = React.useState("2022.03.22");\n  const [value2, setValue2] = React.useState("2022.03.22");\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack direction="column" spacing="4x" shouldWrapChildren>\n        <Text size="lg">dateFormat="yyyy-MM-dd" (default)</Text>\n        <Calendar\n          value={value1}\n          onChange={value => setValue1(value)}\n        />\n        <Box>Date: {value1}</Box>\n      </Stack>\n      <Stack direction="column" spacing="4x" shouldWrapChildren>\n        <Text size="lg">dateFormat="yyyy.MM.dd"</Text>\n        <Calendar\n          dateFormat="yyyy.MM.dd"\n          value= {value2}\n          onChange={value => setValue2(value)}\n        />\n        <Box>Date: {value2} </Box>\n      </Stack>\n    </Stack>\n  );\n}\n')),(0,r.kt)("h3",null,"DatePicker"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"DatePicker")," component to display a calendar and allow the user to select a date."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example({\n  date = \'2021-12-15\',\n  dateFormat = \'yyyy-MM-dd\',\n  disabled,\n}) {\n  const [isInvalid, setIsInvalid] = React.useState(false);\n  const [isOpenCalendar, setIsOpenCalendar] = React.useState(false);\n  const [value, setValue] = React.useState(date);\n  const isDate = (v) => {\n    const d = new Date(v);\n    return !Number.isNaN(d.getTime());\n  };\n  const verifyDate = (value) => {\n    if (!value) {\n      return;\n    }\n    setIsInvalid(!isDate(value));\n  };\n  const handleDateInputChange = (event) => {\n    const value = event.target.value;\n    setValue(value);\n  };\n  const handleCalendarChange = (value) => {\n    setValue(value);\n    setIsOpenCalendar(false);\n  };\n\n  React.useEffect(() => {\n    verifyDate(value);\n  }, [value]);\n\n  return (\n    <DatePicker\n      isOpen={isOpenCalendar}\n      onOpen={() => setIsOpenCalendar(true)}\n      onClose={() => setIsOpenCalendar(false)}\n    >\n      <DatePickerToggle disabled={disabled}>\n        {({ getDatePickerToggleProps, disabled }) => {\n          return (\n            <Box>\n              <DateInput\n                value={value}\n                disabled={disabled}\n                isInvalid={isInvalid}\n                onChange={handleDateInputChange}\n                width="128px"\n                {...getDatePickerToggleProps()}\n              />\n              {isInvalid && (\n                <Box position="absolute" right="-20px" top="1x">\n                  <Icon icon="warning-circle" color="red:50" />\n                </Box>\n              )}\n            </Box>\n          );\n        }}\n      </DatePickerToggle>\n      <DatePickerPopper width="max-content">\n        <Calendar\n          value={value}\n          onChange={handleCalendarChange}\n        />\n      </DatePickerPopper>\n    </DatePicker>\n  );\n}\n')),(0,r.kt)("h4",null,"Date range picker"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const CustomDatePicker = ({\n  value: valueProp,\n  dateFormat,\n  disabled,\n  onChange,\n}) => {\n  const [isInvalid, setIsInvalid] = React.useState(false);\n  const [isOpenCalendar, setIsOpenCalendar] = React.useState(false);\n  const [value, setValue] = React.useState(valueProp);\n  const isDate = (value) => {\n    const d = new Date(value);\n    return !Number.isNaN(d.getTime());\n  };\n  const verifyDate = (value) => {\n    if (!value) {\n      return;\n    }\n    setIsInvalid(!isDate(value));\n  };\n  const handleDateInputChange = (event) => {\n    const value = event.target.value;\n    onChange(value);\n    setValue(value);\n  };\n  const handleCalendarChange = (value) => {\n    onChange(value);\n    setValue(value);\n    setIsOpenCalendar(false);\n  };\n\n  React.useEffect(() => {\n    verifyDate(value);\n  }, [value]);\n\n  return (\n    <DatePicker\n      isOpen={isOpenCalendar}\n      onOpen={() => setIsOpenCalendar(true)}\n      onClose={() => setIsOpenCalendar(false)}\n    >\n      <DatePickerToggle disabled={disabled}>\n        {({ getDatePickerToggleProps, disabled }) => {\n          return (\n            <Box>\n              <DateInput\n                value={value}\n                disabled={disabled}\n                isInvalid={isInvalid}\n                onChange={handleDateInputChange}\n                width="136px"\n                borderTopRightRadius="0"\n                borderBottomRightRadius="0"\n                {...getDatePickerToggleProps()}\n              />\n              {isInvalid && (\n                <Box position="absolute" right="-20px" top="1x">\n                  <Icon icon="warning-circle" color="red:50" />\n                </Box>\n              )}\n            </Box>\n          );\n        }}\n      </DatePickerToggle>\n      <DatePickerPopper width="max-content">\n        <Calendar\n          value={value}\n          onChange={handleCalendarChange}\n        />\n      </DatePickerPopper>\n    </DatePicker>\n  );\n};\n\nconst TimeInput = React.forwardRef((\n  props,\n  ref\n) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  return (\n    <Box\n      display="inline-flex"\n      alignItems="center"\n      position="relative"\n      width="128px"\n    >\n      <Box\n        display="flex"\n        alignItems="center"\n        position="absolute"\n        left={0}\n        px="3x"\n        zIndex={3} // The z-index value should be at least 3 for the prepeneded input adornment\n      >\n        <Icon icon="clock" color={colorStyle.color.secondary} />\n      </Box>\n      <Input\n        ref={ref}\n        pl="10x"\n        ml="-1px"\n        borderTopLeftRadius="0"\n        borderBottomLeftRadius="0"\n        {...props}\n      />\n    </Box>\n  );\n});\n\nconst padTo2Digits = (num) => {\n  return num.toString().padStart(2, \'0\');\n};\n\nconst formatDate = (date) => {\n  return (\n    [\n      date.getFullYear(),\n      padTo2Digits(date.getMonth() + 1),\n      padTo2Digits(date.getDate()),\n    ].join(\'-\')\n  );\n};\n\nconst formatTime = (date) => {\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  return (\n    [\n      padTo2Digits(hours),\n      padTo2Digits(minutes),\n      padTo2Digits(seconds),\n    ].join(\':\')\n  );\n};\n\nfunction Example() {\n  const today = new Date();\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const [value, setValue] = React.useState(\'1d\');\n  const [startDate, setStartDate] = React.useState(formatDate(today));\n  const [endDate, setEndDate] = React.useState(formatDate(today));\n  const [startTime, setStartTime] = React.useState("00:00:00");\n  const [endTime, setEndTime] = React.useState("23:59:59");\n  const [isCalendarVisible, setIsCalendarVisible] = React.useState(false);\n\n  const handleMenuItemClick = (event) => {\n    const value = event.target.getAttribute(\'value\');\n    if (value === \'custom\') {\n      event.preventDefault();\n      if (!isCalendarVisible) {\n        setIsCalendarVisible(true);\n      }\n      return;\n    }\n    setValue(value);\n    if (isCalendarVisible) {\n      setIsCalendarVisible(false);\n    }\n  };\n  const handleStartDateChange = (value) => {\n    setStartDate(value);\n  };\n  const handleEndDateChange = (value) => {\n    setEndDate(value);\n  };\n  const handleStartTimeChange = (e) => {\n    const value = e.target.value;\n    setStartTime(value);\n  };\n  const handleEndTimeChange = (e) => {\n    const value = e.target.value;\n    setEndTime(value);\n  };\n  const mapValueToLabel = (value) => {\n    if (value === \'custom\') {\n      return \'Custom range\';\n    }\n    return {\n      \'1d\': \'Last 24 hours\',\n      \'7d\': \'Last 7 days\',\n      \'14d\': \'Last 14 days\',\n    }[value];\n  };\n  const geTimeRange = (value) => {\n    if ([\'1d\', \'7d\', \'14d\', \'custom\'].indexOf(value) < 0) {\n      return null;\n    }\n\n    if (value === \'custom\') {\n      return `${startDate} ${startTime} ~ ${endDate} ${endTime}`;\n    }\n\n    const now = new Date();\n    let date;\n    if (value === \'1d\') {\n      date = new Date(now.setDate(now.getDate() - 1));\n    }\n    if (value === \'7d\') {\n      date = new Date(now.setDate(now.getDate() - 7));\n    }\n    if (value === \'14d\') {\n      date = new Date(now.setDate(now.getDate() - 14));\n    }\n\n    return `${formatDate(date)} ${formatTime(date)} ~ ${formatDate(new Date())} ${formatTime(new Date())}`;\n  };\n\n  React.useEffect(() => {\n    if (value === \'custom\' && !isCalendarVisible) {\n      setIsCalendarVisible(true);\n    }\n  }, [value, isCalendarVisible]);\n\n  return (\n    <>\n      <Menu\n        onClose={() => {\n          if (isCalendarVisible) {\n            setIsCalendarVisible(false);\n          }\n        }}\n      >\n        {({ closeMenu }) => (\n          <>\n            <MenuButton variant="secondary">\n              <Text>{mapValueToLabel(value)}</Text>\n            </MenuButton>\n            <MenuList width="max-content">\n              {isCalendarVisible && (\n                <Box\n                  backgroundColor={colorStyle.background.secondary}\n                  position="absolute"\n                  left="100%"\n                  top={0}\n                  px="4x"\n                  py="3x"\n                  minHeight="100%"\n                  border={1}\n                  borderColor={colorStyle.divider}\n                >\n                  <Flex alignItems="center">\n                    <Text width="64px">From:</Text>\n                    <CustomDatePicker value={startDate} onChange={handleStartDateChange} />\n                    <TimeInput value={startTime} onChange={handleStartTimeChange} />\n                  </Flex>\n                  <Space height="3x" />\n                  <Flex alignItems="center">\n                    <Text width="64px">To:</Text>\n                    <CustomDatePicker value={endDate} onChange={handleEndDateChange} />\n                    <TimeInput value={endTime} onChange={handleEndTimeChange} />\n                  </Flex>\n                  <Space height="3x" />\n                  <Flex justifyContent="flex-end">\n                    <Grid\n                      templateColumns="1fr 1fr"\n                      columnGap="2x"\n                    >\n                      <Button\n                        variant="primary"\n                        onClick={() => {\n                          closeMenu();\n                          if (value !== \'custom\') {\n                            setValue(\'custom\');\n                          }\n                        }}\n                      >\n                        Apply\n                      </Button>\n                      <Button\n                        variant="secondary"\n                        onClick={() => {\n                          closeMenu();\n                        }}\n                      >\n                        Cancel\n                      </Button>\n                    </Grid>\n                  </Flex>\n                </Box>\n              )}\n              {[\'1d\', \'7d\', \'14d\'].map(value => (\n                <MenuItem\n                  key={value}\n                  value={value}\n                  onClick={handleMenuItemClick}\n                >\n                  {mapValueToLabel(value)}\n                </MenuItem>\n              ))}\n              <MenuDivider />\n              <MenuItem\n                value="custom"\n                onClick={handleMenuItemClick}\n              >\n                Custom Period\n                <Space width="2x" />\n                <Icon icon="angle-right" />\n              </MenuItem>\n            </MenuList>\n          </>\n        )}\n      </Menu>\n      <Box mt="3x">The time range: { geTimeRange(value) }</Box>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,r.kt)("h2",null,"Accessibility"),(0,r.kt)("h3",null,"Keyboard Interaction"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Action"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ArrowDown")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"ArrowUp")),(0,r.kt)("td",{parentName:"tr",align:"left"},"When ",(0,r.kt)("inlineCode",{parentName:"td"},"DatePickerToggle")," is focused, opens the date picker.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Escape")),(0,r.kt)("td",{parentName:"tr",align:"left"},"When ",(0,r.kt)("inlineCode",{parentName:"td"},"DatePickerToggle")," is focused, closes the date picker and moves the focus to the toggle.")))),(0,r.kt)("h2",null,"Props"),(0,r.kt)("h3",null,"Calendar"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"calendarStartDay"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Set the first day of the calendar week. for example, 0 = Sunday, 1 = Monday.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," ({ getCalendarProps, ...context }) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"dateFormat"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'yyyy-MM-dd'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The format of date. Format of the string is based on Unicode Technical Standard #35: ",(0,r.kt)("a",{parentName:"td",href:"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table"},"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"defaultValue"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The default value. Use when the component is not controlled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"value"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The value for calendar.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onChange"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the date is clicked.")))),(0,r.kt)("h3",null,"DateInput"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description")))),(0,r.kt)("h3",null,"DatePicker"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," (context) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"defaultIsOpen"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the date picker is open by default.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"isOpen"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the date picker is open.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onClose"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the date picker is closed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onOpen"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the date picker is opened.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"placement"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'bottom-start'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The placement of the date picker. One of: 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end'")))),(0,r.kt)("h3",null,"DatePickerToggle"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," ({ getDatePickerToggleProps, isOpen, openDatePicker, closeDatePicker }) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the date picker toggle is disabled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onClick"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the date picker toggle is clicked.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onKeyDown"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the user presses a key.")))),(0,r.kt)("h3",null,"DatePickerPopper"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"PopperComponent"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ElementType"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Popper"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The component used for the popover.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"PopperProps"),(0,r.kt)("td",{parentName:"tr",align:"left"},"object"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Props applied to the Popper component.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"TransitionComponent"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ElementType"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Collapse"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The component used for the transition.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"TransitionProps"),(0,r.kt)("td",{parentName:"tr",align:"left"},"object"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Props applied to the ",(0,r.kt)("a",{parentName:"td",href:"http://reactcommunity.org/react-transition-group/transition#Transition-props"},"Transition")," element.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"TransitionProps.appear"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"true"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"offset"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[skidding, distance]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[0, 0]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"To control the distance and skidding of the calendar.")))))}d.isMDXComponent=!0},22469:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/labs/datepicker",function(){return n(72896)}])}},function(e){e.O(0,[9774,2888,179],(function(){return t=22469,e(e.s=t);var t}));var t=e.O();_N_E=t}]);