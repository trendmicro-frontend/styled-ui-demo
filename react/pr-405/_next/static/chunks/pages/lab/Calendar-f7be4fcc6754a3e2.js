(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3147],{36370:function(t,e,a){"use strict";a.r(e),a.d(e,{default:function(){return p}});var n=a(7896),r=a(59740),l=(a(2784),a(30876)),d=["components"],o={};function p(t){var e=t.components,a=(0,r.Z)(t,d);return(0,l.kt)("wrapper",(0,n.Z)({},o,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",null,"Calendar"),(0,l.kt)("h2",null,"Import"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Calendar,\n} from '@tonic-ui/react-lab';\n")),(0,l.kt)("h2",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"<Calendar />\n")),(0,l.kt)("h3",null,"First day of the week"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"weekStartDay")," prop to chage the first day of the calendar week. for example, 0 = Sunday, 1 = Monday."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="row" spacing="4x">\n  <Stack direction="column" spacing="4x" shouldWrapChildren>\n    <Text size="lg">weekStartDay={0} (default)</Text>\n    <Calendar />\n  </Stack>\n  <Stack direction="column" spacing="4x" shouldWrapChildren>\n    <Text size="lg">weekStartDay={1}</Text>\n    <Calendar weekStartDay={1} />\n  </Stack>\n</Stack>\n')),(0,l.kt)("h3",null,"Date format"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"dateFormat")," prop to change the date format."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table"},"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table")," for a full list of date format symbols."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const [value1, setValue1] = React.useState("2022.03.22");\n  const [value2, setValue2] = React.useState("2022.03.22");\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack direction="column" spacing="4x" shouldWrapChildren>\n        <Text size="lg">dateFormat="yyyy-MM-dd" (default)</Text>\n        <Calendar\n          value={value1}\n          onChange={value => setValue1(value)}\n        />\n        <Box>Date: {value1}</Box>\n      </Stack>\n      <Stack direction="column" spacing="4x" shouldWrapChildren>\n        <Text size="lg">dateFormat="yyyy.MM.dd"</Text>\n        <Calendar\n          dateFormat="yyyy.MM.dd"\n          value= {value2}\n          onChange={value => setValue2(value)}\n        />\n        <Box>Date: {value2} </Box>\n      </Stack>\n    </Stack>\n  );\n}\n')),(0,l.kt)("h2",null,"Props"),(0,l.kt)("h3",null,"Calendar"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"children"),(0,l.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," ({ getCalendarProps, ...context }) => ReactNode"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"dateFormat"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'yyyy-MM-dd'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The format of date. Format of the string is based on Unicode Technical Standard #35: ",(0,l.kt)("a",{parentName:"td",href:"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table"},"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"defaultValue"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"The default date of the calendar.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"onChange"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"A callback for when the value changes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"value"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"The date of the calendar.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"weekStartDay"),(0,l.kt)("td",{parentName:"tr",align:"left"},"number"),(0,l.kt)("td",{parentName:"tr",align:"left"},"0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The first day of the week.",(0,l.kt)("br",null),"0 = Sunday",(0,l.kt)("br",null),"1 = Monday",(0,l.kt)("br",null),"2 = Tuesday",(0,l.kt)("br",null),"3 = Wednesday",(0,l.kt)("br",null),"4 = Thursday",(0,l.kt)("br",null),"5 = Friday",(0,l.kt)("br",null),"6 = Saturday")))))}p.isMDXComponent=!0},83129:function(t,e,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/lab/Calendar",function(){return a(36370)}])}},function(t){t.O(0,[9774,2888,179],(function(){return e=83129,t(t.s=e);var e}));var e=t.O();_N_E=e}]);