(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9022],{38242:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return d}});var a=n(7896),r=n(59740),l=(n(2784),n(30876)),i=["components"],o={};function d(t){var e=t.components,n=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,a.Z)({},o,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",null,"DatePicker"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Datepicker")," is used to select a date from a calendar or type in a date value manually. It is composed of ",(0,l.kt)("inlineCode",{parentName:"p"},"Calendar"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"DateInput"),"."),(0,l.kt)("h2",null,"Import"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Calendar"),": The calendar component."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DatePicker"),": The component that provides the date picker functionality."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DatePickerToggle"),": The toggle that opens the date picker."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DatePickerContent"),": A wrapper that contains the calendar."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DateInput"),": The input component with ",(0,l.kt)("inlineCode",{parentName:"li"},"calendar")," icon."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TimeInput"),": The input component with ",(0,l.kt)("inlineCode",{parentName:"li"},"clock")," icon.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Calendar,\n  DateInput,\n  DatePicker,\n  DatePickerToggle,\n  DatePickerContent,\n  TimeInput,\n} from '@tonic-ui/react';\n")),(0,l.kt)("h2",null,"Usage"),(0,l.kt)("h3",null,"Calendar"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"<Calendar />\n")),(0,l.kt)("h4",null,"Calendar start day"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"weekStartDay")," prop to chage the first day of the calendar week. for example, 0 = Sunday, 1 = Monday."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="row" spacing="4x">\n  <Stack direction="column" spacing="4x" shouldWrapChildren>\n    <Text size="lg">weekStartDay={0} (default)</Text>\n    <Calendar />\n  </Stack>\n  <Stack direction="column" spacing="4x" shouldWrapChildren>\n    <Text size="lg">weekStartDay={1}</Text>\n    <Calendar weekStartDay={1} />\n  </Stack>\n</Stack>\n')),(0,l.kt)("h4",null,"Date format"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"dateFormat")," prop to change the date format."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table"},"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table")," for a full list of date format symbols."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const [value1, setValue1] = React.useState("2022.03.22");\n  const [value2, setValue2] = React.useState("2022.03.22");\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack direction="column" spacing="4x" shouldWrapChildren>\n        <Text size="lg">dateFormat="yyyy-MM-dd" (default)</Text>\n        <Calendar\n          value={value1}\n          onChange={value => setValue1(value)}\n        />\n        <Box>Date: {value1}</Box>\n      </Stack>\n      <Stack direction="column" spacing="4x" shouldWrapChildren>\n        <Text size="lg">dateFormat="yyyy.MM.dd"</Text>\n        <Calendar\n          dateFormat="yyyy.MM.dd"\n          value= {value2}\n          onChange={value => setValue2(value)}\n        />\n        <Box>Date: {value2} </Box>\n      </Stack>\n    </Stack>\n  );\n}\n')),(0,l.kt)("h3",null,"DatePicker"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"DatePicker")," is used to select a date from a calendar or type in a date value manually. It is composed of ",(0,l.kt)("inlineCode",{parentName:"p"},"DateInput")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Calendar"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const dateFormat = \'yyyy-MM-dd\';\n  const now = new Date();\n  const dateOfToday = now.toISOString().slice(0, 10);\n  const [isInvalid, setIsInvalid] = React.useState(false);\n  const [isOpenCalendar, setIsOpenCalendar] = React.useState(false);\n  const [value, setValue] = React.useState(dateOfToday);\n  const isValidDate = (value) => {\n    const pattern = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;\n    return !!String(value).match(pattern);\n  };\n  const handleDateInputChange = (event) => {\n    const value = event.target.value;\n    setValue(value);\n  };\n  const handleCalendarChange = (value) => {\n    setValue(value);\n    setIsOpenCalendar(false);\n  };\n\n  return (\n    <DatePicker\n      isOpen={isOpenCalendar}\n      onOpen={() => setIsOpenCalendar(true)}\n      onClose={() => setIsOpenCalendar(false)}\n    >\n      <DatePickerToggle>\n        {({ getDatePickerToggleProps }) => {\n          return (\n            <DateInput\n              dateFormat={dateFormat}\n              isInvalid={!isValidDate(value)}\n              value={value}\n              onChange={handleDateInputChange}\n              width="128px"\n              {...getDatePickerToggleProps()}\n            />\n          );\n        }}\n      </DatePickerToggle>\n      <DatePickerContent width="max-content">\n        <Calendar\n          dateFormat={dateFormat}\n          value={value}\n          onChange={handleCalendarChange}\n        />\n      </DatePickerContent>\n    </DatePicker>\n  );\n}\n')),(0,l.kt)("h4",null,"Date range picker"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const CustomDateInput = ({\n  defaultValue,\n  onChange,\n  ...rest\n}) => {\n  const [colorMode] = useColorMode();\n  const invalidBorderColor = {\n    dark: 'red:50',\n    light: 'red:60',\n  }[colorMode];\n  const [isOpenCalendar, setIsOpenCalendar] = React.useState(false);\n  const [value, setValue] = React.useState(defaultValue);\n  const handleDateInputChange = (event) => {\n    const value = event.target.value;\n    setValue(value);\n    onChange(value);\n  };\n  const handleCalendarChange = (value) => {\n    onChange(value);\n    setValue(value);\n    setIsOpenCalendar(false);\n  };\n\n  return (\n    <DatePicker\n      isOpen={isOpenCalendar}\n      onOpen={() => setIsOpenCalendar(true)}\n      onClose={() => setIsOpenCalendar(false)}\n    >\n      <DatePickerToggle>\n        {({ getDatePickerToggleProps }) => {\n          return (\n            <DateInput\n              value={value}\n              onChange={handleDateInputChange}\n              width=\"136px\"\n              borderTopRightRadius=\"0\"\n              borderBottomRightRadius=\"0\"\n              _invalid={{\n                borderColor: invalidBorderColor,\n                zIndex: 1,\n              }}\n              {...getDatePickerToggleProps()}\n              {...rest}\n            />\n          );\n        }}\n      </DatePickerToggle>\n      <DatePickerContent width=\"max-content\">\n        <Calendar\n          value={value}\n          onChange={handleCalendarChange}\n        />\n      </DatePickerContent>\n    </DatePicker>\n  );\n};\n\nconst CustomTimeInput = ({\n  onChange,\n  ...rest\n}) => {\n  const handleTimeInputChange = (event) => {\n    const value = event.target.value;\n    onChange(value);\n  };\n  return (\n    <TimeInput\n      onChange={handleTimeInputChange}\n      width=\"128px\"\n      ml=\"-1px\"\n      borderTopLeftRadius=\"0\"\n      borderBottomLeftRadius=\"0\"\n      {...rest}\n    />\n  );\n};\n\nconst DateTimePicker = ({\n  startDate: startDateProp,\n  startTime: startTimeProp,\n  endDate: endDateProp,\n  endTime: endTimeProp,\n  onApply,\n  onClose,\n}) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const [startDate, setStartDate] = React.useState(startDateProp);\n  const [startTime, setStartTime] = React.useState(startTimeProp);\n  const [endDate, setEndDate] = React.useState(endDateProp);\n  const [endTime, setEndTime] = React.useState(endTimeProp);\n  const [isInvalid, setIsInvalid] = React.useState(false);\n  const isValidDate = (value) => {\n    // The date format is \"yyyy-MM-dd\"\n    const pattern = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;\n    return !!String(value).match(pattern);\n  };\n  const isValidTime = (value) => {\n    // The time format is \"HH:mm:ss\"\n    const pattern = /^(?:2[0-3]|[01]?[0-9]):[0-5][0-9]:[0-5][0-9]$/;\n    return !!String(value).match(pattern);\n  };\n  const handleStartDateChange = (value) => {\n    setStartDate(value);\n  };\n  const handleEndDateChange = (value) => {\n    setEndDate(value);\n  };\n  const handleStartTimeChange = (value) => {\n    setStartTime(value);\n  };\n  const handleEndTimeChange = (value) => {\n    setEndTime(value);\n  };\n  const handleApplyClick = () => {\n    onApply({\n      startDate,\n      startTime,\n      endDate,\n      endTime,\n    });\n  };\n\n  React.useEffect(() => {\n    const isValidStartDate = isValidDate(startDate);\n    const isValidStartTime = isValidTime(startTime);\n    const isValidEndDate = isValidDate(endDate);\n    const isValidEndTime = isValidTime(endTime);\n    if (isValidStartDate && isValidEndDate && isValidStartTime && isValidEndTime) {\n      // if the end datetime is the earlier than the start datetime, then set the end datetime to the start datetime\n      if ((Date.parse(`${endDate} ${endTime}`)).valueOf() < (Date.parse(`${startDate} ${startTime}`)).valueOf()){\n        setEndDate(startDate);\n        setEndTime('23:59:59');\n      } else {\n        setIsInvalid(false);\n      }\n    } else {\n      setIsInvalid(true);\n    }\n  }, [startDate, startTime, endDate, endTime]);\n\n  return (\n    <Box\n      backgroundColor={colorStyle.background.secondary}\n      position=\"absolute\"\n      left=\"100%\"\n      top={0}\n      px=\"4x\"\n      py=\"3x\"\n      minHeight=\"100%\"\n      border={1}\n      borderColor={colorStyle.divider}\n    >\n      <Flex alignItems=\"center\">\n        <Text width=\"64px\">From:</Text>\n        <CustomDateInput\n          isInvalid={!isValidDate(startDate)}\n          defaultValue={startDate}\n          onChange={handleStartDateChange}\n        />\n        <CustomTimeInput\n          isInvalid={!isValidTime(startTime)}\n          defaultValue={startTime}\n          onChange={handleStartTimeChange}\n        />\n      </Flex>\n      <Space height=\"3x\" />\n      <Flex alignItems=\"center\">\n        <Text width=\"64px\">To:</Text>\n        <CustomDateInput\n          isInvalid={!isValidDate(endDate)}\n          value={endDate}\n          onChange={handleEndDateChange}\n        />\n        <CustomTimeInput\n          isInvalid={!isValidTime(endTime)}\n          value={endTime}\n          onChange={handleEndTimeChange}\n        />\n      </Flex>\n      <Space height=\"3x\" />\n      <Flex justifyContent=\"flex-end\">\n        <Grid templateColumns=\"1fr 1fr\" columnGap=\"2x\">\n          <Button\n            variant=\"primary\"\n            disabled={isInvalid}\n            onClick={handleApplyClick}\n          >\n            Apply\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={onClose}\n          >\n            Cancel\n          </Button>\n        </Grid>\n      </Flex>\n    </Box>\n  );\n};\n\nconst stateReducer = (prevState, nextState) => ({\n  ...prevState,\n  ...(typeof nextState === 'function' ? nextState(prevState) : nextState),\n});\n\nconst padTo2Digits = (num) => {\n  return num.toString().padStart(2, '0');\n};\n\nconst formatDate = (date) => {\n  return (\n    [\n      date.getFullYear(),\n      padTo2Digits(date.getMonth() + 1),\n      padTo2Digits(date.getDate()),\n    ].join('-')\n  );\n};\n\nconst formatTime = (date) => {\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  return (\n    [\n      padTo2Digits(hours),\n      padTo2Digits(minutes),\n      padTo2Digits(seconds),\n    ].join(':')\n  );\n};\n\nfunction Example() {\n  const today = new Date();\n  const [state, setState] = React.useReducer(stateReducer, {\n    value: '1d',\n    isDateTimePickerVisible: false,\n    startDate: formatDate(today),\n    startTime: '00:00:00',\n    endDate: formatDate(today),\n    endTime: '23:59:59',\n  });\n  const handleMenuItemClick = (event) => {\n    const value = event.currentTarget.getAttribute('value');\n    if (value === 'custom') {\n      event.preventDefault();\n      if (!state.isDateTimePickerVisible) {\n        setState({\n          isDateTimePickerVisible: true,\n        });\n      }\n      return;\n    }\n\n    setState({\n      value,\n      isDateTimePickerVisible: false,\n    });\n  };\n  const mapValueToLabel = (value) => {\n    if (value === 'custom') {\n      return 'Custom range';\n    }\n    return {\n      '1d': 'Last 24 hours',\n      '7d': 'Last 7 days',\n      '14d': 'Last 14 days',\n    }[value];\n  };\n  const dateTimeRange = (() => {\n    const value = state.value;\n    if (['1d', '7d', '14d', 'custom'].indexOf(value) < 0) {\n      return null;\n    }\n\n    if (value === 'custom') {\n      return `${state.startDate} ${state.startTime} ~ ${state.endDate} ${state.endTime}`;\n    }\n\n    const now = new Date();\n    let date;\n    if (value === '1d') {\n      date = new Date(now.setDate(now.getDate() - 1));\n    }\n    if (value === '7d') {\n      date = new Date(now.setDate(now.getDate() - 7));\n    }\n    if (value === '14d') {\n      date = new Date(now.setDate(now.getDate() - 14));\n    }\n\n    return `${formatDate(date)} ${formatTime(date)} ~ ${formatDate(new Date())} ${formatTime(new Date())}`;\n  })();\n\n  React.useEffect(() => {\n    if (state.value === 'custom' && !state.isDateTimePickerVisible) {\n      setState({\n        isDateTimePickerVisible: true,\n      });\n    }\n  }, [state.value, state.isDateTimePickerVisible]);\n\n  return (\n    <>\n      <Box mb=\"3x\">The time range: { dateTimeRange }</Box>\n      <Menu\n        onClose={() => {\n          if (state.isDateTimePickerVisible) {\n            setState({ isDateTimePickerVisible: false });\n          }\n        }}\n      >\n        {({ closeMenu }) => (\n          <>\n            <MenuButton variant=\"secondary\">\n              <Text>{mapValueToLabel(state.value)}</Text>\n            </MenuButton>\n            <MenuList width=\"max-content\">\n              {state.isDateTimePickerVisible && (\n                <DateTimePicker\n                  dateFormat=\"yyyy-MM-dd\"\n                  startDate={state.startDate}\n                  startTime={state.startTime}\n                  endDate={state.endDate}\n                  endTime={state.endTime}\n                  onApply={({ startDate, startTime, endDate, endTime }) => {\n                    closeMenu();\n                    setState({\n                      value: 'custom',\n                      startDate,\n                      startTime,\n                      endDate,\n                      endTime,\n                    });\n                  }}\n                  onClose={() => {\n                    closeMenu();\n                  }}\n                />\n              )}\n              {['1d', '7d', '14d'].map(value => (\n                <MenuItem\n                  key={value}\n                  value={value}\n                  onClick={handleMenuItemClick}\n                >\n                  {mapValueToLabel(value)}\n                </MenuItem>\n              ))}\n              <MenuDivider />\n              <MenuItem\n                value=\"custom\"\n                onClick={handleMenuItemClick}\n              >\n                Custom Period\n                <Space width=\"2x\" />\n                <Icon icon=\"angle-right\" />\n              </MenuItem>\n            </MenuList>\n          </>\n        )}\n      </Menu>\n    </>\n  );\n}\n\nrender(<Example />);\n")),(0,l.kt)("h2",null,"Props"),(0,l.kt)("h3",null,"Calendar"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"weekStartDay"),(0,l.kt)("td",{parentName:"tr",align:"left"},"number"),(0,l.kt)("td",{parentName:"tr",align:"left"},"0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Set the first day of the calendar week. for example, 0 = Sunday, 1 = Monday.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"children"),(0,l.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," ({ getCalendarProps, ...context }) => ReactNode"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"dateFormat"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'yyyy-MM-dd'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The format of date. Format of the string is based on Unicode Technical Standard #35: ",(0,l.kt)("a",{parentName:"td",href:"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table"},"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"defaultValue"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"The default value. Use when the component is not controlled.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"value"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"The value for calendar.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"onChange"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Callback when the date is clicked.")))),(0,l.kt)("h3",null,"DatePicker"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"children"),(0,l.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," (context) => ReactNode"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"defaultIsOpen"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether the date picker is open by default.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"isOpen"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether the date picker is open.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"onClose"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Callback when the date picker is closed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"onOpen"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Callback when the date picker is opened.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"placement"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'bottom-start'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The placement of the date picker. One of: 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end'")))),(0,l.kt)("h3",null,"DatePickerToggle"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"children"),(0,l.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," ({ getDatePickerToggleProps }) => ReactNode"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether the date picker toggle is disabled.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"onClick"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Callback when the date picker toggle is clicked.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"onKeyDown"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Callback when the user presses a key.")))),(0,l.kt)("h3",null,"DatePickerContent"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"PopperComponent"),(0,l.kt)("td",{parentName:"tr",align:"left"},"ElementType"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Popper"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The component used for the popover.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"PopperProps"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Props applied to the Popper component.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"TransitionComponent"),(0,l.kt)("td",{parentName:"tr",align:"left"},"ElementType"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Collapse"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The component used for the transition.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"TransitionProps"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Props applied to the ",(0,l.kt)("a",{parentName:"td",href:"http://reactcommunity.org/react-transition-group/transition#Transition-props"},"Transition")," element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"TransitionProps.appear"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"},"true"),(0,l.kt)("td",{parentName:"tr",align:"left"})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"children"),(0,l.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"})))),(0,l.kt)("h3",null,"DateInput"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description")))),(0,l.kt)("h3",null,"TimeInput"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description")))))}d.isMDXComponent=!0},95208:function(t,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/lab/DatePicker",function(){return n(38242)}])}},function(t){t.O(0,[9774,2888,179],(function(){return e=95208,t(t.s=e);var e}));var e=t.O();_N_E=e}]);