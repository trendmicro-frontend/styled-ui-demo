(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4382],{25911:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return l}});var a=t(7896),r=t(59740),u=(t(2784),t(30876)),s=["components"],d={};function l(e){var n=e.components,t=(0,r.Z)(e,s);return(0,u.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,u.kt)("h1",null,"useHydrated"),(0,u.kt)("p",null,"A custom Hook that returns a boolean indicating if the component is hydrated."),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("p",{parentName:"li"},"When doing Server-Side Rendering (SSR), the result will always be ",(0,u.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("p",{parentName:"li"},"When doing Client-Side Rendering (CSR), the result will always be ",(0,u.kt)("inlineCode",{parentName:"p"},"false")," on the first render, and ",(0,u.kt)("inlineCode",{parentName:"p"},"true")," on subsequent renders."))),(0,u.kt)("h3",null,"Hook"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-js"},"import { useEffect, useState } from 'react';\n\nconst useHydrated = () => {\n  const [isHydrated, setHydrated] = useState(false);\n\n  useEffect(() => {\n    setHydrated(true);\n  }, []);\n\n  return isHydrated;\n};\n")),(0,u.kt)("h3",null,"Example"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  const isHydrated = useHydrated();\n\n  return (\n    <>\n      {isHydrated ? 'Hydrated' : 'Not hydrated'}\n    </>\n  );\n}\n")))}l.isMDXComponent=!0},25351:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/use-hydrated",function(){return t(25911)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=25351,e(e.s=n);var n}));var n=e.O();_N_E=n}]);