(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5478],{66886:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return l}});var u=t(7896),r=t(59740),o=(t(2784),t(30876)),s=["components"],a={};function l(n){var e=n.components,t=(0,r.Z)(n,s);return(0,o.kt)("wrapper",(0,u.Z)({},a,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",null,"usePrevious"),(0,o.kt)("p",null,"A custom Hook that stores the previous state or props."),(0,o.kt)("h3",null,"Hook"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { useEffect, useRef } from 'react';\n\nconst usePrevious = (value) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n};\n")),(0,o.kt)("h3",null,"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function Counter() {\n  const [value, setValue] = React.useState(0);\n  const lastValue = usePrevious(value);\n\n  return (\n    <>\n      <Box mb="4x">\n        Current: {value} - Previous: {lastValue}\n      </Box>\n      <Button onClick={() => setValue(value + 1)}>\n        Click Me\n      </Button>\n    </>\n  );\n}\n')))}l.isMDXComponent=!0},72868:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/use-previous",function(){return t(66886)}])}},function(n){n.O(0,[9774,2888,179],(function(){return e=72868,n(n.s=e);var e}));var e=n.O();_N_E=e}]);