(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1792],{84781:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return s}});var o=t(7896),a=t(59740),u=(t(2784),t(30876)),i=["components"],r={};function s(n){var e=n.components,t=(0,a.Z)(n,i);return(0,u.kt)("wrapper",(0,o.Z)({},r,t,{components:e,mdxType:"MDXLayout"}),(0,u.kt)("h1",null,"useConst"),(0,u.kt)("p",null,"A custom Hook to initialize and return a constant value over the lifecycle of the component."),(0,u.kt)("p",null,"Unlike ",(0,u.kt)("inlineCode",{parentName:"p"},"React.useMemo"),", this is guaranteed to always return the same value (and if the initializer is a function, only call it once). This is similar to setting a private member in a class constructor."),(0,u.kt)("p",null,"If the value should ever change based on dependencies, use ",(0,u.kt)("inlineCode",{parentName:"p"},"React.useMemo")," instead."),(0,u.kt)("h3",null,"Hook"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-js"},"const useConst = (init) => {\n  const ref = useRef(null);\n\n  if (ref.current === null) {\n    ref.current = (typeof init === 'function') ? init() : init;\n  }\n\n  return ref.current;\n};\n")),(0,u.kt)("h3",null,"Example"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx"},'function App() {\n  const mountTime = useConst(() => new Date().toTimeString());\n  const randomValue = useConst(Math.random());\n\n  return (\n    <Box display="flex" flexDirection="column" rowGap="2x">\n      <Box>Mount time: {mountTime}</Box>\n      <Box>Random value: {randomValue}</Box>\n    </Box>\n  )\n}\n')))}s.isMDXComponent=!0},25812:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/use-const",function(){return t(84781)}])}},function(n){n.O(0,[9774,2888,179],(function(){return e=25812,n(n.s=e);var e}));var e=n.O();_N_E=e}]);