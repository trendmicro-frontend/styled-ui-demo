(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1321],{3105:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return s}});var a=t(7896),r=t(9740),l=(t(2784),t(876)),i=["components"],o={};function s(e){var n=e.components,t=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",null,"Progress"),(0,l.kt)("p",null,"Progress indicators inform users about the status of ongoing processes, such as loading an app, submitting a form, or saving updates."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Determinate")," indicators display how long an operation will take."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Indeterminate")," indicators visualize an unspecified wait time.")),(0,l.kt)("h2",null,"Import"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  LinearProgress,\n} from '@tonic-ui/react';\n")),(0,l.kt)("h2",null,"Linear"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const FormGroup = (props) => (\n  <Box mb=\"4x\" {...props} />\n);\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nrender(() => {\n  const [variant, changeVariantBy] = useSelection('indeterminate');\n  const [size, changeSizeBy] = useSelection('sm');\n  const [progress, setProgress] = React.useState(0);\n  const resetProgress = React.useCallback(() => setProgress(0), []);\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((oldProgress) => {\n        if (oldProgress === 100) {\n          return 0;\n        }\n        const diff = 5 + Math.round(Math.random() * 5);\n        return Math.min(oldProgress + diff, 100);\n      });\n    }, 200);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            variant\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['indeterminate', 'determinate'].map(value => (\n            <Button\n              key={value}\n              selected={value === variant}\n              onClick={callAll(\n                changeVariantBy(value),\n                resetProgress,\n              )}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['xs', 'sm', 'md', 'lg'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Flex alignItems=\"center\" columnGap=\"3x\" minHeight=\"5x\">\n        <Box width={320}>\n          <LinearProgress\n            variant={variant}\n            size={size}\n            value={variant === 'determinate' ? progress : undefined}\n          />\n        </Box>\n        {variant === 'determinate' && (\n          <TextLabel>\n            {progress}%\n          </TextLabel>\n        )}\n      </Flex>\n    </>\n  );\n});\n")),(0,l.kt)("h3",null,"Linear color"),(0,l.kt)("p",null,"You can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"color")," prop to change the color of the progress bar. The default color is ",(0,l.kt)("inlineCode",{parentName:"p"},"blue:60"),"."),(0,l.kt)("p",null,"It accepts a valid CSS background color/image, a color token from the theme, or an array of colors to create a linear gradient."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack spacing="4x">\n  <TextLabel>Indeterminate</Text>\n  <LinearProgress size="md" variant="indeterminate" color="blue:60" width={320} />\n  <LinearProgress size="md" variant="indeterminate" color="teal:40" width={320} />\n  <Divider />\n  <TextLabel>Determinate</Text>\n  <Flex alignItems="center" columnGap="3x">\n    <LinearProgress size="md" variant="determinate" value={40} color="blue:60" width={320}/>\n    <TextLabel>40%</TextLabel>\n  </Flex>\n  <Flex alignItems="center" columnGap="3x">\n    <LinearProgress size="md" variant="determinate" value={60} color="teal:40" width={320} />\n    <TextLabel>60%</TextLabel>\n  </Flex>\n  <Divider />\n  <TextLabel>Linear gradient</Text>\n  <Flex\n    alignItems="center"\n    columnGap="2x"\n    justifyContent="space-between"\n    width={320}\n  >\n    <Box backgroundColor="blue:60" px="2x" py="1x" color="white:primary">\n      blue:60\n    </Box>\n    <Box backgroundColor="teal:40" px="2x" py="1x" color="black:primary">\n      teal:40\n    </Box>\n  </Flex>\n  <Flex alignItems="center" columnGap="3x">\n    <LinearProgress\n      size="md"\n      variant="determinate"\n      value={100}\n      color={[\'blue:60\', \'teal:40\']}\n      width={320}\n    />\n    <TextLabel>100%</TextLabel>\n  </Flex>\n  <Divider />\n  <TextLabel>Linear gradient with wave light</Text>\n  <Flex alignItems="center" columnGap="3x">\n    <LinearProgress\n      size="md"\n      variant="determinate"\n      value={100}\n      color="linear-gradient(90deg, rgba(255, 255, 255, 0) 6.03%, rgba(255, 255, 255, 0.12) 16.32%, rgba(255, 255, 255, 0.12) 42.22%, rgba(255, 255, 255, 0) 60.67%), linear-gradient(90deg, #1E5EDE, #04CAA1)"\n      width={320}\n    />\n    <TextLabel>100%</TextLabel>\n  </Flex>\n</Stack>\n')),(0,l.kt)("h2",null,"Props"),(0,l.kt)("h3",null,"LinearProgress"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"color"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string ","|"," string[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'blue:60'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The color of the progress bar. It accepts a valid CSS background color/image, a color token from the theme, or an array of colors to create a linear gradient.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"min"),(0,l.kt)("td",{parentName:"tr",align:"left"},"numbner"),(0,l.kt)("td",{parentName:"tr",align:"left"},"0"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The minimum value of the progress.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"max"),(0,l.kt)("td",{parentName:"tr",align:"left"},"number"),(0,l.kt)("td",{parentName:"tr",align:"left"},"100"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum value of the progress.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"size"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'sm'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The size of the progress bar. One of: 'xs', 'sm', 'md', 'lg'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'indeterminate'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The variant to use. One of: 'indeterminate', 'determinate'",(0,l.kt)("br",null),"\u2022 Use indeterminate when there is no progress value.",(0,l.kt)("br",null),"\u2022 Use determinate when a progress value is defined.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"value"),(0,l.kt)("td",{parentName:"tr",align:"left"},"number"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"The value of the progress indicator for the determinate variant.")))))}s.isMDXComponent=!0},2264:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/progress",function(){return t(3105)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=2264,e(e.s=n);var n}));var n=e.O();_N_E=n}]);