(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6930],{4810:function(n,t,e){"use strict";e.r(t),e.d(t,{default:function(){return m}});var a=e(7896),i=e(9740),l=(e(2784),e(876)),o=["components"],r={};function m(n){var t=n.components,e=(0,i.Z)(n,o);return(0,l.kt)("wrapper",(0,a.Z)({},r,e,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",null,"Skeleton"),(0,l.kt)("p",null,"Display a placeholder preview of your content before the data gets loaded to reduce load-time frustration."),(0,l.kt)("h2",null,"Import"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { Skeleton } from '@tonic-ui/react';\n")),(0,l.kt)("h2",null,"Usage"),(0,l.kt)("h3",null,"Variants"),(0,l.kt)("p",null,"This component provides 3 shape variants: ",(0,l.kt)("inlineCode",{parentName:"p"},"text"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"rect"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"circle"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack display="inline-flex" direction="column" spacing="4x">\n  <Skeleton variant="text" />\n  <Skeleton variant="rect" width={200} height={100} />\n  <Skeleton variant="circle" width={40} height={40} />\n</Stack>\n')),(0,l.kt)("h3",null,"Animations"),(0,l.kt)("p",null,"The animation is disabled by default. You can change the animation effect to ",(0,l.kt)("inlineCode",{parentName:"p"},"pulse")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"wave"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nrender(() => {\n  const [animation, changeAnimationBy] = useSelection(\'none\');\n\n  return (\n    <>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            animation\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'none\', \'pulse\', \'wave\'].map(value => (\n            <Button\n              key={value}\n              selected={value === animation}\n              onClick={changeAnimationBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <Divider my="4x" />\n      <Stack direction="column" spacing="10x">\n        <Stack direction="column" spacing="4x">\n          <Skeleton animation={animation} width={160} />\n          <Skeleton animation={animation} width={240} />\n          <Skeleton animation={animation} width={240} />\n        </Stack>\n        <Stack direction="column" spacing="4x">\n          <Skeleton animation={animation} width={160} />\n          <Skeleton animation={animation} width={240} />\n          <Skeleton animation={animation} width={240} />\n        </Stack>\n        <Stack direction="column" spacing="4x">\n          <Skeleton animation={animation} width={160} />\n          <Skeleton animation={animation} width={240} />\n          <Skeleton animation={animation} width={240} />\n        </Stack>\n      </Stack>\n    </>\n  );\n});\n')),(0,l.kt)("h3",null,"Inferring dimensions"),(0,l.kt)("p",null,"You can use ",(0,l.kt)("inlineCode",{parentName:"p"},'height="60%"')," and ",(0,l.kt)("inlineCode",{parentName:"p"},'transform="translateY(40%)"')," to infer dimensions of the skeleton. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  return (\n    <Flex>\n      <Stack direction="column" spacing="4x" flex="none" width={300}>\n        <Text size="4xl">\n          <Skeleton height="60%" transform="translateY(40%)" />\n        </Text>\n        <Text size="xl">\n          <Skeleton height="60%" transform="translateY(40%)" />\n        </Text>\n        <Text size="sm">\n          <Skeleton height="60%" transform="translateY(40%)" />\n        </Text>\n      </Stack>\n      <Space width="8x" flex="none" />\n      <Stack direction="column" spacing="4x" flex="1">\n        <Text size="4xl">Heading 8</Text>\n        <Text size="xl">Heading 4</Text>\n        <Text size="sm">body text</Text>\n      </Stack>\n    </Flex>\n  );\n}\n')),(0,l.kt)("h2",null,"Props"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'text'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The type of content that will be rendered. One of: 'text', 'rect', 'circle'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"animation"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"The animation effect. One of: 'pulse', 'wave'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"width"),(0,l.kt)("td",{parentName:"tr",align:"left"},"number ","|"," string"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Width of the skeleton. Useful when the skeleton is inside an inline element with no width of its own.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"height"),(0,l.kt)("td",{parentName:"tr",align:"left"},"number ","|"," string"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"Height of the skeleton. Useful when you don't want to adopt the skeleton to a text element.")))))}m.isMDXComponent=!0},9118:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/skeleton",function(){return e(4810)}])}},function(n){n.O(0,[9774,2888,179],(function(){return t=9118,n(n.s=t);var t}));var t=n.O();_N_E=t}]);