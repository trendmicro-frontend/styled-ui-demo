(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4600],{9158:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return p}});var a=n(7896),l=n(9740),r=(n(2784),n(876)),i=["components"],o={};function p(t){var e=t.components,n=(0,l.Z)(t,i);return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Pagination"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Pagination")," component enables the user to select a specific page from a range of pages."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Pagination,\n  PaginationItem,\n  usePagination,\n} from '@tonic-ui/react';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("h3",null,"Basic pagination"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack spacing="4x">\n  <Pagination count={10} />\n  <Pagination count={10} defaultPage={4} />\n  <Pagination count={10} disabled />\n</Stack>\n')),(0,r.kt)("h3",null,"Pagination buttons"),(0,r.kt)("p",null,"You can optionally enable or disable first-page, last-page, previous-page, and next-page buttons."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack spacing="4x">\n  <Pagination\n    count={10}\n  />\n  <Pagination\n    count={10}\n    defaultPage={5}\n    boundaryCount={0}\n    slot={{ first: true, last: true }}\n  />\n  <Pagination\n    count={10}\n    slot={{ previous: false, next: false }}\n  />\n</Stack>\n')),(0,r.kt)("h3",null,"Customize the control icons"),(0,r.kt)("p",null,"It's possible to customize the control icons for the start-ellipsis, end-ellipsis, first-page, last-page, previous-page, and next-page buttons."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Pagination\n  count={10}\n  renderItem={(props) => {\n    if (props.type === \'start-ellipsis\' || props.type === \'end-ellipsis\') {\n      return (\n        <Text mx="2x">...</Text>\n      );\n    }\n\n    return (\n      <PaginationItem\n        slot={{\n          previous: <Icon icon="chevron-left" />,\n          next: <Icon icon="chevron-right" />,\n        }}\n        {...props}\n      />\n    );\n  }}\n/>\n')),(0,r.kt)("h3",null,"Pagination ranges"),(0,r.kt)("p",null,"You can specify how many numbers to display either side of current page with the ",(0,r.kt)("inlineCode",{parentName:"p"},"siblingCount")," prop, and adjacent to the start and end page number with the ",(0,r.kt)("inlineCode",{parentName:"p"},"boundaryCount")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack spacing="4x">\n  <Pagination count={11} defaultPage={6} />\n  <Pagination count={11} defaultPage={6} boundaryCount={0} />\n  <Pagination count={11} defaultPage={6} siblingCount={0} />\n  <Pagination count={11} defaultPage={6} boundaryCount={0} siblingCount={0} />\n  <Pagination count={11} defaultPage={6} boundaryCount={2} siblingCount={0} />\n  <Pagination count={15} defaultPage={8} boundaryCount={2} siblingCount={2} />\n</Stack>\n')),(0,r.kt)("h3",null,"Controlled pagination"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const [page, setPage] = React.useState(1);\n  const handleChange = (event, value) => {\n    setPage(value);\n  };\n\n  return (\n    <Stack spacing="4x">\n      <Text>Page: {page}</Text>\n      <Pagination count={10} page={page} onChange={handleChange} />\n    </>\n  );\n}\n')),(0,r.kt)("h3",null,"Table pagination"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Pagination")," component is designed to paginate a list of arbitrary items when infinite loading isn't used. For the pagination of a large set of tabular data, you should use the ",(0,r.kt)("inlineCode",{parentName:"p"},"TablePagination")," component as illustrated below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const totalRecords = 400;\n  const [page, setPage] = React.useState(1);\n  const [perPage, setPerPage] = React.useState(10);\n  const totalPages = Math.ceil(totalRecords / perPage);\n  const selectPerPage = (value) => {\n    setPage(1);\n    setPerPage(value);\n  };\n  const isPrevPageDisabled = (page <= 1);\n  const isNextPageDisabled = (page >= totalPages);\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    if (value <= 1) {\n      setPage(1);\n    } else if (value >= totalPages) {\n      setPage(totalPages);\n    } else if (!isNaN(value)) {\n      setPage(e.target.value);\n    }\n  };\n\n  return (\n    <Stack spacing="4x">\n      <Flex alignItems="center">\n        <Text mr="3x">\n          Total: {totalRecords}\n        </Text>\n        <Divider orientation="vertical" height="6x" />\n        <Menu>\n          <MenuButton variant="ghost">{perPage} per page</MenuButton>\n          <MenuList>\n            <MenuItem onClick={() => selectPerPage(10)}>10</MenuItem>\n            <MenuItem onClick={() => selectPerPage(50)}>50</MenuItem>\n            <MenuItem onClick={() => selectPerPage(100)}>100</MenuItem>\n          </MenuList>\n        </Menu>\n        <Divider orientation="vertical" height="6x" />\n        <Pagination\n          count={totalPages}\n          page={page}\n          onChange={(_, value) => setPage(value)}\n        />\n      </Flex>\n      <Flex alignItems="center">\n        <Text mr="3x">\n          Total: {totalRecords}\n        </Text>\n        <Divider orientation="vertical" height="6x" />\n        <Menu>\n          <MenuButton variant="ghost">{perPage} per page</MenuButton>\n          <MenuList>\n            <MenuItem onClick={() => selectPerPage(10)}>10</MenuItem>\n            <MenuItem onClick={() => selectPerPage(50)}>50</MenuItem>\n            <MenuItem onClick={() => selectPerPage(100)}>100</MenuItem>\n          </MenuList>\n        </Menu>\n        <Divider orientation="vertical" height="6x" />\n        <Space width="2x" />\n        <Input width={32} px={0} textAlign="center" onChange={handleInputChange} value={page} />\n        <Space width="2x" />\n        <Text>/</Text>\n        <Space width="2x" />\n        <Text>{totalPages}</Text>\n        <Space width="2x" />\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button\n            width="8x"\n            disabled={isPrevPageDisabled}\n            onClick={(event) => {\n              const prevPage = page > 1 ? page - 1 : page;\n              if (prevPage !== page) {\n                setPage(prevPage);\n              }\n            }}\n          >\n            <Icon icon="angle-left" />\n          </Button>\n          <Button\n            width="8x"\n            disabled={isNextPageDisabled}\n            onClick={(event) => {\n              const nextPage = page < totalPages ? page + 1 : page;\n              if (nextPage !== page) {\n                setPage(nextPage);\n              }\n            }}\n          >\n            <Icon icon="angle-right" />\n          </Button>\n        </ButtonGroup>\n      </Flex>\n    </Stack>\n  );\n}\n')),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"usePagination")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"usePagination")," Hook is provided for advanced customization use cases. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Pagination")," component is built on top of this Hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const { items } = usePagination({\n    count: 10,\n    boundaryCount: 0,\n    siblingCount: 1,\n    slot: {\n      first: true,\n      previous: true,\n      next: true,\n      last: true,\n    },\n  });\n\n  return (\n    <Box as=\"nav\">\n      <Flex alignItems=\"center\" columnGap=\"2x\">\n        {items.map(({ page, type, selected, ...item }, index) => {\n          let children = null;\n\n          if (type === 'start-ellipsis' || type === 'end-ellipsis') {\n            children = '\u2026';\n          } else if (type === 'page') {\n            children = (\n              <Button selected={selected} {...item}>\n                {page}\n              </Button>\n            );\n          } else {\n            children = (\n              <Button {...item}>\n                {type}\n              </Button>\n            );\n          }\n\n          return (\n            <React.Fragment key={index}>\n              {children}\n            </React.Fragment>\n          );\n        })}\n      </Flex>\n    </Box>\n  );\n}\n")),(0,r.kt)("h2",null,"Props"),(0,r.kt)("h3",null,"Pagination"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"boundaryCount"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Number of always visible pages at the beginning and end.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"count"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Total number of pages.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"defaultPage"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The page selected by default when the component is uncontrolled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the component is disabled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onChange"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback fired when the page is changed. ",(0,r.kt)("br",null),(0,r.kt)("br",null)," Signature: ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"function(event: object, page: number) => void")," ",(0,r.kt)("br",null),"event: The event source of the callback. ",(0,r.kt)("br",null),"page: The page selected.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"page"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current page.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"renderItem"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(props) => <PaginationItem {...props} />")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Render the item.",(0,r.kt)("br",null),(0,r.kt)("br",null),"Signature: ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"function(props) => ReactNode")," ",(0,r.kt)("br",null),"props: The props to spread on a ",(0,r.kt)("inlineCode",{parentName:"td"},"PaginationItem"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"siblingCount"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Number of always visible pages before and after the current page.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"slot"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"{ first?: boolean, last?: boolean, previous?: boolean, next?: boolean }")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"{ first: false, last: false, previous: true, next: true }")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether to render the first-page, last-page, previous-page, and next-page buttons.")))),(0,r.kt)("h3",null,"PaginationItem"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the component is disabled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"page"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current page number.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"selected"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the pagination item is selected.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"slot"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"{ 'start-ellipsis'?: ReactNode, 'end-ellipsis'?: ReactNode, first?: ReactNode, previous?: ReactNode, next?: ReactNode, last?: ReactNode }")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},'{ \'start-ellipsis\': <Icon icon="more-horiz" />, \'end-ellipsis\': <Icon icon="more-horiz" />, first: <Icon icon="collapse-left" />, previous: <Icon icon="angle-left" />, next: <Icon icon="angle-right" />, last: <Icon icon="collapse-right" /> }')),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"type"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'page'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the pagination item.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'ghost'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The variant to use.")))))}p.isMDXComponent=!0},1847:function(t,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/pagination",function(){return n(9158)}])}},function(t){t.O(0,[9774,2888,179],(function(){return e=1847,t(t.s=e);var e}));var e=t.O();_N_E=e}]);