(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2153],{791:function(o,n,e){"use strict";e.r(n),e.d(n,{default:function(){return s}});e(2784);var t=e(876),r=["components"];function l(){return l=Object.assign?Object.assign.bind():function(o){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(o[t]=e[t])}return o},l.apply(this,arguments)}function c(o,n){if(null==o)return{};var e,t,r=function(o,n){if(null==o)return{};var e,t,r={},l=Object.keys(o);for(t=0;t<l.length;t++)e=l[t],n.indexOf(e)>=0||(r[e]=o[e]);return r}(o,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(o);for(t=0;t<l.length;t++)e=l[t],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(o,e)&&(r[e]=o[e])}return r}var a={};function s(o){var n=o.components,e=c(o,r);return(0,t.kt)("wrapper",l({},a,e,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",null,"useColorMode"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"useColorMode")," is a custom Hook that gives you access to the current color mode, and a function to change the color mode."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"// import\nimport { useColorStyle } from '@tonic-ui/react';\n\n// usage\nconst [colorMode, setColorMode] = useColorMode();\n")),(0,t.kt)("h3",null,"Returns"),(0,t.kt)("p",null,"Returns an array with the current color mode and a function to change the color mode."),(0,t.kt)("h3",null,"Example"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled",disabled:!0},"// App.jsx\nimport { css, Global } from '@emotion/react';\nimport { Button, useColorMode } from '@tonic-ui/react';\nimport React from 'react';\n\nconst App = () => {\n  const [colorMode, setColorMode] = useColorMode(); // One of: 'dark', 'light'\n  const toggleColorMode = () => {\n    const nextColorMode = {\n      'dark': 'light',\n      'light': 'dark',\n    }[colorMode];\n    setColorMode(nextColorMode);\n  };\n\n  return (\n    <>\n      <Global\n        styles={css`\n          :root {\n            color-scheme: ${colorMode};\n          }\n        `}\n      />\n      <Button onClick={toggleColorMode}>\n        Toggle Color Mode\n      </Button>\n    </>\n  );\n};\n")))}s.isMDXComponent=!0},14:function(o,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/color-mode/useColorMode",function(){return e(791)}])}},function(o){o.O(0,[9774,2888,179],(function(){return n=14,o(o.s=n);var n}));var n=o.O();_N_E=n}]);