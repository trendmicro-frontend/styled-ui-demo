(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9380],{62456:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var a=n(7896),l=n(59740),r=(n(2784),n(30876)),o=["components"],i={};function u(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Truncate"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Truncate")," component will shorten text with an ellipsis. Always add a ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," attribute to the truncated element so the full text can be displayed in a tooltip."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Truncate } from '@tonic-ui/react';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("h3",null,"Default example"),(0,r.kt)("p",null,"Truncate will prevent text that overflows the container from wrapping."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Box width={240}>\n  <Truncate title="This is a very long text that will be truncated">\n    This is a very long text that will be truncated\n  </Truncate>\n</Box>\n')),(0,r.kt)("p",null,"You can also set the width of the truncated text with the ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Truncate\n  title="This is a very long text that will be truncated"\n  width={240}\n>\n  This is a very long text that will be truncated\n</Truncate>\n')),(0,r.kt)("h3",null,"Expandable example"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"_hover")," prop to control how to expand the truncated text on hover."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Flex direction="column" rowGap="3x">\n      <Box\n        backgroundColor={colorStyle.background.secondary}\n        px="3x"\n        py="2x"\n      >\n        <Truncate\n          title="This is a very long text that will be truncated"\n          width={240}\n          _hover={{\n            width: \'max-content\',\n          }}\n        >\n          This is a very long text that will be truncated\n        </Truncate>\n      </Box>\n      <Box\n        backgroundColor={colorStyle.background.secondary}\n        px="3x"\n        py="2x"\n        width={240}\n      >\n        <Truncate\n          title="This is a very long text that will be truncated"\n          _hover={{\n            overflow: \'visible\',\n          }}\n        >\n          This is a very long text that will be truncated\n        </Truncate>\n      </Box>\n    </Flex>\n  );\n}\n')),(0,r.kt)("h3",null,"Tooltip example"),(0,r.kt)("p",null,"You can wrap ",(0,r.kt)("inlineCode",{parentName:"p"},"Truncate")," with a ",(0,r.kt)("inlineCode",{parentName:"p"},"Tooltip")," to display the full text in a tooltip when the text is truncated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const textRef = React.useRef();\n  const [isOpen, toggleIsOpen] = useToggle();\n  useEventListener(\n    () => textRef.current,\n    'mouseenter', // It can be either 'mouseleave' or 'pointerleave'\n    React.useCallback((event) => {\n      const isOverflowing = (event.currentTarget.scrollWidth > event.currentTarget.clientWidth);\n      isOverflowing && toggleIsOpen(true);\n    }, [toggleIsOpen]),\n  );\n  useEventListener(\n    () => textRef.current,\n    'mouseleave', // It can be either 'mouseleave' or 'pointerleave'\n    React.useCallback((event) => {\n      toggleIsOpen(false);\n    }, [toggleIsOpen]),\n  );\n\n  return (\n    <Box width={240}>\n      <Tooltip\n        isOpen={isOpen}\n        label=\"This is a very long text that will be truncated\"\n      >\n        <Truncate ref={textRef}>\n          This is a very long text that will be truncated\n        </Truncate>\n      </Tooltip>\n    </Box>\n  );\n}\n")),(0,r.kt)("h2",null,"Props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})))))}u.isMDXComponent=!0},35916:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/truncate",function(){return n(62456)}])}},function(e){e.O(0,[9774,2888,179],(function(){return t=35916,e(e.s=t);var t}));var t=e.O();_N_E=t}]);