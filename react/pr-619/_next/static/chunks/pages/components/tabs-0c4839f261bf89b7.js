(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6316],{3370:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return s}});var a=t(7896),l=t(59740),o=(t(2784),t(30876)),r=["components"],i={};function s(n){var e=n.components,t=(0,l.Z)(n,r);return(0,o.kt)("wrapper",(0,a.Z)({},i,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",null,"Tabs"),(0,o.kt)("p",null,"Tabs is used to group and display a set of related elements."),(0,o.kt)("h2",null,"Import"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Tab,\n  Tabs,\n  TabList,\n  TabPanel,\n  TabPanels,\n  useTabs,\n} from '@tonic-ui/react';\n")),(0,o.kt)("h2",null,"Usage"),(0,o.kt)("h3",null,"Basic tabs"),(0,o.kt)("p",null,"Here is a basic example of tabs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs>\n  <TabList>\n    <Tab>TAB 1</Tab>\n    <Tab>TAB 2</Tab>\n    <Tab>TAB 3</Tab>\n  </TabList>\n  <TabPanels px="3x" py="2x">\n    <TabPanel>\n      Tab Panel 1\n    </TabPanel>\n    <TabPanel>\n      Tab Panel 2\n    </TabPanel>\n    <TabPanel>\n      Tab Panel 3\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"TabList")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"TabPanels")," are used to group the tabs and tab panels. If you don't need the tabs to be grouped, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Tab")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"TabPanel")," directly.",(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled",disabled:!0},"<Tabs>\n  <Tab>TAB 1</Tab>\n  <Tab>TAB 2</Tab>\n  <Tab>TAB 3</Tab>\n  <TabPanel>Tab Panel 1</TabPanel>\n  <TabPanel>Tab Panel 2</TabPanel>\n  <TabPanel>Tab Panel 3</TabPanel>\n</Tabs>\n"))),(0,o.kt)("h3",null,"Controlled and uncontrolled tabs"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"index")," prop is used to control which tab is selected. The ",(0,o.kt)("inlineCode",{parentName:"p"},"onChange")," callback returns the selected tab index whenever the user changes the tab. If you intend to control the tabs programmatically, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"onChange")," callback to update the ",(0,o.kt)("inlineCode",{parentName:"p"},"index")," prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const [index, setIndex] = React.useState(\'tab1\');\n\n  return (\n    <Tabs\n      index={index}\n      onChange={index => setIndex(index)}\n    >\n      <TabList>\n        <Tab index="tab1">TAB 1</Tab>\n        <Tab index="tab2">TAB 2</Tab>\n        <Tab index="tab3">TAB 3</Tab>\n      </TabList>\n      <TabPanels px="3x" py="2x">\n        <TabPanel index="tab1">\n          Tab Panel 1\n        </TabPanel>\n        <TabPanel index="tab2">\n          Tab Panel 2\n        </TabPanel>\n        <TabPanel index="tab3">\n          Tab Panel 3\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n')),(0,o.kt)("p",null,"For uncontrolled tabs, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultIndex")," prop to set the initial selected tab."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs defaultIndex={0}>\n  <TabList>\n    <Tab>TAB 1</Tab>\n    <Tab>TAB 2</Tab>\n    <Tab>TAB 3</Tab>\n  </TabList>\n  <TabPanels px="3x" py="2x">\n    <TabPanel>\n      Tab Panel 1\n    </TabPanel>\n    <TabPanel>\n      Tab Panel 2\n    </TabPanel>\n    <TabPanel>\n      Tab Panel 3\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n')),(0,o.kt)("h3",null,"Orientation and variants"),(0,o.kt)("p",null,"Tabs can either be oriented horizontally or vertically, and can also be styled with different variants."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"orientation")," prop to set the orientation of the tabs. It accepts ",(0,o.kt)("inlineCode",{parentName:"li"},"horizontal")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"vertical")," as values."),(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"variant")," prop to set the variant of the tabs. It accepts ",(0,o.kt)("inlineCode",{parentName:"li"},"default"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"filled"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"unstyled")," as values.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"function Example() {\n  const [orientation, setOrientation] = React.useState('horizontal');\n  const [variant, setVariant] = React.useState('default');\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <>\n      <Box mb=\"4x\">\n        <Box mb=\"2x\">\n          <TextLabel>\n            orientation\n          </TextLabel>\n        </Box>\n        <ButtonGroup>\n          <Button\n            onClick={() => setOrientation('horizontal')}\n            variant={orientation === 'horizontal' ? 'primary' : 'secondary'}\n          >\n            horizontal\n          </Button>\n          <Button\n            onClick={() => setOrientation('vertical')}\n            variant={orientation === 'vertical' ? 'primary' : 'secondary'}\n          >\n            vertical\n          </Button>\n        </ButtonGroup>\n      </Box>\n      <Box mb=\"4x\">\n        <Box mb=\"2x\">\n          <TextLabel>\n            variant\n          </TextLabel>\n        </Box>\n        <ButtonGroup>\n          <Button\n            onClick={() => setVariant('default')}\n            variant={variant === 'default' ? 'primary' : 'secondary'}\n          >\n            default\n          </Button>\n          <Button\n            onClick={() => setVariant('filled')}\n            variant={variant === 'filled' ? 'primary' : 'secondary'}\n          >\n            filled\n          </Button>\n          <Button\n            onClick={() => setVariant('unstyled')}\n            variant={variant === 'unstyled' ? 'primary' : 'secondary'}\n          >\n            unstyled\n          </Button>\n        </ButtonGroup>\n      </Box>\n      <Divider mb=\"4x\" />\n      <Tabs\n        orientation={orientation}\n        variant={variant}\n      >\n        <TabList>\n          <Tab>TAB 1</Tab>\n          <Tab>TAB 2</Tab>\n          <Tab>TAB 3</Tab>\n        </TabList>\n        <TabPanels px=\"3x\" py=\"2x\">\n          <TabPanel>\n            Tab Panel 1\n          </TabPanel>\n          <TabPanel>\n            Tab Panel 2\n          </TabPanel>\n          <TabPanel>\n            Tab Panel 3\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n}\n")),(0,o.kt)("h3",null,"Decorate horizontal tabs with a bottom border"),(0,o.kt)("p",null,"To decorate horizontal tabs with a bottom border, you can pass ",(0,o.kt)("inlineCode",{parentName:"p"},"__after")," prop to ",(0,o.kt)("inlineCode",{parentName:"p"},"TabList")," to render a bottom border."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const MyTabGroup = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  return (\n    <TabList\n      position="relative"\n      __after={{\n        content: \'""\',\n        borderBottom: 1,\n        borderBottomColor: colorStyle.divider,\n        position: \'absolute\',\n        bottom: 0,\n        width: \'100%\',\n        ...props.__after,\n      }}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  return (\n    <Flex flexDirection="column" rowGap="4x">\n      <Box>\n        <Text fontSize="lg" lineHeight="lg" mb="2x">\n          Left-aligned\n        </Text>\n        <Box backgroundColor={colorStyle.background.secondary} p="4x">\n          <Tabs>\n            <MyTabGroup justifyContent="flex-start">\n              <Tab>TAB 1</Tab>\n              <Tab>TAB 2</Tab>\n              <Tab>TAB 3</Tab>\n            </MyTabGroup>\n          </Tabs>\n        </Box>\n      </Box>\n      <Box>\n        <Text fontSize="lg" lineHeight="lg" mb="2x">\n          Centered\n        </Text>\n        <Box backgroundColor={colorStyle.background.secondary} p="4x">\n          <Tabs>\n            <MyTabGroup justifyContent="center">\n              <Tab>TAB 1</Tab>\n              <Tab>TAB 2</Tab>\n              <Tab>TAB 3</Tab>\n            </MyTabGroup>\n          </Tabs>\n        </Box>\n      </Box>\n      <Box>\n        <Text fontSize="lg" lineHeight="lg" mb="2x">\n          Right-aligned\n        </Text>\n        <Box backgroundColor={colorStyle.background.secondary} p="4x">\n          <Tabs>\n            <MyTabGroup justifyContent="flex-end">\n              <Tab>TAB 1</Tab>\n              <Tab>TAB 2</Tab>\n              <Tab>TAB 3</Tab>\n            </MyTabGroup>\n          </Tabs>\n        </Box>\n      </Box>\n      <Box>\n        <Text fontSize="lg" lineHeight="lg" mb="2x">\n          Full width\n        </Text>\n        <Box backgroundColor={colorStyle.background.secondary} p="4x">\n          <Tabs>\n            <MyTabGroup>\n              <Tab width="100%">TAB 1</Tab>\n              <Tab width="100%">TAB 2</Tab>\n              <Tab width="100%">TAB 3</Tab>\n            </MyTabGroup>\n          </Tabs>\n        </Box>\n      </Box>\n      <Box>\n        <Text fontSize="lg" lineHeight="lg" mb="2x">\n          Auto-sizing\n        </Text>\n        <Box backgroundColor={colorStyle.background.secondary} p="4x">\n          <Tabs>\n            <MyTabGroup display="inline-flex">\n              <Tab>TAB 1</Tab>\n              <Tab>TAB 2</Tab>\n              <Tab>TAB 3</Tab>\n            </MyTabGroup>\n          </Tabs>\n        </Box>\n      </Box>\n    </Flex>\n  );\n}\n\nrender(<Example />);\n')),(0,o.kt)("h3",null,"Access the state of tabs"),(0,o.kt)("p",null,"Sometimes you need to access the state of tabs. For example, you may want to lazily load the content of a tab when that tab is selected."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Tabs"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Tab"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"TabPanel")," components expose internal state using ",(0,o.kt)("strong",{parentName:"p"},"Function as Children (FaCC)"),". This is not a recommended approach, but it is useful for this use case."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs defaultIndex={1}>\n  {({ index: selectedIndex }) => (\n    <>\n      <Box mb="2x">\n        TAB {selectedIndex} is selected\n      </Box>\n      <TabList>\n        {[1, 2, 3].map(tabIndex => (\n          <Tab key={tabIndex} index={tabIndex}>\n            {({ getTabProps, disabled, index, variant }) => {\n              return (\n                <Box {...getTabProps()}>\n                  TAB {index}\n                </Box>\n              );\n            }}\n          </Tab>\n        ))}\n      </TabList>\n      <TabPanels px="3x" py="2x">\n        {[1, 2, 3].map(tabPanelIndex => (\n          <TabPanel key={tabPanelIndex} index={tabPanelIndex}>\n            {({ getTabPanelProps, index, variant }) => {\n              return (\n                <Box {...getTabPanelProps()}>\n                  Tab Panel {index}\n                </Box>\n              );\n            }}\n          </TabPanel>\n        ))}\n      </TabPanels>\n    </>\n  )}\n</Tabs>\n')),(0,o.kt)("h3",null,"Tabs with dropdown menus"),(0,o.kt)("p",null,"The tab with the dropdown menu is usually the last tab. You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"event.preventDefault()")," to control whether the tab will be selected when the user clicks the dropdown menu."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs variant="default">\n  <TabList>\n    <Tab>TAB 1</Tab>\n    <Tab>TAB 2</Tab>\n    <Tab\n      onClick={(event) => {\n        const value = event.target.getAttribute(\'value\');\n        if (!value) {\n          event.preventDefault();\n          return;\n        }\n        console.log(\'Menu Item \' + value + \' clicked\');\n      }}\n    >\n      <Menu offset={[-14, 10]}>\n        <MenuToggle alignItems="center">\n          TAB 3\n          <Space width="1x" />\n          <MenuToggleIcon />\n        </MenuToggle>\n        <MenuList\n          width="max-content"\n        >\n          <MenuItem value={1}>Menu Item 1</MenuItem>\n          <MenuItem value={2}>Menu Item 2</MenuItem>\n          <MenuItem value={3}>Menu Item 3</MenuItem>\n        </MenuList>\n      </Menu>\n    </Tab>\n  </TabList>\n</Tabs>\n')),(0,o.kt)("h3",null,"Draggable tabs with dropdown menus"),(0,o.kt)("p",null,"Use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/atlassian/react-beautiful-dnd"},"react-beautiful-dnd")," to make tabs draggable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nrender(() => {\n  const [items, setItems] = React.useState([\n    {\n      id: 'tab-1',\n      label: 'TAB 1',\n      content: 'TAB 1',\n      dropdown: {\n        items: [\n          { id: 'menuitem-1', label: 'Menu Item 1' },\n          { id: 'menuitem-2', label: 'Menu Item 2' },\n          { id: 'menuitem-3', label: 'Menu Item 3' },\n        ],\n      },\n    },\n    {\n      id: 'tab-2',\n      label: 'TAB 2',\n      content: 'TAB 2',\n    },\n    {\n      id: 'tab-3',\n      label: 'TAB 3',\n      content: 'TAB 3',\n    },\n  ]);\n  const onDragEnd = (result) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const nextItems = reorder(items, result.source.index, result.destination.index);\n    setItems(nextItems);\n  };\n\n  return (\n    <Tabs\n      orientation=\"horizontal\"\n    >\n      <rbd.DragDropContext\n        onDragEnd={onDragEnd}\n      >\n        <rbd.Droppable\n          droppableId=\"droppable\"\n          direction=\"horizontal\"\n        >\n          {(droppableProvided, droppableSnapshot) => (\n            <TabList\n              ref={droppableProvided.innerRef}\n              {...droppableProvided.droppableProps}\n            >\n              {items.map((item, index) => (\n                <rbd.Draggable\n                  key={item.id}\n                  draggableId={item.id}\n                  index={index}\n                >\n                  {(draggableProvided, draggableSnapshot) => (\n                    <Box\n                      ref={draggableProvided.innerRef}\n                      {...draggableProvided.draggableProps}\n                      {...draggableProvided.dragHandleProps}\n                      style={{\n                        ...draggableProvided.draggableProps.style,\n                      }}\n                    >\n                      {!item.dropdown && (\n                        <Tab\n                          as={Box}\n                          index={index}\n                        >\n                          {item.label}\n                        </Tab>\n                      )}\n                      {item.dropdown && (\n                        <Tab\n                          as={Box}\n                          onClick={(event) => {\n                            const value = event.target.getAttribute('value');\n                            if (!value) {\n                              event.preventDefault();\n                              return;\n                            }\n                            console.log('Menu Item ' + value + ' clicked');\n                          }}\n                        >\n                          <Menu offset={[-14, 10]}>\n                            <MenuToggle alignItems=\"center\">\n                              {item.label}\n                              <Space width=\"1x\" />\n                              <MenuToggleIcon />\n                            </MenuToggle>\n                            <MenuList\n                              width=\"max-content\"\n                            >\n                              {item.dropdown.items.map(x => (\n                                <MenuItem key={x.id} value={x.id}>\n                                  {x.label}\n                                </MenuItem>\n                              ))}\n                            </MenuList>\n                          </Menu>\n                        </Tab>\n                      )}\n                    </Box>\n                  )}\n                </rbd.Draggable>\n              ))}\n              {droppableProvided.placeholder}\n            </TabList>\n          )}\n        </rbd.Droppable>\n      </rbd.DragDropContext>\n      <TabPanels px=\"3x\" py=\"2x\">\n        {items.map((item, index) => (\n          <TabPanel\n            key={item.id}\n            index={index}\n          >\n            {item.content}\n          </TabPanel>\n        ))}\n      </TabPanels>\n    </Tabs>\n  );\n});\n")),(0,o.kt)("h3",null,"Scrollable tabs"),(0,o.kt)("p",null,"Scrollable tabs are useful when the tab list is longer than the tab container. You can use the following code to create a scrollable tabs."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This example teaches you how to create a scrollable tabs that supports drag-to-scroll behavior. Scrolling tabs is currently not part of this component library.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const easeInOutSin = (time) => {\n  return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;\n};\n\nconst animate = (property, element, to, options = {}, cb = () => {}) => {\n  const {\n    ease = easeInOutSin,\n    duration = 300, // standard\n  } = options;\n\n  let start = null;\n  const from = element[property];\n  let cancelled = false;\n\n  const cancel = () => {\n    cancelled = true;\n  };\n\n  const step = (timestamp) => {\n    if (cancelled) {\n      cb(new Error('Animation cancelled'));\n      return;\n    }\n\n    if (start === null) {\n      start = timestamp;\n    }\n    const time = Math.min(1, (timestamp - start) / duration);\n\n    element[property] = ease(time) * (to - from) + from;\n\n    if (time >= 1) {\n      requestAnimationFrame(() => {\n        cb(null);\n      });\n      return;\n    }\n\n    requestAnimationFrame(step);\n  };\n\n  if (from === to) {\n    cb(new Error('Element already at target position'));\n    return cancel;\n  }\n\n  requestAnimationFrame(step);\n  return cancel;\n};\n\nconst debounce = (func, wait = 166) => {\n  let timeout;\n  function debounced(...args) {\n    const later = () => {\n      func.apply(this, args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  }\n\n  debounced.clear = () => {\n    clearTimeout(timeout);\n  };\n\n  return debounced;\n}\n\nconst IconButton = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  return (\n    <ButtonBase\n      px=\"2x\"\n      color={colorStyle.color.secondary}\n      tabIndex={0}\n      _disabled={{\n        color: colorStyle.color.disabled,\n      }}\n      _hover={{\n        color: colorStyle.color.primary,\n      }}\n      {...props}\n    />\n  );\n};\n\nconst StartScrollIndicator = React.forwardRef((props, ref) => (\n  <Box\n    ref={ref}\n    position=\"relative\"\n    __after={{\n      content: '\"\"',\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      width: '4x',\n      background: 'linear-gradient(to right, rgba(21, 21, 21, 1) 0%, rgba(21, 21, 21, 0) 100%)',\n    }}\n    {...props}\n  />\n));\n\nconst EndScrollIndicator = React.forwardRef((props, ref) => (\n  <Box\n    ref={ref}\n    position=\"relative\"\n    __after={{\n      content: '\"\"',\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      right: 0,\n      width: '4x',\n      background: 'linear-gradient(to left, rgba(21, 21, 21, 1) 0%, rgba(21, 21, 21, 0) 100%)',\n    }}\n    {...props}\n  />\n));\n\nconst useDragToScroll = (ref, options) => {\n  const {\n    direction = 'both', // One of: 'vertical', 'horizontal', 'both'\n  } = { ...options };\n\n  const position = {\n    scrollTop: 0,\n    scrollLeft: 0,\n    mouseX: 0,\n    mouseY: 0,\n  };\n\n  React.useEffect(() => {\n    const el = ref && ref.current;\n    if (!el) {\n      return;\n    }\n\n    const mouseMoveHandler = (event) => {\n      const dx = event.clientX - position.mouseX;\n      const dy = event.clientY - position.mouseY;\n      if (direction !== 'horizontal') {\n        el.scrollTop = position.scrollTop - dy;\n      }\n      if (direction !== 'vertical') {\n        el.scrollLeft = position.scrollLeft - dx;\n      }\n    };\n\n    const mouseUpHandler = () => {\n      el.style.cursor = 'grab';\n      el.style.removeProperty('user-select');\n      document.removeEventListener('mousemove', mouseMoveHandler);\n      document.removeEventListener('mouseup', mouseUpHandler);\n    };\n\n    const onMouseDown = (event) => {\n      position.scrollLeft = el.scrollLeft;\n      position.scrollTop = el.scrollTop;\n      position.mouseX = event.clientX;\n      position.mouseY = event.clientY;\n      el.style.cursor = 'grabbing';\n      el.style.userSelect = 'none';\n      document.addEventListener('mousemove', mouseMoveHandler);\n      document.addEventListener('mouseup', mouseUpHandler);\n    };\n\n    el.addEventListener('mousedown', onMouseDown);\n    return () => {\n      el.removeEventListener('mousedown', onMouseDown);\n    }\n  }, [ref]);\n\n  return position;\n};\n\nfunction Example() {\n  const startScrollIndicatorRef = React.useRef();\n  const endScrollIndicatorRef = React.useRef();\n  const [colorMode] = useColorMode();\n  const orientation = 'horizontal';\n  const scrollStart = (orientation === 'vertical') ? 'scrollTop' : 'scrollLeft';\n  const clientSize = (orientation === 'vertical') ? 'clientHeight' : 'clientWidth';\n  const [displayScroll, setDisplayScroll] = React.useState({\n    start: false,\n    end: false,\n  });\n  const tabScrollerRef = React.useRef(null);\n  const tabListRef = React.useRef(null);\n  const position = useDragToScroll(tabScrollerRef);\n\n  const scroll = (scrollValue, { animation = true } = {}) => {\n    if (animation) {\n      animate(scrollStart, tabScrollerRef.current, scrollValue, {\n        duration: 300,\n      });\n    } else {\n      tabScrollerRef.current[scrollStart] = scrollValue;\n    }\n  };\n  const moveTabsScroll = (delta) => {\n    let scrollValue = tabScrollerRef.current[scrollStart];\n    scrollValue += delta;\n    scroll(scrollValue);\n  };\n  // TODO: use Intersection Observer API to get expected scroll position\n  const getScrollSize = () => {\n    const containerSize = tabScrollerRef.current[clientSize];\n    let totalSize = 0;\n    const children = Array.from(tabListRef.current.children);\n    for (let i = 0; i < children.length; i += 1) {\n      const tab = children[i];\n      if (totalSize + tab[clientSize] > containerSize) {\n        break;\n      }\n      totalSize += tab[clientSize];\n    }\n    return totalSize;\n  };\n  const handleScrollTabs = React.useMemo(() => {\n    return debounce(() => {\n      updateScrollButtonState();\n      updateScrollIndicatorOpacity();\n    }, Math.floor(1000 / 60));\n  }, [updateScrollButtonState]);\n  const handleStartScrollClick = () => {\n    moveTabsScroll(-1 * getScrollSize());\n  };\n  const handleEndScrollClick = () => {\n    moveTabsScroll(getScrollSize());\n  };\n  const updateScrollButtonState = React.useCallback(() => {\n    let showStartScroll;\n    let showEndScroll;\n\n    if (orientation === 'vertical') {\n      const { scrollTop, scrollHeight, clientHeight } = tabScrollerRef.current;\n      showStartScroll = scrollTop > 1;\n      showEndScroll = scrollTop < scrollHeight - clientHeight - 1;\n    } else {\n      const { scrollLeft, scrollWidth, clientWidth } = tabScrollerRef.current;\n      // use 1 for the potential rounding error with browser zooms.\n      showStartScroll = scrollLeft > 1;\n      showEndScroll = scrollLeft < scrollWidth - clientWidth - 1;\n    }\n\n    if ((showStartScroll !== displayScroll.start) || (showEndScroll !== displayScroll.end)) {\n      setDisplayScroll({\n        start: showStartScroll,\n        end: showEndScroll,\n      });\n    }\n  }, []);\n  const updateScrollIndicatorOpacity = () => {\n    const { scrollLeft, scrollWidth, clientWidth } = tabScrollerRef.current;\n    const startScrollOpacity = 1 / 20 * Math.min(scrollLeft, 20);\n    const endScrollOpacity = 1 / 20 * ((scrollWidth - clientWidth) - Math.max(scrollLeft, (scrollWidth - clientWidth - 20)));\n    if (startScrollIndicatorRef.current) {\n      startScrollIndicatorRef.current.style.opacity = startScrollOpacity;\n    }\n    if (endScrollIndicatorRef.current) {\n      endScrollIndicatorRef.current.style.opacity = endScrollOpacity;\n    }\n  };\n\n  React.useEffect(() => {\n    return () => {\n      handleScrollTabs.clear();\n    };\n  }, [handleScrollTabs]);\n\n  React.useEffect(() => {\n    updateScrollButtonState();\n    updateScrollIndicatorOpacity();\n  }, []);\n\n  return (\n    <Tabs>\n      <Flex>\n        <IconButton\n          disabled={!displayScroll.start}\n          onClick={handleStartScrollClick}\n        >\n          <Icon icon=\"angle-left\" />\n        </IconButton>\n        <StartScrollIndicator ref={startScrollIndicatorRef} />\n        <Box\n          ref={tabScrollerRef}\n          maxWidth={280}\n          overflowX=\"hidden\"\n          whiteSpace=\"nowrap\"\n          onScroll={handleScrollTabs}\n        >\n          <TabList\n            ref={tabListRef}\n          >\n            <Tab>TAB 1</Tab>\n            <Tab>TAB 2</Tab>\n            <Tab>TAB 3</Tab>\n            <Tab>TAB 4</Tab>\n            <Tab>TAB 5</Tab>\n            <Tab>TAB 6</Tab>\n            <Tab>TAB 7</Tab>\n            <Tab>TAB 8</Tab>\n            <Tab>TAB 9</Tab>\n            <Tab>TAB 10</Tab>\n          </TabList>\n        </Box>\n        <EndScrollIndicator ref={endScrollIndicatorRef} />\n        <IconButton\n          disabled={!displayScroll.end}\n          onClick={handleEndScrollClick}\n        >\n          <Icon icon=\"angle-right\" />\n        </IconButton>\n      </Flex>\n      <TabPanels px=\"3x\" py=\"2x\">\n        <TabPanel>\n          Tab Panel 1\n        </TabPanel>\n        <TabPanel>\n          Tab Panel 2\n        </TabPanel>\n        <TabPanel>\n          Tab Panel 3\n        </TabPanel>\n        <TabPanel>\n          Tab Panel 4\n        </TabPanel>\n        <TabPanel>\n          Tab Panel 5\n        </TabPanel>\n        <TabPanel>\n          Tab Panel 6\n        </TabPanel>\n        <TabPanel>\n          Tab Panel 7\n        </TabPanel>\n        <TabPanel>\n          Tab Panel 8\n        </TabPanel>\n        <TabPanel>\n          Tab Panel 9\n        </TabPanel>\n        <TabPanel>\n          Tab Panel 10\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n\nrender(<Example />);\n")),(0,o.kt)("h3",null,"Customization"),(0,o.kt)("p",null,"Tabs also come with an ",(0,o.kt)("inlineCode",{parentName:"p"},"unstyled")," variant. It's useful for doing customizations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const CustomTabList = (props) => {\n  const context = useTabs();\n  const orientation = context.orientation;\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  let styleProps = {\n    backgroundColor: colorStyle.background.primary,\n    position: 'relative',\n  };\n\n  if (orientation === 'horizontal') {\n    styleProps = {\n      ...styleProps,\n      __after: {\n        content: '\"\"',\n        borderBottom: 1,\n        borderBottomColor: colorStyle.divider,\n        position: 'absolute',\n        bottom: 0,\n        width: '100%',\n      },\n    };\n  }\n\n  if (orientation === 'vertical') {\n    styleProps = {\n      ...styleProps,\n      alignItems: 'flex-start',\n    };\n  }\n\n  return (\n    <TabList\n      {...styleProps}\n      {...props}\n    />\n  );\n};\n\nconst CustomTab = ({ children, ...rest }) => {\n  const context = useTabs();\n  const orientation = context.orientation;\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const { colors } = useTheme();\n  const baseStyle = {\n    backgroundColor: colorStyle.background.primary,\n    color: colorStyle.color.secondary,\n    px: '4x',\n    py: '3x',\n    position: 'relative',\n    zIndex: 1,\n    _disabled: {\n      color: colorStyle.color.disabled,\n      cursor: 'not-allowed',\n    },\n    _hover: {\n      color: colorStyle.color.primary,\n    },\n  };\n\n  if (orientation === 'horizontal') {\n    const styleProps = {\n      ...baseStyle,\n      border: 1,\n      borderColor: colorStyle.divider,\n      _notLastOfType: {\n        borderRight: 'none',\n      },\n      _selected: {\n        borderBottomColor: 'transparent',\n        background: colorStyle.background.primary,\n        color: colorStyle.color.primary,\n        '::before': {\n          content: '\"\"',\n          position: 'absolute',\n          top: -1,\n          left: -1,\n          right: 0,\n          height: 3,\n          backgroundColor: '#2cc185',\n        },\n      },\n    };\n\n    return (\n      <Tab\n        {...styleProps}\n        {...rest}\n      >\n        {children}\n      </Tab>\n    );\n  }\n\n  if (orientation === 'vertical') {\n    const styleProps = {\n      ...baseStyle,\n      borderBottom: 1,\n      borderBottomColor: colorStyle.divider,\n      textAlign: 'left',\n      width: '100%',\n      _selected: {\n        borderLeftColor: colorStyle.background.primary,\n        background: colorStyle.background.primary,\n        color: colorStyle.color.primary,\n        '::before': {\n          content: '\"\"',\n          position: 'absolute',\n          top: 0,\n          bottom: 0,\n          left: 0,\n          width: 3,\n          backgroundColor: '#2cc185',\n        },\n      },\n    };\n\n    return (\n      <Tab\n        {...styleProps}\n        {...rest}\n      >\n        {({ getTabProps, index, isSelected }) => (\n          <Box\n            {...getTabProps()}\n            pr=\"1x\"\n          >\n            <Flex justifyContent=\"space-between\">\n              <Box>{children}</Box>\n              <Icon icon=\"chevron-right\" ml=\"4x\" visibility={isSelected ? 'visible' : 'hidden'} />\n            </Flex>\n          </Box>\n        )}\n      </Tab>\n    );\n  }\n\n  return null;\n};\n\nfunction Example() {\n  const [orientation, setOrientation] = React.useState('horizontal');\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <>\n      <Box mb=\"2x\">\n        <TextLabel>\n          orientation\n        </TextLabel>\n      </Box>\n      <ButtonGroup>\n        <Button\n          onClick={() => setOrientation('horizontal')}\n          variant={orientation === 'horizontal' ? 'primary' : 'secondary'}\n        >\n          Horizontal\n        </Button>\n        <Button\n          onClick={() => setOrientation('vertical')}\n          variant={orientation === 'vertical' ? 'primary' : 'secondary'}\n        >\n          Vertical\n        </Button>\n      </ButtonGroup>\n      <Divider my=\"4x\" />\n      <Tabs\n        orientation={orientation}\n        variant=\"unstyled\"\n      >\n        <CustomTabList>\n          <CustomTab>\n            <FontAwesomeIcon icon=\"fa-solid fa-home\" />\n            <Space width=\"2x\" />\n            HOME\n          </CustomTab>\n          <CustomTab>\n            <FontAwesomeIcon icon=\"fa-solid fa-boxes\" />\n            <Space width=\"2x\" />\n            INVENTORY\n          </CustomTab>\n          <CustomTab>\n            <FontAwesomeIcon icon=\"fa-solid fa-cogs\" />\n            <Space width=\"2x\" />\n            SETTINGS\n          </CustomTab>\n        </CustomTabList>\n        <TabPanels px=\"4x\" py=\"3x\">\n          <TabPanel>\n            <Text color={colorStyle.color.secondary} fontSize=\"4rem\" lineHeight=\"1\">\n                1\n            </Text>\n          </TabPanel>\n          <TabPanel>\n            <Text color={colorStyle.color.secondary} fontSize=\"4rem\" lineHeight=\"1\">\n              2\n            </Text>\n          </TabPanel>\n          <TabPanel>\n            <Text color={colorStyle.color.secondary} fontSize=\"4rem\" lineHeight=\"1\">\n              3\n            </Text>\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n}\n\nrender(<Example />);\n")),(0,o.kt)("h2",null,"Props"),(0,o.kt)("h3",null,"Tab"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"children"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," ({ getTabProps, disabled, index, isSelected }) => ReactNode"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"A function child can be used intead of a React element. This function is called with the following props:",(0,o.kt)("br",null),"\u2022 The ",(0,o.kt)("inlineCode",{parentName:"td"},"getTabProps")," function returns the props for the tab.",(0,o.kt)("br",null),"\u2022 The ",(0,o.kt)("inlineCode",{parentName:"td"},"disabled")," prop indicates whether the tab is disabled.",(0,o.kt)("br",null),"\u2022 The ",(0,o.kt)("inlineCode",{parentName:"td"},"index")," prop is the index of the tab.",(0,o.kt)("br",null),"\u2022 The ",(0,o.kt)("inlineCode",{parentName:"td"},"isSelected")," prop is a boolean value indicating whether the tab is selected.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,o.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"Whether the tab is disabled.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"index"),(0,o.kt)("td",{parentName:"tr",align:"left"},"number ","|"," string"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"The index of the tab. An index number starting from 0 will be provided if not specified.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"onClick"),(0,o.kt)("td",{parentName:"tr",align:"left"},"(event) => void"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"A callback for when the tab is clicked.")))),(0,o.kt)("h3",null,"Tabs"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"children"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," (context) => ReactNode"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"A function child can be used intead of a React element. This function is called with the context object.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"defaultIndex"),(0,o.kt)("td",{parentName:"tr",align:"left"},"number ","|"," string"),(0,o.kt)("td",{parentName:"tr",align:"left"},"0"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The default index of the tab to be selected in uncontrolled mode.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,o.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"Whether the tabs should be disabled.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"index"),(0,o.kt)("td",{parentName:"tr",align:"left"},"number ","|"," string"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"The index of the tab to be selected in controlled mode.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"onChange"),(0,o.kt)("td",{parentName:"tr",align:"left"},"(index: number","|","string) => void"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"A callback function that is called when the index changes.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"orientation"),(0,o.kt)("td",{parentName:"tr",align:"left"},"string"),(0,o.kt)("td",{parentName:"tr",align:"left"},"'horizontal'"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The orientation of the tabs. One of: 'horizontal', 'vertical'")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,o.kt)("td",{parentName:"tr",align:"left"},"string"),(0,o.kt)("td",{parentName:"tr",align:"left"},"'default'"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The variant of the tabs. One of: 'default', 'filled', 'unstyled'")))),(0,o.kt)("h3",null,"TabList"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"aria-label"),(0,o.kt)("td",{parentName:"tr",align:"left"},"string"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"A label for the tab list.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"children"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"})))),(0,o.kt)("h3",null,"TabPanel"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"children"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," ({ getTabPanelProps, index, isSelected }) => ReactNode"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"A function child can be used intead of a React element. This function is called with the following props:",(0,o.kt)("br",null),"\u2022 The ",(0,o.kt)("inlineCode",{parentName:"td"},"getTabPanelProps")," function returns the props for the tab panel.",(0,o.kt)("br",null),"\u2022 The ",(0,o.kt)("inlineCode",{parentName:"td"},"index")," prop is the index of the tab panel.",(0,o.kt)("br",null),"\u2022 The ",(0,o.kt)("inlineCode",{parentName:"td"},"isSelected")," prop is a boolean value indicating whether the corresponding tab is selected.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"index"),(0,o.kt)("td",{parentName:"tr",align:"left"},"number ","|"," string"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"The index of the tab panel. An index number starting from 0 will be provided if not specified.")))),(0,o.kt)("h3",null,"TabPanels"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"children"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"})))),(0,o.kt)("h2",null,"Further Reading"),(0,o.kt)("h3",null,(0,o.kt)("a",{parentName:"h3",href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tab_role"},"ARIA: tab role")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This example combines the role ",(0,o.kt)("inlineCode",{parentName:"p"},"tab")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"tablist")," and elements with ",(0,o.kt)("inlineCode",{parentName:"p"},"tabpanel")," to create an interactive group of tabbed content. Here we are enclosing our group of content in a ",(0,o.kt)("inlineCode",{parentName:"p"},"div"),", with our ",(0,o.kt)("inlineCode",{parentName:"p"},"tablist")," having an ",(0,o.kt)("inlineCode",{parentName:"p"},"aria-label")," which labels it for assistive technology. Each ",(0,o.kt)("inlineCode",{parentName:"p"},"tab")," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"button")," with the attributes previously mentioned. The first ",(0,o.kt)("inlineCode",{parentName:"p"},"tab")," has both ",(0,o.kt)("inlineCode",{parentName:"p"},'tabindex="0"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'aria-selected="true"')," applied. These two attributes must always be coordinated as such\u2014so when another tab is selected, it will then have ",(0,o.kt)("inlineCode",{parentName:"p"},'tabindex="0"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'aria-selected="true"')," applied. All unselected tabs must have ",(0,o.kt)("inlineCode",{parentName:"p"},'aria-selected="false"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'tabindex="-1"'),".",(0,o.kt)("br",null),(0,o.kt)("br",null),"\nAll of the ",(0,o.kt)("inlineCode",{parentName:"p"},"tabpanel")," elements have ",(0,o.kt)("inlineCode",{parentName:"p"},'tabindex="0"')," to make them tabbable, and all but the currently active one have the ",(0,o.kt)("inlineCode",{parentName:"p"},"hidden")," attribute. The ",(0,o.kt)("inlineCode",{parentName:"p"},"hidden")," attribute will be removed when a ",(0,o.kt)("inlineCode",{parentName:"p"},"tabpanel")," becomes visible with JavaScript. There is some basic styling applied that restyles the buttons and changes the ",(0,o.kt)("inlineCode",{parentName:"p"},"z-index")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"tab")," elements to give the illusion of it connecting to the ",(0,o.kt)("inlineCode",{parentName:"p"},"tabpanel")," for active elements, and the illusion that inactive elements are behind the active ",(0,o.kt)("inlineCode",{parentName:"p"},"tabpanel"),".",(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  <div class="tabs">\n    <div role="tablist" aria-label="Sample Tabs">\n      <button role="tab" aria-selected="true" aria-controls="panel-1" id="tab-1" tabindex="0">\n        First Tab\n      </button>\n      <button role="tab" aria-selected="false" aria-controls="panel-2" id="tab-2" tabindex="-1">\n        Second Tab\n      </button>\n      <button role="tab" aria-selected="false" aria-controls="panel-3" id="tab-3" tabindex="-1">\n        Third Tab\n      </button>\n    </div>\n    <div id="panel-1" role="tabpanel" tabindex="0" aria-labelledby="tab-1">\n      <p>Content for the first panel</p>\n    </div>\n    <div id="panel-2" role="tabpanel" tabindex="0" aria-labelledby="tab-2" hidden>\n      <p>Content for the second panel</p>\n    </div>\n    <div id="panel-3" role="tabpanel" tabindex="0" aria-labelledby="tab-3" hidden>\n      <p>Content for the third panel</p>\n    </div>\n  </div>\n'))),(0,o.kt)("h3",null,(0,o.kt)("a",{parentName:"h3",href:"https://www.w3.org/TR/wai-aria-practices/#tabpanel"},"WAI-ARIA Roles, States, and Properties")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The element that serves as the container for the set of tabs has role ",(0,o.kt)("inlineCode",{parentName:"li"},"tablist"),"."),(0,o.kt)("li",{parentName:"ul"},"Each element that serves as a tab has role ",(0,o.kt)("inlineCode",{parentName:"li"},"tab")," and is contained within the element with role ",(0,o.kt)("inlineCode",{parentName:"li"},"tablist"),"."),(0,o.kt)("li",{parentName:"ul"},"Each element that contains the content panel for a ",(0,o.kt)("inlineCode",{parentName:"li"},"tab")," has role ",(0,o.kt)("inlineCode",{parentName:"li"},"tabpanel"),"."),(0,o.kt)("li",{parentName:"ul"},"If the tab list has a visible label, the element with role ",(0,o.kt)("inlineCode",{parentName:"li"},"tablist")," has ",(0,o.kt)("inlineCode",{parentName:"li"},"aria-labelledby")," set to a value that refers to the labelling element. Otherwise, the ",(0,o.kt)("inlineCode",{parentName:"li"},"tablist")," element has a label provided by ",(0,o.kt)("inlineCode",{parentName:"li"},"aria-label"),"."),(0,o.kt)("li",{parentName:"ul"},"Each element with role ",(0,o.kt)("inlineCode",{parentName:"li"},"tab")," has the property ",(0,o.kt)("inlineCode",{parentName:"li"},"aria-controls")," referring to its associated ",(0,o.kt)("inlineCode",{parentName:"li"},"tabpanel")," element."),(0,o.kt)("li",{parentName:"ul"},"The active ",(0,o.kt)("inlineCode",{parentName:"li"},"tab")," element has the state ",(0,o.kt)("inlineCode",{parentName:"li"},"aria-selected")," set to ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," and all other ",(0,o.kt)("inlineCode",{parentName:"li"},"tab")," elements have it set to ",(0,o.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,o.kt)("li",{parentName:"ul"},"Each element with role ",(0,o.kt)("inlineCode",{parentName:"li"},"tabpanel")," has the property ",(0,o.kt)("inlineCode",{parentName:"li"},"aria-labelledby")," referring to its associated ",(0,o.kt)("inlineCode",{parentName:"li"},"tab")," element."),(0,o.kt)("li",{parentName:"ul"},"If a ",(0,o.kt)("inlineCode",{parentName:"li"},"tab")," element has a popup menu, it has the property ",(0,o.kt)("inlineCode",{parentName:"li"},"aria-haspopup")," set to either ",(0,o.kt)("inlineCode",{parentName:"li"},"menu")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,o.kt)("li",{parentName:"ul"},"If the ",(0,o.kt)("inlineCode",{parentName:"li"},"tablist")," element is vertically oriented, it has the property ",(0,o.kt)("inlineCode",{parentName:"li"},"aria-orientation")," set to ",(0,o.kt)("inlineCode",{parentName:"li"},"vertical"),". The default value of ",(0,o.kt)("inlineCode",{parentName:"li"},"aria-orientation")," for a ",(0,o.kt)("inlineCode",{parentName:"li"},"tablist")," element is ",(0,o.kt)("inlineCode",{parentName:"li"},"horizontal"),".")))}s.isMDXComponent=!0},48514:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/tabs",function(){return t(3370)}])}},function(n){n.O(0,[9774,2888,179],(function(){return e=48514,n(n.s=e);var e}));var e=n.O();_N_E=e}]);