(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[624],{3174:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return i}});var o=t(7896),a=t(59740),s=(t(2784),t(30876)),r=["components"],m={};function i(n){var e=n.components,t=(0,a.Z)(n,r);return(0,s.kt)("wrapper",(0,o.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",null,"Date Picker"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Datepicker")," is used to select a date from a calendar or type in a date value manually. It is composed of ",(0,s.kt)("inlineCode",{parentName:"p"},"Calendar"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"DateInput"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"TimeInput"),"."),(0,s.kt)("h2",null,"Import"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Calendar,\n  DateInput,\n  TimeInput\n} from '@trendmicro/react-styled-ui';\n")),(0,s.kt)("h2",null,"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"<Calendar />\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'<Calendar dateValue="2021-05-15" maxDate="2021-05-28" minDate="2021-05-12" />\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"<DateInput zIndex={10} />\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const CustomPeriod = () => {\n  const today = new Date();\n  const todayTimestamp = today.getTime();\n  const [currentFocus, setCurrentFocus] = React.useState(null);\n  const [startTimestamp, setStartTimestamp] = React.useState(todayTimestamp);\n  const [endTimestamp, setEndTimestamp] = React.useState(todayTimestamp);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const bgColor = {\n    dark: colorStyle.background.tertiary,\n    light: colorStyle.background.primary\n  }[colorMode];\n  const shadowStyle = colorStyle.shadow.medium;\n\n  const onChangeStartDate = ({ timestamp }) => {\n    setStartTimestamp(timestamp);\n    setCurrentFocus(\'from\')\n  };\n\n  const onChangeEndDate = ({ timestamp }) => {\n    setEndTimestamp(timestamp);\n    setCurrentFocus(\'to\')\n  };\n\n  const startValue = currentFocus === \'to\' && startTimestamp > endTimestamp ? endTimestamp: startTimestamp;\n  const endValue = currentFocus === \'from\' && startTimestamp > endTimestamp ? startTimestamp : endTimestamp;\n\n  return (\n    <Box width={320} p="3x" bg={bgColor} boxShadow={shadowStyle}>\n      <Flex align="center" mb="6x">\n        <Icon icon="chevron-left" mr="3x"/>\n        <Text>Custom Period</Text>\n      </Flex>\n      <Stack spacing="3x" mb="3x">\n        <Flex align="center" justify="space-between">\n          <Text>From:</Text>\n          <Box>\n            <DateInput\n              zIndex={2}\n              value={startValue}\n              maxDate={today}\n              onChange={onChangeStartDate}\n            />\n            <TimeInput />\n          </Box>\n        </Flex>\n        <Flex align="center" justify="space-between">\n          <Text>To:</Text>\n          <Box>\n            <DateInput\n              zIndex={1}\n              value={endValue}\n              maxDate={today}\n              onChange={onChangeEndDate}\n            />\n            <TimeInput />\n          </Box>\n        </Flex>\n      </Stack>\n      <Stack direction="row" spacing="2x" justify="flex-end">\n        <Button variant="primary">Apply</Button>\n        <Button>Cancel</Button>\n      </Stack>\n    </Box>\n  );\n};\n\nrender(<CustomPeriod />);\n')),(0,s.kt)("h3",null,"Datetime menu"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const TIME_PERIOD = [{\n    key: 'last24Hrs',\n    name: 'Last 24 hours',\n    icon: '',\n},\n{\n    key: 'last7Days',\n    name: 'Last 7 days',\n    icon: '',\n},\n{\n    key: 'last30Days',\n    name: 'Last 30 days',\n    icon: '',\n},\n{\n    key: 'last90Days',\n    name: 'Last 90 days',\n    icon: '',\n}, {\n    key: 'customPeriod',\n    name: 'Custom Period',\n    icon: 'angle-right',\n}];\n\nconst TIME_PERIOD_KEY_NAME_MAPPING = TIME_PERIOD.reduce((accu, { key, name }) => {\n  accu[key] = name;\n  return accu;\n}, {});\n\nconst CustomPeriod = ({ onClose, onSubmit }) => {\n  const today = new Date();\n  const todayTimestamp = today.getTime();\n  const [currentFocus, setCurrentFocus] = React.useState(null);\n  const [startTimestamp, setStartTimestamp] = React.useState(todayTimestamp);\n  const [endTimestamp, setEndTimestamp] = React.useState(todayTimestamp);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const bgColor = {\n    dark: colorStyle.background.tertiary,\n    light: colorStyle.background.primary\n  }[colorMode];\n  const shadowStyle = colorStyle.shadow.medium;\n\n  const onChangeStartDate = ({ timestamp }) => {\n    setStartTimestamp(timestamp);\n    setCurrentFocus('from')\n  };\n\n  const onChangeEndDate = ({ timestamp }) => {\n    setEndTimestamp(timestamp);\n    setCurrentFocus('to')\n  };\n\n  const startValue = currentFocus === 'to' && startTimestamp > endTimestamp ? endTimestamp: startTimestamp;\n  const endValue = currentFocus === 'from' && startTimestamp > endTimestamp ? startTimestamp : endTimestamp;\n\n  return (\n    <Box width={320} p=\"3x\" bg={bgColor} boxShadow={shadowStyle}>\n      <Flex align=\"center\" mb=\"6x\">\n        <Icon icon=\"chevron-left\" mr=\"3x\" onClick={onClose} />\n        <Text>Custom Period</Text>\n      </Flex>\n      <Stack spacing=\"3x\" mb=\"3x\">\n        <Flex align=\"center\" justify=\"space-between\">\n          <Text>From:</Text>\n          <Box>\n            <DateInput\n              zIndex={2}\n              value={startValue}\n              maxDate={today}\n              onChange={onChangeStartDate}\n            />\n            <TimeInput />\n          </Box>\n        </Flex>\n        <Flex align=\"center\" justify=\"space-between\">\n          <Text>To:</Text>\n          <Box>\n            <DateInput\n              zIndex={1}\n              value={endValue}\n              maxDate={today}\n              onChange={onChangeEndDate}\n            />\n            <TimeInput />\n          </Box>\n        </Flex>\n      </Stack>\n      <Stack direction=\"row\" spacing=\"2x\" justify=\"flex-end\">\n        <Button onClick={() => onSubmit({ from: startTimestamp, to: endTimestamp })} variant=\"primary\">Apply</Button>\n        <Button onClick={onClose}>Cancel</Button>\n      </Stack>\n    </Box>\n  );\n};\n\nconst DatetimeMenu = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const [timePeriod, setTimePeriod] = React.useState('');\n  const [isOpenMenu, setIsOpenMenu] = React.useState(false);\n  const [customPeriod, setCustomPeriod] = React.useState({})\n  const isShowCustomPeriod = timePeriod === 'customPeriod' && !Object.keys(customPeriod).length;\n\n  React.useEffect(() => {\n    if (!!timePeriod) {\n      setIsOpenMenu(false);\n    }\n  }, [timePeriod]);\n\n  const onChangeTimePeriod = (key) => {\n    setTimePeriod(key);\n  };\n\n  const onCloseCustomPeriod = () => {\n    setTimePeriod('');\n    setIsOpenMenu(true);\n  };\n\n  const onSubmitCustomPeriod = (customePeriod) => {\n    setCustomPeriod(customePeriod);\n  };\n\n  return (\n    <Menu isOpen={isOpenMenu}>\n      <MenuButton width={216} onClick={() => {\n        setIsOpenMenu(true);\n        setTimePeriod('');\n        setCustomPeriod({});\n      }}>\n        <Text color={colorStyle.color.secondary} mr=\"1x\">Datected:</Text>\n        {TIME_PERIOD_KEY_NAME_MAPPING[timePeriod]}\n      </MenuButton>\n      { isShowCustomPeriod ? (\n        <CustomPeriod onClose={onCloseCustomPeriod} onSubmit={onSubmitCustomPeriod} />\n      ) : (\n        <MenuList overflow=\"auto\" width={216}>\n          { TIME_PERIOD.map(({key, name, icon}) =>{\n            return (\n              <MenuItem key={key} value={key} justifyContent=\"space-between\" onClick={() => onChangeTimePeriod(key)}>\n                {name}\n                {icon && <Icon icon={icon} /> }\n              </MenuItem>\n            )\n          }) }\n        </MenuList>\n      )}\n    </Menu>\n  )\n}\n\nrender(<DatetimeMenu />);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"<DateInput disabled />\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"<TimeInput />\n")),(0,s.kt)("h2",null,"Composition"),(0,s.kt)("h2",null,"Props"))}i.isMDXComponent=!0},88409:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/datepicker",function(){return t(3174)}])}},function(n){n.O(0,[9774,2888,179],(function(){return e=88409,n(n.s=e);var e}));var e=n.O();_N_E=e}]);