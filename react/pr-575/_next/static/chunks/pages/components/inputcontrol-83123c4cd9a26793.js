(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9435],{2226:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return p}});var a=n(7896),r=n(59740),o=(n(2784),n(30876)),l=["components"],i={};function p(t){var e=t.components,n=(0,r.Z)(t,l);return(0,o.kt)("wrapper",(0,a.Z)({},i,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",null,"InputControl"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"InputControl")," is built on top of the native ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," with the same appearance and behavior, except that it allows you to customize the input in a more convenient way. For example, input adornments can be added to the start, end, or both sides of the input."),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"input"},"Input")," component for more information about the native input."),(0,o.kt)("h2",null,"Import"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  InputAdornment,\n  InputControl,\n} from '@tonic-ui/react';\n")),(0,o.kt)("h2",null,"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nrender(() => {\n  const [size, changeSizeBy] = useSelection(\'md\');\n  const [variant, changeVariantBy] = useSelection(\'outline\');\n  const [disabled, toggleDisabled] = useToggle(false);\n  const [error, toggleError] = useToggle(false);\n  const [readOnly, toggleReadOnly] = useToggle(false);\n  const [required, toggleRequired] = useToggle(false);\n\n  return (\n    <>\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          InputControl props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'sm\', \'md\', \'lg\'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            variant\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[\'outline\', \'filled\', \'unstyled\'].map(value => (\n            <Button\n              key={value}\n              selected={value === variant}\n              onClick={changeVariantBy(value)}\n              minWidth="15x"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={disabled}\n            onChange={() => toggleDisabled()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">disabled</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={error}\n            onChange={() => toggleError()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">error</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={readOnly}\n            onChange={() => toggleReadOnly()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">readOnly</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display="flex" alignItems="center">\n          <Checkbox\n            checked={required}\n            onChange={() => toggleRequired()}\n          />\n          <Space width="2x" />\n          <Text fontFamily="mono" whiteSpace="nowrap">required</Text>\n        </TextLabel>\n      </FormGroup>\n      <Divider my="4x" />\n      <InputControl\n        placeholder="Placeholder text"\n        disabled={disabled}\n        error={error}\n        readOnly={readOnly}\n        required={required}\n        size={size}\n        variant={variant}\n      />\n    </>\n  );\n});\n')),(0,o.kt)("h3",null,"Input adornments"),(0,o.kt)("p",null,"The main way to prepend or append an input adornment is to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"InputAdornment")," component. This can be used to add a prefix, a suffix, or an action to an input. For instance, you can use an icon button to hide or reveal the password."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const [view, setView] = React.useState(false);\n  const toggleView = () => setView(view => !view);\n  const iconColor = colorStyle.color.tertiary;\n  const inputType = view ? \'text\' : \'password\';\n\n  return (\n    <Flex direction="column" rowGap="4x">\n      <InputControl\n        placeholder="Mobile phone number"\n        startAdornment={(\n          <InputAdornment>\n            <Icon icon="mobile" color={iconColor} />\n          </InputAdornment>\n        )}\n      />\n      <InputControl\n        placeholder="yyyy-MM-dd"\n        defaultValue={new Date().toISOString().substr(0, 10)}\n        startAdornment={(\n          <InputAdornment>\n            <Icon icon="calendar" color={iconColor} />\n          </InputAdornment>\n        )}\n      />\n      <InputControl\n        placeholder="Enter the amount"\n        startAdornment={(\n          <InputAdornment>\n            <Text width="4x" textAlign="center" color={iconColor}>$</Text>\n          </InputAdornment>\n        )}\n        endAdornment={(\n          <InputAdornment>\n            <Icon icon="check" color="green:50" />\n          </InputAdornment>\n        )}\n      />\n      <InputControl\n        type={view ? \'text\' : \'password\'}\n        defaultValue="Revealed Password"\n        placeholder="Password"\n        endAdornment={(\n          <InputAdornment>\n            <ButtonBase onClick={toggleView}>\n              <Icon\n                icon={view ? \'view\' : \'view-off\'}\n                color={iconColor}\n              />\n            </ButtonBase>\n          </InputAdornment>\n        )}\n      />\n    </Flex>\n  );\n}\n')),(0,o.kt)("h2",null,"Props"),(0,o.kt)("h3",null,"InputAdornment"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"children"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"})))),(0,o.kt)("h3",null,"InputControl"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,o.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"If ",(0,o.kt)("inlineCode",{parentName:"td"},"true"),", the user cannot interact with the control.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"error"),(0,o.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"If ",(0,o.kt)("inlineCode",{parentName:"td"},"true"),", the input will display an error state.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"endAdornment"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"End ",(0,o.kt)("inlineCode",{parentName:"td"},"InputAdornment")," for this component.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"inputComponent"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ElementType"),(0,o.kt)("td",{parentName:"tr",align:"left"},"InputBase"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The input component to render.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"inputProps"),(0,o.kt)("td",{parentName:"tr",align:"left"},"object"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"Props applied to the ",(0,o.kt)("inlineCode",{parentName:"td"},"input")," element.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"inputRef"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ReactRef"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"A ref object to access the input element.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"string"),(0,o.kt)("td",{parentName:"tr",align:"left"},"'md'"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The visual size of the ",(0,o.kt)("inlineCode",{parentName:"td"},"input")," element. One of: 'sm', 'md', 'lg'")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,o.kt)("td",{parentName:"tr",align:"left"},"string"),(0,o.kt)("td",{parentName:"tr",align:"left"},"'outline'"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The variant of the input style to use. One of: 'outline', 'filled', 'unstyled'")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"startAdornment"),(0,o.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"Start ",(0,o.kt)("inlineCode",{parentName:"td"},"InputAdornment")," for this component.")))))}p.isMDXComponent=!0},83343:function(t,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/inputcontrol",function(){return n(2226)}])}},function(t){t.O(0,[9774,2888,179],(function(){return e=83343,t(t.s=e);var e}));var e=t.O();_N_E=e}]);