(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7574],{58775:function(e,n,r){"use strict";r.d(n,{Z:function(){return v}});var t=r(67569),o=r(49427),l=r(5632),d=r(2784),a=r(79525),i=r(98485),c=r(71561),s=r(57431),h=r(66824),p=["size"];function u(){return(u=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e}).apply(this,arguments)}var x=(0,d.forwardRef)(function(e,n){var r=e.size,o=function(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],!(n.indexOf(r)>=0)&&Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(e,p);return d.createElement(t.SVGIcon,u({size:r,viewBox:"0 0 1024 1024"},o),d.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});x.displayName="CodeSandboxIcon";var f=r(30462);function m(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var r,t,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],d=!0,a=!1;try{for(o=o.call(e);!(d=(r=o.next()).done)&&(l.push(r.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==o.return||o.return()}finally{if(a)throw t}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return b(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);if("Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return b(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=Array(n);r<n;r++)t[r]=e[r];return t}var g={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},y=function(e){var n=e.component,r=e.file,p=e.sandbox,u=(0,l.useRouter)(),b=m((0,d.useReducer)(function(e){return!e},!1),2),y=b[0],v=b[1],N=m((0,t.useColorMode)(),1)[0],w={dark:c.y,light:c.q}[N],C=m((0,o.useToggle)(!1),2),S=C[0],j=C[1],T=(0,i.Z)(null==r?void 0:r.data),k=T.onCopy,E=T.hasCopied,I=(0,d.useCallback)(function(){k()},[k]),A=(0,d.useCallback)(function(){(0,s.b)(p)},[p]),B=(0,d.useCallback)(function(){v(),j(!1)},[v,j]);return d.createElement(a.nu,{code:null==r?void 0:r.data,disabled:!0,language:"jsx",theme:w},d.createElement(t.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[N],p:"4x"},d.createElement(t.Box,{fontSize:"sm",lineHeight:"sm"},d.createElement(d.Fragment,{key:y},d.createElement(n,null)))),d.createElement(t.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},d.createElement(f.Z,{"data-track":S?"CodeBlock|hide_source|".concat((0,h.Z)({path:u.pathname})):"CodeBlock|show_source|".concat((0,h.Z)({path:u.pathname})),onClick:j},d.createElement(t.Tooltip,{label:S?"Hide the source":"Show the source"},d.createElement(t.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),d.createElement(f.Z,{"data-track":"CodeBlock|copy_source|".concat((0,h.Z)({path:u.pathname})),onClick:I},d.createElement(t.Tooltip,{label:E?"Copied":"Copy the source"},d.createElement(t.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),d.createElement(f.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(u.pathname),onClick:A},d.createElement(t.Tooltip,{label:"Edit in CodeSandbox"},d.createElement(x,{size:{sm:"5x",md:"4x"}}))),d.createElement(f.Z,{"data-track":"CodeBlock|reset|".concat(u.pathname),onClick:B},d.createElement(t.Tooltip,{label:"Reset the demo"},d.createElement(t.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),d.createElement(t.Fade,{in:S},d.createElement(t.Collapse,{in:S,unmountOnExit:!0},d.createElement(a.uz,{style:g}))))};y.displayName="Demo";var v=y},46336:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return V}});var t=r(52322),o=r(45392),l=r(58775),d=r(67569),a=r(2784),i=JSON.parse('{"id":"1","name":"Node 1","children":[{"id":"2","name":"Node 2","children":[{"id":"3","name":"Node 3","children":[{"id":"4","name":"Node 4","children":[{"id":"5","name":"Node 5"}]},{"id":"6","name":"Node 6"}]},{"id":"7","name":"Node 7","children":[{"id":"8","name":"Node 8"},{"id":"9","name":"Node 9","children":[{"id":"10","name":"Node 10","children":[{"id":"11","name":"Node 11","children":[{"id":"12","name":"Node 12"}]}]}]}]}]},{"id":"13","name":"Node 13","children":[{"id":"14","name":"Node 14","children":[{"id":"15","name":"Node 15"}]}]}]}'),c=function(e){var n=new Map;return!function e(r){n.set(r.id,r),Array.isArray(r.children)&&r.children.length>0&&r.children.forEach(e)}(e),n},s=function(e){var n=[];return!function e(r){Array.isArray(r.children)&&r.children.length>0&&(n.push(r.id),r.children.forEach(e))}(e),n};function h(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var r,t,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],d=!0,a=!1;try{for(o=o.call(e);!(d=(r=o.next()).done)&&(l.push(r.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==o.return||o.return()}finally{if(a)throw t}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return p(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);if("Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return p(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=Array(n);r<n;r++)t[r]=e[r];return t}var u=c(i),x=s(i),f=Array.from(u.keys())[0],m=function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=Array.isArray(n.children)?n.children.length:0;return a.createElement(d.TreeNode,{key:n.id,nodeId:n.id,render:function(e){var r=e.isExpanded,o=t>0?r?"folder-open":"folder":"server",l=t>0?"yellow:50":"currentColor";return a.createElement(a.Fragment,null,a.createElement(d.Icon,{icon:o,color:l,mr:"2x"}),a.createElement(d.OverflowTooltip,{label:n.name},n.name))}},t>0?n.children.map(function(n){return e(n,r+1)}):null)},b=function(){var e,n=h((0,a.useState)(!1),2),r=n[0],t=n[1],o=h((0,d.useColorMode)(),1)[0],l=h((0,d.useColorStyle)(),1)[0],c={dark:"gray:50",light:"gray:50"}[o],s=(0,a.useRef)(),p=(0,a.useRef)(),b=h((0,a.useState)([f]),2),g=b[0],y=b[1],v=(0,a.useCallback)(function(e){y(e)},[]);return a.createElement(d.Flex,{ref:s,sx:{boxShadow:l.shadow.thick,cursor:r?"col-resize":"default"}},a.createElement(d.Box,{ref:p,sx:{flex:"none",width:240}},a.createElement(d.Scrollbar,{height:240,overflowX:"hidden",overflowY:"scroll"},a.createElement(d.TreeView,{"aria-label":"basic tree view",defaultExpandedNodes:x,isSelectable:!0,selectedNodes:g,onNodeSelect:v},m(i)))),a.createElement(d.Flex,{sx:{flex:"auto",px:"3x",py:"2x",position:"relative"}},a.createElement(d.ResizeHandle,{onResizeStart:function(){t(!0)},onResizeEnd:function(){t(!1)},onResize:function(e){var n=e.clientX,r=p.current;if(r){var t=s.current.getBoundingClientRect(),o=t.left,l=t.width;n-o>=160&&n-o<=.4*l&&(r.style.width="".concat(n-o,"px"))}},sx:{position:"absolute",left:0,top:0,bottom:0,borderLeft:1,borderLeftColor:r?c:({dark:"gray:70",light:"gray:30"})[o],_hover:{borderLeftColor:c}}}),a.createElement(d.Box,null,null===(e=u.get(g[0]))||void 0===e?void 0:e.name)))};function g(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var r,t,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],d=!0,a=!1;try{for(o=o.call(e);!(d=(r=o.next()).done)&&(l.push(r.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==o.return||o.return()}finally{if(a)throw t}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return y(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);if("Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return y(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function y(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=Array(n);r<n;r++)t[r]=e[r];return t}var v=c(i),N=s(i),w=Array.from(v.keys()),C=function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=Array.isArray(n.children)?n.children.length:0;return a.createElement(d.TreeNode,{key:n.id,nodeId:n.id,render:function(e){var r=e.isExpanded,o=e.isSelected,l=e.select,i=t>0?r?"folder-open":"folder":"server",c=t>0?"yellow:50":"currentColor";return a.createElement(a.Fragment,null,a.createElement(d.Flex,{onClick:function(e){e.stopPropagation()},mr:"2x"},a.createElement(d.Checkbox,{checked:o,onChange:function(){l()}})),a.createElement(d.Icon,{icon:i,color:c,mr:"2x"}),a.createElement(d.OverflowTooltip,{label:n.name},n.name))},sx:{'&[aria-selected="true"] > *:first-of-type:not(:hover)':{backgroundColor:"transparent"}}},t>0?n.children.map(function(n){return e(n,r+1)}):null)},S=function(){var e=g((0,d.useColorStyle)(),1)[0],n=g((0,a.useState)(N),2),r=n[0],t=n[1],o=g((0,a.useState)([]),2),l=o[0],c=o[1],s=(0,a.useCallback)(function(e){t(e)},[]),h=(0,a.useCallback)(function(e){c(e)},[]),p=(0,a.useCallback)(function(e){t(N)},[]),u=(0,a.useCallback)(function(e){t([])},[]),x=(0,a.useCallback)(function(e){c(w)},[]),f=(0,a.useCallback)(function(e){c([])},[]);return a.createElement(a.Fragment,null,a.createElement(d.ButtonGroup,{variant:"secondary",columnGap:"2x",mb:"3x"},a.createElement(d.Button,{variant:"secondary",disabled:r.length===N.length,onClick:p},"Expand all"),a.createElement(d.Button,{variant:"secondary",disabled:0===r.length,onClick:u},"Collapse all"),a.createElement(d.Button,{variant:"secondary",disabled:l.length===w.length,onClick:x},"Select all"),a.createElement(d.Button,{variant:"secondary",disabled:0===l.length,onClick:f},"Unselect all")),a.createElement(d.Stack,{spacing:"2x"},a.createElement(d.Flex,{alignItems:"flex-start",columnGap:"2x"},a.createElement(d.Text,{whiteSpace:"nowrap"},"Expanded nodes:"),a.createElement(d.Flex,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},r.map(function(e){var n;return a.createElement(d.Code,{key:e,whiteSpace:"nowrap"},null===(n=v.get(e))||void 0===n?void 0:n.name)}))),a.createElement(d.Flex,{alignItems:"flex-start",columnGap:"2x"},a.createElement(d.Text,{whiteSpace:"nowrap"},"Selected nodes:"),a.createElement(d.Flex,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},l.map(function(e){var n;return a.createElement(d.Code,{key:e,whiteSpace:"nowrap"},null===(n=v.get(e))||void 0===n?void 0:n.name)})))),a.createElement(d.Divider,{my:"4x"}),a.createElement(d.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:e.shadow.thick}},a.createElement(d.Scrollbar,{height:240,overflowY:"scroll"},a.createElement(d.TreeView,{"aria-label":"controlled",isSelectable:!0,isMultiSelectable:!0,expandedNodes:r,selectedNodes:l,onNodeToggle:s,onNodeSelect:h},C(i)))))};function j(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=Array(n);r<n;r++)t[r]=e[r];return t}var T=s(i),k=function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=Array.isArray(n.children)?n.children.length:0;return a.createElement(d.TreeNode,{key:n.id,nodeId:n.id,render:function(e){var r=e.isExpanded,o=e.isSelected,l=e.select,i=t>0?r?"folder-open":"folder":"server",c=t>0?"yellow:50":"currentColor";return a.createElement(a.Fragment,null,a.createElement(d.Flex,{onClick:function(e){e.stopPropagation()},mr:"2x"},a.createElement(d.Checkbox,{checked:o,onChange:function(){l()}})),a.createElement(d.Icon,{icon:i,color:c,mr:"2x"}),a.createElement(d.OverflowTooltip,{label:n.name},n.name))},sx:{'&[aria-selected="true"] > *:first-of-type:not(:hover)':{backgroundColor:"transparent"}}},t>0?n.children.map(function(n){return e(n,r+1)}):null)},E=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,d.useColorStyle)())||function(e,n){var r,t,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],d=!0,a=!1;try{for(o=o.call(e);!(d=(r=o.next()).done)&&(l.push(r.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==o.return||o.return()}finally{if(a)throw t}}return l}}(e,1)||function(e,n){if(e){if("string"==typeof e)return j(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);if("Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return j(e,n)}}(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return a.createElement(d.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},a.createElement(d.Scrollbar,{height:240,overflowY:"scroll"},a.createElement(d.TreeView,{"aria-label":"multi-select",defaultExpandedNodes:T,isSelectable:!0,isMultiSelectable:!0},k(i))))};function I(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=Array(n);r<n;r++)t[r]=e[r];return t}var A=s(i),B=function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=Array.isArray(n.children)?n.children.length:0;return a.createElement(d.TreeNode,{key:n.id,nodeId:n.id,render:function(e){var r=e.isExpanded,o=t>0?r?"folder-open":"folder":"server",l=t>0?"yellow:50":"currentColor";return a.createElement(a.Fragment,null,a.createElement(d.Icon,{icon:o,color:l,mr:"2x"}),a.createElement(d.OverflowTooltip,{label:n.name},n.name))}},t>0?n.children.map(function(n){return e(n,r+1)}):null)},M=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,d.useColorStyle)())||function(e,n){var r,t,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],d=!0,a=!1;try{for(o=o.call(e);!(d=(r=o.next()).done)&&(l.push(r.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==o.return||o.return()}finally{if(a)throw t}}return l}}(e,1)||function(e,n){if(e){if("string"==typeof e)return I(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);if("Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return I(e,n)}}(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return a.createElement(d.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},a.createElement(d.Scrollbar,{height:240,overflowY:"scroll"},a.createElement(d.TreeView,{"aria-label":"node icons",defaultExpandedNodes:A,isSelectable:!0},B(i))))};function R(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=Array(n);r<n;r++)t[r]=e[r];return t}var O=s(i),F=function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=Array.isArray(n.children)?n.children.length:0;return a.createElement(d.TreeNode,{key:n.id,nodeId:n.id,render:function(){return a.createElement(d.OverflowTooltip,{label:n.name},n.name)}},t>0?n.children.map(function(n){return e(n,r+1)}):null)},z=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,d.useColorStyle)())||function(e,n){var r,t,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var l=[],d=!0,a=!1;try{for(o=o.call(e);!(d=(r=o.next()).done)&&(l.push(r.value),!n||l.length!==n);d=!0);}catch(e){a=!0,t=e}finally{try{d||null==o.return||o.return()}finally{if(a)throw t}}return l}}(e,1)||function(e,n){if(e){if("string"==typeof e)return R(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);if("Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return R(e,n)}}(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return a.createElement(d.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},a.createElement(d.Scrollbar,{height:240,overflowY:"scroll"},a.createElement(d.TreeView,{"aria-label":"basic tree view",defaultExpandedNodes:O,isSelectable:!0},F(i))))};function W(e){var n=Object.assign({div:"div",h1:"h1",p:"p",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",code:"code",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,o.ah)(),e.components);return(0,t.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n",(0,t.jsx)(n.h1,{id:"tree-view",children:"Tree View"}),"\n",(0,t.jsx)(n.p,{children:"The Tree View component displays information in a nested list format. It's great for showing things like files and folders in a file system, categories and items in a list, and any kind of nested structure you need to explore."}),"\n",(0,t.jsxs)(n.h2,{id:"import",children:["Import",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import {\n  TreeNode,\n  TreeView,\n  useTreeNode,\n  useTreeView,\n} from '@tonic-ui/react';\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"usage",children:["Usage",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.h3,{id:"basic-tree-view",children:["Basic tree view",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-tree-view",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(l.Z,{component:z,file:{data:"import {\n  Box,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from './data/tree.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={() => (\n        <OverflowTooltip label={node.name}>\n          {node.name}\n        </OverflowTooltip>\n      )}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"basic tree view\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree.json":'{\n  "id": "1",\n  "name": "Node 1",\n  "children": [\n    {\n      "id": "2",\n      "name": "Node 2",\n      "children": [\n        {\n          "id": "3",\n          "name": "Node 3",\n          "children": [\n            {\n              "id": "4",\n              "name": "Node 4",\n              "children": [\n                {\n                  "id": "5",\n                  "name": "Node 5"\n                }\n              ]\n            },\n            {\n              "id": "6",\n              "name": "Node 6"\n            }\n          ]\n        },\n        {\n          "id": "7",\n          "name": "Node 7",\n          "children": [\n            {\n              "id": "8",\n              "name": "Node 8"\n            },\n            {\n              "id": "9",\n              "name": "Node 9",\n              "children": [\n                {\n                  "id": "10",\n                  "name": "Node 10",\n                  "children": [\n                    {\n                      "id": "11",\n                      "name": "Node 11",\n                      "children": [\n                        {\n                          "id": "12",\n                          "name": "Node 12"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "13",\n      "name": "Node 13",\n      "children": [\n        {\n          "id": "14",\n          "name": "Node 14",\n          "children": [\n            {\n              "id": "15",\n              "name": "Node 15"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/tree-view/utils.js":"export const buildTreeMap = (tree) => {\n  const treeMap = new Map();\n\n  const traverse = (node) => {\n    treeMap.set(node.id, node);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from '@/pages/components/tree-view/data/tree.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={() => (\n        <OverflowTooltip label={node.name}>\n          {node.name}\n        </OverflowTooltip>\n      )}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"basic tree view\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsx)(l.Z,{component:M,file:{data:"import {\n  Box,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from './data/tree.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"node icons\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree.json":'{\n  "id": "1",\n  "name": "Node 1",\n  "children": [\n    {\n      "id": "2",\n      "name": "Node 2",\n      "children": [\n        {\n          "id": "3",\n          "name": "Node 3",\n          "children": [\n            {\n              "id": "4",\n              "name": "Node 4",\n              "children": [\n                {\n                  "id": "5",\n                  "name": "Node 5"\n                }\n              ]\n            },\n            {\n              "id": "6",\n              "name": "Node 6"\n            }\n          ]\n        },\n        {\n          "id": "7",\n          "name": "Node 7",\n          "children": [\n            {\n              "id": "8",\n              "name": "Node 8"\n            },\n            {\n              "id": "9",\n              "name": "Node 9",\n              "children": [\n                {\n                  "id": "10",\n                  "name": "Node 10",\n                  "children": [\n                    {\n                      "id": "11",\n                      "name": "Node 11",\n                      "children": [\n                        {\n                          "id": "12",\n                          "name": "Node 12"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "13",\n      "name": "Node 13",\n      "children": [\n        {\n          "id": "14",\n          "name": "Node 14",\n          "children": [\n            {\n              "id": "15",\n              "name": "Node 15"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/tree-view/utils.js":"export const buildTreeMap = (tree) => {\n  const treeMap = new Map();\n\n  const traverse = (node) => {\n    treeMap.set(node.id, node);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from '@/pages/components/tree-view/data/tree.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"node icons\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h3,{id:"multi-selection",children:["Multi-selection",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#multi-selection",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(l.Z,{component:E,file:{data:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from './data/tree.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n          backgroundColor: 'transparent',\n        },\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"multi-select\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isMultiSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree.json":'{\n  "id": "1",\n  "name": "Node 1",\n  "children": [\n    {\n      "id": "2",\n      "name": "Node 2",\n      "children": [\n        {\n          "id": "3",\n          "name": "Node 3",\n          "children": [\n            {\n              "id": "4",\n              "name": "Node 4",\n              "children": [\n                {\n                  "id": "5",\n                  "name": "Node 5"\n                }\n              ]\n            },\n            {\n              "id": "6",\n              "name": "Node 6"\n            }\n          ]\n        },\n        {\n          "id": "7",\n          "name": "Node 7",\n          "children": [\n            {\n              "id": "8",\n              "name": "Node 8"\n            },\n            {\n              "id": "9",\n              "name": "Node 9",\n              "children": [\n                {\n                  "id": "10",\n                  "name": "Node 10",\n                  "children": [\n                    {\n                      "id": "11",\n                      "name": "Node 11",\n                      "children": [\n                        {\n                          "id": "12",\n                          "name": "Node 12"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "13",\n      "name": "Node 13",\n      "children": [\n        {\n          "id": "14",\n          "name": "Node 14",\n          "children": [\n            {\n              "id": "15",\n              "name": "Node 15"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/tree-view/utils.js":"export const buildTreeMap = (tree) => {\n  const treeMap = new Map();\n\n  const traverse = (node) => {\n    treeMap.set(node.id, node);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from '@/pages/components/tree-view/data/tree.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n          backgroundColor: 'transparent',\n        },\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"multi-select\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isMultiSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h3,{id:"controlled-tree-view",children:["Controlled tree view",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#controlled-tree-view",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(l.Z,{component:S,file:{data:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport React, { useCallback, useState } from \'react\';\nimport tree from \'./data/tree.json\';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from \'./utils\';\n\nconst treeMap = buildTreeMap(tree);\nconst expandableNodes = findExpandableNodeIds(tree);\nconst allNodes = Array.from(treeMap.keys());\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? \'folder-open\' : \'folder\';\n          }\n          return \'server\';\n        })();\n        const iconColor = (childCount > 0) ? \'yellow:50\' : \'currentColor\';\n\n        return (\n          <>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr="2x"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr="2x" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        \'&[aria-selected="true"] > *:first-of-type:not(:hover)\': {\n          backgroundColor: \'transparent\',\n        },\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodes);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodes(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodes(expandableNodes);\n  }, []);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodes([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodes(allNodes);\n  }, []);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodes([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="3x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === expandableNodes.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Stack spacing="2x">\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n      <Divider my="4x" />\n      <Box\n        sx={{\n          minWidth: 160,\n          maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="scroll"\n        >\n          <TreeView\n            aria-label="controlled"\n            isSelectable\n            isMultiSelectable\n            expandedNodes={expandedNodes}\n            selectedNodes={selectedNodes}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {renderTree(tree)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree.json":'{\n  "id": "1",\n  "name": "Node 1",\n  "children": [\n    {\n      "id": "2",\n      "name": "Node 2",\n      "children": [\n        {\n          "id": "3",\n          "name": "Node 3",\n          "children": [\n            {\n              "id": "4",\n              "name": "Node 4",\n              "children": [\n                {\n                  "id": "5",\n                  "name": "Node 5"\n                }\n              ]\n            },\n            {\n              "id": "6",\n              "name": "Node 6"\n            }\n          ]\n        },\n        {\n          "id": "7",\n          "name": "Node 7",\n          "children": [\n            {\n              "id": "8",\n              "name": "Node 8"\n            },\n            {\n              "id": "9",\n              "name": "Node 9",\n              "children": [\n                {\n                  "id": "10",\n                  "name": "Node 10",\n                  "children": [\n                    {\n                      "id": "11",\n                      "name": "Node 11",\n                      "children": [\n                        {\n                          "id": "12",\n                          "name": "Node 12"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "13",\n      "name": "Node 13",\n      "children": [\n        {\n          "id": "14",\n          "name": "Node 14",\n          "children": [\n            {\n              "id": "15",\n              "name": "Node 15"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/tree-view/utils.js":"export const buildTreeMap = (tree) => {\n  const treeMap = new Map();\n\n  const traverse = (node) => {\n    treeMap.set(node.id, node);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};"},raw:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport React, { useCallback, useState } from \'react\';\nimport tree from \'@/pages/components/tree-view/data/tree.json\';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from \'@/pages/components/tree-view/utils\';\n\nconst treeMap = buildTreeMap(tree);\nconst expandableNodes = findExpandableNodeIds(tree);\nconst allNodes = Array.from(treeMap.keys());\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? \'folder-open\' : \'folder\';\n          }\n          return \'server\';\n        })();\n        const iconColor = (childCount > 0) ? \'yellow:50\' : \'currentColor\';\n\n        return (\n          <>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr="2x"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr="2x" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        \'&[aria-selected="true"] > *:first-of-type:not(:hover)\': {\n          backgroundColor: \'transparent\',\n        },\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodes);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodes(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodes(expandableNodes);\n  }, []);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodes([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodes(allNodes);\n  }, []);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodes([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="3x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === expandableNodes.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Stack spacing="2x">\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n      <Divider my="4x" />\n      <Box\n        sx={{\n          minWidth: 160,\n          maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="scroll"\n        >\n          <TreeView\n            aria-label="controlled"\n            isSelectable\n            isMultiSelectable\n            expandedNodes={expandedNodes}\n            selectedNodes={selectedNodes}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {renderTree(tree)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h3,{id:"resizable-tree-view",children:["Resizable tree view",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#resizable-tree-view",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"min-width"})," is ",(0,t.jsx)(n.code,{children:"160px"}),", and the ",(0,t.jsx)(n.code,{children:"max-width"})," is ",(0,t.jsx)(n.code,{children:"40%"})," of the display area. You can adjust the height according to your specific needs."]}),"\n",(0,t.jsx)(l.Z,{component:b,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useCallback, useRef, useState } from 'react';\nimport tree from './data/tree.json';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from './utils';\n\nconst treeMap = buildTreeMap(tree);\nconst expandableNodes = findExpandableNodeIds(tree);\nconst allNodes = Array.from(treeMap.keys());\nconst defaultSelectedNode = allNodes[0];\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodes, setSelectedNodes] = useState([defaultSelectedNode]);\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 240,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"scroll\"\n        >\n          <TreeView\n            aria-label=\"basic tree view\"\n            defaultExpandedNodes={expandableNodes}\n            isSelectable\n            selectedNodes={selectedNodes}\n            onNodeSelect={handleSelect}\n          >\n            {renderTree(tree)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodes[0])?.name}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree.json":'{\n  "id": "1",\n  "name": "Node 1",\n  "children": [\n    {\n      "id": "2",\n      "name": "Node 2",\n      "children": [\n        {\n          "id": "3",\n          "name": "Node 3",\n          "children": [\n            {\n              "id": "4",\n              "name": "Node 4",\n              "children": [\n                {\n                  "id": "5",\n                  "name": "Node 5"\n                }\n              ]\n            },\n            {\n              "id": "6",\n              "name": "Node 6"\n            }\n          ]\n        },\n        {\n          "id": "7",\n          "name": "Node 7",\n          "children": [\n            {\n              "id": "8",\n              "name": "Node 8"\n            },\n            {\n              "id": "9",\n              "name": "Node 9",\n              "children": [\n                {\n                  "id": "10",\n                  "name": "Node 10",\n                  "children": [\n                    {\n                      "id": "11",\n                      "name": "Node 11",\n                      "children": [\n                        {\n                          "id": "12",\n                          "name": "Node 12"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "13",\n      "name": "Node 13",\n      "children": [\n        {\n          "id": "14",\n          "name": "Node 14",\n          "children": [\n            {\n              "id": "15",\n              "name": "Node 15"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/tree-view/utils.js":"export const buildTreeMap = (tree) => {\n  const treeMap = new Map();\n\n  const traverse = (node) => {\n    treeMap.set(node.id, node);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useCallback, useRef, useState } from 'react';\nimport tree from '@/pages/components/tree-view/data/tree.json';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from '@/pages/components/tree-view/utils';\n\nconst treeMap = buildTreeMap(tree);\nconst expandableNodes = findExpandableNodeIds(tree);\nconst allNodes = Array.from(treeMap.keys());\nconst defaultSelectedNode = allNodes[0];\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodes, setSelectedNodes] = useState([defaultSelectedNode]);\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 240,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"scroll\"\n        >\n          <TreeView\n            aria-label=\"basic tree view\"\n            defaultExpandedNodes={expandableNodes}\n            isSelectable\n            selectedNodes={selectedNodes}\n            onNodeSelect={handleSelect}\n          >\n            {renderTree(tree)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodes[0])?.name}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h2,{id:"props",children:["Props",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.h3,{id:"treeview",children:["TreeView",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeview",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"Name"}),(0,t.jsx)(n.th,{align:"left",children:"Type"}),(0,t.jsx)(n.th,{align:"left",children:"Default"}),(0,t.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"defaultExpandedNodes"}),(0,t.jsx)(n.td,{align:"left",children:"array"}),(0,t.jsx)(n.td,{align:"left",children:"[]"}),(0,t.jsx)(n.td,{align:"left",children:"An array of expanded node ids for initial state (uncontrolled)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"defaultSelectedNodes"}),(0,t.jsx)(n.td,{align:"left",children:"array"}),(0,t.jsx)(n.td,{align:"left",children:"[]"}),(0,t.jsx)(n.td,{align:"left",children:"An array of selected node ids for initial state (uncontrolled)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"expandedNodes"}),(0,t.jsx)(n.td,{align:"left",children:"array"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"An array of expanded node ids for controlled state."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"id"}),(0,t.jsx)(n.td,{align:"left",children:"string"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["The ",(0,t.jsx)(n.code,{children:"id"})," prop used for accessibility purpose. If not provided, a random id will be generated."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"isSelectable"}),(0,t.jsx)(n.td,{align:"left",children:"bool"}),(0,t.jsx)(n.td,{align:"left",children:"false"}),(0,t.jsx)(n.td,{align:"left",children:"Determines if the tree view allows node selection."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"isMultiSelectable"}),(0,t.jsx)(n.td,{align:"left",children:"bool"}),(0,t.jsx)(n.td,{align:"left",children:"false"}),(0,t.jsx)(n.td,{align:"left",children:"Determines if the tree view allows multiple node selections."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"onNodeFocus"}),(0,t.jsx)(n.td,{align:"left",children:"function"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["A callback function invoked when a tree node is focused.",(0,t.jsxs)("pre",{children:[(0,t.jsx)(n.code,{children:"function(nodeId: string) => void"}),(0,t.jsx)("br",{})," • ",(0,t.jsx)(n.code,{children:"nodeId"})," The id of the focused node."]})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"onNodeSelect"}),(0,t.jsx)(n.td,{align:"left",children:"function"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["A callback function triggered when tree nodes are selected/unselected.",(0,t.jsxs)("pre",{children:[(0,t.jsx)(n.code,{children:"function(nodeIds: Array<string>) => void"}),(0,t.jsx)("br",{})," • ",(0,t.jsx)(n.code,{children:"nodeIds"})," An array of selected node ids."]})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"onNodeToggle"}),(0,t.jsx)(n.td,{align:"left",children:"function"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["A callback function triggered when tree nodes are expanded/collapsed.",(0,t.jsxs)("pre",{children:[(0,t.jsx)(n.code,{children:"function(nodeIds: Array<string>) => void"}),(0,t.jsx)("br",{})," • ",(0,t.jsx)(n.code,{children:"nodeIds"})," An array of expanded node ids."]})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"selectedNodes"}),(0,t.jsx)(n.td,{align:"left",children:"array"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"An array of selected node ids for controlled state."})]})]})]}),"\n",(0,t.jsxs)(n.h3,{id:"treenode",children:["TreeNode",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treenode",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"Name"}),(0,t.jsx)(n.th,{align:"left",children:"Type"}),(0,t.jsx)(n.th,{align:"left",children:"Default"}),(0,t.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"ContentComponent"}),(0,t.jsx)(n.td,{align:"left",children:"ElementType"}),(0,t.jsx)(n.td,{align:"left",children:"TreeNodeContent"}),(0,t.jsx)(n.td,{align:"left",children:"The component used to render the contenr of the node."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"ContentProps"}),(0,t.jsx)(n.td,{align:"left",children:"object"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"Props applied to the content component."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"TransitionComponent"}),(0,t.jsx)(n.td,{align:"left",children:"ElementType"}),(0,t.jsx)(n.td,{align:"left",children:"Collapse"}),(0,t.jsx)(n.td,{align:"left",children:"The component used for the transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"TransitionProps"}),(0,t.jsx)(n.td,{align:"left",children:"object"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:["Props applied to the ",(0,t.jsx)(n.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"children"}),(0,t.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsx)(n.td,{align:"left",children:"The content of the node."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"disabled"}),(0,t.jsx)(n.td,{align:"left",children:"bool"}),(0,t.jsx)(n.td,{align:"left",children:"false"}),(0,t.jsx)(n.td,{align:"left",children:"Determines if the node is disabled."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"nodeId"}),(0,t.jsx)(n.td,{align:"left",children:"string"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:[(0,t.jsx)(n.code,{children:"REQUIRED"})," The id of the node."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"render"}),(0,t.jsx)(n.td,{align:"left",children:"function"}),(0,t.jsx)(n.td,{align:"left"}),(0,t.jsxs)(n.td,{align:"left",children:[(0,t.jsx)(n.code,{children:"REQUIRED"})," A render function to render the node.",(0,t.jsxs)("pre",{children:[(0,t.jsx)(n.code,{children:"function(props: object) => ReactNode"})," ",(0,t.jsx)("br",{})," • ",(0,t.jsx)(n.code,{children:"props"})," The props passed to the render function.",(0,t.jsx)("br",{}),"    - nodeDepth: number",(0,t.jsx)("br",{}),"    - nodeId: string",(0,t.jsx)("br",{}),"    - isDisabled: boolean",(0,t.jsx)("br",{}),"    - isExpandable: boolean",(0,t.jsx)("br",{}),"    - isExpanded: boolean",(0,t.jsx)("br",{}),"    - isFocused: boolean",(0,t.jsx)("br",{}),"    - isSelected: boolean",(0,t.jsx)("br",{}),"    - focus: function",(0,t.jsx)("br",{}),"    - select: function",(0,t.jsx)("br",{}),"    - toggle: function",(0,t.jsx)("br",{})]})]})]})]})]})]})}var V=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,o.ah)(),e.components).wrapper;return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(W,e)})):W(e)}},31036:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/tree-view",function(){return r(46336)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=31036)}),_N_E=e.O()}]);