(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7574],{58775:function(n,e,d){"use strict";d.d(e,{Z:function(){return y}});var r=d(67569),o=d(49427),i=d(5632),l=d(2784),t=d(79525),a=d(98485),c=d(71561),s=d(57431),h=d(66824),m=["size"];function N(){return(N=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var d=arguments[e];for(var r in d)Object.prototype.hasOwnProperty.call(d,r)&&(n[r]=d[r])}return n}).apply(this,arguments)}var u=(0,l.forwardRef)(function(n,e){var d=n.size,o=function(n,e){if(null==n)return{};var d,r,o=function(n,e){if(null==n)return{};var d,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)d=i[r],e.indexOf(d)>=0||(o[d]=n[d]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)d=i[r],!(e.indexOf(d)>=0)&&Object.prototype.propertyIsEnumerable.call(n,d)&&(o[d]=n[d])}return o}(n,m);return l.createElement(r.SVGIcon,N({size:d,viewBox:"0 0 1024 1024"},o),l.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});u.displayName="CodeSandboxIcon";var p=d(30462);function f(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var d,r,o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var i=[],l=!0,t=!1;try{for(o=o.call(n);!(l=(d=o.next()).done)&&(i.push(d.value),!e||i.length!==e);l=!0);}catch(n){t=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(t)throw r}}return i}}(n,e)||function(n,e){if(n){if("string"==typeof n)return x(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return x(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function x(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,r=Array(e);d<e;d++)r[d]=n[d];return r}var b={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},g=function(n){var e=n.component,d=n.file,m=n.sandbox,N=(0,i.useRouter)(),x=f((0,l.useReducer)(function(n){return!n},!1),2),g=x[0],y=x[1],v=f((0,r.useColorMode)(),1)[0],w={dark:c.y,light:c.q}[v],C=f((0,o.useToggle)(!1),2),S=C[0],j=C[1],T=(0,a.Z)(null==d?void 0:d.data),k=T.onCopy,E=T.hasCopied,I=(0,l.useCallback)(function(){k()},[k]),A=(0,l.useCallback)(function(){(0,s.b)(m)},[m]),B=(0,l.useCallback)(function(){y(),j(!1)},[y,j]);return l.createElement(t.nu,{code:null==d?void 0:d.data,disabled:!0,language:"jsx",theme:w},l.createElement(r.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[v],p:"4x"},l.createElement(r.Box,{fontSize:"sm",lineHeight:"sm"},l.createElement(l.Fragment,{key:g},l.createElement(e,null)))),l.createElement(r.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},l.createElement(p.Z,{"data-track":S?"CodeBlock|hide_source|".concat((0,h.Z)({path:N.pathname})):"CodeBlock|show_source|".concat((0,h.Z)({path:N.pathname})),onClick:j},l.createElement(r.Tooltip,{label:S?"Hide the source":"Show the source"},l.createElement(r.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),l.createElement(p.Z,{"data-track":"CodeBlock|copy_source|".concat((0,h.Z)({path:N.pathname})),onClick:I},l.createElement(r.Tooltip,{label:E?"Copied":"Copy the source"},l.createElement(r.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),l.createElement(p.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(N.pathname),onClick:A},l.createElement(r.Tooltip,{label:"Edit in CodeSandbox"},l.createElement(u,{size:{sm:"5x",md:"4x"}}))),l.createElement(p.Z,{"data-track":"CodeBlock|reset|".concat(N.pathname),onClick:B},l.createElement(r.Tooltip,{label:"Reset the demo"},l.createElement(r.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),l.createElement(r.Fade,{in:S},l.createElement(r.Collapse,{in:S,unmountOnExit:!0},l.createElement(t.uz,{style:b}))))};g.displayName="Demo";var y=g},51533:function(n,e,d){"use strict";d.r(e),d.d(e,{default:function(){return G}});var r=d(52322),o=d(45392),i=d(58775),l=d(67569),t=d(5081),a=d(2784),c=JSON.parse('[{"id":1,"name":"Node 1","children":[{"id":"1.1","name":"Node 2","children":[{"id":"1.1.1","name":"Node 3","children":[]},{"id":"1.1.2","name":"Node 4","children":[{"id":"1.1.2.1","name":"Node 5","children":[]},{"id":"1.1.2.2","name":"Node 6","children":[]}]},{"id":"1.1.3","name":"Node 7","children":[]},{"id":"1.1.4","name":"Node 8","children":[]}]}]},{"id":2,"name":"Node 9","children":[{"id":"2.1","name":"Node 10","children":[{"id":"2.1.1","name":"Node 11","children":[]},{"id":"2.1.2","name":"Node 12","children":[]},{"id":"2.1.3","name":"Node 13","children":[]},{"id":"2.1.4","name":"Node 14","children":[{"id":"2.1.4.1","name":"Node 15","children":[]},{"id":"2.1.4.2","name":"Node 16","children":[]},{"id":"2.1.4.3","name":"Node 17","children":[]}]}]}]},{"id":3,"name":"Node 18","children":[{"id":"3.1","name":"Node 19","children":[{"id":"3.1.1","name":"Node 20","children":[]}]},{"id":"3.2","name":"Node 21","children":[{"id":"3.2.1","name":"Node 22","children":[]},{"id":"3.2.2","name":"Node 23","children":[]},{"id":"3.2.3","name":"Node 24","children":[]},{"id":"3.2.4","name":"Node 25","children":[{"id":"3.2.4.1","name":"Node 26","children":[]}]}]},{"id":"3.3","name":"Node 27","children":[{"id":"3.3.1","name":"Node 28","children":[]},{"id":"3.3.2","name":"Node 29","children":[{"id":"3.3.2.1","name":"Node 30","children":[]},{"id":"3.3.2.2","name":"Node 31","children":[]},{"id":"3.3.2.3","name":"Node 32","children":[]}]},{"id":"3.3.3","name":"Node 33","children":[]}]},{"id":"3.4","name":"Node 34","children":[{"id":"3.4.1","name":"Node 35","children":[]},{"id":"3.4.2","name":"Node 36","children":[]}]}]},{"id":4,"name":"Node 37","children":[{"id":"4.1","name":"Node 38","children":[{"id":"4.1.1","name":"Node 39","children":[{"id":"4.1.1.1","name":"Node 40","children":[]},{"id":"4.1.1.2","name":"Node 41","children":[]}]},{"id":"4.1.2","name":"Node 42","children":[]},{"id":"4.1.3","name":"Node 43","children":[]},{"id":"4.1.4","name":"Node 44","children":[]},{"id":"4.1.5","name":"Node 45","children":[]}]},{"id":"4.2","name":"Node 46","children":[{"id":"4.2.1","name":"Node 47","children":[]},{"id":"4.2.2","name":"Node 48","children":[]},{"id":"4.2.3","name":"Node 49","children":[{"id":"4.2.3.1","name":"Node 50","children":[]},{"id":"4.2.3.2","name":"Node 51","children":[]},{"id":"4.2.3.3","name":"Node 52","children":[]},{"id":"4.2.3.4","name":"Node 53","children":[]}]}]},{"id":"4.3","name":"Node 54","children":[{"id":"4.3.1","name":"Node 55","children":[]}]}]},{"id":5,"name":"Node 56","children":[{"id":"5.1","name":"Node 57","children":[{"id":"5.1.1","name":"Node 58","children":[{"id":"5.1.1.1","name":"Node 59","children":[]}]},{"id":"5.1.2","name":"Node 60","children":[]},{"id":"5.1.3","name":"Node 61","children":[]},{"id":"5.1.4","name":"Node 62","children":[]},{"id":"5.1.5","name":"Node 63","children":[]}]},{"id":"5.2","name":"Node 64","children":[{"id":"5.2.1","name":"Node 65","children":[]}]}]},{"id":6,"name":"Node 66","children":[{"id":"6.1","name":"Node 67","children":[]},{"id":"6.2","name":"Node 68","children":[{"id":"6.2.1","name":"Node 69","children":[]}]},{"id":"6.3","name":"Node 70","children":[{"id":"6.3.1","name":"Node 71","children":[]},{"id":"6.3.2","name":"Node 72","children":[]},{"id":"6.3.3","name":"Node 73","children":[]}]}]},{"id":7,"name":"Node 74","children":[{"id":"7.1","name":"Node 75","children":[{"id":"7.1.1","name":"Node 76","children":[]},{"id":"7.1.2","name":"Node 77","children":[{"id":"7.1.2.1","name":"Node 78","children":[]},{"id":"7.1.2.2","name":"Node 79","children":[]},{"id":"7.1.2.3","name":"Node 80","children":[]},{"id":"7.1.2.4","name":"Node 81","children":[]},{"id":"7.1.2.5","name":"Node 82","children":[]}]},{"id":"7.1.3","name":"Node 83","children":[]},{"id":"7.1.4","name":"Node 84","children":[]},{"id":"7.1.5","name":"Node 85","children":[{"id":"7.1.5.1","name":"Node 86","children":[]},{"id":"7.1.5.2","name":"Node 87","children":[]}]}]}]},{"id":8,"name":"Node 88","children":[{"id":"8.1","name":"Node 89","children":[{"id":"8.1.1","name":"Node 90","children":[]}]},{"id":"8.2","name":"Node 91","children":[]}]},{"id":9,"name":"Node 92","children":[{"id":"9.1","name":"Node 93","children":[]}]},{"id":10,"name":"Node 94","children":[{"id":"10.1","name":"Node 95","children":[{"id":"10.1.1","name":"Node 96","children":[]}]},{"id":"10.2","name":"Node 97","children":[{"id":"10.2.1","name":"Node 98","children":[{"id":"10.2.1.1","name":"Node 99","children":[]},{"id":"10.2.1.2","name":"Node 100","children":[]}]}]}]}]'),s=function(n){var e=new Map;return!function n(d){(0,t.rY)(d).forEach(function(d){e.set(d.id,d),n(d.children)})}(n),e},h=function(n){var e=[];return!function n(d){(0,t.rY)(d).forEach(function(d){e.push(d.id),n(d.children)})}(n),e};function m(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var d,r,o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var i=[],l=!0,t=!1;try{for(o=o.call(n);!(l=(d=o.next()).done)&&(i.push(d.value),!e||i.length!==e);l=!0);}catch(n){t=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(t)throw r}}return i}}(n,e)||function(n,e){if(n){if("string"==typeof n)return N(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return N(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function N(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,r=Array(e);d<e;d++)r[d]=n[d];return r}var u=s(c),p=h(c),f=Array.from(u.keys())[0],x=function n(e){var d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return(0,t.rY)(e).map(function(e){var r=Array.isArray(e.children)?e.children.length:0;return a.createElement(l.TreeNode,{key:e.id,nodeId:e.id,render:function(n){var d=n.isExpanded,o=r>0?d?"folder-open":"folder":"server",i=r>0?"yellow:50":"currentColor";return a.createElement(a.Fragment,null,a.createElement(l.Icon,{icon:o,color:i,mr:"2x"}),a.createElement(l.OverflowTooltip,{label:e.name},e.name))}},r>0?n(e.children,d+1):null)})},b=function(){var n,e=m((0,a.useState)(!1),2),d=e[0],r=e[1],o=m((0,l.useColorMode)(),1)[0],i=m((0,l.useColorStyle)(),1)[0],t={dark:"gray:50",light:"gray:50"}[o],s=(0,a.useRef)(),h=(0,a.useRef)(),N=m((0,a.useState)([f]),2),b=N[0],g=N[1],y=(0,a.useCallback)(function(n){g(n)},[]);return a.createElement(l.Flex,{ref:s,sx:{boxShadow:i.shadow.thick,cursor:d?"col-resize":"default"}},a.createElement(l.Box,{ref:h,sx:{flex:"none",width:240}},a.createElement(l.Scrollbar,{height:240,overflowX:"hidden",overflowY:"scroll"},a.createElement(l.TreeView,{"aria-label":"basic tree view",defaultExpandedNodes:p,isSelectable:!0,selectedNodes:b,onNodeSelect:y},x(c)))),a.createElement(l.Flex,{sx:{flex:"auto",px:"3x",py:"2x",position:"relative"}},a.createElement(l.ResizeHandle,{onResizeStart:function(){r(!0)},onResizeEnd:function(){r(!1)},onResize:function(n){var e=n.clientX,d=h.current;if(d){var r=s.current.getBoundingClientRect(),o=r.left,i=r.width;e-o>=160&&e-o<=.4*i&&(d.style.width="".concat(e-o,"px"))}},sx:{position:"absolute",left:0,top:0,bottom:0,borderLeft:1,borderLeftColor:d?t:({dark:"gray:70",light:"gray:30"})[o],_hover:{borderLeftColor:t}}}),a.createElement(l.Box,null,null===(n=u.get(b[0]))||void 0===n?void 0:n.name)))};function g(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var d,r,o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var i=[],l=!0,t=!1;try{for(o=o.call(n);!(l=(d=o.next()).done)&&(i.push(d.value),!e||i.length!==e);l=!0);}catch(n){t=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(t)throw r}}return i}}(n,e)||function(n,e){if(n){if("string"==typeof n)return y(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return y(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function y(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,r=Array(e);d<e;d++)r[d]=n[d];return r}var v=s(c),w=h(c),C=Array.from(v.keys()),S=function n(e){var d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return(0,t.rY)(e).map(function(e){var r=Array.isArray(e.children)?e.children.length:0;return a.createElement(l.TreeNode,{key:e.id,nodeId:e.id,render:function(n){var d=n.isExpanded,o=n.isSelected,i=n.select,t=r>0?d?"folder-open":"folder":"server",c=r>0?"yellow:50":"currentColor";return a.createElement(a.Fragment,null,a.createElement(l.Flex,{onClick:function(n){n.stopPropagation()},mr:"2x"},a.createElement(l.Checkbox,{checked:o,onChange:function(){i()}})),a.createElement(l.Icon,{icon:t,color:c,mr:"2x"}),a.createElement(l.OverflowTooltip,{label:e.name},e.name))},sx:{'&[aria-selected="true"] > *:first-of-type:not(:hover)':{backgroundColor:"transparent"}}},r>0?n(e.children,d+1):null)})},j=function(){var n=g((0,l.useColorStyle)(),1)[0],e=g((0,a.useState)(w),2),d=e[0],r=e[1],o=g((0,a.useState)([]),2),i=o[0],t=o[1],s=(0,a.useCallback)(function(n){r(n)},[]),h=(0,a.useCallback)(function(n){t(n)},[]),m=(0,a.useCallback)(function(n){r(w)},[]),N=(0,a.useCallback)(function(n){r([])},[]),u=(0,a.useCallback)(function(n){t(C)},[]),p=(0,a.useCallback)(function(n){t([])},[]);return a.createElement(a.Fragment,null,a.createElement(l.ButtonGroup,{variant:"secondary",columnGap:"2x",mb:"3x"},a.createElement(l.Button,{variant:"secondary",disabled:d.length===w.length,onClick:m},"Expand all"),a.createElement(l.Button,{variant:"secondary",disabled:0===d.length,onClick:N},"Collapse all"),a.createElement(l.Button,{variant:"secondary",disabled:i.length===C.length,onClick:u},"Select all"),a.createElement(l.Button,{variant:"secondary",disabled:0===i.length,onClick:p},"Unselect all")),a.createElement(l.Stack,{spacing:"2x"},a.createElement(l.Flex,{alignItems:"flex-start",columnGap:"2x"},a.createElement(l.Text,{whiteSpace:"nowrap"},"Expanded nodes:"),a.createElement(l.Flex,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},d.map(function(n){var e;return a.createElement(l.Code,{key:n,whiteSpace:"nowrap"},null===(e=v.get(n))||void 0===e?void 0:e.name)}))),a.createElement(l.Flex,{alignItems:"flex-start",columnGap:"2x"},a.createElement(l.Text,{whiteSpace:"nowrap"},"Selected nodes:"),a.createElement(l.Flex,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},i.map(function(n){var e;return a.createElement(l.Code,{key:n,whiteSpace:"nowrap"},null===(e=v.get(n))||void 0===e?void 0:e.name)})))),a.createElement(l.Divider,{my:"4x"}),a.createElement(l.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},a.createElement(l.Scrollbar,{height:240,overflowY:"scroll"},a.createElement(l.TreeView,{"aria-label":"controlled",isSelectable:!0,isMultiSelectable:!0,expandedNodes:d,selectedNodes:i,onNodeToggle:s,onNodeSelect:h},S(c)))))};function T(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,r=Array(e);d<e;d++)r[d]=n[d];return r}var k=h(c),E=function n(e){var d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return(0,t.rY)(e).map(function(e){var r=Array.isArray(e.children)?e.children.length:0;return a.createElement(l.TreeNode,{key:e.id,nodeId:e.id,render:function(n){var d=n.isExpanded,o=n.isSelected,i=n.select,t=r>0?d?"folder-open":"folder":"server",c=r>0?"yellow:50":"currentColor";return a.createElement(a.Fragment,null,a.createElement(l.Flex,{onClick:function(n){n.stopPropagation()},mr:"2x"},a.createElement(l.Checkbox,{checked:o,onChange:function(){i()}})),a.createElement(l.Icon,{icon:t,color:c,mr:"2x"}),a.createElement(l.OverflowTooltip,{label:e.name},e.name))},sx:{'&[aria-selected="true"] > *:first-of-type:not(:hover)':{backgroundColor:"transparent"}}},r>0?n(e.children,d+1):null)})},I=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,l.useColorStyle)())||function(n,e){var d,r,o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var i=[],l=!0,t=!1;try{for(o=o.call(n);!(l=(d=o.next()).done)&&(i.push(d.value),!e||i.length!==e);l=!0);}catch(n){t=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(t)throw r}}return i}}(n,1)||function(n,e){if(n){if("string"==typeof n)return T(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return T(n,e)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return a.createElement(l.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:e.shadow.thick}},a.createElement(l.Scrollbar,{height:240,overflowY:"scroll"},a.createElement(l.TreeView,{"aria-label":"multi-select",defaultExpandedNodes:k,isSelectable:!0,isMultiSelectable:!0},E(c))))};function A(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,r=Array(e);d<e;d++)r[d]=n[d];return r}var B=h(c),M=function n(e){var d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return(0,t.rY)(e).map(function(e){var r=Array.isArray(e.children)?e.children.length:0;return a.createElement(l.TreeNode,{key:e.id,nodeId:e.id,render:function(n){var d=n.isExpanded,o=r>0?d?"folder-open":"folder":"server",i=r>0?"yellow:50":"currentColor";return a.createElement(a.Fragment,null,a.createElement(l.Icon,{icon:o,color:i,mr:"2x"}),a.createElement(l.OverflowTooltip,{label:e.name},e.name))}},r>0?n(e.children,d+1):null)})},R=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,l.useColorStyle)())||function(n,e){var d,r,o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var i=[],l=!0,t=!1;try{for(o=o.call(n);!(l=(d=o.next()).done)&&(i.push(d.value),!e||i.length!==e);l=!0);}catch(n){t=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(t)throw r}}return i}}(n,1)||function(n,e){if(n){if("string"==typeof n)return A(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return A(n,e)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return a.createElement(l.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:e.shadow.thick}},a.createElement(l.Scrollbar,{height:240,overflowY:"scroll"},a.createElement(l.TreeView,{"aria-label":"node icons",defaultExpandedNodes:B,isSelectable:!0},M(c))))};function O(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,r=Array(e);d<e;d++)r[d]=n[d];return r}var F=h(c),z=function n(e){var d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return(0,t.rY)(e).map(function(e){var r=Array.isArray(e.children)?e.children.length:0;return a.createElement(l.TreeNode,{key:e.id,nodeId:e.id,render:function(){return a.createElement(l.OverflowTooltip,{label:e.name},e.name)}},r>0?n(e.children,d+1):null)})},W=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,l.useColorStyle)())||function(n,e){var d,r,o=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=o){var i=[],l=!0,t=!1;try{for(o=o.call(n);!(l=(d=o.next()).done)&&(i.push(d.value),!e||i.length!==e);l=!0);}catch(n){t=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(t)throw r}}return i}}(n,1)||function(n,e){if(n){if("string"==typeof n)return O(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return O(n,e)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return a.createElement(l.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:e.shadow.thick}},a.createElement(l.Scrollbar,{height:240,overflowY:"scroll"},a.createElement(l.TreeView,{"aria-label":"basic tree view",defaultExpandedNodes:F,isSelectable:!0},z(c))))};function V(n){var e=Object.assign({div:"div",h1:"h1",p:"p",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",code:"code",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,o.ah)(),n.components);return(0,r.jsxs)(e.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n",(0,r.jsx)(e.h1,{id:"tree-view",children:"Tree View"}),"\n",(0,r.jsx)(e.p,{children:"The Tree View component displays information in a nested list format. It's great for showing things like files and folders in a file system, categories and items in a list, and any kind of nested structure you need to explore."}),"\n",(0,r.jsxs)(e.h2,{id:"import",children:["Import",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import {\n  TreeNode,\n  TreeView,\n  useTreeNode,\n  useTreeView,\n} from '@tonic-ui/react';\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"usage",children:["Usage",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(e.h3,{id:"basic-tree-view",children:["Basic tree view",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-tree-view",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(i.Z,{component:W,file:{data:"import {\n  Box,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from './data/tree-nodes.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst renderTreeNodes = (nodes, depth = 0) => {\n  return ensureArray(nodes).map(node => {\n    const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n    return (\n      <TreeNode\n        key={node.id}\n        nodeId={node.id}\n        render={() => (\n          <OverflowTooltip label={node.name}>\n            {node.name}\n          </OverflowTooltip>\n        )}\n      >\n        {(childCount > 0)\n          ? renderTreeNodes(node.children, depth + 1)\n          : null\n        }\n      </TreeNode>\n    );\n  });\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"basic tree view\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTreeNodes(treeNodes)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": 1,\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": []\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 4",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 5",\n                "children": []\n              },\n              {\n                "id": "1.1.2.2",\n                "name": "Node 6",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": []\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 8",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 2,\n    "name": "Node 9",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 10",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 11",\n            "children": []\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 12",\n            "children": []\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 13",\n            "children": []\n          },\n          {\n            "id": "2.1.4",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "2.1.4.1",\n                "name": "Node 15",\n                "children": []\n              },\n              {\n                "id": "2.1.4.2",\n                "name": "Node 16",\n                "children": []\n              },\n              {\n                "id": "2.1.4.3",\n                "name": "Node 17",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 3,\n    "name": "Node 18",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 19",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 20",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 21",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 22",\n            "children": []\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 23",\n            "children": []\n          },\n          {\n            "id": "3.2.3",\n            "name": "Node 24",\n            "children": []\n          },\n          {\n            "id": "3.2.4",\n            "name": "Node 25",\n            "children": [\n              {\n                "id": "3.2.4.1",\n                "name": "Node 26",\n                "children": []\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 27",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 28",\n            "children": []\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 29",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 30",\n                "children": []\n              },\n              {\n                "id": "3.3.2.2",\n                "name": "Node 31",\n                "children": []\n              },\n              {\n                "id": "3.3.2.3",\n                "name": "Node 32",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "3.3.3",\n            "name": "Node 33",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 34",\n        "children": [\n          {\n            "id": "3.4.1",\n            "name": "Node 35",\n            "children": []\n          },\n          {\n            "id": "3.4.2",\n            "name": "Node 36",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 4,\n    "name": "Node 37",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 38",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 39",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 40",\n                "children": []\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 41",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 42",\n            "children": []\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 43",\n            "children": []\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 44",\n            "children": []\n          },\n          {\n            "id": "4.1.5",\n            "name": "Node 45",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "4.2",\n        "name": "Node 46",\n        "children": [\n          {\n            "id": "4.2.1",\n            "name": "Node 47",\n            "children": []\n          },\n          {\n            "id": "4.2.2",\n            "name": "Node 48",\n            "children": []\n          },\n          {\n            "id": "4.2.3",\n            "name": "Node 49",\n            "children": [\n              {\n                "id": "4.2.3.1",\n                "name": "Node 50",\n                "children": []\n              },\n              {\n                "id": "4.2.3.2",\n                "name": "Node 51",\n                "children": []\n              },\n              {\n                "id": "4.2.3.3",\n                "name": "Node 52",\n                "children": []\n              },\n              {\n                "id": "4.2.3.4",\n                "name": "Node 53",\n                "children": []\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "4.3",\n        "name": "Node 54",\n        "children": [\n          {\n            "id": "4.3.1",\n            "name": "Node 55",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 5,\n    "name": "Node 56",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 58",\n            "children": [\n              {\n                "id": "5.1.1.1",\n                "name": "Node 59",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 60",\n            "children": []\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 61",\n            "children": []\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 62",\n            "children": []\n          },\n          {\n            "id": "5.1.5",\n            "name": "Node 63",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 64",\n        "children": [\n          {\n            "id": "5.2.1",\n            "name": "Node 65",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 6,\n    "name": "Node 66",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 67",\n        "children": []\n      },\n      {\n        "id": "6.2",\n        "name": "Node 68",\n        "children": [\n          {\n            "id": "6.2.1",\n            "name": "Node 69",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "6.3",\n        "name": "Node 70",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 71",\n            "children": []\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 72",\n            "children": []\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 73",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 7,\n    "name": "Node 74",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 75",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 76",\n            "children": []\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 77",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 78",\n                "children": []\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 79",\n                "children": []\n              },\n              {\n                "id": "7.1.2.3",\n                "name": "Node 80",\n                "children": []\n              },\n              {\n                "id": "7.1.2.4",\n                "name": "Node 81",\n                "children": []\n              },\n              {\n                "id": "7.1.2.5",\n                "name": "Node 82",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "7.1.3",\n            "name": "Node 83",\n            "children": []\n          },\n          {\n            "id": "7.1.4",\n            "name": "Node 84",\n            "children": []\n          },\n          {\n            "id": "7.1.5",\n            "name": "Node 85",\n            "children": [\n              {\n                "id": "7.1.5.1",\n                "name": "Node 86",\n                "children": []\n              },\n              {\n                "id": "7.1.5.2",\n                "name": "Node 87",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 8,\n    "name": "Node 88",\n    "children": [\n      {\n        "id": "8.1",\n        "name": "Node 89",\n        "children": [\n          {\n            "id": "8.1.1",\n            "name": "Node 90",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "8.2",\n        "name": "Node 91",\n        "children": []\n      }\n    ]\n  },\n  {\n    "id": 9,\n    "name": "Node 92",\n    "children": [\n      {\n        "id": "9.1",\n        "name": "Node 93",\n        "children": []\n      }\n    ]\n  },\n  {\n    "id": 10,\n    "name": "Node 94",\n    "children": [\n      {\n        "id": "10.1",\n        "name": "Node 95",\n        "children": [\n          {\n            "id": "10.1.1",\n            "name": "Node 96",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "10.2",\n        "name": "Node 97",\n        "children": [\n          {\n            "id": "10.2.1",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "10.2.1.1",\n                "name": "Node 99",\n                "children": []\n              },\n              {\n                "id": "10.2.1.2",\n                "name": "Node 100",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      expandableNodeIds.push(node.id);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst renderTreeNodes = (nodes, depth = 0) => {\n  return ensureArray(nodes).map(node => {\n    const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n    return (\n      <TreeNode\n        key={node.id}\n        nodeId={node.id}\n        render={() => (\n          <OverflowTooltip label={node.name}>\n            {node.name}\n          </OverflowTooltip>\n        )}\n      >\n        {(childCount > 0)\n          ? renderTreeNodes(node.children, depth + 1)\n          : null\n        }\n      </TreeNode>\n    );\n  });\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"basic tree view\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTreeNodes(treeNodes)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,r.jsx)(i.Z,{component:R,file:{data:"import {\n  Box,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from './data/tree-nodes.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst renderTreeNodes = (nodes, depth = 0) => {\n  return ensureArray(nodes).map(node => {\n    const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n    return (\n      <TreeNode\n        key={node.id}\n        nodeId={node.id}\n        render={({ isExpanded }) => {\n          const icon = (() => {\n            if (childCount > 0) {\n              return isExpanded ? 'folder-open' : 'folder';\n            }\n            return 'server';\n          })();\n          const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n          return (\n            <>\n              <Icon icon={icon} color={iconColor} mr=\"2x\" />\n              <OverflowTooltip label={node.name}>\n                {node.name}\n              </OverflowTooltip>\n            </>\n          );\n        }}\n      >\n        {(childCount > 0)\n          ? renderTreeNodes(node.children, depth + 1)\n          : null\n        }\n      </TreeNode>\n    );\n  });\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"node icons\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTreeNodes(treeNodes)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": 1,\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": []\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 4",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 5",\n                "children": []\n              },\n              {\n                "id": "1.1.2.2",\n                "name": "Node 6",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": []\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 8",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 2,\n    "name": "Node 9",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 10",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 11",\n            "children": []\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 12",\n            "children": []\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 13",\n            "children": []\n          },\n          {\n            "id": "2.1.4",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "2.1.4.1",\n                "name": "Node 15",\n                "children": []\n              },\n              {\n                "id": "2.1.4.2",\n                "name": "Node 16",\n                "children": []\n              },\n              {\n                "id": "2.1.4.3",\n                "name": "Node 17",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 3,\n    "name": "Node 18",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 19",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 20",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 21",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 22",\n            "children": []\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 23",\n            "children": []\n          },\n          {\n            "id": "3.2.3",\n            "name": "Node 24",\n            "children": []\n          },\n          {\n            "id": "3.2.4",\n            "name": "Node 25",\n            "children": [\n              {\n                "id": "3.2.4.1",\n                "name": "Node 26",\n                "children": []\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 27",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 28",\n            "children": []\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 29",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 30",\n                "children": []\n              },\n              {\n                "id": "3.3.2.2",\n                "name": "Node 31",\n                "children": []\n              },\n              {\n                "id": "3.3.2.3",\n                "name": "Node 32",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "3.3.3",\n            "name": "Node 33",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 34",\n        "children": [\n          {\n            "id": "3.4.1",\n            "name": "Node 35",\n            "children": []\n          },\n          {\n            "id": "3.4.2",\n            "name": "Node 36",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 4,\n    "name": "Node 37",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 38",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 39",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 40",\n                "children": []\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 41",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 42",\n            "children": []\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 43",\n            "children": []\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 44",\n            "children": []\n          },\n          {\n            "id": "4.1.5",\n            "name": "Node 45",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "4.2",\n        "name": "Node 46",\n        "children": [\n          {\n            "id": "4.2.1",\n            "name": "Node 47",\n            "children": []\n          },\n          {\n            "id": "4.2.2",\n            "name": "Node 48",\n            "children": []\n          },\n          {\n            "id": "4.2.3",\n            "name": "Node 49",\n            "children": [\n              {\n                "id": "4.2.3.1",\n                "name": "Node 50",\n                "children": []\n              },\n              {\n                "id": "4.2.3.2",\n                "name": "Node 51",\n                "children": []\n              },\n              {\n                "id": "4.2.3.3",\n                "name": "Node 52",\n                "children": []\n              },\n              {\n                "id": "4.2.3.4",\n                "name": "Node 53",\n                "children": []\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "4.3",\n        "name": "Node 54",\n        "children": [\n          {\n            "id": "4.3.1",\n            "name": "Node 55",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 5,\n    "name": "Node 56",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 58",\n            "children": [\n              {\n                "id": "5.1.1.1",\n                "name": "Node 59",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 60",\n            "children": []\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 61",\n            "children": []\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 62",\n            "children": []\n          },\n          {\n            "id": "5.1.5",\n            "name": "Node 63",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 64",\n        "children": [\n          {\n            "id": "5.2.1",\n            "name": "Node 65",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 6,\n    "name": "Node 66",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 67",\n        "children": []\n      },\n      {\n        "id": "6.2",\n        "name": "Node 68",\n        "children": [\n          {\n            "id": "6.2.1",\n            "name": "Node 69",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "6.3",\n        "name": "Node 70",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 71",\n            "children": []\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 72",\n            "children": []\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 73",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 7,\n    "name": "Node 74",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 75",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 76",\n            "children": []\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 77",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 78",\n                "children": []\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 79",\n                "children": []\n              },\n              {\n                "id": "7.1.2.3",\n                "name": "Node 80",\n                "children": []\n              },\n              {\n                "id": "7.1.2.4",\n                "name": "Node 81",\n                "children": []\n              },\n              {\n                "id": "7.1.2.5",\n                "name": "Node 82",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "7.1.3",\n            "name": "Node 83",\n            "children": []\n          },\n          {\n            "id": "7.1.4",\n            "name": "Node 84",\n            "children": []\n          },\n          {\n            "id": "7.1.5",\n            "name": "Node 85",\n            "children": [\n              {\n                "id": "7.1.5.1",\n                "name": "Node 86",\n                "children": []\n              },\n              {\n                "id": "7.1.5.2",\n                "name": "Node 87",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 8,\n    "name": "Node 88",\n    "children": [\n      {\n        "id": "8.1",\n        "name": "Node 89",\n        "children": [\n          {\n            "id": "8.1.1",\n            "name": "Node 90",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "8.2",\n        "name": "Node 91",\n        "children": []\n      }\n    ]\n  },\n  {\n    "id": 9,\n    "name": "Node 92",\n    "children": [\n      {\n        "id": "9.1",\n        "name": "Node 93",\n        "children": []\n      }\n    ]\n  },\n  {\n    "id": 10,\n    "name": "Node 94",\n    "children": [\n      {\n        "id": "10.1",\n        "name": "Node 95",\n        "children": [\n          {\n            "id": "10.1.1",\n            "name": "Node 96",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "10.2",\n        "name": "Node 97",\n        "children": [\n          {\n            "id": "10.2.1",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "10.2.1.1",\n                "name": "Node 99",\n                "children": []\n              },\n              {\n                "id": "10.2.1.2",\n                "name": "Node 100",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      expandableNodeIds.push(node.id);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst renderTreeNodes = (nodes, depth = 0) => {\n  return ensureArray(nodes).map(node => {\n    const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n    return (\n      <TreeNode\n        key={node.id}\n        nodeId={node.id}\n        render={({ isExpanded }) => {\n          const icon = (() => {\n            if (childCount > 0) {\n              return isExpanded ? 'folder-open' : 'folder';\n            }\n            return 'server';\n          })();\n          const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n          return (\n            <>\n              <Icon icon={icon} color={iconColor} mr=\"2x\" />\n              <OverflowTooltip label={node.name}>\n                {node.name}\n              </OverflowTooltip>\n            </>\n          );\n        }}\n      >\n        {(childCount > 0)\n          ? renderTreeNodes(node.children, depth + 1)\n          : null\n        }\n      </TreeNode>\n    );\n  });\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"node icons\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTreeNodes(treeNodes)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,r.jsxs)(e.h3,{id:"multi-selection",children:["Multi-selection",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#multi-selection",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(i.Z,{component:I,file:{data:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from './data/tree-nodes.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst renderTreeNodes = (nodes, depth = 0) => {\n  return ensureArray(nodes).map(node => {\n    const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n    return (\n      <TreeNode\n        key={node.id}\n        nodeId={node.id}\n        render={({ isExpanded, isSelected, select }) => {\n          const icon = (() => {\n            if (childCount > 0) {\n              return isExpanded ? 'folder-open' : 'folder';\n            }\n            return 'server';\n          })();\n          const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n          return (\n            <>\n              <Flex\n                onClick={(event) => {\n                  // Prevent event propagation when clicking the checkbox\n                  event.stopPropagation();\n                }}\n                mr=\"2x\"\n              >\n                <Checkbox\n                  checked={isSelected}\n                  onChange={() => {\n                    select();\n                  }}\n                />\n              </Flex>\n              <Icon icon={icon} color={iconColor} mr=\"2x\" />\n              <OverflowTooltip label={node.name}>\n                {node.name}\n              </OverflowTooltip>\n            </>\n          );\n        }}\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n            backgroundColor: 'transparent',\n          },\n        }}\n      >\n        {(childCount > 0)\n          ? renderTreeNodes(node.children, depth + 1)\n          : null\n        }\n      </TreeNode>\n    );\n  });\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"multi-select\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isMultiSelectable\n        >\n          {renderTreeNodes(treeNodes)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": 1,\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": []\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 4",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 5",\n                "children": []\n              },\n              {\n                "id": "1.1.2.2",\n                "name": "Node 6",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": []\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 8",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 2,\n    "name": "Node 9",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 10",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 11",\n            "children": []\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 12",\n            "children": []\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 13",\n            "children": []\n          },\n          {\n            "id": "2.1.4",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "2.1.4.1",\n                "name": "Node 15",\n                "children": []\n              },\n              {\n                "id": "2.1.4.2",\n                "name": "Node 16",\n                "children": []\n              },\n              {\n                "id": "2.1.4.3",\n                "name": "Node 17",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 3,\n    "name": "Node 18",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 19",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 20",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 21",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 22",\n            "children": []\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 23",\n            "children": []\n          },\n          {\n            "id": "3.2.3",\n            "name": "Node 24",\n            "children": []\n          },\n          {\n            "id": "3.2.4",\n            "name": "Node 25",\n            "children": [\n              {\n                "id": "3.2.4.1",\n                "name": "Node 26",\n                "children": []\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 27",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 28",\n            "children": []\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 29",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 30",\n                "children": []\n              },\n              {\n                "id": "3.3.2.2",\n                "name": "Node 31",\n                "children": []\n              },\n              {\n                "id": "3.3.2.3",\n                "name": "Node 32",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "3.3.3",\n            "name": "Node 33",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 34",\n        "children": [\n          {\n            "id": "3.4.1",\n            "name": "Node 35",\n            "children": []\n          },\n          {\n            "id": "3.4.2",\n            "name": "Node 36",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 4,\n    "name": "Node 37",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 38",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 39",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 40",\n                "children": []\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 41",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 42",\n            "children": []\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 43",\n            "children": []\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 44",\n            "children": []\n          },\n          {\n            "id": "4.1.5",\n            "name": "Node 45",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "4.2",\n        "name": "Node 46",\n        "children": [\n          {\n            "id": "4.2.1",\n            "name": "Node 47",\n            "children": []\n          },\n          {\n            "id": "4.2.2",\n            "name": "Node 48",\n            "children": []\n          },\n          {\n            "id": "4.2.3",\n            "name": "Node 49",\n            "children": [\n              {\n                "id": "4.2.3.1",\n                "name": "Node 50",\n                "children": []\n              },\n              {\n                "id": "4.2.3.2",\n                "name": "Node 51",\n                "children": []\n              },\n              {\n                "id": "4.2.3.3",\n                "name": "Node 52",\n                "children": []\n              },\n              {\n                "id": "4.2.3.4",\n                "name": "Node 53",\n                "children": []\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "4.3",\n        "name": "Node 54",\n        "children": [\n          {\n            "id": "4.3.1",\n            "name": "Node 55",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 5,\n    "name": "Node 56",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 58",\n            "children": [\n              {\n                "id": "5.1.1.1",\n                "name": "Node 59",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 60",\n            "children": []\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 61",\n            "children": []\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 62",\n            "children": []\n          },\n          {\n            "id": "5.1.5",\n            "name": "Node 63",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 64",\n        "children": [\n          {\n            "id": "5.2.1",\n            "name": "Node 65",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 6,\n    "name": "Node 66",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 67",\n        "children": []\n      },\n      {\n        "id": "6.2",\n        "name": "Node 68",\n        "children": [\n          {\n            "id": "6.2.1",\n            "name": "Node 69",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "6.3",\n        "name": "Node 70",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 71",\n            "children": []\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 72",\n            "children": []\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 73",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 7,\n    "name": "Node 74",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 75",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 76",\n            "children": []\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 77",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 78",\n                "children": []\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 79",\n                "children": []\n              },\n              {\n                "id": "7.1.2.3",\n                "name": "Node 80",\n                "children": []\n              },\n              {\n                "id": "7.1.2.4",\n                "name": "Node 81",\n                "children": []\n              },\n              {\n                "id": "7.1.2.5",\n                "name": "Node 82",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "7.1.3",\n            "name": "Node 83",\n            "children": []\n          },\n          {\n            "id": "7.1.4",\n            "name": "Node 84",\n            "children": []\n          },\n          {\n            "id": "7.1.5",\n            "name": "Node 85",\n            "children": [\n              {\n                "id": "7.1.5.1",\n                "name": "Node 86",\n                "children": []\n              },\n              {\n                "id": "7.1.5.2",\n                "name": "Node 87",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 8,\n    "name": "Node 88",\n    "children": [\n      {\n        "id": "8.1",\n        "name": "Node 89",\n        "children": [\n          {\n            "id": "8.1.1",\n            "name": "Node 90",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "8.2",\n        "name": "Node 91",\n        "children": []\n      }\n    ]\n  },\n  {\n    "id": 9,\n    "name": "Node 92",\n    "children": [\n      {\n        "id": "9.1",\n        "name": "Node 93",\n        "children": []\n      }\n    ]\n  },\n  {\n    "id": 10,\n    "name": "Node 94",\n    "children": [\n      {\n        "id": "10.1",\n        "name": "Node 95",\n        "children": [\n          {\n            "id": "10.1.1",\n            "name": "Node 96",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "10.2",\n        "name": "Node 97",\n        "children": [\n          {\n            "id": "10.2.1",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "10.2.1.1",\n                "name": "Node 99",\n                "children": []\n              },\n              {\n                "id": "10.2.1.2",\n                "name": "Node 100",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      expandableNodeIds.push(node.id);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst renderTreeNodes = (nodes, depth = 0) => {\n  return ensureArray(nodes).map(node => {\n    const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n    return (\n      <TreeNode\n        key={node.id}\n        nodeId={node.id}\n        render={({ isExpanded, isSelected, select }) => {\n          const icon = (() => {\n            if (childCount > 0) {\n              return isExpanded ? 'folder-open' : 'folder';\n            }\n            return 'server';\n          })();\n          const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n          return (\n            <>\n              <Flex\n                onClick={(event) => {\n                  // Prevent event propagation when clicking the checkbox\n                  event.stopPropagation();\n                }}\n                mr=\"2x\"\n              >\n                <Checkbox\n                  checked={isSelected}\n                  onChange={() => {\n                    select();\n                  }}\n                />\n              </Flex>\n              <Icon icon={icon} color={iconColor} mr=\"2x\" />\n              <OverflowTooltip label={node.name}>\n                {node.name}\n              </OverflowTooltip>\n            </>\n          );\n        }}\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n            backgroundColor: 'transparent',\n          },\n        }}\n      >\n        {(childCount > 0)\n          ? renderTreeNodes(node.children, depth + 1)\n          : null\n        }\n      </TreeNode>\n    );\n  });\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"multi-select\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isMultiSelectable\n        >\n          {renderTreeNodes(treeNodes)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,r.jsxs)(e.h3,{id:"controlled-tree-view",children:["Controlled tree view",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#controlled-tree-view",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(i.Z,{component:j,file:{data:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { ensureArray } from \'ensure-type\';\nimport React, { useCallback, useState } from \'react\';\nimport treeNodes from \'./data/tree-nodes.json\';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from \'./utils\';\n\nconst treeMap = buildTreeMap(treeNodes);\nconst expandableNodes = findExpandableNodeIds(treeNodes);\nconst allNodes = Array.from(treeMap.keys());\n\nconst renderTreeNodes = (nodes, depth = 0) => {\n  return ensureArray(nodes).map(node => {\n    const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n    return (\n      <TreeNode\n        key={node.id}\n        nodeId={node.id}\n        render={({ isExpanded, isSelected, select }) => {\n          const icon = (() => {\n            if (childCount > 0) {\n              return isExpanded ? \'folder-open\' : \'folder\';\n            }\n            return \'server\';\n          })();\n          const iconColor = (childCount > 0) ? \'yellow:50\' : \'currentColor\';\n\n          return (\n            <>\n              <Flex\n                onClick={(event) => {\n                  // Prevent event propagation when clicking the checkbox\n                  event.stopPropagation();\n                }}\n                mr="2x"\n              >\n                <Checkbox\n                  checked={isSelected}\n                  onChange={() => {\n                    select();\n                  }}\n                />\n              </Flex>\n              <Icon icon={icon} color={iconColor} mr="2x" />\n              <OverflowTooltip label={node.name}>\n                {node.name}\n              </OverflowTooltip>\n            </>\n          );\n        }}\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          \'&[aria-selected="true"] > *:first-of-type:not(:hover)\': {\n            backgroundColor: \'transparent\',\n          },\n        }}\n      >\n        {(childCount > 0)\n          ? renderTreeNodes(node.children, depth + 1)\n          : null\n        }\n      </TreeNode>\n    );\n  });\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodes);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodes(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodes(expandableNodes);\n  }, []);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodes([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodes(allNodes);\n  }, []);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodes([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="3x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === expandableNodes.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Stack spacing="2x">\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n      <Divider my="4x" />\n      <Box\n        sx={{\n          minWidth: 160,\n          maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="scroll"\n        >\n          <TreeView\n            aria-label="controlled"\n            isSelectable\n            isMultiSelectable\n            expandedNodes={expandedNodes}\n            selectedNodes={selectedNodes}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {renderTreeNodes(treeNodes)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": 1,\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": []\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 4",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 5",\n                "children": []\n              },\n              {\n                "id": "1.1.2.2",\n                "name": "Node 6",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": []\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 8",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 2,\n    "name": "Node 9",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 10",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 11",\n            "children": []\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 12",\n            "children": []\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 13",\n            "children": []\n          },\n          {\n            "id": "2.1.4",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "2.1.4.1",\n                "name": "Node 15",\n                "children": []\n              },\n              {\n                "id": "2.1.4.2",\n                "name": "Node 16",\n                "children": []\n              },\n              {\n                "id": "2.1.4.3",\n                "name": "Node 17",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 3,\n    "name": "Node 18",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 19",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 20",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 21",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 22",\n            "children": []\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 23",\n            "children": []\n          },\n          {\n            "id": "3.2.3",\n            "name": "Node 24",\n            "children": []\n          },\n          {\n            "id": "3.2.4",\n            "name": "Node 25",\n            "children": [\n              {\n                "id": "3.2.4.1",\n                "name": "Node 26",\n                "children": []\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 27",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 28",\n            "children": []\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 29",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 30",\n                "children": []\n              },\n              {\n                "id": "3.3.2.2",\n                "name": "Node 31",\n                "children": []\n              },\n              {\n                "id": "3.3.2.3",\n                "name": "Node 32",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "3.3.3",\n            "name": "Node 33",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 34",\n        "children": [\n          {\n            "id": "3.4.1",\n            "name": "Node 35",\n            "children": []\n          },\n          {\n            "id": "3.4.2",\n            "name": "Node 36",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 4,\n    "name": "Node 37",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 38",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 39",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 40",\n                "children": []\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 41",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 42",\n            "children": []\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 43",\n            "children": []\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 44",\n            "children": []\n          },\n          {\n            "id": "4.1.5",\n            "name": "Node 45",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "4.2",\n        "name": "Node 46",\n        "children": [\n          {\n            "id": "4.2.1",\n            "name": "Node 47",\n            "children": []\n          },\n          {\n            "id": "4.2.2",\n            "name": "Node 48",\n            "children": []\n          },\n          {\n            "id": "4.2.3",\n            "name": "Node 49",\n            "children": [\n              {\n                "id": "4.2.3.1",\n                "name": "Node 50",\n                "children": []\n              },\n              {\n                "id": "4.2.3.2",\n                "name": "Node 51",\n                "children": []\n              },\n              {\n                "id": "4.2.3.3",\n                "name": "Node 52",\n                "children": []\n              },\n              {\n                "id": "4.2.3.4",\n                "name": "Node 53",\n                "children": []\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "4.3",\n        "name": "Node 54",\n        "children": [\n          {\n            "id": "4.3.1",\n            "name": "Node 55",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 5,\n    "name": "Node 56",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 58",\n            "children": [\n              {\n                "id": "5.1.1.1",\n                "name": "Node 59",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 60",\n            "children": []\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 61",\n            "children": []\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 62",\n            "children": []\n          },\n          {\n            "id": "5.1.5",\n            "name": "Node 63",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 64",\n        "children": [\n          {\n            "id": "5.2.1",\n            "name": "Node 65",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 6,\n    "name": "Node 66",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 67",\n        "children": []\n      },\n      {\n        "id": "6.2",\n        "name": "Node 68",\n        "children": [\n          {\n            "id": "6.2.1",\n            "name": "Node 69",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "6.3",\n        "name": "Node 70",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 71",\n            "children": []\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 72",\n            "children": []\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 73",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 7,\n    "name": "Node 74",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 75",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 76",\n            "children": []\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 77",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 78",\n                "children": []\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 79",\n                "children": []\n              },\n              {\n                "id": "7.1.2.3",\n                "name": "Node 80",\n                "children": []\n              },\n              {\n                "id": "7.1.2.4",\n                "name": "Node 81",\n                "children": []\n              },\n              {\n                "id": "7.1.2.5",\n                "name": "Node 82",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "7.1.3",\n            "name": "Node 83",\n            "children": []\n          },\n          {\n            "id": "7.1.4",\n            "name": "Node 84",\n            "children": []\n          },\n          {\n            "id": "7.1.5",\n            "name": "Node 85",\n            "children": [\n              {\n                "id": "7.1.5.1",\n                "name": "Node 86",\n                "children": []\n              },\n              {\n                "id": "7.1.5.2",\n                "name": "Node 87",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 8,\n    "name": "Node 88",\n    "children": [\n      {\n        "id": "8.1",\n        "name": "Node 89",\n        "children": [\n          {\n            "id": "8.1.1",\n            "name": "Node 90",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "8.2",\n        "name": "Node 91",\n        "children": []\n      }\n    ]\n  },\n  {\n    "id": 9,\n    "name": "Node 92",\n    "children": [\n      {\n        "id": "9.1",\n        "name": "Node 93",\n        "children": []\n      }\n    ]\n  },\n  {\n    "id": 10,\n    "name": "Node 94",\n    "children": [\n      {\n        "id": "10.1",\n        "name": "Node 95",\n        "children": [\n          {\n            "id": "10.1.1",\n            "name": "Node 96",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "10.2",\n        "name": "Node 97",\n        "children": [\n          {\n            "id": "10.2.1",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "10.2.1.1",\n                "name": "Node 99",\n                "children": []\n              },\n              {\n                "id": "10.2.1.2",\n                "name": "Node 100",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      expandableNodeIds.push(node.id);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { ensureArray } from \'ensure-type\';\nimport React, { useCallback, useState } from \'react\';\nimport treeNodes from \'@/pages/components/tree-view/data/tree-nodes.json\';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from \'@/pages/components/tree-view/utils\';\n\nconst treeMap = buildTreeMap(treeNodes);\nconst expandableNodes = findExpandableNodeIds(treeNodes);\nconst allNodes = Array.from(treeMap.keys());\n\nconst renderTreeNodes = (nodes, depth = 0) => {\n  return ensureArray(nodes).map(node => {\n    const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n    return (\n      <TreeNode\n        key={node.id}\n        nodeId={node.id}\n        render={({ isExpanded, isSelected, select }) => {\n          const icon = (() => {\n            if (childCount > 0) {\n              return isExpanded ? \'folder-open\' : \'folder\';\n            }\n            return \'server\';\n          })();\n          const iconColor = (childCount > 0) ? \'yellow:50\' : \'currentColor\';\n\n          return (\n            <>\n              <Flex\n                onClick={(event) => {\n                  // Prevent event propagation when clicking the checkbox\n                  event.stopPropagation();\n                }}\n                mr="2x"\n              >\n                <Checkbox\n                  checked={isSelected}\n                  onChange={() => {\n                    select();\n                  }}\n                />\n              </Flex>\n              <Icon icon={icon} color={iconColor} mr="2x" />\n              <OverflowTooltip label={node.name}>\n                {node.name}\n              </OverflowTooltip>\n            </>\n          );\n        }}\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          \'&[aria-selected="true"] > *:first-of-type:not(:hover)\': {\n            backgroundColor: \'transparent\',\n          },\n        }}\n      >\n        {(childCount > 0)\n          ? renderTreeNodes(node.children, depth + 1)\n          : null\n        }\n      </TreeNode>\n    );\n  });\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodes);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodes(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodes(expandableNodes);\n  }, []);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodes([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodes(allNodes);\n  }, []);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodes([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="3x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === expandableNodes.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Stack spacing="2x">\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n      <Divider my="4x" />\n      <Box\n        sx={{\n          minWidth: 160,\n          maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="scroll"\n        >\n          <TreeView\n            aria-label="controlled"\n            isSelectable\n            isMultiSelectable\n            expandedNodes={expandedNodes}\n            selectedNodes={selectedNodes}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {renderTreeNodes(treeNodes)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,r.jsxs)(e.h3,{id:"resizable-tree-view",children:["Resizable tree view",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#resizable-tree-view",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"min-width"})," is ",(0,r.jsx)(e.code,{children:"160px"}),", and the ",(0,r.jsx)(e.code,{children:"max-width"})," is ",(0,r.jsx)(e.code,{children:"40%"})," of the display area. You can adjust the height according to your specific needs."]}),"\n",(0,r.jsx)(i.Z,{component:b,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useRef, useState } from 'react';\nimport treeNodes from './data/tree-nodes.json';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from './utils';\n\nconst treeMap = buildTreeMap(treeNodes);\nconst expandableNodes = findExpandableNodeIds(treeNodes);\nconst allNodes = Array.from(treeMap.keys());\nconst defaultSelectedNode = allNodes[0];\n\nconst renderTreeNodes = (nodes, depth = 0) => {\n  return ensureArray(nodes).map(node => {\n    const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n    return (\n      <TreeNode\n        key={node.id}\n        nodeId={node.id}\n        render={({ isExpanded }) => {\n          const icon = (() => {\n            if (childCount > 0) {\n              return isExpanded ? 'folder-open' : 'folder';\n            }\n            return 'server';\n          })();\n          const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n          return (\n            <>\n              <Icon icon={icon} color={iconColor} mr=\"2x\" />\n              <OverflowTooltip label={node.name}>\n                {node.name}\n              </OverflowTooltip>\n            </>\n          );\n        }}\n      >\n        {(childCount > 0)\n          ? renderTreeNodes(node.children, depth + 1)\n          : null\n        }\n      </TreeNode>\n    );\n  });\n};\n\nconst App = () => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodes, setSelectedNodes] = useState([defaultSelectedNode]);\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 240,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"scroll\"\n        >\n          <TreeView\n            aria-label=\"basic tree view\"\n            defaultExpandedNodes={expandableNodes}\n            isSelectable\n            selectedNodes={selectedNodes}\n            onNodeSelect={handleSelect}\n          >\n            {renderTreeNodes(treeNodes)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodes[0])?.name}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": 1,\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": []\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 4",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 5",\n                "children": []\n              },\n              {\n                "id": "1.1.2.2",\n                "name": "Node 6",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": []\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 8",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 2,\n    "name": "Node 9",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 10",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 11",\n            "children": []\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 12",\n            "children": []\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 13",\n            "children": []\n          },\n          {\n            "id": "2.1.4",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "2.1.4.1",\n                "name": "Node 15",\n                "children": []\n              },\n              {\n                "id": "2.1.4.2",\n                "name": "Node 16",\n                "children": []\n              },\n              {\n                "id": "2.1.4.3",\n                "name": "Node 17",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 3,\n    "name": "Node 18",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 19",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 20",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 21",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 22",\n            "children": []\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 23",\n            "children": []\n          },\n          {\n            "id": "3.2.3",\n            "name": "Node 24",\n            "children": []\n          },\n          {\n            "id": "3.2.4",\n            "name": "Node 25",\n            "children": [\n              {\n                "id": "3.2.4.1",\n                "name": "Node 26",\n                "children": []\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 27",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 28",\n            "children": []\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 29",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 30",\n                "children": []\n              },\n              {\n                "id": "3.3.2.2",\n                "name": "Node 31",\n                "children": []\n              },\n              {\n                "id": "3.3.2.3",\n                "name": "Node 32",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "3.3.3",\n            "name": "Node 33",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 34",\n        "children": [\n          {\n            "id": "3.4.1",\n            "name": "Node 35",\n            "children": []\n          },\n          {\n            "id": "3.4.2",\n            "name": "Node 36",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 4,\n    "name": "Node 37",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 38",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 39",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 40",\n                "children": []\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 41",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 42",\n            "children": []\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 43",\n            "children": []\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 44",\n            "children": []\n          },\n          {\n            "id": "4.1.5",\n            "name": "Node 45",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "4.2",\n        "name": "Node 46",\n        "children": [\n          {\n            "id": "4.2.1",\n            "name": "Node 47",\n            "children": []\n          },\n          {\n            "id": "4.2.2",\n            "name": "Node 48",\n            "children": []\n          },\n          {\n            "id": "4.2.3",\n            "name": "Node 49",\n            "children": [\n              {\n                "id": "4.2.3.1",\n                "name": "Node 50",\n                "children": []\n              },\n              {\n                "id": "4.2.3.2",\n                "name": "Node 51",\n                "children": []\n              },\n              {\n                "id": "4.2.3.3",\n                "name": "Node 52",\n                "children": []\n              },\n              {\n                "id": "4.2.3.4",\n                "name": "Node 53",\n                "children": []\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "4.3",\n        "name": "Node 54",\n        "children": [\n          {\n            "id": "4.3.1",\n            "name": "Node 55",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 5,\n    "name": "Node 56",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 58",\n            "children": [\n              {\n                "id": "5.1.1.1",\n                "name": "Node 59",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 60",\n            "children": []\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 61",\n            "children": []\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 62",\n            "children": []\n          },\n          {\n            "id": "5.1.5",\n            "name": "Node 63",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 64",\n        "children": [\n          {\n            "id": "5.2.1",\n            "name": "Node 65",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 6,\n    "name": "Node 66",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 67",\n        "children": []\n      },\n      {\n        "id": "6.2",\n        "name": "Node 68",\n        "children": [\n          {\n            "id": "6.2.1",\n            "name": "Node 69",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "6.3",\n        "name": "Node 70",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 71",\n            "children": []\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 72",\n            "children": []\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 73",\n            "children": []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 7,\n    "name": "Node 74",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 75",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 76",\n            "children": []\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 77",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 78",\n                "children": []\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 79",\n                "children": []\n              },\n              {\n                "id": "7.1.2.3",\n                "name": "Node 80",\n                "children": []\n              },\n              {\n                "id": "7.1.2.4",\n                "name": "Node 81",\n                "children": []\n              },\n              {\n                "id": "7.1.2.5",\n                "name": "Node 82",\n                "children": []\n              }\n            ]\n          },\n          {\n            "id": "7.1.3",\n            "name": "Node 83",\n            "children": []\n          },\n          {\n            "id": "7.1.4",\n            "name": "Node 84",\n            "children": []\n          },\n          {\n            "id": "7.1.5",\n            "name": "Node 85",\n            "children": [\n              {\n                "id": "7.1.5.1",\n                "name": "Node 86",\n                "children": []\n              },\n              {\n                "id": "7.1.5.2",\n                "name": "Node 87",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 8,\n    "name": "Node 88",\n    "children": [\n      {\n        "id": "8.1",\n        "name": "Node 89",\n        "children": [\n          {\n            "id": "8.1.1",\n            "name": "Node 90",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "8.2",\n        "name": "Node 91",\n        "children": []\n      }\n    ]\n  },\n  {\n    "id": 9,\n    "name": "Node 92",\n    "children": [\n      {\n        "id": "9.1",\n        "name": "Node 93",\n        "children": []\n      }\n    ]\n  },\n  {\n    "id": 10,\n    "name": "Node 94",\n    "children": [\n      {\n        "id": "10.1",\n        "name": "Node 95",\n        "children": [\n          {\n            "id": "10.1.1",\n            "name": "Node 96",\n            "children": []\n          }\n        ]\n      },\n      {\n        "id": "10.2",\n        "name": "Node 97",\n        "children": [\n          {\n            "id": "10.2.1",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "10.2.1.1",\n                "name": "Node 99",\n                "children": []\n              },\n              {\n                "id": "10.2.1.2",\n                "name": "Node 100",\n                "children": []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      expandableNodeIds.push(node.id);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useRef, useState } from 'react';\nimport treeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from '@/pages/components/tree-view/utils';\n\nconst treeMap = buildTreeMap(treeNodes);\nconst expandableNodes = findExpandableNodeIds(treeNodes);\nconst allNodes = Array.from(treeMap.keys());\nconst defaultSelectedNode = allNodes[0];\n\nconst renderTreeNodes = (nodes, depth = 0) => {\n  return ensureArray(nodes).map(node => {\n    const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n    return (\n      <TreeNode\n        key={node.id}\n        nodeId={node.id}\n        render={({ isExpanded }) => {\n          const icon = (() => {\n            if (childCount > 0) {\n              return isExpanded ? 'folder-open' : 'folder';\n            }\n            return 'server';\n          })();\n          const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n          return (\n            <>\n              <Icon icon={icon} color={iconColor} mr=\"2x\" />\n              <OverflowTooltip label={node.name}>\n                {node.name}\n              </OverflowTooltip>\n            </>\n          );\n        }}\n      >\n        {(childCount > 0)\n          ? renderTreeNodes(node.children, depth + 1)\n          : null\n        }\n      </TreeNode>\n    );\n  });\n};\n\nconst App = () => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodes, setSelectedNodes] = useState([defaultSelectedNode]);\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 240,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"scroll\"\n        >\n          <TreeView\n            aria-label=\"basic tree view\"\n            defaultExpandedNodes={expandableNodes}\n            isSelectable\n            selectedNodes={selectedNodes}\n            onNodeSelect={handleSelect}\n          >\n            {renderTreeNodes(treeNodes)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodes[0])?.name}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,r.jsxs)(e.h2,{id:"props",children:["Props",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(e.h3,{id:"treeview",children:["TreeView",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeview",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{align:"left",children:"Name"}),(0,r.jsx)(e.th,{align:"left",children:"Type"}),(0,r.jsx)(e.th,{align:"left",children:"Default"}),(0,r.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"defaultExpandedNodes"}),(0,r.jsx)(e.td,{align:"left",children:"array"}),(0,r.jsx)(e.td,{align:"left",children:"[]"}),(0,r.jsx)(e.td,{align:"left",children:"An array of expanded node ids for initial state (uncontrolled)."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"defaultSelectedNodes"}),(0,r.jsx)(e.td,{align:"left",children:"array"}),(0,r.jsx)(e.td,{align:"left",children:"[]"}),(0,r.jsx)(e.td,{align:"left",children:"An array of selected node ids for initial state (uncontrolled)."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"expandedNodes"}),(0,r.jsx)(e.td,{align:"left",children:"array"}),(0,r.jsx)(e.td,{align:"left"}),(0,r.jsx)(e.td,{align:"left",children:"An array of expanded node ids for controlled state."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"id"}),(0,r.jsx)(e.td,{align:"left",children:"string"}),(0,r.jsx)(e.td,{align:"left"}),(0,r.jsxs)(e.td,{align:"left",children:["The ",(0,r.jsx)(e.code,{children:"id"})," prop used for accessibility purpose. If not provided, a random id will be generated."]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"isSelectable"}),(0,r.jsx)(e.td,{align:"left",children:"bool"}),(0,r.jsx)(e.td,{align:"left",children:"false"}),(0,r.jsx)(e.td,{align:"left",children:"Determines if the tree view allows node selection."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"isMultiSelectable"}),(0,r.jsx)(e.td,{align:"left",children:"bool"}),(0,r.jsx)(e.td,{align:"left",children:"false"}),(0,r.jsx)(e.td,{align:"left",children:"Determines if the tree view allows multiple node selections."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"onNodeFocus"}),(0,r.jsx)(e.td,{align:"left",children:"function"}),(0,r.jsx)(e.td,{align:"left"}),(0,r.jsxs)(e.td,{align:"left",children:["A callback function invoked when a tree node is focused.",(0,r.jsxs)("pre",{children:[(0,r.jsx)(e.code,{children:"function(nodeId: string) => void"}),(0,r.jsx)("br",{})," • ",(0,r.jsx)(e.code,{children:"nodeId"})," The id of the focused node."]})]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"onNodeSelect"}),(0,r.jsx)(e.td,{align:"left",children:"function"}),(0,r.jsx)(e.td,{align:"left"}),(0,r.jsxs)(e.td,{align:"left",children:["A callback function triggered when tree nodes are selected/unselected.",(0,r.jsxs)("pre",{children:[(0,r.jsx)(e.code,{children:"function(nodeIds: Array<string>) => void"}),(0,r.jsx)("br",{})," • ",(0,r.jsx)(e.code,{children:"nodeIds"})," An array of selected node ids."]})]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"onNodeToggle"}),(0,r.jsx)(e.td,{align:"left",children:"function"}),(0,r.jsx)(e.td,{align:"left"}),(0,r.jsxs)(e.td,{align:"left",children:["A callback function triggered when tree nodes are expanded/collapsed.",(0,r.jsxs)("pre",{children:[(0,r.jsx)(e.code,{children:"function(nodeIds: Array<string>) => void"}),(0,r.jsx)("br",{})," • ",(0,r.jsx)(e.code,{children:"nodeIds"})," An array of expanded node ids."]})]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"selectedNodes"}),(0,r.jsx)(e.td,{align:"left",children:"array"}),(0,r.jsx)(e.td,{align:"left"}),(0,r.jsx)(e.td,{align:"left",children:"An array of selected node ids for controlled state."})]})]})]}),"\n",(0,r.jsxs)(e.h3,{id:"treenode",children:["TreeNode",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treenode",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{align:"left",children:"Name"}),(0,r.jsx)(e.th,{align:"left",children:"Type"}),(0,r.jsx)(e.th,{align:"left",children:"Default"}),(0,r.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"ContentComponent"}),(0,r.jsx)(e.td,{align:"left",children:"ElementType"}),(0,r.jsx)(e.td,{align:"left",children:"TreeNodeContent"}),(0,r.jsx)(e.td,{align:"left",children:"The component used to render the contenr of the node."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"ContentProps"}),(0,r.jsx)(e.td,{align:"left",children:"object"}),(0,r.jsx)(e.td,{align:"left"}),(0,r.jsx)(e.td,{align:"left",children:"Props applied to the content component."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"TransitionComponent"}),(0,r.jsx)(e.td,{align:"left",children:"ElementType"}),(0,r.jsx)(e.td,{align:"left",children:"Collapse"}),(0,r.jsx)(e.td,{align:"left",children:"The component used for the transition."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"TransitionProps"}),(0,r.jsx)(e.td,{align:"left",children:"object"}),(0,r.jsx)(e.td,{align:"left"}),(0,r.jsxs)(e.td,{align:"left",children:["Props applied to the ",(0,r.jsx)(e.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"children"}),(0,r.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,r.jsx)(e.td,{align:"left"}),(0,r.jsx)(e.td,{align:"left",children:"The content of the node."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"disabled"}),(0,r.jsx)(e.td,{align:"left",children:"bool"}),(0,r.jsx)(e.td,{align:"left",children:"false"}),(0,r.jsx)(e.td,{align:"left",children:"Determines if the node is disabled."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"nodeId"}),(0,r.jsx)(e.td,{align:"left",children:"string"}),(0,r.jsx)(e.td,{align:"left"}),(0,r.jsxs)(e.td,{align:"left",children:[(0,r.jsx)(e.code,{children:"REQUIRED"})," The id of the node."]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"render"}),(0,r.jsx)(e.td,{align:"left",children:"function"}),(0,r.jsx)(e.td,{align:"left"}),(0,r.jsxs)(e.td,{align:"left",children:[(0,r.jsx)(e.code,{children:"REQUIRED"})," A render function to render the node.",(0,r.jsxs)("pre",{children:[(0,r.jsx)(e.code,{children:"function(props: object) => ReactNode"})," ",(0,r.jsx)("br",{})," • ",(0,r.jsx)(e.code,{children:"props"})," The props passed to the render function.",(0,r.jsx)("br",{}),"    - nodeDepth: number",(0,r.jsx)("br",{}),"    - nodeId: string",(0,r.jsx)("br",{}),"    - isDisabled: boolean",(0,r.jsx)("br",{}),"    - isExpandable: boolean",(0,r.jsx)("br",{}),"    - isExpanded: boolean",(0,r.jsx)("br",{}),"    - isFocused: boolean",(0,r.jsx)("br",{}),"    - isSelected: boolean",(0,r.jsx)("br",{}),"    - focus: function",(0,r.jsx)("br",{}),"    - select: function",(0,r.jsx)("br",{}),"    - toggle: function",(0,r.jsx)("br",{})]})]})]})]})]})]})}var G=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,o.ah)(),n.components).wrapper;return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(V,n)})):V(n)}},31036:function(n,e,d){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/tree-view",function(){return d(51533)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=31036)}),_N_E=n.O()}]);