(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7456],{17933:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return k}});var l,i=t(52322),s=t(45392),r=t(58775),o=t(98922),a=t(2784),c=t(45163);function d(n){return function(n){if(Array.isArray(n))return h(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||u(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(n,e){if(n){if("string"==typeof n)return h(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if("Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return h(n,e)}}function h(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,l=Array(e);t<e;t++)l[t]=n[t];return l}var x={policies:[{id:"0",description:"Default policy"}].concat(d(Array.from({length:10},function(n,e){return{id:String(e+1),description:"Policy ".concat(e+1)}})))},m=(l=new Map,x.policies.forEach(function(n){var e=String(n.id);l.set(e,n)}),l),g=d(m.keys()),p=function(n){var e=m.get(n);return null==e?void 0:e.description},j=function(n){var e=n.length,t=e===g.length;if(0===e){var l="Select";return a.createElement(a.Fragment,null,a.createElement(o.TextLabel,{mr:"2x"},"Policy:"),a.createElement(o.OverflowTooltip,{PopperProps:{usePortal:!0},label:l},l))}if(t)return a.createElement(a.Fragment,null,a.createElement(o.TextLabel,{mr:"2x"},"Policy:"),a.createElement(o.OverflowTooltip,{PopperProps:{usePortal:!0},label:"All"},"All"));var i=n.map(p).join(", ");return a.createElement(a.Fragment,null,a.createElement(o.TextLabel,{mr:"2x"},"Policy:"),a.createElement(o.OverflowTooltip,{PopperProps:{usePortal:!0},label:i},i),a.createElement(o.Text,{ml:"1x"},"(".concat(e,")")))},f=function(){var n,e=function(n){if(Array.isArray(n))return n}(n=(0,a.useState)(g))||function(n,e){var t,l,i=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=i){var s=[],r=!0,o=!1;try{for(i=i.call(n);!(r=(t=i.next()).done)&&(s.push(t.value),!e||s.length!==e);r=!0);}catch(n){o=!0,l=n}finally{try{r||null==i.return||i.return()}finally{if(o)throw l}}return s}}(n,2)||u(n,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),t=e[0],l=e[1];return a.createElement(c.Z,{isSearchable:!0,value:t,onChange:l,options:g,renderOption:p,shouldSelectAllIfNoneSelected:!0},a.createElement(o.MenuButton,{variant:"secondary",width:200},a.createElement(o.Flex,{maxWidth:"calc(".concat(200,"px - 48px)")},j(t))))},M=t(92525);function b(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,l=Array(e);t<e;t++)l[t]=n[t];return l}var v=["all","network-events","system-events"],T=function(n){return({all:"All","network-events":"Network events","system-events":"System events"})[n]},I=function(n){var e=T(n);return a.createElement(a.Fragment,null,a.createElement(o.TextLabel,{mr:"2x"},"Event status:"),a.createElement(o.OverflowTooltip,{PopperProps:{usePortal:!0},label:e},e))},y=function(){var n,e=function(n){if(Array.isArray(n))return n}(n=(0,a.useState)("all"))||function(n,e){var t,l,i=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=i){var s=[],r=!0,o=!1;try{for(i=i.call(n);!(r=(t=i.next()).done)&&(s.push(t.value),!e||s.length!==e);r=!0);}catch(n){o=!0,l=n}finally{try{r||null==i.return||i.return()}finally{if(o)throw l}}return s}}(n,2)||function(n,e){if(n){if("string"==typeof n)return b(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if("Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t)return Array.from(n);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return b(n,e)}}(n,2)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),t=e[0],l=e[1];return a.createElement(M.Z,{value:t,onChange:function(n){console.log("## change:",n),l(n)},options:v,renderOption:T},a.createElement(o.MenuButton,{variant:"secondary",width:200},a.createElement(o.Flex,{maxWidth:"calc(".concat(200,"px - 48px)")},I(t))))};function w(n){var e=Object.assign({div:"div",h1:"h1",p:"p",h2:"h2",a:"a",svg:"svg",use:"use",ul:"ul",li:"li",code:"code",pre:"pre",h3:"h3",h4:"h4",strong:"strong",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,s.ah)(),n.components);return(0,i.jsxs)(e.div,{className:"main-content",id:"main-content",children:["\n","\n","\n",(0,i.jsx)(e.h1,{id:"menu",children:"Menu"}),"\n",(0,i.jsx)(e.p,{children:"A menu is used to display a list of options to the user. It appears when the user interacts with a button, link, or other control that triggers an action."}),"\n",(0,i.jsxs)(e.h2,{id:"import",children:["Import",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"Menu"}),": The component that provides the menu functionality."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"MenuButton"}),": A button that composes ",(0,i.jsx)(e.code,{children:"Button"}),", ",(0,i.jsx)(e.code,{children:"MenuToggle"}),", and ",(0,i.jsx)(e.code,{children:"MenuToggleIcon"})," to create a menu button."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"MenuContent"}),": An unstyled component that provides the menu content."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"MenuDivider"}),": A divider that separates menu items."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"MenuGroup"}),": A component that groups menu items."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"MenuItem"}),": The individual menu items."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"MenuList"}),": A styled ",(0,i.jsx)(e.code,{children:"MenuContent"})," that wraps the menu items."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"MenuToggle"}),": The toggle that opens the menu. This is usually a button or link."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"MenuToggleIcon"}),": An indicator that appears next to the toggle. This is usually a chevron or arrow."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"Submenu"}),": The component that provides the submenu functionality."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"SubmenuContent"}),": An unstyled component that provides the submenu content."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"SubmenuList"}),": A styled ",(0,i.jsx)(e.code,{children:"SubmenuContent"})," that wraps the submenu items."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"SubmenuToggle"}),": The toggle that opens the submenu when the menu item is hovered over."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"import {\n  Menu,\n  MenuButton,\n  MenuContent,\n  MenuDivider,\n  MenuGroup,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  MenuToggleIcon,\n  Submenu,\n  SubmenuContent,\n  SubmenuList,\n  SubmenuToggle,\n  useMenu,\n  useSubmenu,\n} from '@tonic-ui/react';\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"usage",children:["Usage",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.h3,{id:"basic-menu-structure",children:["Basic menu structure",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-menu-structure",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(e.p,{children:"Below is a simple example that shows the basic menu structure."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Flex\n  display="inline-flex"\n  flexDirection="column"\n>\n  <MenuItem value="settings">\n    <Icon icon="settings" mr="2x" />\n    <Text>Settings</Text>\n  </MenuItem>\n  <MenuItem value="accounts">\n    <Icon icon="user-team" mr="2x" />\n    <Text>Accounts</Text>\n  </MenuItem>\n  <MenuItem value="privacy-control">\n    <Icon icon="lock" mr="2x" />\n    <Text>Privacy control</Text>\n  </MenuItem>\n  <MenuDivider />\n  <MenuItem disabled value="restore-defaults">\n    <Icon icon="undo" mr="2x" />\n    <Text>Restore Defaults</Text>\n  </MenuItem>\n</Flex>\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"cascading-submenus",children:["Cascading submenus",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#cascading-submenus",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(e.p,{children:"The following example shows a menu with cascading submenus."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Flex\n  justify="space-between"\n>\n  <Flex\n    flexDirection="column"\n  >\n    <MenuItem>\n      <Text>List item</Text>\n    </MenuItem>\n    <MenuItem>\n      <Text>List item</Text>\n    </MenuItem>\n    <MenuDivider />\n    <Submenu>\n      <SubmenuToggle>\n        <MenuItem>\n          <Flex\n            alignItems="center"\n            columnGap="2x"\n            justifyContent="space-between"\n            width="100%"\n          >\n            <Text>Submenu</Text>\n            <Icon icon="angle-right" />\n          </Flex>\n        </MenuItem>\n      </SubmenuToggle>\n      <SubmenuList width="max-content">\n        <MenuItem>\n          <Text>List item</Text>\n        </MenuItem>\n        <MenuItem>\n          <Text>List item</Text>\n        </MenuItem>\n        <Submenu>\n          <SubmenuToggle>\n            <MenuItem>\n              <Flex\n                alignItems="center"\n                columnGap="2x"\n                justifyContent="space-between"\n                width="100%"\n              >\n                <Text>Submenu</Text>\n                <Icon icon="angle-right" />\n              </Flex>\n            </MenuItem>\n          </SubmenuToggle>\n          <SubmenuList width="max-content">\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n          </SubmenuList>\n        </Submenu>\n      </SubmenuList>\n    </Submenu>\n  </Flex>\n  <Flex\n    flexDirection="column"\n  >\n    <MenuItem pl="9x">\n      <Text>List item</Text>\n    </MenuItem>\n    <MenuItem pl="9x">\n      <Text>List item</Text>\n    </MenuItem>\n    <MenuDivider />\n    <Submenu placement="left-start">\n      <SubmenuToggle>\n        <MenuItem>\n          <Flex\n            alignItems="center"\n            columnGap="2x"\n            justifyContent="space-between"\n            width="100%"\n          >\n            <Icon icon="angle-left" />\n            <Text>Submenu</Text>\n          </Flex>\n        </MenuItem>\n      </SubmenuToggle>\n      <SubmenuList width="max-content">\n        <MenuItem pl="9x">\n          <Text>List item</Text>\n        </MenuItem>\n        <MenuItem pl="9x">\n          <Text>List item</Text>\n        </MenuItem>\n        <Submenu placement="left-start">\n          <SubmenuToggle>\n            <MenuItem>\n              <Flex\n                alignItems="center"\n                columnGap="2x"\n                justifyContent="space-between"\n                width="100%"\n              >\n                <Icon icon="angle-left" />\n                <Text>Submenu</Text>\n              </Flex>\n            </MenuItem>\n          </SubmenuToggle>\n          <SubmenuList\n            width="max-content"\n          >\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n          </SubmenuList>\n        </Submenu>\n      </SubmenuList>\n    </Submenu>\n  </Flex>\n</Flex>\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"controlled-and-uncontrolled-menu",children:["Controlled and uncontrolled menu",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#controlled-and-uncontrolled-menu",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.p,{children:["Pass ",(0,i.jsx)(e.code,{children:"isOpen"})," to the ",(0,i.jsx)(e.code,{children:"Menu"})," component to control the state of the menu."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'function Example() {\n  const [isOpen, toggleIsOpen] = useToggle(false);\n  const onClose = () => toggleIsOpen(false);\n  const [selectedValue, setSelectedValue] = React.useState(null);\n  const handleClickMenuItem = (event) => {\n    const value = event.target.getAttribute(\'value\');\n    if (!isNullOrUndefined(value)) {\n      setSelectedValue(value);\n    }\n  };\n\n  return (\n    <Flex columnGap="4x" alignItems="center">\n      <Menu isOpen={isOpen} onClose={onClose}>\n        <MenuButton onClick={toggleIsOpen}>\n          Options\n        </MenuButton>\n        <MenuList\n          onClick={handleClickMenuItem}\n          width="max-content"\n        >\n          <MenuItem value={1}>\n            List item 1\n          </MenuItem>\n          <MenuItem value={2}>\n            List item 2\n          </MenuItem>\n          <MenuDivider />\n          <Submenu>\n            <SubmenuToggle>\n              <MenuItem>\n                <Flex\n                  alignItems="center"\n                  columnGap="2x"\n                  justifyContent="space-between"\n                  width="100%"\n                >\n                  Submenu\n                  <Icon icon="angle-right" />\n                </Flex>\n              </MenuItem>\n            </SubmenuToggle>\n            <SubmenuList width="max-content">\n              <MenuItem value={3}>\n                List item 3\n              </MenuItem>\n              <MenuItem value={4}>\n                List item 4\n              </MenuItem>\n            </SubmenuList>\n          </Submenu>\n        </MenuList>\n      </Menu>\n      <Text>Selected: {selectedValue}</Text>\n    </Flex>\n  );\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Menu is uncontrolled by default. You can set ",(0,i.jsx)(e.code,{children:"defaultIsOpen"})," to ",(0,i.jsx)(e.code,{children:"true"})," to have the menu open for the first render."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'function Example() {\n  const [selectedValue, setSelectedValue] = React.useState(null);\n  const handleClickMenuItem = (event) => {\n    const value = event.target.getAttribute(\'value\');\n    if (!isNullOrUndefined(value)) {\n      setSelectedValue(value);\n    }\n  };\n\n  return (\n    <Flex columnGap="4x" alignItems="center">\n      <Menu>\n        <MenuButton>\n          Options\n        </MenuButton>\n        <MenuList\n          onClick={handleClickMenuItem}\n          width="max-content"\n        >\n          <MenuItem value={1}>\n            List item 1\n          </MenuItem>\n          <MenuItem value={2}>\n            List item 2\n          </MenuItem>\n          <MenuDivider />\n          <Submenu>\n            <SubmenuToggle>\n              <MenuItem>\n                <Flex\n                  alignItems="center"\n                  columnGap="2x"\n                  justifyContent="space-between"\n                  width="100%"\n                >\n                  Submenu\n                  <Icon icon="angle-right" />\n                </Flex>\n              </MenuItem>\n            </SubmenuToggle>\n            <SubmenuList width="max-content">\n              <MenuItem value={3}>\n                List item 3\n              </MenuItem>\n              <MenuItem value={4}>\n                List item 4\n              </MenuItem>\n            </SubmenuList>\n          </Submenu>\n        </MenuList>\n      </Menu>\n      <Text>Selected: {selectedValue}</Text>\n    </Flex>\n  );\n}\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"menutoggle",children:["MenuToggle",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menutoggle",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"MenuToggle"})," is a toggle that opens the menu when clicked. It is usually a button or link. The ",(0,i.jsx)(e.code,{children:"MenuToggleIcon"})," can be added to the toggle to indicate the menu is open or closed."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Flex alignItems="center">\n  <Menu>\n    <MenuToggle>\n      <Text>Options</Text>\n    </MenuToggle>\n    <MenuList width="max-content">\n      <MenuItem>\n        List item 1\n      </MenuItem>\n      <MenuItem>\n        List item 2\n      </MenuItem>\n      <MenuItem>\n        List item 3\n      </MenuItem>\n    </MenuList>\n  </Menu>\n  <Divider\n    variant="solid"\n    orientation="vertical"\n    height="5x"\n    mx="4x"\n  />\n  <Menu>\n    <MenuToggle>\n      <Flex alignItems="center" userSelect="none">\n        <Text>Options</Text>\n        <Space width="1x" />\n        <MenuToggleIcon />\n      </Flex>\n    </MenuToggle>\n    <MenuList width="max-content">\n      <MenuItem>\n        List item 1\n      </MenuItem>\n      <MenuItem>\n        List item 2\n      </MenuItem>\n      <MenuItem>\n        List item 3\n      </MenuItem>\n    </MenuList>\n  </Menu>\n  <Divider\n    variant="solid"\n    orientation="vertical"\n    height="5x"\n    mx="4x"\n  />\n  <Menu>\n    <MenuToggle>\n      {({ getMenuToggleProps }) => {\n        return (\n          <Button\n            {...getMenuToggleProps()}\n            variant="default"\n          >\n            <Text>Options</Text>\n            <Space width="1x" />\n            <MenuToggleIcon />\n          </Button>\n        );\n      }}\n    </MenuToggle>\n    <MenuList width="max-content">\n      <MenuItem>\n        List item 1\n      </MenuItem>\n      <MenuItem>\n        List item 2\n      </MenuItem>\n      <MenuItem>\n        List item 3\n      </MenuItem>\n    </MenuList>\n  </Menu>\n</Flex>\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Here is an example showcasing the combination of ",(0,i.jsx)(e.code,{children:"MenuToggle"}),", ",(0,i.jsx)(e.code,{children:"Popover"}),", and ",(0,i.jsx)(e.code,{children:"Button"})," components."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Menu>\n  <MenuToggle\n    disabled={true} // Use the `disabled` prop to control whether the button will be disabled\n  >\n    {({ getMenuToggleProps }) => (\n      <Popover\n        disabled={false} // Use the `disabled` prop to control whether the popover will be displayed\n        trigger="hover"\n      >\n        <PopoverTrigger shouldWrapChildren>\n          <Button\n            {...getMenuToggleProps()}\n            variant="secondary"\n            columnGap="1x"\n          >\n            <Text>Options</Text>\n            <MenuToggleIcon />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent>\n          Popover\n        </PopoverContent>\n      </Popover>\n    )}\n  </MenuToggle>\n  <MenuList width="max-content">\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"menutoggleicon",children:["MenuToggleIcon",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menutoggleicon",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"MenuToggleIcon"})," is an indicator that indicates the menu is open or closed."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Menu>\n  <MenuToggle>\n    <MenuToggleIcon />\n  </MenuToggle>\n  <MenuList width="max-content">\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,i.jsx)(e.p,{children:"You can also customize the indicator by passing a component as children or a function as children that returns a component."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"<Menu placement=\"bottom-start\">\n  {({ isOpen, direction }) => {\n    return (\n      <>\n        <MenuToggle>\n          <MenuToggleIcon>\n            {(state, { ref, style: styleProps }) => {\n              // direction is either 'up' or 'down'\n              const icon = `arrow-${direction}`;\n              styleProps.transform = isOpen ? 'scaleY(-1)' : 'scaleY(1)';\n\n              return (\n                <Icon\n                  ref={ref}\n                  icon={icon}\n                  size=\"4x\"\n                  {...styleProps}\n                />\n              );\n            }}\n          </MenuToggleIcon>\n        </MenuToggle>\n        <MenuList width=\"max-content\">\n          <MenuItem>\n            List item 1\n          </MenuItem>\n          <MenuItem>\n            List item 2\n          </MenuItem>\n          <MenuItem>\n            List item 3\n          </MenuItem>\n        </MenuList>\n      </>\n    );\n  }}\n</Menu>\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"menubutton",children:["MenuButton",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menubutton",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"MenuButton"})," composes ",(0,i.jsx)(e.code,{children:"Button"}),", ",(0,i.jsx)(e.code,{children:"MenuToggle"}),", and ",(0,i.jsx)(e.code,{children:"MenuToggleIcon"})," to create a button that opens the menu. It's an useful alternative to ",(0,i.jsx)(e.code,{children:"MenuToggle"})," when the toggle is a button."]}),"\n",(0,i.jsx)(e.pre,{disabled:!0,children:(0,i.jsx)(e.code,{className:"language-jsx",children:"const MenuButton = (props) => {\n  // Define custom styles for the menu button\n  const styleProps = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    columnGap: '1x',\n  };\n\n  return (\n    <MenuToggle>\n      {({ getMenuToggleProps }) => (\n        <Button\n          {...getMenuToggleProps()}\n          {...styleProps}\n          {...props}\n        >\n          {children && (\n            <Box>{children}</Box>\n          )}\n          <MenuToggleIcon />\n        </Button>\n      )}\n    </MenuToggle>\n  );\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Menu>\n  <MenuButton variant="secondary">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width="max-content">\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"menugroup",children:["MenuGroup",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menugroup",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.p,{children:["To group related menu items, wrap them in a ",(0,i.jsx)(e.code,{children:"MenuGroup"})," and pass a ",(0,i.jsx)(e.code,{children:"title"})," prop for the group title."]}),"\n",(0,i.jsx)(e.pre,{noInline:!0,children:(0,i.jsx)(e.code,{className:"language-jsx",children:'const Avatar = (props) => (\n  <Flex\n    p="1x"\n    borderRadius="50%"\n    alignItems="center"\n    justifyContent="center"\n    fontSize="xs"\n    lineHeight="1"\n    {...props}\n  />\n);\n\nrender(() => (\n  <Flex\n    flexDirection="column"\n    width="fit-content"\n  >\n    <MenuItem>\n      <Text>My Profile</Text>\n    </MenuItem>\n    <MenuDivider />\n    <MenuGroup\n      title={(\n        <Flex justifyContent="space-between">\n          <Text>Other profiles</Text>\n          <Space minWidth="10x" />\n          <ButtonBase title="Manage profiles">\n            <Icon icon="settings" size="3x" />\n          </ButtonBase>\n        </Flex>\n      )}\n    >\n      <MenuItem>\n        <Avatar color="white" bg="blue:50" mr="3x">\n          JD\n        </Avatar>\n        <Text>John Doe</Text>\n      </MenuItem>\n      <MenuItem>\n        <Avatar color="white" bg="gray:50" mr="3x">\n          <Icon icon="user" size="3x" />\n        </Avatar>\n        <Text>Guest</Text>\n      </MenuItem>\n    </MenuGroup>\n  </Flex>\n));\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"toggling-menus",children:["Toggling menus",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#toggling-menus",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(e.pre,{noInline:!0,children:(0,i.jsx)(e.code,{className:"language-jsx",children:'const Avatar = (props) => (\n  <Flex\n    p="1x"\n    borderRadius="50%"\n    alignItems="center"\n    justifyContent="center"\n    fontSize="xs"\n    lineHeight="1"\n    {...props}\n  />\n);\n\nconst IconButton = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  return (\n    <ButtonBase\n      color={colorStyle.color.secondary}\n      tabIndex={0}\n      _disabled={{\n        color: colorStyle.color.disabled,\n      }}\n      _hover={{\n        color: colorStyle.color.primary,\n      }}\n      {...props}\n    />\n  );\n};\n\nlet shouldPreventDefaultOnNextBlur = false;\n\nrender(() => {\n  const [colorMode, setColorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const [menuState, setMenuState] = React.useState(\'main\');\n  const navigateMenuBy = (nextMenuState) => (event) => {\n    // Prevent the menu from closing when a menu item is clicked\n    event.preventDefault();\n\n    // The menu list will be blurred when the menu state changes because of losing focus.\n    // We need to set a flag to prevent menu to be closed.\n    shouldPreventDefaultOnNextBlur = true;\n\n    setMenuState(nextMenuState);\n  };\n\n  return (\n    <Menu\n      onOpen={() => {\n        setMenuState(\'main\');\n      }}\n    >\n      <MenuToggle>\n        <Avatar\n          backgroundColor={colorStyle.background.secondary}\n          color={colorStyle.color.secondary}\n          _hover={{\n            color: colorStyle.color.primary,\n          }}\n        >\n          <Icon icon="user-team" size="5x" />\n        </Avatar>\n      </MenuToggle>\n      <ReactFocusLock\n        persistentFocus={true}\n      >\n        <MenuList\n          width="max-content"\n          onBlur={(event) => {\n            if (shouldPreventDefaultOnNextBlur) {\n              event.preventDefault();\n\n              // Restore the flag to its initial state\n              shouldPreventDefaultOnNextBlur = false;\n            }\n          }}\n        >\n          <Box\n            display={menuState === \'main\' ? \'block\' : \'none\'}\n          >\n            <MenuItem>\n              <Flex flex="none" mr="3x">\n                <Icon icon="settings" />\n              </Flex>\n              <Flex flex="auto">\n                <Text>Settings</Text>\n              </Flex>\n            </MenuItem>\n            <MenuItem>\n              <Flex flex="none" mr="3x">\n                <Icon icon="user-team" />\n              </Flex>\n              <Flex flex="auto">\n                <Text>Accounts</Text>\n              </Flex>\n            </MenuItem>\n            <MenuItem>\n              <Flex flex="none" mr="3x">\n                <Icon icon="lock" />\n              </Flex>\n              <Flex flex="auto">\n                <Text>Privacy control</Text>\n              </Flex>\n            </MenuItem>\n            <MenuDivider />\n            <MenuItem\n              onClick={navigateMenuBy(\'appearance\')}\n            >\n              <Flex flex="none" mr="3x">\n                <Icon icon="color" />\n              </Flex>\n              <Flex flex="auto">\n                <Text>Appearance:</Text>\n                <Space width="2x" />\n                <Text textTransform="capitalize">\n                  {colorMode}\n                </Text>\n              </Flex>\n              <Flex flex="none" ml="3x">\n                <Icon icon="chevron-right" />\n              </Flex>\n            </MenuItem>\n          </Box>\n          <Box\n            display={menuState === \'appearance\' ? \'block\' : \'none\'}\n          >\n            <Flex alignItems="center" px="3x" py="1x">\n              <Flex flex="none" mr="3x">\n                <IconButton\n                  onClick={navigateMenuBy(\'main\')}\n                >\n                  <Icon icon="arrow-left" />\n                </IconButton>\n              </Flex>\n              <Flex flex="auto">\n                <Text fontSize="md" lineHeight="md">\n                  Appearance\n                </Text>\n              </Flex>\n            </Flex>\n            <MenuDivider />\n            <MenuGroup\n              title={(\n                <Text fontSize="xs" lineHeight="xs">\n                  Setting applies to this browser only\n                </Text>\n              )}\n            >\n              <MenuItem\n                onClick={(event) => {\n                  setColorMode(\'dark\');\n                }}\n              >\n                <Flex flex="none" mr="3x" minWidth="4x">\n                  {colorMode === \'dark\' && <Icon icon="check" />}\n                </Flex>\n                <Flex flex="auto">\n                  Dark theme\n                </Flex>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  setColorMode(\'light\');\n                }}\n              >\n                <Flex flex="none" mr="3x" minWidth="4x">\n                  {colorMode === \'light\' && <Icon icon="check" />}\n                </Flex>\n                <Flex flex="auto">\n                  Light theme\n                </Flex>\n              </MenuItem>\n            </MenuGroup>\n          </Box>\n        </MenuList>\n      </ReactFocusLock>\n    </Menu>\n  );\n});\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"menu-sizing",children:["Menu sizing",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menu-sizing",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.p,{children:["To change the width of the menu, pass ",(0,i.jsx)(e.code,{children:"width"})," prop to the ",(0,i.jsx)(e.code,{children:"MenuList"})," component."]}),"\n",(0,i.jsxs)(e.h4,{id:"fixed-width",children:["fixed width",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#fixed-width",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Menu>\n  <MenuButton variant="secondary">\n    <Text>This is a very long menu button</Text>\n  </MenuButton>\n  <MenuList width={200}>\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,i.jsxs)(e.h4,{id:"full-width",children:["full width",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#full-width",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.p,{children:["Set ",(0,i.jsx)(e.code,{children:'display="block"'})," on the ",(0,i.jsx)(e.code,{children:"Menu"})," and set ",(0,i.jsx)(e.code,{children:'width="100%"'})," on ",(0,i.jsx)(e.code,{children:"MenuButton"})," and ",(0,i.jsx)(e.code,{children:"MenuList"})," to make the menu as wide as the content."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Menu display="block">\n  <MenuButton variant="secondary" width="100%">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width="100%">\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,i.jsxs)(e.h4,{id:"min-content",children:[(0,i.jsx)(e.code,{children:"min-content"}),(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#min-content",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Menu>\n  <MenuButton variant="secondary">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width="min-content">\n    <MenuItem >\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,i.jsxs)(e.h4,{id:"max-content",children:[(0,i.jsx)(e.code,{children:"max-content"}),(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#max-content",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Menu>\n  <MenuButton variant="secondary">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width="max-content">\n    <MenuItem>\n      This is a very long list item 1\n    </MenuItem>\n    <MenuItem>\n      This is a very long list item 2\n    </MenuItem>\n    <MenuItem>\n      This is a very long list item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"placement",children:["Placement",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#placement",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.p,{children:["To position the menu relative to the toggle, pass a ",(0,i.jsx)(e.code,{children:"placement"})," prop to ",(0,i.jsx)(e.code,{children:"Menu"}),"."]}),"\n",(0,i.jsx)(e.p,{children:"The value can be one of the following:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"top"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"top-start"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"top-end"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"bottom"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"bottom-start"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"bottom-end"})}),"\n"]}),"\n",(0,i.jsx)(e.pre,{noInline:!0,children:(0,i.jsx)(e.code,{className:"language-jsx",children:"const useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst gridAreas = [\n  ['top-start', 'top', 'top-end'],\n  ['.', '.', '.'],\n  ['.', 'center', '.'],\n  ['.', '.', '.'],\n  ['bottom-start', 'bottom', 'bottom-end'],\n];\n\nfunction Example() {\n  const [placement, changePlacementBy] = useSelection('bottom-start');\n  const gridTemplateAreas = gridAreas.map((row) => {\n    const rowString = '\"' + row.join(' ') + '\"';\n    return rowString;\n  }).join(' ');\n\n  return (\n    <Flex>\n      <Grid\n        templateAreas={gridTemplateAreas}\n        autoColumns=\"minmax(0, 1fr)\"\n        autoFlow=\"row\"\n        gap=\"2x\"\n      >\n        {gridAreas.flat().map((value, key) => {\n          if (value === '.') {\n            return (<Box key={key} />);\n          }\n\n          if (value === 'center') {\n            return (\n              <Box key={key}>\n                <Menu placement={placement}>\n                  <MenuButton variant=\"secondary\" width={150}>\n                    <Text>Options</Text>\n                  </MenuButton>\n                  <MenuList>\n                    <MenuItem>\n                      List item 1\n                    </MenuItem>\n                    <MenuItem>\n                      List item 2\n                    </MenuItem>\n                    <MenuItem>\n                      List item 3\n                    </MenuItem>\n                  </MenuList>\n                </Menu>\n              </Box>\n            );\n          }\n\n          const changePlacement = changePlacementBy(value);\n          const onClick = () => {\n            changePlacement();\n          };\n\n          return (\n            <Box key={key}>\n              <Button\n                selected={value === placement}\n                onClick={onClick}\n                width=\"100%\"\n              >\n                {value}\n              </Button>\n            </Box>\n          );\n        })}\n      </Grid>\n    </Flex>\n  );\n}\n\nrender(<Example />);\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"change-menu-position",children:["Change menu position",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#change-menu-position",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"offset"})," prop can be used to change the menu position. It accepts an array with two numbers in the form of ",(0,i.jsx)(e.code,{children:"[skidding, distance]"}),"."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Skidding"})}),"\n",(0,i.jsxs)(e.p,{children:["The first number, ",(0,i.jsx)(e.code,{children:"skidding"}),", displaces the menu along the toggle. This value is specified in pixels."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Distance"})}),"\n",(0,i.jsxs)(e.p,{children:["The second number, ",(0,i.jsx)(e.code,{children:"distance"}),", controls the distance between the menu and the toggle. This value is specified in pixels."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Menu offset={[16, 8]}>\n  <MenuButton variant="secondary">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList>\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"scrolling",children:["Scrolling",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#scrolling",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.p,{children:["To make the menu scrollable, pass ",(0,i.jsx)(e.code,{children:'overflow="auto"'})," and ",(0,i.jsx)(e.code,{children:"maxHeight"})," to ",(0,i.jsx)(e.code,{children:"MenuList"}),". The menu will become scrollable when the menu items exceed the height of the menu."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Menu display="block">\n  <MenuButton variant="secondary" width={200}>\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList\n    maxHeight={200}\n    overflow="auto"\n    width={200}\n  >\n    {Array.from({ length: 100 }).map((_, key) => (\n      <Submenu\n        key={key}\n        placement="right-start"\n      >\n        <SubmenuToggle width="100%">\n          <MenuItem>\n            <Flex\n              alignItems="center"\n              columnGap="2x"\n              justifyContent="space-between"\n              width="100%"\n            >\n              <Text>List Item {key + 1}</Text>\n              <Icon icon="angle-right" />\n            </Flex>\n          </MenuItem>\n        </SubmenuToggle>\n        <SubmenuList\n          PopperProps={{\n            usePortal: true,\n          }}\n          width="max-content"\n        >\n          <MenuItem>\n            <Text>List item</Text>\n          </MenuItem>\n          <MenuItem>\n            <Text>List item</Text>\n          </MenuItem>\n        </SubmenuList>\n      </Submenu>\n    ))}\n  </MenuList>\n</Menu>\n'})}),"\n",(0,i.jsxs)(e.p,{children:["You can also use the ",(0,i.jsx)(e.code,{children:"Scrollbar"})," component to override the default scrollbar."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'<Menu display="block">\n  <MenuButton variant="secondary" width={200}>\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList\n    width={200}\n  >\n    <Scrollbar\n      height={200}\n      overflowY="visible"\n    >\n      {Array.from({ length: 100 }).map((_, key) => (\n        <Submenu\n          key={key}\n          placement="right-start"\n        >\n          <SubmenuToggle width="100%">\n            <MenuItem>\n              <Flex\n                alignItems="center"\n                columnGap="2x"\n                justifyContent="space-between"\n                width="100%"\n              >\n                <Text>List Item {key + 1}</Text>\n                <Icon icon="angle-right" />\n              </Flex>\n            </MenuItem>\n          </SubmenuToggle>\n          <SubmenuList\n            PopperProps={{\n              usePortal: true,\n            }}\n            width="max-content"\n          >\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n          </SubmenuList>\n        </Submenu>\n      ))}\n    </Scrollbar>\n  </MenuList>\n</Menu>\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"dropdown",children:["Dropdown",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#dropdown",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.p,{children:["Use the ",(0,i.jsx)(e.code,{children:"Dropdown"})," component when you need to select one option from a list of options."]}),"\n",(0,i.jsxs)(e.p,{children:["The component is available on GitHub at the ",(0,i.jsx)(e.a,{href:"https://github.com/trendmicro-frontend/tonic-ui/tree/master/packages/react-docs/components/Dropdown.jsx",children:"link"}),"."]}),"\n",(0,i.jsx)(r.Z,{component:y,file:{data:"import {\n  Flex,\n  MenuButton,\n  OverflowTooltip,\n  TextLabel,\n} from '@tonic-ui/react';\nimport React, { useState } from 'react';\nimport Dropdown from '@/components/Dropdown';\n\nconst options = [\n  'all',\n  'network-events',\n  'system-events',\n];\n\nconst renderOption = (value) => {\n  return {\n    'all': 'All',\n    'network-events': 'Network events',\n    'system-events': 'System events',\n  }[value];\n};\n\nconst renderLabel = (value) => {\n  const selectionText = renderOption(value);\n\n  return (\n    <>\n      <TextLabel mr=\"2x\">\n        {'Event status:'}\n      </TextLabel>\n      <OverflowTooltip\n        PopperProps={{ usePortal: true }}\n        label={selectionText}\n      >\n        {selectionText}\n      </OverflowTooltip>\n    </>\n  );\n};\n\nconst App = () => {\n  const [value, setValue] = useState('all');\n  const width = 200;\n  const maxWidth = typeof width === 'number'\n    ? `calc(${width}px - 48px)`\n    : `calc(${width} - 48px)`;\n\n  return (\n    <Dropdown\n      value={value}\n      onChange={(value) => {\n        console.log('## change:', value);\n        setValue(value);\n      }}\n      options={options}\n      renderOption={renderOption}\n    >\n      <MenuButton\n        variant=\"secondary\"\n        width={width}\n      >\n        <Flex maxWidth={maxWidth}>\n          {renderLabel(value)}\n        </Flex>\n      </MenuButton>\n    </Dropdown>\n  );\n};\n\nexport default App;",path:"pages/components/menu/index.page.mdx"},sandbox:{dependencies:{"@tonic-ui/react":"^1.23.0",react:"latest","@tonic-ui/utils":"latest","ensure-type":"^1.5.1"},files:{"src/components/Dropdown.js":"import {\n  Menu,\n  MenuToggle,\n  MenuItem,\n  MenuList,\n} from '@tonic-ui/react';\nimport { noop } from '@tonic-ui/utils';\nimport { ensureFunction } from 'ensure-type';\nimport React, { forwardRef, useCallback, useEffect, useState } from 'react';\n\nconst Dropdown = forwardRef((\n  {\n    children,\n    highlightSelectedOption = false,\n    options = [],\n    onChange: onChangeProp,\n    renderOption = noop,\n    value: valueProp,\n    ...rest\n  },\n  ref,\n) => {\n  const [value, setValue] = useState(valueProp ?? '');\n\n  useEffect(() => {\n    const isControlled = valueProp !== undefined;\n    if (isControlled) {\n      setValue(valueProp);\n    }\n  }, [valueProp]);\n\n  const onChange = useCallback((nextValue) => {\n    const isControlled = valueProp !== undefined;\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    ensureFunction(onChangeProp)(nextValue);\n  }, [valueProp, onChangeProp]);\n\n  const handleClickMenuItemBy = (value) => (event) => {\n    onChange(value);\n  };\n\n  return (\n    <Menu\n      ref={ref}\n      {...rest}\n    >\n      <MenuToggle>\n        {children}\n      </MenuToggle>\n      <MenuList\n        width=\"max-content\"\n      >\n        {options.map((option) => {\n          const key = option;\n          const isSelected = (value === option);\n\n          return (\n            <MenuItem\n              data-selected={highlightSelectedOption ? isSelected : undefined}\n              key={key}\n              onClick={handleClickMenuItemBy(option)}\n            >\n              {renderOption(option)}\n            </MenuItem>\n          );\n        })}\n      </MenuList>\n    </Menu>\n  );\n});\n\nDropdown.displayName = 'Dropdown';\n\nexport default Dropdown;"},raw:"import {\n  Flex,\n  MenuButton,\n  OverflowTooltip,\n  TextLabel,\n} from '@tonic-ui/react';\nimport React, { useState } from 'react';\nimport Dropdown from '@/components/Dropdown';\n\nconst options = [\n  'all',\n  'network-events',\n  'system-events',\n];\n\nconst renderOption = (value) => {\n  return {\n    'all': 'All',\n    'network-events': 'Network events',\n    'system-events': 'System events',\n  }[value];\n};\n\nconst renderLabel = (value) => {\n  const selectionText = renderOption(value);\n\n  return (\n    <>\n      <TextLabel mr=\"2x\">\n        {'Event status:'}\n      </TextLabel>\n      <OverflowTooltip\n        PopperProps={{ usePortal: true }}\n        label={selectionText}\n      >\n        {selectionText}\n      </OverflowTooltip>\n    </>\n  );\n};\n\nconst App = () => {\n  const [value, setValue] = useState('all');\n  const width = 200;\n  const maxWidth = typeof width === 'number'\n    ? `calc(${width}px - 48px)`\n    : `calc(${width} - 48px)`;\n\n  return (\n    <Dropdown\n      value={value}\n      onChange={(value) => {\n        console.log('## change:', value);\n        setValue(value);\n      }}\n      options={options}\n      renderOption={renderOption}\n    >\n      <MenuButton\n        variant=\"secondary\"\n        width={width}\n      >\n        <Flex maxWidth={maxWidth}>\n          {renderLabel(value)}\n        </Flex>\n      </MenuButton>\n    </Dropdown>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,i.jsxs)(e.h3,{id:"multiselect",children:["Multiselect",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#multiselect",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.p,{children:["Use the ",(0,i.jsx)(e.code,{children:"Multiselect"})," component when you need to select multiple options from a list or to filter information."]}),"\n",(0,i.jsxs)(e.p,{children:["The component is available on GitHub at the ",(0,i.jsx)(e.a,{href:"https://github.com/trendmicro-frontend/tonic-ui/tree/master/packages/react-docs/components/Multiselect.jsx",children:"link"}),"."]}),"\n",(0,i.jsx)(r.Z,{component:f,file:{data:"import {\n  Flex,\n  MenuButton,\n  OverflowTooltip,\n  Text,\n  TextLabel,\n} from '@tonic-ui/react';\nimport React, { useState } from 'react';\nimport Multiselect from '@/components/Multiselect';\n\nconst policyData = {\n  policies: [\n    { id: '0', description: 'Default policy' },\n    ...Array.from({ length: 10 }, (_, i) => ({\n      id: String(i + 1),\n      description: `Policy ${i + 1}`,\n    })),\n  ],\n};\n\nconst policyMap = (() => {\n  const map = new Map();\n  policyData.policies.forEach((policy) => {\n    // Use the policy ID as the key and ensure it's a string rather than a number\n    const key = String(policy.id);\n    map.set(key, policy);\n  });\n  return map;\n})();\n\nconst options = [...policyMap.keys()];\n\nconst renderOption = (value) => {\n  const policy = policyMap.get(value);\n  return policy?.description;\n};\n\nconst renderLabel = (value) => {\n  const selectionCount = value.length;\n  const isNoneSelected = selectionCount === 0;\n  const isAllSelected = selectionCount === options.length;\n\n  if (isNoneSelected) {\n    const selectionText = 'Select';\n    return (\n      <>\n        <TextLabel mr=\"2x\">\n          {'Policy:'}\n        </TextLabel>\n        <OverflowTooltip\n          PopperProps={{ usePortal: true }}\n          label={selectionText}\n        >\n          {selectionText}\n        </OverflowTooltip>\n      </>\n    );\n  }\n\n  if (isAllSelected) {\n    const selectionText = 'All'; \n    return (\n      <>\n        <TextLabel mr=\"2x\">\n          {'Policy:'}\n        </TextLabel>\n        <OverflowTooltip\n          PopperProps={{ usePortal: true }}\n          label={selectionText}\n        >\n          {selectionText}\n        </OverflowTooltip>\n      </>\n    );\n  }\n\n  const selectionText = value.map(renderOption).join(', ');\n  return (\n    <>\n      <TextLabel mr=\"2x\">\n        {'Policy:'}\n      </TextLabel>\n      <OverflowTooltip\n        PopperProps={{ usePortal: true }}\n        label={selectionText}\n      >\n        {selectionText}\n      </OverflowTooltip>\n      <Text ml=\"1x\">\n        {`(${selectionCount})`}\n      </Text>\n    </>\n  );\n};\n\nconst App = () => {\n  const [value, setValue] = useState(options);\n  const width = 200;\n  const maxWidth = typeof width === 'number'\n    ? `calc(${width}px - 48px)`\n    : `calc(${width} - 48px)`;\n\n  return (\n    <Multiselect\n      isSearchable={true}\n      value={value}\n      onChange={setValue}\n      options={options}\n      renderOption={renderOption}\n      shouldSelectAllIfNoneSelected={true}\n    >\n      <MenuButton\n        variant=\"secondary\"\n        width={width}\n      >\n        <Flex maxWidth={maxWidth}>\n          {renderLabel(value)}\n        </Flex>\n      </MenuButton>\n    </Multiselect>\n  );\n};\n\nexport default App;",path:"pages/components/menu/index.page.mdx"},sandbox:{dependencies:{"@tonic-ui/react":"^1.23.0",react:"latest","@tonic-ui/utils":"latest","ensure-type":"^1.5.1","react-highlight-words":"^0.20.0"},files:{"src/components/Multiselect.js":"import {\n  Box,\n  Checkbox,\n  CheckboxGroup,\n  LinkButton,\n  Menu,\n  MenuToggle,\n  MenuItem,\n  MenuList,\n  Scrollbar,\n  SearchInput,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport { noop } from '@tonic-ui/utils';\nimport { ensureArray, ensureFunction, ensureString } from 'ensure-type';\nimport React, { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\nimport Highlight from 'react-highlight-words';\n\nconst Multiselect = forwardRef((\n  {\n    children,\n    highlightSelectedOption = false,\n    isSearchable = false,\n    options = [],\n    onChange: onChangeProp,\n    renderOption = noop,\n    shouldSelectAllIfNoneSelected = false,\n    value: valueProp,\n    ...rest\n  },\n  ref,\n) => {\n  const searchInputRef = useRef();\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const { colors } = useTheme();\n  const [value, setValue] = useState(ensureArray(valueProp));\n  const [searchString, setSearchString] = useState('');\n\n  useEffect(() => {\n    const isControlled = valueProp !== undefined;\n    if (isControlled) {\n      setValue(ensureArray(valueProp));\n    }\n  }, [valueProp]);\n\n  const onCheckboxGroupChange = useCallback((nextValue) => {\n    setValue(nextValue);\n  }, []);\n\n  const isAllSelected = value.length === options.length;\n  const isNoneSelected = value.length === 0;\n  const handleClickToggle = (event) => {\n    const nextValue = isAllSelected ? [] : options;\n    setValue(nextValue);\n  };\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      const el = event.currentTarget.querySelector('input');\n      if (el) {\n        const nextValue = [...value];\n        nextValue.indexOf(el.value) === -1\n          ? nextValue.push(el.value) // add\n          : nextValue.splice(nextValue.indexOf(el.value), 1); // remove\n        setValue(nextValue);\n      }\n    }\n  }\n\n  const normalizedSearchString = ensureString(searchString).trim().toLowerCase();\n  const filteredOptions = options.filter(option => {\n    if (!normalizedSearchString) {\n      return true;\n    }\n    const normalizedItemString = renderOption(option).trim().toLowerCase();\n    return normalizedItemString.includes(normalizedSearchString);\n  });\n\n  return (\n    <Menu\n      ref={ref}\n      closeOnSelect={false}\n      defaultActiveIndex={0}\n      onClose={() => {\n        if (isNoneSelected && shouldSelectAllIfNoneSelected) {\n          // Automatically reset all the options when the menu loses focus\n          setValue(options);\n          ensureFunction(onChangeProp)(options);\n        } else {\n          ensureFunction(onChangeProp)(value);\n        }\n      }}\n      {...rest}\n    >\n      <MenuToggle>\n        {children}\n      </MenuToggle>\n      <MenuList\n        width=\"max-content\"\n      >\n        {isSearchable && (\n          <Box\n            px=\"3x\"\n            mb=\"2x\"\n          >\n            <SearchInput\n              inputProps={{\n                role: 'menuitem', // Specify \"menuitem\" role for keyboard navigation\n                onKeyDown: (event) => {\n                  const input = event.target;\n                  const {\n                    selectionStart, // the position where the character will be inserted\n                    selectionEnd, // if has a selection this value will be different than the previous\n                    value, // this is the value before the key is added\n                  } = input;\n                  const isAtStart = (selectionStart === 0 && selectionEnd === 0);\n                  const isAtEnd = (selectionStart === value.length && selectionEnd === value.length);\n\n                  if (isAtStart && ['ArrowUp', 'Home'].includes(event.key)) {\n                    return;\n                  }\n                  if (isAtEnd && ['ArrowDown', 'End'].includes(event.key)) {\n                    return;\n                  }\n\n                  // Stop event propagation to menu for specific keys\n                  event.stopPropagation();\n                },\n              }}\n              ref={searchInputRef}\n              value={searchString}\n              onClearInput={(event) => {\n                setSearchString('');\n              }}\n              onChange={(event) => {\n                const value = event.target.value;\n                setSearchString(value);\n              }}\n            />\n          </Box>\n        )}\n        <CheckboxGroup\n          size=\"sm\"\n          value={value}\n          onChange={onCheckboxGroupChange}\n        >\n          {!normalizedSearchString && (\n            <Box\n              px=\"3x\"\n              mb=\"2x\"\n            >\n              <LinkButton\n                key=\"toggle\"\n                onClick={handleClickToggle}\n              >\n                {isAllSelected ? ('Clear all') : ('Select all')}\n              </LinkButton>\n            </Box>\n          )}\n          <Scrollbar\n            maxHeight={250}\n            overflowY=\"auto\"\n          >\n            {filteredOptions.map((option) => {\n              const key = option;\n              const isSelected = value.includes(option);\n\n              return (\n                <MenuItem\n                  data-selected={highlightSelectedOption ? isSelected : undefined}\n                  key={key}\n                  onKeyDown={handleKeyDown}\n                >\n                  <Checkbox\n                    value={option}\n                    width=\"100%\" // Fill the entire width of the menu item to make it easier to click\n                  >\n                    <Highlight\n                      searchWords={[normalizedSearchString]}\n                      textToHighlight={renderOption(option)}\n                      highlightStyle={{\n                        backgroundColor: colors[colorStyle.text.highlight],\n                        color: colors['gray:100'],\n                      }}\n                    />\n                  </Checkbox>\n                </MenuItem>\n              );\n            })}\n          </Scrollbar>\n        </CheckboxGroup>\n      </MenuList>\n    </Menu>\n  );\n});\n\nMultiselect.displayName = 'Multiselect';\n\nexport default Multiselect;"},raw:"import {\n  Flex,\n  MenuButton,\n  OverflowTooltip,\n  Text,\n  TextLabel,\n} from '@tonic-ui/react';\nimport React, { useState } from 'react';\nimport Multiselect from '@/components/Multiselect';\n\nconst policyData = {\n  policies: [\n    { id: '0', description: 'Default policy' },\n    ...Array.from({ length: 10 }, (_, i) => ({\n      id: String(i + 1),\n      description: `Policy ${i + 1}`,\n    })),\n  ],\n};\n\nconst policyMap = (() => {\n  const map = new Map();\n  policyData.policies.forEach((policy) => {\n    // Use the policy ID as the key and ensure it's a string rather than a number\n    const key = String(policy.id);\n    map.set(key, policy);\n  });\n  return map;\n})();\n\nconst options = [...policyMap.keys()];\n\nconst renderOption = (value) => {\n  const policy = policyMap.get(value);\n  return policy?.description;\n};\n\nconst renderLabel = (value) => {\n  const selectionCount = value.length;\n  const isNoneSelected = selectionCount === 0;\n  const isAllSelected = selectionCount === options.length;\n\n  if (isNoneSelected) {\n    const selectionText = 'Select';\n    return (\n      <>\n        <TextLabel mr=\"2x\">\n          {'Policy:'}\n        </TextLabel>\n        <OverflowTooltip\n          PopperProps={{ usePortal: true }}\n          label={selectionText}\n        >\n          {selectionText}\n        </OverflowTooltip>\n      </>\n    );\n  }\n\n  if (isAllSelected) {\n    const selectionText = 'All'; \n    return (\n      <>\n        <TextLabel mr=\"2x\">\n          {'Policy:'}\n        </TextLabel>\n        <OverflowTooltip\n          PopperProps={{ usePortal: true }}\n          label={selectionText}\n        >\n          {selectionText}\n        </OverflowTooltip>\n      </>\n    );\n  }\n\n  const selectionText = value.map(renderOption).join(', ');\n  return (\n    <>\n      <TextLabel mr=\"2x\">\n        {'Policy:'}\n      </TextLabel>\n      <OverflowTooltip\n        PopperProps={{ usePortal: true }}\n        label={selectionText}\n      >\n        {selectionText}\n      </OverflowTooltip>\n      <Text ml=\"1x\">\n        {`(${selectionCount})`}\n      </Text>\n    </>\n  );\n};\n\nconst App = () => {\n  const [value, setValue] = useState(options);\n  const width = 200;\n  const maxWidth = typeof width === 'number'\n    ? `calc(${width}px - 48px)`\n    : `calc(${width} - 48px)`;\n\n  return (\n    <Multiselect\n      isSearchable={true}\n      value={value}\n      onChange={setValue}\n      options={options}\n      renderOption={renderOption}\n      shouldSelectAllIfNoneSelected={true}\n    >\n      <MenuButton\n        variant=\"secondary\"\n        width={width}\n      >\n        <Flex maxWidth={maxWidth}>\n          {renderLabel(value)}\n        </Flex>\n      </MenuButton>\n    </Multiselect>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,i.jsxs)(e.h2,{id:"accessibility",children:["Accessibility",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#accessibility",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.h3,{id:"keyboard-interaction",children:["Keyboard Interaction",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#keyboard-interaction",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Key"}),(0,i.jsx)(e.th,{align:"left",children:"Action"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsxs)(e.td,{align:"left",children:[(0,i.jsx)(e.code,{children:"Enter"})," | ",(0,i.jsx)(e.code,{children:"Space"})]}),(0,i.jsxs)(e.td,{align:"left",children:["When ",(0,i.jsx)(e.code,{children:"MenuToggle"})," or ",(0,i.jsx)(e.code,{children:"MenuButton"})," is focused, opens the menu."]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsxs)(e.td,{align:"left",children:[(0,i.jsx)(e.code,{children:"ArrowDown"})," | ",(0,i.jsx)(e.code,{children:"ArrowUp"})]}),(0,i.jsxs)(e.td,{align:"left",children:["When ",(0,i.jsx)(e.code,{children:"MenuList"})," is focused, moves the focus to the next menu item."]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:(0,i.jsx)(e.code,{children:"Escape"})}),(0,i.jsx)(e.td,{align:"left",children:"When a menu item is focused, closes the menu and moves the focus to the toggle."})]})]})]}),"\n",(0,i.jsxs)(e.h2,{id:"props",children:["Props",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.h3,{id:"menu-1",children:["Menu",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menu-1",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"anchorEl"}),(0,i.jsx)(e.td,{align:"left",children:"ElementType"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"The element to which the menu is attached."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"autoSelect"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left",children:"true"}),(0,i.jsx)(e.td,{align:"left",children:"Whether to automatically select the first menu item when the menu is opened."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsxs)(e.td,{align:"left",children:["ReactNode | ",(0,i.jsx)(e.code,{children:"(context) => ReactNode"})]}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"A function child can be used intead of a React element. This function is called with the context object."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"closeOnBlur"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left",children:"true"}),(0,i.jsx)(e.td,{align:"left",children:"Whether to close the menu when the user clicks outside of the menu."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"closeOnSelect"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left",children:"true"}),(0,i.jsx)(e.td,{align:"left",children:"Whether to close the menu when the user selects a menu item."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"defaultActiveIndex"}),(0,i.jsx)(e.td,{align:"left",children:"number"}),(0,i.jsx)(e.td,{align:"left",children:"-1"}),(0,i.jsx)(e.td,{align:"left",children:"The index of the menu item to be selected by default."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"defaultIsOpen"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left",children:"false"}),(0,i.jsx)(e.td,{align:"left",children:"Whether the menu is open by default."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"isOpen"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Whether the menu is open."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"offset"}),(0,i.jsx)(e.td,{align:"left",children:"[skidding, distance]"}),(0,i.jsx)(e.td,{align:"left",children:"[0, 0]"}),(0,i.jsx)(e.td,{align:"left",children:"The skidding and distance of the menu."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"onClose"}),(0,i.jsx)(e.td,{align:"left",children:"function"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Callback when the menu is closed."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"onOpen"}),(0,i.jsx)(e.td,{align:"left",children:"function"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Callback when the menu is opened."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"placement"}),(0,i.jsx)(e.td,{align:"left",children:"string"}),(0,i.jsx)(e.td,{align:"left",children:"'bottom-start'"}),(0,i.jsx)(e.td,{align:"left",children:"The placement of the menu. One of: 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end'"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"returnFocusOnClose"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left",children:"true"}),(0,i.jsxs)(e.td,{align:"left",children:["If ",(0,i.jsx)(e.code,{children:"true"}),", the menu will return the focus to the trigger element when closing. Otherwise, it will leave focus unchanged."]})]})]})]}),"\n",(0,i.jsxs)(e.h3,{id:"menubutton-1",children:["MenuButton",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menubutton-1",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"disabled"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Whether the menu button is disabled."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"onClick"}),(0,i.jsx)(e.td,{align:"left",children:"function"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Callback when the menu button is clicked."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"onKeyDown"}),(0,i.jsx)(e.td,{align:"left",children:"function"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Callback when the user presses a key."})]})]})]}),"\n",(0,i.jsxs)(e.h3,{id:"menucontent",children:["MenuContent",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menucontent",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"PopperComponent"}),(0,i.jsx)(e.td,{align:"left",children:"ElementType"}),(0,i.jsx)(e.td,{align:"left",children:"Popper"}),(0,i.jsx)(e.td,{align:"left",children:"The component used for the popover."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"PopperProps"}),(0,i.jsx)(e.td,{align:"left",children:"object"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Props applied to the Popper component."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"TransitionComponent"}),(0,i.jsx)(e.td,{align:"left",children:"ElementType"}),(0,i.jsx)(e.td,{align:"left",children:"Collapse"}),(0,i.jsx)(e.td,{align:"left",children:"The component used for the transition."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"TransitionProps"}),(0,i.jsx)(e.td,{align:"left",children:"object"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsxs)(e.td,{align:"left",children:["Props applied to the ",(0,i.jsx)(e.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"TransitionProps.appear"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left",children:"true"}),(0,i.jsx)(e.td,{align:"left"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left"})]})]})]}),"\n",(0,i.jsxs)(e.h3,{id:"menudivider",children:["MenuDivider",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menudivider",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsx)(e.tbody,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left"})]})})]}),"\n",(0,i.jsxs)(e.h3,{id:"menugroup-1",children:["MenuGroup",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menugroup-1",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"title"}),(0,i.jsx)(e.td,{align:"left",children:"string"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"The title of the menu group."})]})]})]}),"\n",(0,i.jsxs)(e.h3,{id:"menuitem",children:["MenuItem",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menuitem",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"disabled"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Whether the menu item is disabled."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"onClick"}),(0,i.jsx)(e.td,{align:"left",children:"function"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Callback when the menu item is clicked."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"onKeyDown"}),(0,i.jsx)(e.td,{align:"left",children:"function"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Callback when the user presses a key."})]})]})]}),"\n",(0,i.jsxs)(e.h3,{id:"menulist",children:["MenuList",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menulist",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"PopperComponent"}),(0,i.jsx)(e.td,{align:"left",children:"ElementType"}),(0,i.jsx)(e.td,{align:"left",children:"Popper"}),(0,i.jsx)(e.td,{align:"left",children:"The component used for the popover."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"PopperProps"}),(0,i.jsx)(e.td,{align:"left",children:"object"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Props applied to the Popper component."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"TransitionComponent"}),(0,i.jsx)(e.td,{align:"left",children:"ElementType"}),(0,i.jsx)(e.td,{align:"left",children:"Collapse"}),(0,i.jsx)(e.td,{align:"left",children:"The component used for the transition."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"TransitionProps"}),(0,i.jsx)(e.td,{align:"left",children:"object"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsxs)(e.td,{align:"left",children:["Props applied to the ",(0,i.jsx)(e.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"TransitionProps.appear"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left",children:"true"}),(0,i.jsx)(e.td,{align:"left"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left"})]})]})]}),"\n",(0,i.jsxs)(e.h3,{id:"menutoggle-1",children:["MenuToggle",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menutoggle-1",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsxs)(e.td,{align:"left",children:["ReactNode | ",(0,i.jsx)(e.code,{children:"({ getMenuToggleProps }) => ReactNode"})]}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"disabled"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Whether the menu toggle is disabled."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"onClick"}),(0,i.jsx)(e.td,{align:"left",children:"function"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Callback when the menu toggle is clicked."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"onKeyDown"}),(0,i.jsx)(e.td,{align:"left",children:"function"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Callback when the user presses a key."})]})]})]}),"\n",(0,i.jsxs)(e.h3,{id:"menutoggleicon-1",children:["MenuToggleIcon",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#menutoggleicon-1",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"appear"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left",children:"false"}),(0,i.jsxs)(e.td,{align:"left",children:["By default the child component does not perform the enter transition when it first mounts, regardless of the value of ",(0,i.jsx)(e.code,{children:"in"}),". If you want this behavior, set both ",(0,i.jsx)(e.code,{children:"appear"})," and ",(0,i.jsx)(e.code,{children:"in"})," to true."]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsxs)(e.td,{align:"left",children:["ReactNode | ",(0,i.jsx)(e.code,{children:"(state, props) => ReactNode"})]}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"A function child can be used instead of a React element. This function is called with the current transition state ('entering', 'entered', 'exiting', 'exited'), ref, style, and context specific props for a component."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"disabled"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Whether the menu toggle icon is disabled."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"easing"}),(0,i.jsxs)(e.td,{align:"left",children:["string | ",(0,i.jsx)(e.code,{children:"{ enter?: string, exit?: string }"})]}),(0,i.jsx)(e.td,{align:"left",children:(0,i.jsx)(e.code,{children:"{ enter: easing.easeInOut, exit: easing.easeInOut }"})}),(0,i.jsx)(e.td,{align:"left",children:"The timing function that describes how intermediate values are calculated during a transition. You may specify a single timing function for all transitions, or individually with an object."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"in"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsxs)(e.td,{align:"left",children:["If ",(0,i.jsx)(e.code,{children:"true"}),", the component will transition in."]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"mountOnEnter"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsxs)(e.td,{align:"left",children:["If ",(0,i.jsx)(e.code,{children:"true"}),', it will "lazy mount" the component on the first ',(0,i.jsx)(e.code,{children:"in={true}"}),". After the first enter transition the component will stay mounted, even on the 'exited' state, unless you also specify ",(0,i.jsx)(e.code,{children:"unmountOnExit"}),". By default the child component is mounted immediately along with the parent transition component."]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"timeout"}),(0,i.jsxs)(e.td,{align:"left",children:["number | ",(0,i.jsx)(e.code,{children:"{ appear?: number, enter?: number, exit?: number }"})]}),(0,i.jsx)(e.td,{align:"left",children:(0,i.jsx)(e.code,{children:"{ enter: duration.enterScreen, exit: duration.levingScreen }"})}),(0,i.jsx)(e.td,{align:"left",children:"The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"unmountOnExit"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsxs)(e.td,{align:"left",children:["If ",(0,i.jsx)(e.code,{children:"true"}),", it will unmount the child component when ",(0,i.jsx)(e.code,{children:"in={false}"})," and the animation has finished. By default the child component stays mounted after it reaches the 'exited' state."]})]})]})]}),"\n",(0,i.jsxs)(e.h3,{id:"submenu",children:["Submenu",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#submenu",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"defaultIsOpen"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left",children:"false"}),(0,i.jsx)(e.td,{align:"left",children:"Whether the submenu is open by default."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"isOpen"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Whether the submenu is open."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"offset"}),(0,i.jsx)(e.td,{align:"left",children:"[skidding, distance]"}),(0,i.jsx)(e.td,{align:"left",children:"[0, 0]"}),(0,i.jsx)(e.td,{align:"left",children:"The skidding and distance of the menu."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"onClose"}),(0,i.jsx)(e.td,{align:"left",children:"function"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Callback when the submenu is closed."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"onOpen"}),(0,i.jsx)(e.td,{align:"left",children:"function"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Callback when the submenu is opened."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"placement"}),(0,i.jsx)(e.td,{align:"left",children:"string"}),(0,i.jsx)(e.td,{align:"left",children:"'right-start'"}),(0,i.jsx)(e.td,{align:"left",children:"The placement of the submenu. One of: 'right-start', 'right-end', 'left-start', 'left-end'"})]})]})]}),"\n",(0,i.jsxs)(e.h3,{id:"submenucontent",children:["SubmenuContent",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#submenucontent",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"PopperComponent"}),(0,i.jsx)(e.td,{align:"left",children:"ElementType"}),(0,i.jsx)(e.td,{align:"left",children:"Popper"}),(0,i.jsx)(e.td,{align:"left",children:"The component used for the popover."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"PopperProps"}),(0,i.jsx)(e.td,{align:"left",children:"object"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Props applied to the Popper component."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"TransitionComponent"}),(0,i.jsx)(e.td,{align:"left",children:"ElementType"}),(0,i.jsx)(e.td,{align:"left",children:"Collapse"}),(0,i.jsx)(e.td,{align:"left",children:"The component used for the transition."})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"TransitionProps"}),(0,i.jsx)(e.td,{align:"left",children:"object"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsxs)(e.td,{align:"left",children:["Props applied to the ",(0,i.jsx)(e.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"TransitionProps.appear"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left",children:"true"}),(0,i.jsx)(e.td,{align:"left"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left"})]})]})]}),"\n",(0,i.jsxs)(e.h3,{id:"submenulist",children:["SubmenuList",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#submenulist",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsx)(e.tbody,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left"})]})})]}),"\n",(0,i.jsxs)(e.h3,{id:"submenutoggle",children:["SubmenuToggle",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#submenutoggle",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:"left",children:"Name"}),(0,i.jsx)(e.th,{align:"left",children:"Type"}),(0,i.jsx)(e.th,{align:"left",children:"Default"}),(0,i.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"children"}),(0,i.jsxs)(e.td,{align:"left",children:["ReactNode | ",(0,i.jsx)(e.code,{children:"({ getSubmenuToggleProps }) => ReactNode"})]}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:"left",children:"disabled"}),(0,i.jsx)(e.td,{align:"left",children:"boolean"}),(0,i.jsx)(e.td,{align:"left"}),(0,i.jsx)(e.td,{align:"left",children:"Whether the submenu toggle is disabled."})]})]})]})]})}var k=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,s.ah)(),n.components).wrapper;return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(w,n)})):w(n)}},82711:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/menu",function(){return t(17933)}])}},function(n){n.O(0,[7687,9774,2888,179],function(){return n(n.s=82711)}),_N_E=n.O()}]);