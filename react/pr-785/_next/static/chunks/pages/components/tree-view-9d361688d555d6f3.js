(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7574],{58775:function(n,e,o){"use strict";o.d(e,{Z:function(){return y}});var r=o(98922),t=o(49427),l=o(5632),d=o(2784),i=o(79525),a=o(98485),c=o(71561),s=o(57431),h=o(66824),u=["size"];function p(){return(p=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(n[r]=o[r])}return n}).apply(this,arguments)}var f=(0,d.forwardRef)(function(n,e){var o=n.size,t=function(n,e){if(null==n)return{};var o,r,t=function(n,e){if(null==n)return{};var o,r,t={},l=Object.keys(n);for(r=0;r<l.length;r++)o=l[r],e.indexOf(o)>=0||(t[o]=n[o]);return t}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)o=l[r],!(e.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(n,o)&&(t[o]=n[o])}return t}(n,u);return d.createElement(r.SVGIcon,p({size:o,viewBox:"0 0 1024 1024"},t),d.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});f.displayName="CodeSandboxIcon";var m=o(30462);function x(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,r,t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var l=[],d=!0,i=!1;try{for(t=t.call(n);!(d=(o=t.next()).done)&&(l.push(o.value),!e||l.length!==e);d=!0);}catch(n){i=!0,r=n}finally{try{d||null==t.return||t.return()}finally{if(i)throw r}}return l}}(n,e)||function(n,e){if(n){if("string"==typeof n)return b(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return b(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,r=Array(e);o<e;o++)r[o]=n[o];return r}var v={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},N=function(n){var e=n.component,o=n.file,u=n.sandbox,p=(0,l.useRouter)(),b=x((0,d.useReducer)(function(n){return!n},!1),2),N=b[0],y=b[1],g=x((0,r.useColorMode)(),1)[0],w={dark:c.y,light:c.q}[g],S=x((0,t.useToggle)(!1),2),C=S[0],I=S[1],T=(0,a.Z)(null==o?void 0:o.data),E=T.onCopy,k=T.hasCopied,A=(0,d.useCallback)(function(){E()},[E]),j=(0,d.useCallback)(function(){(0,s.b)(u)},[u]),B=(0,d.useCallback)(function(){y(),I(!1)},[y,I]);return d.createElement(i.nu,{code:null==o?void 0:o.data,disabled:!0,language:"jsx",theme:w},d.createElement(r.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[g],p:"4x"},d.createElement(r.Box,{fontSize:"sm",lineHeight:"sm"},d.createElement(d.Fragment,{key:N},d.createElement(e,null)))),d.createElement(r.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},d.createElement(m.Z,{"data-track":C?"CodeBlock|hide_source|".concat((0,h.Z)({path:p.pathname})):"CodeBlock|show_source|".concat((0,h.Z)({path:p.pathname})),onClick:I},d.createElement(r.Tooltip,{label:C?"Hide the source":"Show the source"},d.createElement(r.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),d.createElement(m.Z,{"data-track":"CodeBlock|copy_source|".concat((0,h.Z)({path:p.pathname})),onClick:A},d.createElement(r.Tooltip,{label:k?"Copied":"Copy the source"},d.createElement(r.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),d.createElement(m.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(p.pathname),onClick:j},d.createElement(r.Tooltip,{label:"Edit in CodeSandbox"},d.createElement(f,{size:{sm:"5x",md:"4x"}}))),d.createElement(m.Z,{"data-track":"CodeBlock|reset|".concat(p.pathname),onClick:B},d.createElement(r.Tooltip,{label:"Reset the demo"},d.createElement(r.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),d.createElement(r.Fade,{in:C},d.createElement(r.Collapse,{in:C,unmountOnExit:!0},d.createElement(i.uz,{style:v}))))};N.displayName="Demo";var y=N},46336:function(n,e,o){"use strict";o.r(e),o.d(e,{default:function(){return V}});var r,t=o(52322),l=o(45392),d=o(58775),i=o(98922),a=o(2784),c=JSON.parse('{"id":"0","name":"Root","children":[{"id":"1","name":"Node 1","children":[{"id":"2","name":"Node 2","children":[{"id":"3","name":"Node 3","children":[{"id":"4","name":"Node 4"}]},{"id":"5","name":"Node 5"}]},{"id":"6","name":"Node 6","children":[{"id":"7","name":"Node 7","children":[{"id":"8","name":"Node 8"},{"id":"9","name":"Node 9","children":[{"id":"10","name":"Node 10","children":[{"id":"11","name":"Node 11"}]}]}]}]}]},{"id":"12","name":"Node 12","children":[{"id":"13","name":"Node 13","children":[{"id":"14","name":"Node 14"}]}]}]}'),s=function(n){var e=[];return!function n(o){Array.isArray(o.children)&&o.children.length>0&&(e.push(o.id),o.children.forEach(n))}(n),e};function h(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,r,t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var l=[],d=!0,i=!1;try{for(t=t.call(n);!(d=(o=t.next()).done)&&(l.push(o.value),!e||l.length!==e);d=!0);}catch(n){i=!0,r=n}finally{try{d||null==t.return||t.return()}finally{if(i)throw r}}return l}}(n,e)||function(n,e){if(n){if("string"==typeof n)return u(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return u(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,r=Array(e);o<e;o++)r[o]=n[o];return r}var p=s(c),f=function n(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=Array.isArray(e.children)?e.children.length:0;return a.createElement(i.TreeNode,{key:e.id,nodeId:e.id,render:function(n){var o=n.isExpanded,t=r>0?o?"folder-open":"folder":"server",l=r>0?"yellow:50":"currentColor";return a.createElement(a.Fragment,null,a.createElement(i.Icon,{icon:t,color:l,mr:"2x"}),a.createElement(i.OverflowTooltip,{label:e.name},e.name))}},r>0?e.children.map(function(e){return n(e,o+1)}):null)},m=function(){var n=h((0,a.useState)(!1),2),e=n[0],o=n[1],r=h((0,i.useColorMode)(),1)[0],t=h((0,i.useColorStyle)(),1)[0],l=(0,a.useRef)(),d=(0,a.useRef)();return a.createElement(i.Flex,{ref:l,sx:{boxShadow:t.shadow.thick,cursor:e?"col-resize":"default"}},a.createElement(i.Box,{ref:d,sx:{flex:"none",width:240}},a.createElement(i.Scrollbar,{height:240,overflowX:"hidden",overflowY:"scroll"},a.createElement(i.TreeView,{"aria-label":"basic tree view",defaultExpandedNodes:p,isSelectable:!0},f(c)))),a.createElement(i.Flex,{sx:{flex:"auto",px:"3x",py:"2x",position:"relative",borderLeft:1,borderLeftColor:{dark:"gray:70",light:"gray:30"}[r]}},a.createElement(i.ResizeHandle,{onResizeStart:function(){o(!0)},onResizeEnd:function(){o(!1)},onResize:function(n){var e=n.clientX,o=d.current;if(o){var r=l.current.getBoundingClientRect(),t=r.left,i=r.width;e-t>=160&&e-t<=.4*i&&(o.style.width="".concat(e-t,"px"))}},sx:{position:"absolute",left:-1,top:0,bottom:0,zIndex:1}}),a.createElement(i.Box,null,"Page content")))};function x(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,r,t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var l=[],d=!0,i=!1;try{for(t=t.call(n);!(d=(o=t.next()).done)&&(l.push(o.value),!e||l.length!==e);d=!0);}catch(n){i=!0,r=n}finally{try{d||null==t.return||t.return()}finally{if(i)throw r}}return l}}(n,e)||function(n,e){if(n){if("string"==typeof n)return b(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return b(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,r=Array(e);o<e;o++)r[o]=n[o];return r}var v=(r=[],!function n(e){r.push(e.id),Array.isArray(e.children)&&e.children.length>0&&e.children.forEach(n)}(c),r),N=s(c),y=function n(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=Array.isArray(e.children)?e.children.length:0;return a.createElement(i.TreeNode,{key:e.id,nodeId:e.id,render:function(n){var o=n.isExpanded,t=n.isSelected,l=n.select,d=r>0?o?"folder-open":"folder":"server",c=r>0?"yellow:50":"currentColor";return a.createElement(a.Fragment,null,a.createElement(i.Flex,{onClick:function(n){n.stopPropagation()},mr:"2x"},a.createElement(i.Checkbox,{checked:t,onChange:function(){l()}})),a.createElement(i.Icon,{icon:d,color:c,mr:"2x"}),a.createElement(i.OverflowTooltip,{label:e.name},e.name))},sx:{'&[aria-selected="true"] > *:first-of-type:not(:hover)':{backgroundColor:"transparent"}}},r>0?e.children.map(function(e){return n(e,o+1)}):null)},g=function(){var n=x((0,i.useColorStyle)(),1)[0],e=x((0,a.useState)(N),2),o=e[0],r=e[1],t=x((0,a.useState)([]),2),l=t[0],d=t[1];return a.createElement(a.Fragment,null,a.createElement(i.ButtonGroup,{variant:"secondary",columnGap:"2x",mb:"3x"},a.createElement(i.Button,{variant:"secondary",disabled:o.length===N.length,onClick:function(n){r(N)}},"Expand all"),a.createElement(i.Button,{variant:"secondary",disabled:0===o.length,onClick:function(n){r([])}},"Collapse all"),a.createElement(i.Button,{variant:"secondary",disabled:l.length===v.length,onClick:function(n){d(v)}},"Select all"),a.createElement(i.Button,{variant:"secondary",disabled:0===l.length,onClick:function(n){d([])}},"Unselect all")),a.createElement(i.Stack,{spacing:"2x"},a.createElement(i.Text,null,"Expanded nodes: ",o.join(", ")),a.createElement(i.Text,null,"Selected nodes: ",l.join(", "))),a.createElement(i.Divider,{my:"4x"}),a.createElement(i.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},a.createElement(i.Scrollbar,{height:240,overflowY:"scroll"},a.createElement(i.TreeView,{"aria-label":"controlled",isSelectable:!0,isMultiSelectable:!0,expandedNodes:o,selectedNodes:l,onToggleNodes:function(n){r(n)},onSelectNodes:function(n){d(n)}},y(c)))))};function w(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,r=Array(e);o<e;o++)r[o]=n[o];return r}var S=s(c),C=function n(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=Array.isArray(e.children)?e.children.length:0;return a.createElement(i.TreeNode,{key:e.id,nodeId:e.id,render:function(n){var o=n.isExpanded,t=n.isSelected,l=n.select,d=r>0?o?"folder-open":"folder":"server",c=r>0?"yellow:50":"currentColor";return a.createElement(a.Fragment,null,a.createElement(i.Flex,{onClick:function(n){n.stopPropagation()},mr:"2x"},a.createElement(i.Checkbox,{checked:t,onChange:function(){l()}})),a.createElement(i.Icon,{icon:d,color:c,mr:"2x"}),a.createElement(i.OverflowTooltip,{label:e.name},e.name))},sx:{'&[aria-selected="true"] > *:first-of-type:not(:hover)':{backgroundColor:"transparent"}}},r>0?e.children.map(function(e){return n(e,o+1)}):null)},I=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,i.useColorStyle)())||function(n,e){var o,r,t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var l=[],d=!0,i=!1;try{for(t=t.call(n);!(d=(o=t.next()).done)&&(l.push(o.value),!e||l.length!==e);d=!0);}catch(n){i=!0,r=n}finally{try{d||null==t.return||t.return()}finally{if(i)throw r}}return l}}(n,1)||function(n,e){if(n){if("string"==typeof n)return w(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return w(n,e)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return a.createElement(i.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:e.shadow.thick}},a.createElement(i.Scrollbar,{height:240,overflowY:"scroll"},a.createElement(i.TreeView,{"aria-label":"multi-select",defaultExpandedNodes:S,isSelectable:!0,isMultiSelectable:!0},C(c))))};function T(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,r=Array(e);o<e;o++)r[o]=n[o];return r}var E=s(c),k=function n(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=Array.isArray(e.children)?e.children.length:0;return a.createElement(i.TreeNode,{key:e.id,nodeId:e.id,render:function(n){var o=n.isExpanded,t=r>0?o?"folder-open":"folder":"server",l=r>0?"yellow:50":"currentColor";return a.createElement(a.Fragment,null,a.createElement(i.Icon,{icon:t,color:l,mr:"2x"}),a.createElement(i.OverflowTooltip,{label:e.name},e.name))}},r>0?e.children.map(function(e){return n(e,o+1)}):null)},A=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,i.useColorStyle)())||function(n,e){var o,r,t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var l=[],d=!0,i=!1;try{for(t=t.call(n);!(d=(o=t.next()).done)&&(l.push(o.value),!e||l.length!==e);d=!0);}catch(n){i=!0,r=n}finally{try{d||null==t.return||t.return()}finally{if(i)throw r}}return l}}(n,1)||function(n,e){if(n){if("string"==typeof n)return T(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return T(n,e)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return a.createElement(i.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:e.shadow.thick}},a.createElement(i.Scrollbar,{height:240,overflowY:"scroll"},a.createElement(i.TreeView,{"aria-label":"node icons",defaultExpandedNodes:E,isSelectable:!0},k(c))))};function j(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,r=Array(e);o<e;o++)r[o]=n[o];return r}var B=s(c),R=function n(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=Array.isArray(e.children)?e.children.length:0;return a.createElement(i.TreeNode,{key:e.id,nodeId:e.id,render:function(){return a.createElement(i.OverflowTooltip,{label:e.name},e.name)}},r>0?e.children.map(function(e){return n(e,o+1)}):null)},O=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,i.useColorStyle)())||function(n,e){var o,r,t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var l=[],d=!0,i=!1;try{for(t=t.call(n);!(d=(o=t.next()).done)&&(l.push(o.value),!e||l.length!==e);d=!0);}catch(n){i=!0,r=n}finally{try{d||null==t.return||t.return()}finally{if(i)throw r}}return l}}(n,1)||function(n,e){if(n){if("string"==typeof n)return j(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return j(n,e)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return a.createElement(i.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:e.shadow.thick}},a.createElement(i.Scrollbar,{height:240,overflowY:"scroll"},a.createElement(i.TreeView,{"aria-label":"basic tree view",defaultExpandedNodes:B,isSelectable:!0},R(c))))};function z(n){var e=Object.assign({div:"div",h1:"h1",h2:"h2",a:"a",svg:"svg",use:"use",h3:"h3",ul:"ul",li:"li",code:"code",table:"table",thead:"thead",tr:"tr",th:"th"},(0,l.ah)(),n.components);return(0,t.jsxs)(e.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n",(0,t.jsx)(e.h1,{id:"tree-view",children:"Tree View"}),"\n",(0,t.jsxs)(e.h2,{id:"usage",children:["Usage",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.h3,{id:"basic-tree-view",children:["Basic tree view",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-tree-view",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(d.Z,{component:O,file:{data:"import {\n  Box,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from './data/tree.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={() => (\n        <OverflowTooltip label={node.name}>\n          {node.name}\n        </OverflowTooltip>\n      )}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"basic tree view\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree.json":'{\n  "id": "0",\n  "name": "Root",\n  "children": [\n    {\n      "id": "1",\n      "name": "Node 1",\n      "children": [\n        {\n          "id": "2",\n          "name": "Node 2",\n          "children": [\n            {\n              "id": "3",\n              "name": "Node 3",\n              "children": [\n                {\n                  "id": "4",\n                  "name": "Node 4"\n                }\n              ]\n            },\n            {\n              "id": "5",\n              "name": "Node 5"\n            }\n          ]\n        },\n        {\n          "id": "6",\n          "name": "Node 6",\n          "children": [\n            {\n              "id": "7",\n              "name": "Node 7",\n              "children": [\n                {\n                  "id": "8",\n                  "name": "Node 8"\n                },\n                {\n                  "id": "9",\n                  "name": "Node 9",\n                  "children": [\n                    {\n                      "id": "10",\n                      "name": "Node 10",\n                      "children": [\n                        {\n                          "id": "11",\n                          "name": "Node 11"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "12",\n      "name": "Node 12",\n      "children": [\n        {\n          "id": "13",\n          "name": "Node 13",\n          "children": [\n            {\n              "id": "14",\n              "name": "Node 14"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/tree-view/utils.js":"export const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nexport const getAllNodeIds = (tree) => {\n  const allNodeIds = [];\n\n  const traverse = (node) => {\n    allNodeIds.push(node.id);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return allNodeIds;\n};"},raw:"import {\n  Box,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from '@/pages/components/tree-view/data/tree.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={() => (\n        <OverflowTooltip label={node.name}>\n          {node.name}\n        </OverflowTooltip>\n      )}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"basic tree view\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsx)(d.Z,{component:A,file:{data:"import {\n  Box,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from './data/tree.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"node icons\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree.json":'{\n  "id": "0",\n  "name": "Root",\n  "children": [\n    {\n      "id": "1",\n      "name": "Node 1",\n      "children": [\n        {\n          "id": "2",\n          "name": "Node 2",\n          "children": [\n            {\n              "id": "3",\n              "name": "Node 3",\n              "children": [\n                {\n                  "id": "4",\n                  "name": "Node 4"\n                }\n              ]\n            },\n            {\n              "id": "5",\n              "name": "Node 5"\n            }\n          ]\n        },\n        {\n          "id": "6",\n          "name": "Node 6",\n          "children": [\n            {\n              "id": "7",\n              "name": "Node 7",\n              "children": [\n                {\n                  "id": "8",\n                  "name": "Node 8"\n                },\n                {\n                  "id": "9",\n                  "name": "Node 9",\n                  "children": [\n                    {\n                      "id": "10",\n                      "name": "Node 10",\n                      "children": [\n                        {\n                          "id": "11",\n                          "name": "Node 11"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "12",\n      "name": "Node 12",\n      "children": [\n        {\n          "id": "13",\n          "name": "Node 13",\n          "children": [\n            {\n              "id": "14",\n              "name": "Node 14"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/tree-view/utils.js":"export const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nexport const getAllNodeIds = (tree) => {\n  const allNodeIds = [];\n\n  const traverse = (node) => {\n    allNodeIds.push(node.id);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return allNodeIds;\n};"},raw:"import {\n  Box,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from '@/pages/components/tree-view/data/tree.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"node icons\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"multi-selection",children:["Multi-selection",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#multi-selection",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(d.Z,{component:I,file:{data:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from './data/tree.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n          backgroundColor: 'transparent',\n        },\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"multi-select\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isMultiSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree.json":'{\n  "id": "0",\n  "name": "Root",\n  "children": [\n    {\n      "id": "1",\n      "name": "Node 1",\n      "children": [\n        {\n          "id": "2",\n          "name": "Node 2",\n          "children": [\n            {\n              "id": "3",\n              "name": "Node 3",\n              "children": [\n                {\n                  "id": "4",\n                  "name": "Node 4"\n                }\n              ]\n            },\n            {\n              "id": "5",\n              "name": "Node 5"\n            }\n          ]\n        },\n        {\n          "id": "6",\n          "name": "Node 6",\n          "children": [\n            {\n              "id": "7",\n              "name": "Node 7",\n              "children": [\n                {\n                  "id": "8",\n                  "name": "Node 8"\n                },\n                {\n                  "id": "9",\n                  "name": "Node 9",\n                  "children": [\n                    {\n                      "id": "10",\n                      "name": "Node 10",\n                      "children": [\n                        {\n                          "id": "11",\n                          "name": "Node 11"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "12",\n      "name": "Node 12",\n      "children": [\n        {\n          "id": "13",\n          "name": "Node 13",\n          "children": [\n            {\n              "id": "14",\n              "name": "Node 14"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/tree-view/utils.js":"export const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nexport const getAllNodeIds = (tree) => {\n  const allNodeIds = [];\n\n  const traverse = (node) => {\n    allNodeIds.push(node.id);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return allNodeIds;\n};"},raw:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from '@/pages/components/tree-view/data/tree.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n          backgroundColor: 'transparent',\n        },\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"multi-select\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isMultiSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"controlled-tree-view",children:["Controlled tree view",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#controlled-tree-view",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(d.Z,{component:g,file:{data:"import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useState } from 'react';\nimport tree from './data/tree.json';\nimport { findExpandableNodeIds, getAllNodeIds } from './utils';\n\nconst allNodeIds = getAllNodeIds(tree);\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n          backgroundColor: 'transparent',\n        },\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodeIds);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const onToggleNodes = (nodeIds) => {\n    setExpandedNodes(nodeIds);\n  };\n\n  const onSelectNodes = (nodeIds) => {\n    setSelectedNodes(nodeIds);\n  };\n\n  const handleClickExpandAll = (event) => {\n    setExpandedNodes(expandableNodeIds);\n  };\n\n  const handleClickCollapseAll = (event) => {\n    setExpandedNodes([]);\n  };\n\n  const handleClickSelectAll = (event) => {\n    setSelectedNodes(allNodeIds);\n  };\n\n  const handleClickUnselectAll = (event) => {\n    setSelectedNodes([]);\n  };\n\n  return (\n    <>\n      <ButtonGroup\n        variant=\"secondary\"\n        columnGap=\"2x\"\n        mb=\"3x\"\n      >\n        <Button\n          variant=\"secondary\"\n          disabled={expandedNodes.length === expandableNodeIds.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={selectedNodes.length === allNodeIds.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Stack spacing=\"2x\">\n        <Text>Expanded nodes: {expandedNodes.join(', ')}</Text>\n        <Text>Selected nodes: {selectedNodes.join(', ')}</Text>\n      </Stack>\n      <Divider my=\"4x\" />\n      <Box\n        sx={{\n          minWidth: 160,\n          maxWidth: '40%',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY=\"scroll\"\n        >\n          <TreeView\n            aria-label=\"controlled\"\n            isSelectable\n            isMultiSelectable\n            expandedNodes={expandedNodes}\n            selectedNodes={selectedNodes}\n            onToggleNodes={onToggleNodes}\n            onSelectNodes={onSelectNodes}\n          >\n            {renderTree(tree)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree.json":'{\n  "id": "0",\n  "name": "Root",\n  "children": [\n    {\n      "id": "1",\n      "name": "Node 1",\n      "children": [\n        {\n          "id": "2",\n          "name": "Node 2",\n          "children": [\n            {\n              "id": "3",\n              "name": "Node 3",\n              "children": [\n                {\n                  "id": "4",\n                  "name": "Node 4"\n                }\n              ]\n            },\n            {\n              "id": "5",\n              "name": "Node 5"\n            }\n          ]\n        },\n        {\n          "id": "6",\n          "name": "Node 6",\n          "children": [\n            {\n              "id": "7",\n              "name": "Node 7",\n              "children": [\n                {\n                  "id": "8",\n                  "name": "Node 8"\n                },\n                {\n                  "id": "9",\n                  "name": "Node 9",\n                  "children": [\n                    {\n                      "id": "10",\n                      "name": "Node 10",\n                      "children": [\n                        {\n                          "id": "11",\n                          "name": "Node 11"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "12",\n      "name": "Node 12",\n      "children": [\n        {\n          "id": "13",\n          "name": "Node 13",\n          "children": [\n            {\n              "id": "14",\n              "name": "Node 14"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/tree-view/utils.js":"export const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nexport const getAllNodeIds = (tree) => {\n  const allNodeIds = [];\n\n  const traverse = (node) => {\n    allNodeIds.push(node.id);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return allNodeIds;\n};"},raw:"import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeView,\n  TreeNode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useState } from 'react';\nimport tree from '@/pages/components/tree-view/data/tree.json';\nimport { findExpandableNodeIds, getAllNodeIds } from '@/pages/components/tree-view/utils';\n\nconst allNodeIds = getAllNodeIds(tree);\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n          backgroundColor: 'transparent',\n        },\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodeIds);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const onToggleNodes = (nodeIds) => {\n    setExpandedNodes(nodeIds);\n  };\n\n  const onSelectNodes = (nodeIds) => {\n    setSelectedNodes(nodeIds);\n  };\n\n  const handleClickExpandAll = (event) => {\n    setExpandedNodes(expandableNodeIds);\n  };\n\n  const handleClickCollapseAll = (event) => {\n    setExpandedNodes([]);\n  };\n\n  const handleClickSelectAll = (event) => {\n    setSelectedNodes(allNodeIds);\n  };\n\n  const handleClickUnselectAll = (event) => {\n    setSelectedNodes([]);\n  };\n\n  return (\n    <>\n      <ButtonGroup\n        variant=\"secondary\"\n        columnGap=\"2x\"\n        mb=\"3x\"\n      >\n        <Button\n          variant=\"secondary\"\n          disabled={expandedNodes.length === expandableNodeIds.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={selectedNodes.length === allNodeIds.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Stack spacing=\"2x\">\n        <Text>Expanded nodes: {expandedNodes.join(', ')}</Text>\n        <Text>Selected nodes: {selectedNodes.join(', ')}</Text>\n      </Stack>\n      <Divider my=\"4x\" />\n      <Box\n        sx={{\n          minWidth: 160,\n          maxWidth: '40%',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY=\"scroll\"\n        >\n          <TreeView\n            aria-label=\"controlled\"\n            isSelectable\n            isMultiSelectable\n            expandedNodes={expandedNodes}\n            selectedNodes={selectedNodes}\n            onToggleNodes={onToggleNodes}\n            onSelectNodes={onSelectNodes}\n          >\n            {renderTree(tree)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"resizable-tree-view",children:["Resizable tree view",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#resizable-tree-view",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["When hovering over the border of the resizable tree view, change the cursor to ",(0,t.jsx)(e.code,{children:"col-resize"})," and highlight the border color to indicate that it is resizable. The hoverable area is ",(0,t.jsx)(e.code,{children:"8px"})," in width, including the border."]}),"\n",(0,t.jsxs)(e.li,{children:["When dragging the resizable area, display a translucent background with a ",(0,t.jsx)(e.code,{children:"4px"})," width (excluding the border) to indicate the dragging action."]}),"\n",(0,t.jsxs)(e.li,{children:["The recommended ",(0,t.jsx)(e.code,{children:"min-width"})," is ",(0,t.jsx)(e.code,{children:"160px"}),", and the ",(0,t.jsx)(e.code,{children:"max-width"})," is ",(0,t.jsx)(e.code,{children:"40%"})," of the display area. You can adjust the width according to your specific needs."]}),"\n"]}),"\n",(0,t.jsx)(d.Z,{component:m,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useRef, useState } from 'react';\nimport tree from './data/tree.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 240,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"scroll\"\n        >\n          <TreeView\n            aria-label=\"basic tree view\"\n            defaultExpandedNodes={expandableNodeIds}\n            isSelectable\n          >\n            {renderTree(tree)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n          borderLeft: 1,\n          borderLeftColor: dividerColor,\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: -1,\n            top: 0,\n            bottom: 0,\n            zIndex: 1,\n          }}\n        />\n        <Box>\n          Page content\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree.json":'{\n  "id": "0",\n  "name": "Root",\n  "children": [\n    {\n      "id": "1",\n      "name": "Node 1",\n      "children": [\n        {\n          "id": "2",\n          "name": "Node 2",\n          "children": [\n            {\n              "id": "3",\n              "name": "Node 3",\n              "children": [\n                {\n                  "id": "4",\n                  "name": "Node 4"\n                }\n              ]\n            },\n            {\n              "id": "5",\n              "name": "Node 5"\n            }\n          ]\n        },\n        {\n          "id": "6",\n          "name": "Node 6",\n          "children": [\n            {\n              "id": "7",\n              "name": "Node 7",\n              "children": [\n                {\n                  "id": "8",\n                  "name": "Node 8"\n                },\n                {\n                  "id": "9",\n                  "name": "Node 9",\n                  "children": [\n                    {\n                      "id": "10",\n                      "name": "Node 10",\n                      "children": [\n                        {\n                          "id": "11",\n                          "name": "Node 11"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "12",\n      "name": "Node 12",\n      "children": [\n        {\n          "id": "13",\n          "name": "Node 13",\n          "children": [\n            {\n              "id": "14",\n              "name": "Node 14"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/tree-view/utils.js":"export const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nexport const getAllNodeIds = (tree) => {\n  const allNodeIds = [];\n\n  const traverse = (node) => {\n    allNodeIds.push(node.id);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return allNodeIds;\n};"},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useRef, useState } from 'react';\nimport tree from '@/pages/components/tree-view/data/tree.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 240,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"scroll\"\n        >\n          <TreeView\n            aria-label=\"basic tree view\"\n            defaultExpandedNodes={expandableNodeIds}\n            isSelectable\n          >\n            {renderTree(tree)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n          borderLeft: 1,\n          borderLeftColor: dividerColor,\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: -1,\n            top: 0,\n            bottom: 0,\n            zIndex: 1,\n          }}\n        />\n        <Box>\n          Page content\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h2,{id:"props",children:["Props",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.h3,{id:"treeview",children:["TreeView",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeview",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(e.table,{children:(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{align:"left",children:"Name"}),(0,t.jsx)(e.th,{align:"left",children:"Type"}),(0,t.jsx)(e.th,{align:"left",children:"Default"}),(0,t.jsx)(e.th,{align:"left",children:"Description"})]})})}),"\n",(0,t.jsxs)(e.h3,{id:"treenode",children:["TreeNode",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treenode",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(e.table,{children:(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{align:"left",children:"Name"}),(0,t.jsx)(e.th,{align:"left",children:"Type"}),(0,t.jsx)(e.th,{align:"left",children:"Default"}),(0,t.jsx)(e.th,{align:"left",children:"Description"})]})})})]})}var V=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,l.ah)(),n.components).wrapper;return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(z,n)})):z(n)}},31036:function(n,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/tree-view",function(){return o(46336)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=31036)}),_N_E=n.O()}]);