(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7574],{58775:function(n,e,o){"use strict";o.d(e,{Z:function(){return y}});var t=o(67569),r=o(49427),d=o(5632),a=o(2784),i=o(87805),l=o(98485),c=o(71561),s=o(57431),m=o(66824),u=["size"];function h(){return(h=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}var p=(0,a.forwardRef)(function(n,e){var o=n.size,r=function(n,e){if(null==n)return{};var o,t,r=function(n,e){if(null==n)return{};var o,t,r={},d=Object.keys(n);for(t=0;t<d.length;t++)o=d[t],e.indexOf(o)>=0||(r[o]=n[o]);return r}(n,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(n);for(t=0;t<d.length;t++)o=d[t],!(e.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(n,o)&&(r[o]=n[o])}return r}(n,u);return a.createElement(t.SVGIcon,h({size:o,viewBox:"0 0 1024 1024"},r),a.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});p.displayName="CodeSandboxIcon";var f=o(30462);function g(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,t,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var d=[],a=!0,i=!1;try{for(r=r.call(n);!(a=(o=r.next()).done)&&(d.push(o.value),!e||d.length!==e);a=!0);}catch(n){i=!0,t=n}finally{try{a||null==r.return||r.return()}finally{if(i)throw t}}return d}}(n,e)||function(n,e){if(n){if("string"==typeof n)return x(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return x(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function x(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var N={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},b=function(n){var e=n.component,o=n.file,u=n.sandbox,h=(0,d.useRouter)(),x=g((0,a.useReducer)(function(n){return!n},!1),2),b=x[0],y=x[1],v=g((0,t.useColorMode)(),1)[0],w={dark:c.y,light:c.q}[v],S=g((0,r.useToggle)(!1),2),T=S[0],I=S[1],C=(0,l.Z)(null==o?void 0:o.data),E=C.onCopy,k=C.hasCopied,j=(0,a.useCallback)(function(){E()},[E]),D=(0,a.useCallback)(function(){(0,s.b)(u)},[u]),R=(0,a.useCallback)(function(){y(),I(!1)},[y,I]);return a.createElement(i.nu,{code:null==o?void 0:o.data,disabled:!0,language:"jsx",theme:w},a.createElement(t.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[v],p:"4x"},a.createElement(t.Box,{fontSize:"sm",lineHeight:"sm"},a.createElement(a.Fragment,{key:b},a.createElement(e,null)))),a.createElement(t.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},a.createElement(f.Z,{"data-track":T?"CodeBlock|hide_source|".concat((0,m.Z)({path:h.pathname})):"CodeBlock|show_source|".concat((0,m.Z)({path:h.pathname})),onClick:I},a.createElement(t.Tooltip,{label:T?"Hide the source":"Show the source"},a.createElement(t.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),a.createElement(f.Z,{"data-track":"CodeBlock|copy_source|".concat((0,m.Z)({path:h.pathname})),onClick:j},a.createElement(t.Tooltip,{label:k?"Copied":"Copy the source"},a.createElement(t.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),a.createElement(f.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(h.pathname),onClick:D},a.createElement(t.Tooltip,{label:"Edit in CodeSandbox"},a.createElement(p,{size:{sm:"5x",md:"4x"}}))),a.createElement(f.Z,{"data-track":"CodeBlock|reset|".concat(h.pathname),onClick:R},a.createElement(t.Tooltip,{label:"Reset the demo"},a.createElement(t.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),a.createElement(t.Fade,{in:T},a.createElement(t.Collapse,{in:T,unmountOnExit:!0},a.createElement(i.uz,{style:N}))))};b.displayName="Demo";var y=b},18020:function(n,e,o){"use strict";o.r(e),o.d(e,{default:function(){return nU}});var t=o(52322),r=o(45392),d=o(58775),a=o(67569),i=o(5081),l=o(2784),c=function(n){var e=new Map;return!function n(o){(0,i.rY)(o).forEach(function(o){e.set(o.id,o),n(o.children)})}(n),e},s=function(n){var e=[];return!function n(o){(0,i.rY)(o).forEach(function(o){Array.isArray(o.children)&&o.children.length>0&&(e.push(o.id),n(o.children))})}(n),e};function m(){return(m=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function u(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,t,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var d=[],a=!0,i=!1;try{for(r=r.call(n);!(a=(o=r.next()).done)&&(d.push(o.value),!e||d.length!==e);a=!0);}catch(n){i=!0,t=n}finally{try{a||null==r.return||r.return()}finally{if(i)throw t}}return d}}(n,e)||function(n,e){if(n){if("string"==typeof n)return h(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return h(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var p=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,d=u((0,a.useColorStyle)(),1)[0],c=(0,a.useTreeView)().getIsNodeExpanded,s=o.id,h=o.name,p=u((0,l.useState)((0,i.rY)(o.children)),2),f=p[0],g=p[1],x=u((0,l.useState)(!1),2),N=x[0],b=x[1],y=c(s),v=o.loadOnDemand&&0===f.length;return(0,l.useEffect)(function(){var n=null;return y&&v&&(b(!0),n=setTimeout(function(){var n=[{id:"".concat(s,".1"),name:"".concat(h,".1"),loadOnDemand:r<2},{id:"".concat(s,".2"),name:"".concat(h,".2")}];g(n),b(!1),o.children=n,o.loadOnDemand=!1},500)),function(){n&&clearTimeout(n)}},[y,v,o,s,h,r]),l.createElement(a.TreeItem,{nodeId:s,render:function(n){var e=n.isExpandable,t=n.isExpanded,i=n.isSelected;n.select;var c=e?t?"folder-open":"folder":"server",s=e?"yellow:50":"currentColor";return l.createElement(a.TreeItemContent,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:d.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},l.createElement(a.Flex,{flex:"none",width:"6x"},e&&l.createElement(a.TreeItemToggle,null,N?l.createElement(a.Spinner,{size:"xs"}):l.createElement(a.TreeItemToggleIcon,null))),l.createElement(a.Icon,{icon:c,color:s,mr:"2x"}),l.createElement(a.OverflowTooltip,{label:o.name},function(n){var e=n.ref,t=n.style;return l.createElement(a.Box,m({ref:e},t,{flex:"auto",fontWeight:i?"semibold":"normal"}),o.name)}))}},v?l.createElement(a.Box,{key:"stub"}):f.map(function(e){return l.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},f=function(){var n=u((0,a.useColorStyle)(),1)[0],e=Array.from({length:5},function(n,e){var o=e+1;return{id:"".concat(o),name:"Node ".concat(o),children:[],loadOnDemand:!0}}),o=s(e),t=u((0,l.useState)(o),2),r=t[0],d=t[1],c=u((0,l.useState)([]),2),m=c[0],h=c[1],f=(0,l.useCallback)(function(n){d(n)},[]),g=(0,l.useCallback)(function(n){h(n)},[]);return l.createElement(a.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},l.createElement(a.Scrollbar,{height:240,overflowY:"auto"},l.createElement(a.TreeView,{"aria-label":"load on demand",isSelectable:!0,isUnselectable:!0,expandedNodes:r,selectedNodes:m,onNodeToggle:f,onNodeSelect:g},(0,i.rY)(e).map(function(n){return l.createElement(p,{key:n.id,node:n})}))))},g=o(49427),x=o(76635),N=o.n(x),b=o(28846),y=o(52797),v=JSON.parse('[{"id":"1","name":"Node 1","children":[{"id":"1.1","name":"Node 2","children":[{"id":"1.1.1","name":"Node 3","children":[{"id":"1.1.1.1","name":"Node 4"}]},{"id":"1.1.2","name":"Node 5","children":[{"id":"1.1.2.1","name":"Node 6"}]},{"id":"1.1.3","name":"Node 7","children":[{"id":"1.1.3.1","name":"Node 8"},{"id":"1.1.3.2","name":"Node 9"},{"id":"1.1.3.3","name":"Node 10"}]},{"id":"1.1.4","name":"Node 11"},{"id":"1.1.5","name":"Node 12"}]},{"id":"1.2","name":"Node 13","children":[{"id":"1.2.1","name":"Node 14","children":[{"id":"1.2.1.1","name":"Node 15"}]}]},{"id":"1.3","name":"Node 16","children":[{"id":"1.3.1","name":"Node 17"},{"id":"1.3.2","name":"Node 18"},{"id":"1.3.3","name":"Node 19"},{"id":"1.3.4","name":"Node 20","children":[{"id":"1.3.4.1","name":"Node 21"},{"id":"1.3.4.2","name":"Node 22"},{"id":"1.3.4.3","name":"Node 23"}]},{"id":"1.3.5","name":"Node 24"}]},{"id":"1.4","name":"Node 25","children":[{"id":"1.4.1","name":"Node 26"},{"id":"1.4.2","name":"Node 27"},{"id":"1.4.3","name":"Node 28"}]}]},{"id":"2","name":"Node 29","children":[{"id":"2.1","name":"Node 30","children":[{"id":"2.1.1","name":"Node 31"},{"id":"2.1.2","name":"Node 32"},{"id":"2.1.3","name":"Node 33"}]},{"id":"2.2","name":"Node 34"},{"id":"2.3","name":"Node 35","children":[{"id":"2.3.1","name":"Node 36","children":[{"id":"2.3.1.1","name":"Node 37"},{"id":"2.3.1.2","name":"Node 38"}]}]},{"id":"2.4","name":"Node 39"}]},{"id":"3","name":"Node 40","children":[{"id":"3.1","name":"Node 41","children":[{"id":"3.1.1","name":"Node 42"},{"id":"3.1.2","name":"Node 43","children":[{"id":"3.1.2.1","name":"Node 44"},{"id":"3.1.2.2","name":"Node 45"},{"id":"3.1.2.3","name":"Node 46"},{"id":"3.1.2.4","name":"Node 47"}]},{"id":"3.1.3","name":"Node 48"}]},{"id":"3.2","name":"Node 49","children":[{"id":"3.2.1","name":"Node 50"},{"id":"3.2.2","name":"Node 51"}]},{"id":"3.3","name":"Node 52","children":[{"id":"3.3.1","name":"Node 53"},{"id":"3.3.2","name":"Node 54","children":[{"id":"3.3.2.1","name":"Node 55"}]}]},{"id":"3.4","name":"Node 56"},{"id":"3.5","name":"Node 57","children":[{"id":"3.5.1","name":"Node 58"},{"id":"3.5.2","name":"Node 59","children":[{"id":"3.5.2.1","name":"Node 60"},{"id":"3.5.2.2","name":"Node 61"}]}]}]},{"id":"4","name":"Node 62","children":[{"id":"4.1","name":"Node 63","children":[{"id":"4.1.1","name":"Node 64","children":[{"id":"4.1.1.1","name":"Node 65"},{"id":"4.1.1.2","name":"Node 66"}]},{"id":"4.1.2","name":"Node 67"},{"id":"4.1.3","name":"Node 68"},{"id":"4.1.4","name":"Node 69"}]}]},{"id":"5","name":"Node 70","children":[{"id":"5.1","name":"Node 71","children":[{"id":"5.1.1","name":"Node 72"},{"id":"5.1.2","name":"Node 73"},{"id":"5.1.3","name":"Node 74","children":[{"id":"5.1.3.1","name":"Node 75"}]},{"id":"5.1.4","name":"Node 76","children":[{"id":"5.1.4.1","name":"Node 77"},{"id":"5.1.4.2","name":"Node 78"}]}]},{"id":"5.2","name":"Node 79"},{"id":"5.3","name":"Node 80","children":[{"id":"5.3.1","name":"Node 81"}]},{"id":"5.4","name":"Node 82","children":[{"id":"5.4.1","name":"Node 83","children":[{"id":"5.4.1.1","name":"Node 84"}]},{"id":"5.4.2","name":"Node 85"}]},{"id":"5.5","name":"Node 86"}]},{"id":"6","name":"Node 87","children":[{"id":"6.1","name":"Node 88"},{"id":"6.2","name":"Node 89"},{"id":"6.3","name":"Node 90","children":[{"id":"6.3.1","name":"Node 91"},{"id":"6.3.2","name":"Node 92"},{"id":"6.3.3","name":"Node 93"}]},{"id":"6.4","name":"Node 94"}]},{"id":"7","name":"Node 95","children":[{"id":"7.1","name":"Node 96","children":[{"id":"7.1.1","name":"Node 97"},{"id":"7.1.2","name":"Node 98","children":[{"id":"7.1.2.1","name":"Node 99"},{"id":"7.1.2.2","name":"Node 100"}]}]}]}]'),w=o(95412),S=o(73705),T=o(1582),I=o(92843),C=o(6738),E=["node","data"];function k(){return(k=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function j(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),o.push.apply(o,t)}return o}function D(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?j(Object(o),!0).forEach(function(e){var t;t=o[e],e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):j(Object(o)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))})}return n}function R(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,t,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var d=[],a=!0,i=!1;try{for(r=r.call(n);!(a=(o=r.next()).done)&&(d.push(o.value),!e||d.length!==e);a=!0);}catch(n){i=!0,t=n}finally{try{a||null==r.return||r.return()}finally{if(i)throw t}}return d}}(n,e)||A(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function A(n,e){if(n){if("string"==typeof n)return P(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return P(n,e)}}function P(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var O=function(n){var e=n.canDrag,o=n.children,t=n.item,r=R((0,I.c)({type:"dnd",item:t,canDrag:e,collect:function(n){return{isDragging:n.isDragging()}}}),3),d=r[0];return o({dragRef:r[1],dragPreviewRef:r[2],isDragging:d.isDragging})},M=function n(e,o){var t=(n.canvas||(n.canvas=document.createElement("canvas"))).getContext("2d");return t.font=o,t.measureText(e).width||0},z=function(n){var e=n.count,o=n.defaultPage,t=void 0===o?1:o,r=n.defaultRowsPerPage,d=n.onPageChange,c=n.onRowsPerPageChange,s=n.page,m=n.rowsPerPage,u=n.rowsPerPageOptions,h=void 0===u?[10,25,50,100]:u;n.showFirstButton,n.showLastButton;var p=R((0,a.useColorMode)(),1)[0],f=R((0,a.useColorStyle)({colorMode:p}),1)[0],g=null!=r?r:(0,i.rY)(h)[0],x=R((0,l.useState)(null!=s?s:t),2),N=x[0],b=x[1],y=R((0,l.useState)(null!=m?m:g),2),v=y[0],w=y[1];(0,l.useEffect)(function(){void 0!==s&&b(s)},[s]),(0,l.useEffect)(function(){void 0!==m&&w(m)},[m]);var S=(0,l.useCallback)(function(n){void 0!==s||b(n),"function"==typeof d&&d(n)},[s,d]),T=(0,l.useCallback)(function(n){void 0!==m||w(n),"function"==typeof c&&c(n)},[m,c]),I=Math.ceil(e/v),C=N>1,E=N<I;return l.createElement(a.Flex,{alignItems:"center",justifyContent:"flex-end",backgroundColor:f.background.secondary,px:"6x",py:"3x"},l.createElement(a.Text,{mr:"2x"},"Total: ",e),l.createElement(a.Divider,{orientation:"vertical",height:"6x"}),l.createElement(a.Menu,null,l.createElement(a.MenuButton,{variant:"ghost"},v," per page"),l.createElement(a.MenuList,{onClick:function(n){var e=(0,i.q9)(n.target.value);e>0&&(S(1),T(e))},width:"100%"},h.map(function(n){return l.createElement(a.MenuItem,{key:n,value:n},n)}))),l.createElement(a.Divider,{orientation:"vertical",height:"6x"}),l.createElement(a.Space,{width:"2x"}),l.createElement(a.Input,{width:"10x",px:0,textAlign:"center",onChange:function(n){var e=(0,i.q9)(n.target.value);e<=1?S(1):e>=I?S(I):S(e)},value:N}),l.createElement(a.Space,{width:"2x"}),l.createElement(a.Text,null,"/"),l.createElement(a.Space,{width:"2x"}),l.createElement(a.Text,null,I),l.createElement(a.Space,{width:"2x"}),l.createElement(a.ButtonGroup,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},l.createElement(a.Button,{width:"8x",disabled:!C,onClick:function(n){S(N-1)}},l.createElement(a.Icon,{icon:"angle-left"})),l.createElement(a.Button,{width:"8x",disabled:!E,onClick:function(n){S(N+1)}},l.createElement(a.Icon,{icon:"angle-right"}))))},B=function(n){var e=n.children,o=n.condition,t=n.wrapper;return o?t(e):e},F=function(n){var e=n.node,o=n.data,t=function(n,e){if(null==n)return{};var o,t,r=function(n,e){if(null==n)return{};var o,t,r={},d=Object.keys(n);for(t=0;t<d.length;t++)o=d[t],e.indexOf(o)>=0||(r[o]=n[o]);return r}(n,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(n);for(t=0;t<d.length;t++)o=d[t],!(e.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(n,o)&&(r[o]=n[o])}return r}(n,E),r=R((0,a.useColorMode)(),1)[0],d=R((0,a.useColorStyle)({colorMode:r}),1)[0],c=(0,a.useTheme)(),s={dark:"rgba(255, 255, 255, 0.12)",light:"rgba(0, 0, 0, 0.12)"}[r],m={dark:"rgba(255, 255, 255, 0.08)",light:"rgba(0, 0, 0, 0.08)"}[r],u=R((0,l.useState)([{id:"endpoint",desc:!1}]),2),h=u[0],p=u[1],f=R((0,l.useState)({}),2),g=f[0],x=f[1],b=(0,l.useMemo)(function(){return[{id:"selection",header:function(n){var e=n.table;return l.createElement(a.Checkbox,{checked:e.getIsAllRowsSelected(),indeterminate:e.getIsSomeRowsSelected(),onChange:e.getToggleAllRowsSelectedHandler()})},cell:function(n){var e=n.row;return l.createElement(a.Checkbox,{checked:e.getIsSelected(),disabled:!e.getCanSelect(),indeterminate:e.getIsSomeSelected(),onChange:e.getToggleSelectedHandler()})},size:40},{header:function(){return l.createElement(a.OverflowTooltip,{label:"Endpoint"},"Endpoint")},accessorKey:"endpoint",cell:function(n){var e=n.getValue;n.row;var o=e();return l.createElement(a.OverflowTooltip,{label:o},o)},size:"auto"},{header:function(){return l.createElement(a.OverflowTooltip,{label:"Detections"},"Detections")},accessorKey:"detections",cell:function(n){var e,o=(function(n){if(Array.isArray(n))return P(n)}(e=(0,n.getValue)())||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(e)||A(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).length;return l.createElement(a.OverflowTooltip,{label:o},o)},size:"auto"},{header:function(){return l.createElement(a.OverflowTooltip,{label:"Last Seen"},"Last Seen")},accessorKey:"lastSeen",cell:function(n){var e=(0,n.getValue)().toISOString();return l.createElement(a.OverflowTooltip,{label:e},e)},size:"auto"}]},[]),y=(0,w.b7)({data:(0,i.rY)(o),columns:b,defaultColumn:{minSize:40},state:{rowSelection:g,sorting:h},enableRowSelection:!0,enableSorting:!0,enableSortingRemoval:!0,onRowSelectionChange:x,getCoreRowModel:(0,S.sC)(),getPaginationRowModel:(0,S.G_)(),getSortedRowModel:(0,S.tj)(),onSortingChange:function(n){p(n)}}),v=R((0,l.useState)(0),2),I=v[0],j=v[1];(0,l.useEffect)(function(){y.resetRowSelection(),y.resetPagination()},[o,y]),(0,l.useEffect)(function(){if(I){var n=[c.fontWeights.semibold,c.fontSizes.sm,c.fonts.base].join(" "),e=y.getAllColumns().filter(function(n){return"auto"!==n.columnDef.size}).map(function(e){var o=e.id,t=e.columnDef,r=t.minSize,d=t.size;if("number"==typeof d)return{id:o,size:d};if("string"==typeof d&&d.endsWith("%")){var a="string"==typeof t.header?M(t.header,n):0;return{id:o,size:Math.max(I*parseFloat(d)/100,a+24,r)}}return{id:o,size:r}}),o=y.getAllColumns().filter(function(n){return"auto"===n.columnDef.size}).map(function(e){var o=e.id,t=e.columnDef,r=t.minSize;return{id:o,size:Math.max(("string"==typeof t.header?M(t.header,n):0)+24,r)}}),t=e.reduce(function(n,e){return n+e.size},0),r=o.reduce(function(n,e){return n+e.size},0),d=I-t;if(0===o.length&&d>0){var a=d/e.length;e.forEach(function(n){n.size=n.size+a}),d=0}o.length>0&&d>r&&o.forEach(function(n,e){n.size=Math.max(d/(o.length-e),n.size),d-=n.size});for(var i={},l=0;l<e.length;l++){var s=e[l];i[s.id]=s.size}for(var m=0;m<o.length;m++){var u=o[m];i[u.id]=u.size}y.setColumnSizing(i)}},[b,y,I,c]);var F=y.getCoreRowModel().rows.length;return l.createElement(a.Flex,k({flexDirection:"column"},t),l.createElement(a.Box,{flex:"none",px:"3x",py:"2x"},e.name),l.createElement(a.Box,{flex:"auto"},l.createElement(C.ZP,{disableHeight:!0,onResize:function(n){var e=n.width;I!==e&&j(e)}},function(n){var o=n.width;return l.createElement(a.Table,{layout:"flexbox",variant:"default",sx:{visibility:N().isEmpty(y.getState().columnSizing)?"hidden":"visible",height:452,width:o}},l.createElement(a.TableHeader,null,y.getHeaderGroups().map(function(n){return l.createElement(a.TableHeaderRow,{key:n.id},l.createElement(a.TableHeaderCell,{sx:{width:"2x",pl:"3x",pr:0}}),n.headers.map(function(n){var e,o=D({minWidth:n.column.columnDef.minSize,width:n.getSize()},n.column.columnDef.style);return n.column.getCanSort()&&(o=D(D({},o),{},{cursor:"pointer",userSelect:"none",_hover:{backgroundColor:s}})),n.column.getIsSorted()&&(o=D(D({},o),{},{color:d.color.emphasis})),l.createElement(a.TableHeaderCell,k({key:n.id,onClick:n.column.getToggleSortingHandler()},o),n.isPlaceholder?null:l.createElement(a.Flex,{alignItems:"center"},(0,w.ie)(n.column.columnDef.header,n.getContext()),null!==(e=({asc:l.createElement(a.Icon,{icon:"sort-up",size:20,ml:"1x"}),desc:l.createElement(a.Icon,{icon:"sort-down",size:20,ml:"1x"})})[n.column.getIsSorted()])&&void 0!==e?e:null))}))})),l.createElement(B,{condition:!0,wrapper:function(n){return l.createElement(a.TableScrollbar,{height:"100%",overflow:"visible"},n)}},l.createElement(a.TableBody,null,y.getRowModel().rows.map(function(n){return l.createElement(O,{key:n.id,item:function(){return{source:e.id,data:y.getSelectedRowModel().rows.map(function(n){return n.original.id})}}},function(e){var o=e.dragRef,t=e.dragPreviewRef;e.isDragging;var r=n.getIsSelected();return l.createElement(a.TableRow,{"data-selected":(0,T.dataAttr)(n.getIsSelected()),sx:{position:"relative",_hover:{backgroundColor:s},_selected:{backgroundColor:m}}},l.createElement(a.TableCell,{sx:{width:"2x",pl:"3x",pr:0,zIndex:r?1:0}},l.createElement(a.Box,{ref:o},l.createElement(a.Image,{ref:t,alt:"draggable",src:"/tonic-ui-demo/react/pr-785/_next/static/media/icon-drag.9f20dd02.svg",sx:{cursor:"move",visibility:n.getIsSelected()?"visible":"hidden",width:"2x",height:"4x"}}))),n.getVisibleCells().map(function(n){var e=D({minWidth:n.column.columnDef.minSize,width:n.column.getSize()},n.column.columnDef.style);return l.createElement(a.TableCell,k({key:n.id},e),(0,w.ie)(n.column.columnDef.cell,n.getContext()))}))})}))),l.createElement(z,{count:F,onPageChange:function(n){var e=Math.max((0,i.q9)(n)-1,0);y.setPageIndex(e)},onRowsPerPageChange:function(n){var e=Math.max((0,i.q9)(n),1);y.setPageSize(e)}}))})))},W=o(20103),L=["data","onNodeDrop","onNodeSelect"];function V(){return(V=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function H(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),o.push.apply(o,t)}return o}function U(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?H(Object(o),!0).forEach(function(e){var t;t=o[e],e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):H(Object(o)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))})}return n}function _(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,t,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var d=[],a=!0,i=!1;try{for(r=r.call(n);!(a=(o=r.next()).done)&&(d.push(o.value),!e||d.length!==e);a=!0);}catch(n){i=!0,t=n}finally{try{a||null==r.return||r.return()}finally{if(i)throw t}}return d}}(n,e)||function(n,e){if(n){if("string"==typeof n)return Y(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return Y(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Y(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var G=function(n){var e=n.canDrop,o=n.children,t=n.onDrop,r=_((0,W.L)({accept:"dnd",drop:t,canDrop:e,collect:function(n){return{isOver:n.isOver()}}}),2),d=r[0];return o({dropRef:r[1],isOver:d.isOver})},$=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,d=e.onNodeDrop,c=_((0,a.useColorStyle)(),1)[0];return l.createElement(a.TreeItem,{key:o.id,nodeId:o.id,render:function(n){var e=n.isExpandable,t=n.isExpanded,i=n.isSelected,s=t?"folder-open":"folder";return l.createElement(G,{onDrop:function(n,e){"function"==typeof d&&d(U(U({},n),{},{target:o.id}))}},function(n){var t=n.dropRef,d=n.isOver;return l.createElement(a.TreeItemContent,{ref:t,sx:{backgroundColor:d?c.background.highlighted:void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:c.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},l.createElement(a.Flex,{flex:"none",width:"6x"},e&&l.createElement(a.TreeItemToggle,null,l.createElement(a.TreeItemToggleIcon,null))),l.createElement(a.Icon,{icon:s,color:"yellow:50",mr:"2x"}),l.createElement(a.OverflowTooltip,{label:o.name},function(n){var e=n.ref,t=n.style;return l.createElement(a.Box,V({ref:e},t,{flex:"auto",fontWeight:i?"semibold":"normal"}),o.name)}))})}},(0,i.rY)(o.children).map(function(e){return l.createElement(n,{key:e.id,node:e,nodeDepth:r+1,onNodeDrop:d})}))},X=function(n){var e,o,t=n.data,r=n.onNodeDrop,d=n.onNodeSelect,c=function(n,e){if(null==n)return{};var o,t,r=function(n,e){if(null==n)return{};var o,t,r={},d=Object.keys(n);for(t=0;t<d.length;t++)o=d[t],e.indexOf(o)>=0||(r[o]=n[o]);return r}(n,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(n);for(t=0;t<d.length;t++)o=d[t],!(e.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(n,o)&&(r[o]=n[o])}return r}(n,L),s=null!==(e=null===(o=(0,i.rY)(t)[0])||void 0===o?void 0:o.id)&&void 0!==e?e:null,m=(0,l.useCallback)(function(n){"function"==typeof r&&r(n)},[r]),u=(0,l.useCallback)(function(n){"function"==typeof d&&d(n)},[d]);return l.createElement(a.TreeView,V({"aria-label":"dnd",isSelectable:!0,isUnselectable:!1,defaultSelectedNodes:[s],onNodeSelect:u},c),(0,i.rY)(t).map(function(n){return l.createElement($,{key:n.id,node:n,onNodeDrop:m})}))};function Z(n){return function(n){if(Array.isArray(n))return K(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||J(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function q(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,t,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var d=[],a=!0,i=!1;try{for(r=r.call(n);!(a=(o=r.next()).done)&&(d.push(o.value),!e||d.length!==e);a=!0);}catch(n){i=!0,t=n}finally{try{a||null==r.return||r.return()}finally{if(i)throw t}}return d}}(n,e)||J(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function J(n,e){if(n){if("string"==typeof n)return K(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return K(n,e)}}function K(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var Q=function(n){var e=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],o=JSON.parse(JSON.stringify(n));return!function n(o){(0,i.rY)(o).map(function(o){var t;o.parent=null!==(t=o.parent)&&void 0!==t?t:null,o.children=(0,i.rY)(o.children).map(function(n){return n.parent=o,n}),o.data={data:N().range(15).map(function(n){var t=(0,i.rY)(String(o.name).match(/\d+/)),r=q(t,1)[0],d="Endpoint ".concat(void 0===r?"":r,"_").concat(n+1),a=N().sampleSize(e,N().random(0,e.length)),l=new Date(Date.now()-N().random(0,2592e6));return{id:"".concat(o.id,"_").concat(n+1),endpoint:d,detections:a,lastSeen:l}})},n(o.children)})}(o),o},nn=function(){var n=q((0,l.useState)(),2)[1];return(0,l.useCallback)(function(){n({})},[])},ne=function(){var n,e,o,t=(0,g.useConst)(function(){return Q(v)}),r=(0,l.useMemo)(function(){return c(t)},[t]),d=nn(),s=q((0,l.useState)(!1),2),m=s[0],u=s[1],h=q((0,a.useColorMode)(),1)[0],p=q((0,a.useColorStyle)(),1)[0],f={dark:"gray:50",light:"gray:50"}[h],x=(0,l.useRef)(),w=(0,l.useRef)(),S=q((0,l.useState)(null===(n=(0,i.rY)(t)[0])||void 0===n?void 0:n.id),2),T=S[0],I=S[1],C=null===(e=r.get(T))||void 0===e?void 0:null===(o=e.data)||void 0===o?void 0:o.data,E=(0,l.useCallback)(function(n){var e=n.source,o=n.target,t=n.data,a=r.get(e),l=r.get(o),c=a.data.data.filter(function(n){return N().includes(t,n.id)});a.data.data=N().differenceBy(a.data.data,c,"id"),l.data.data=N().uniqBy([].concat(Z((0,i.rY)(l.data.data)),Z(c)),"id"),d()},[]),k=(0,l.useCallback)(function(n){I(n[0])},[]);return l.createElement(b.W,{backend:y.PD},l.createElement(a.Flex,{ref:x,sx:{boxShadow:p.shadow.thick,cursor:m?"col-resize":"default"}},l.createElement(a.Box,{ref:w,sx:{flex:"none",width:300}},l.createElement(a.Scrollbar,{height:"100%",overflowX:"hidden",overflowY:"auto"},l.createElement(X,{data:t,onNodeDrop:E,onNodeSelect:k}))),l.createElement(a.Flex,{sx:{flex:"auto",position:"relative"}},l.createElement(a.ResizeHandle,{onResizeStart:function(){u(!0)},onResizeEnd:function(){u(!1)},onResize:function(n){var e=n.clientX,o=w.current;if(o){var t=x.current.getBoundingClientRect(),r=t.left,d=t.width;e-r>=160&&e-r<=.4*d&&(o.style.width="".concat(e-r,"px"))}},sx:{position:"absolute",left:0,top:0,bottom:0,borderLeft:1,borderLeftColor:m?f:({dark:"gray:70",light:"gray:30"})[h],_hover:{borderLeftColor:f},zIndex:1}}),l.createElement(F,{key:T,node:r.get(T),data:C,width:"100%"}))))};function no(){return(no=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function nt(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,t,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var d=[],a=!0,i=!1;try{for(r=r.call(n);!(a=(o=r.next()).done)&&(d.push(o.value),!e||d.length!==e);a=!0);}catch(n){i=!0,t=n}finally{try{a||null==r.return||r.return()}finally{if(i)throw t}}return d}}(n,e)||function(n,e){if(n){if("string"==typeof n)return nr(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return nr(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nr(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var nd=c(v),na=s(v),ni=Array.from(nd.keys())[0],nl=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,d=nt((0,a.useColorStyle)(),1)[0];return l.createElement(a.TreeItem,{key:o.id,nodeId:o.id,render:function(n){var e=n.isExpandable,t=n.isExpanded,i=n.isSelected,c=e?t?"folder-open":"folder":"server",s=e?"yellow:50":"currentColor";return l.createElement(a.TreeItemContent,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:d.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},l.createElement(a.Flex,{flex:"none",width:"6x"},e&&l.createElement(a.TreeItemToggle,null,l.createElement(a.TreeItemToggleIcon,null))),l.createElement(a.Icon,{icon:c,color:s,mr:"2x"}),l.createElement(a.OverflowTooltip,{label:o.name},function(n){var e=n.ref,t=n.style;return l.createElement(a.Box,no({ref:e},t,{flex:"auto",fontWeight:i?"semibold":"normal"}),o.name)}))}},(0,i.rY)(o.children).map(function(e){return l.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},nc=function(){var n,e=nt((0,l.useState)(!1),2),o=e[0],t=e[1],r=nt((0,a.useColorMode)(),1)[0],d=nt((0,a.useColorStyle)(),1)[0],c={dark:"gray:50",light:"gray:50"}[r],s=(0,l.useRef)(),m=(0,l.useRef)(),u=nt((0,l.useState)([ni]),2),h=u[0],p=u[1],f=(0,l.useCallback)(function(n){p(n)},[]);return l.createElement(a.Flex,{ref:s,sx:{boxShadow:d.shadow.thick,cursor:o?"col-resize":"default"}},l.createElement(a.Box,{ref:m,sx:{flex:"none",width:300}},l.createElement(a.Scrollbar,{height:240,overflowX:"hidden",overflowY:"auto"},l.createElement(a.TreeView,{"aria-label":"resizable",defaultExpandedNodes:na,isSelectable:!0,isUnselectable:!1,selectedNodes:h,onNodeSelect:f},(0,i.rY)(v).map(function(n){return l.createElement(nl,{key:n.id,node:n})})))),l.createElement(a.Flex,{sx:{flex:"auto",px:"3x",py:"2x",position:"relative"}},l.createElement(a.ResizeHandle,{onResizeStart:function(){t(!0)},onResizeEnd:function(){t(!1)},onResize:function(n){var e=n.clientX,o=m.current;if(o){var t=s.current.getBoundingClientRect(),r=t.left,d=t.width;e-r>=160&&e-r<=.4*d&&(o.style.width="".concat(e-r,"px"))}},sx:{position:"absolute",left:0,top:0,bottom:0,borderLeft:1,borderLeftColor:o?c:({dark:"gray:70",light:"gray:30"})[r],_hover:{borderLeftColor:c}}}),l.createElement(a.Box,null,null===(n=nd.get(h[0]))||void 0===n?void 0:n.name)))};function ns(){return(ns=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function nm(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,t,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var d=[],a=!0,i=!1;try{for(r=r.call(n);!(a=(o=r.next()).done)&&(d.push(o.value),!e||d.length!==e);a=!0);}catch(n){i=!0,t=n}finally{try{a||null==r.return||r.return()}finally{if(i)throw t}}return d}}(n,e)||function(n,e){if(n){if("string"==typeof n)return nu(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return nu(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nu(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var nh=c(v),np=s(v),nf=Array.from(nh.keys()),ng=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,d=nm((0,a.useColorStyle)(),1)[0];return l.createElement(a.TreeItem,{key:o.id,nodeId:o.id,render:function(n){var e=n.isExpandable,t=n.isExpanded,i=n.isSelected,c=n.select,s=e?t?"folder-open":"folder":"server",m=e?"yellow:50":"currentColor";return l.createElement(a.TreeItemContent,{sx:{backgroundColor:i?"transparent":void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:d.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},l.createElement(a.Flex,{flex:"none",width:"6x"},e&&l.createElement(a.TreeItemToggle,null,l.createElement(a.TreeItemToggleIcon,null))),l.createElement(a.Flex,{onClick:function(n){n.stopPropagation()},mr:"2x"},l.createElement(a.Checkbox,{checked:i,onChange:function(){c()}})),l.createElement(a.Icon,{icon:s,color:m,mr:"2x"}),l.createElement(a.OverflowTooltip,{label:o.name},function(n){var e=n.ref,t=n.style;return l.createElement(a.Box,ns({ref:e},t,{flex:"auto",fontWeight:i?"semibold":"normal"}),o.name)}))}},(0,i.rY)(o.children).map(function(e){return l.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},nx=function(){var n=nm((0,a.useColorStyle)(),1)[0],e=nm((0,l.useState)([]),2),o=e[0],t=e[1],r=nm((0,l.useState)([]),2),d=r[0],c=r[1],s=(0,l.useCallback)(function(n){t(n)},[]),m=(0,l.useCallback)(function(n){c(n)},[]),u=(0,l.useCallback)(function(n){t(np)},[]),h=(0,l.useCallback)(function(n){t([])},[]),p=(0,l.useCallback)(function(n){c(nf)},[]),f=(0,l.useCallback)(function(n){c([])},[]);return l.createElement(l.Fragment,null,l.createElement(a.ButtonGroup,{variant:"secondary",columnGap:"2x",mb:"4x"},l.createElement(a.Button,{variant:"secondary",disabled:o.length===np.length,onClick:u},"Expand all"),l.createElement(a.Button,{variant:"secondary",disabled:0===o.length,onClick:h},"Collapse all"),l.createElement(a.Button,{variant:"secondary",disabled:d.length===nf.length,onClick:p},"Select all"),l.createElement(a.Button,{variant:"secondary",disabled:0===d.length,onClick:f},"Unselect all")),l.createElement(a.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},l.createElement(a.Scrollbar,{height:240,overflowY:"auto"},l.createElement(a.TreeView,{"aria-label":"controlled",isSelectable:!0,isUnselectable:!0,multiSelect:!0,expandedNodes:o,selectedNodes:d,onNodeToggle:s,onNodeSelect:m},(0,i.rY)(v).map(function(n){return l.createElement(ng,{key:n.id,node:n})})))),l.createElement(a.Divider,{my:"4x"}),l.createElement(a.Stack,null,l.createElement(a.Flex,{alignItems:"flex-start",columnGap:"2x"},l.createElement(a.Text,{whiteSpace:"nowrap"},"Expanded nodes:"),l.createElement(a.Flex,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},o.map(function(n){var e;return l.createElement(a.Code,{key:n,whiteSpace:"nowrap"},null===(e=nh.get(n))||void 0===e?void 0:e.name)}))),l.createElement(a.Flex,{alignItems:"flex-start",columnGap:"2x"},l.createElement(a.Text,{whiteSpace:"nowrap"},"Selected nodes:"),l.createElement(a.Flex,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},d.map(function(n){var e;return l.createElement(a.Code,{key:n,whiteSpace:"nowrap"},null===(e=nh.get(n))||void 0===e?void 0:e.name)})))))};function nN(){return(nN=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function nb(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,t,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var d=[],a=!0,i=!1;try{for(r=r.call(n);!(a=(o=r.next()).done)&&(d.push(o.value),!e||d.length!==e);a=!0);}catch(n){i=!0,t=n}finally{try{a||null==r.return||r.return()}finally{if(i)throw t}}return d}}(n,e)||function(n,e){if(n){if("string"==typeof n)return ny(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return ny(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ny(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var nv=s(v),nw=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,d=nb((0,a.useColorStyle)(),1)[0];return l.createElement(a.TreeItem,{key:o.id,nodeId:o.id,render:function(n){var e=n.isExpandable,t=n.isExpanded,i=n.isSelected,c=n.select,s=e?t?"folder-open":"folder":"server",m=e?"yellow:50":"currentColor";return l.createElement(a.TreeItemContent,{sx:{backgroundColor:i?"transparent":void 0,':hover + [role="group"]':{position:"relative","::before":{backgroundColor:d.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},l.createElement(a.Flex,{flex:"none",width:"6x"},e&&l.createElement(a.TreeItemToggle,null,l.createElement(a.TreeItemToggleIcon,null))),l.createElement(a.Flex,{onClick:function(n){n.stopPropagation()},mr:"2x"},l.createElement(a.Checkbox,{checked:i,onChange:function(){c()}})),l.createElement(a.Icon,{icon:s,color:m,mr:"2x"}),l.createElement(a.OverflowTooltip,{label:o.name},function(n){var e=n.ref,t=n.style;return l.createElement(a.Box,nN({ref:e},t,{flex:"auto",fontWeight:i?"semibold":"normal"}),o.name)}))}},(0,i.rY)(o.children).map(function(e){return l.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},nS=function(){var n=nb((0,a.useColorStyle)(),1)[0];return l.createElement(a.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},l.createElement(a.Scrollbar,{height:240,overflowY:"auto"},l.createElement(a.TreeView,{"aria-label":"multi-selection with checkboxes",defaultExpandedNodes:nv,isSelectable:!0,isUnselectable:!0,multiSelect:!0},(0,i.rY)(v).map(function(n){return l.createElement(nw,{key:n.id,node:n})}))))};function nT(){return(nT=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function nI(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,t,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var d=[],a=!0,i=!1;try{for(r=r.call(n);!(a=(o=r.next()).done)&&(d.push(o.value),!e||d.length!==e);a=!0);}catch(n){i=!0,t=n}finally{try{a||null==r.return||r.return()}finally{if(i)throw t}}return d}}(n,e)||function(n,e){if(n){if("string"==typeof n)return nC(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return nC(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nC(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var nE=s(v),nk=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,d=nI((0,a.useColorStyle)(),1)[0];return l.createElement(a.TreeItem,{key:o.id,nodeId:o.id,render:function(n){var e=n.isExpandable,t=n.isExpanded,i=n.isSelected,c=e?t?"folder-open":"folder":"server",s=e?"yellow:50":"currentColor";return l.createElement(a.TreeItemContent,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:d.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},l.createElement(a.Flex,{flex:"none",width:"6x"},e&&l.createElement(a.TreeItemToggle,null,l.createElement(a.TreeItemToggleIcon,null))),l.createElement(a.Icon,{icon:c,color:s,mr:"2x"}),l.createElement(a.OverflowTooltip,{label:o.name},function(n){var e=n.ref,t=n.style;return l.createElement(a.Box,nT({ref:e},t,{flex:"auto",fontWeight:i?"semibold":"normal"}),o.name)}))}},(0,i.rY)(o.children).map(function(e){return l.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},nj=function(){var n=nI((0,a.useColorStyle)(),1)[0];return l.createElement(a.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},l.createElement(a.Scrollbar,{height:240,overflowY:"auto"},l.createElement(a.TreeView,{"aria-label":"multi-selection",defaultExpandedNodes:nE,isSelectable:!0,isUnselectable:!0,multiSelect:!0},(0,i.rY)(v).map(function(n){return l.createElement(nk,{key:n.id,node:n})}))))};function nD(){return(nD=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function nR(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,t,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var d=[],a=!0,i=!1;try{for(r=r.call(n);!(a=(o=r.next()).done)&&(d.push(o.value),!e||d.length!==e);a=!0);}catch(n){i=!0,t=n}finally{try{a||null==r.return||r.return()}finally{if(i)throw t}}return d}}(n,e)||function(n,e){if(n){if("string"==typeof n)return nA(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return nA(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nA(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var nP=s(v),nO=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,d=nR((0,a.useColorStyle)(),1)[0];return l.createElement(a.TreeItem,{key:o.id,nodeId:o.id,render:function(n){var e=n.isExpandable,t=n.isSelected;return l.createElement(a.TreeItemContent,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:d.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},l.createElement(a.Flex,{flex:"none",width:"6x"},e&&l.createElement(a.TreeItemToggle,null,l.createElement(a.TreeItemToggleIcon,null))),l.createElement(a.OverflowTooltip,{label:o.name},function(n){var e=n.ref,r=n.style;return l.createElement(a.Box,nD({ref:e},r,{flex:"auto",fontWeight:t?"semibold":"normal"}),o.name)}),l.createElement(a.Flex,{flex:"none",ml:"2x"},l.createElement(a.Menu,null,l.createElement(a.MenuToggle,{onClick:function(n){},sx:{color:d.color.secondary,":hover":{color:d.color.info}}},l.createElement(a.Icon,{icon:"more"})),l.createElement(a.MenuList,{PopperProps:{usePortal:!0},width:"max-content"},l.createElement(a.MenuItem,null,l.createElement(a.Flex,{alignItems:"center",columnGap:"2x"},l.createElement(a.Icon,{icon:"edit"})," List item")),l.createElement(a.MenuItem,null,l.createElement(a.Flex,{alignItems:"center",columnGap:"2x"},l.createElement(a.Icon,{icon:"edit"})," List item"))))))}},(0,i.rY)(o.children).map(function(e){return l.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},nM=function(){var n=nR((0,a.useColorStyle)(),1)[0];return l.createElement(a.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},l.createElement(a.Scrollbar,{height:240,overflowY:"auto"},l.createElement(a.TreeView,{"aria-label":"dropdown",defaultExpandedNodes:nP,isSelectable:!0,isUnselectable:!0},(0,i.rY)(v).map(function(n){return l.createElement(nO,{key:n.id,node:n})}))))};function nz(){return(nz=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(n[t]=o[t])}return n}).apply(this,arguments)}function nB(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var o,t,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var d=[],a=!0,i=!1;try{for(r=r.call(n);!(a=(o=r.next()).done)&&(d.push(o.value),!e||d.length!==e);a=!0);}catch(n){i=!0,t=n}finally{try{a||null==r.return||r.return()}finally{if(i)throw t}}return d}}(n,e)||function(n,e){if(n){if("string"==typeof n)return nF(n,e);var o=Object.prototype.toString.call(n).slice(8,-1);if("Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o)return Array.from(n);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return nF(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nF(n,e){(null==e||e>n.length)&&(e=n.length);for(var o=0,t=Array(e);o<e;o++)t[o]=n[o];return t}var nW=s(v),nL=function n(e){var o=e.node,t=e.nodeDepth,r=void 0===t?0:t,d=nB((0,a.useColorStyle)(),1)[0];return l.createElement(a.TreeItem,{key:o.id,nodeId:o.id,render:function(n){var e=n.isExpandable,t=n.isSelected;return l.createElement(a.TreeItemContent,{sx:{':hover + [role="group"]':{position:"relative","::before":{backgroundColor:d.background.highlighted,content:'""',position:"absolute",top:0,bottom:0,left:20+24*r-.5,width:1}}}},l.createElement(a.Flex,{flex:"none",width:"6x"},e&&l.createElement(a.TreeItemToggle,null,l.createElement(a.TreeItemToggleIcon,null))),l.createElement(a.OverflowTooltip,{label:o.name},function(n){var e=n.ref,r=n.style;return l.createElement(a.Box,nz({ref:e},r,{flex:"auto",fontWeight:t?"semibold":"normal"}),o.name)}))}},(0,i.rY)(o.children).map(function(e){return l.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},nV=function(){var n=nB((0,a.useColorStyle)(),1)[0];return l.createElement(a.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},l.createElement(a.Scrollbar,{height:240,overflowY:"auto"},l.createElement(a.TreeView,{"aria-label":"basic tree view",defaultExpandedNodes:nW,isSelectable:!0,isUnselectable:!0},(0,i.rY)(v).map(function(n){return l.createElement(nL,{key:n.id,node:n})}))))};function nH(n){var e=Object.assign({div:"div",h1:"h1",p:"p",code:"code",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",h3:"h3",ul:"ul",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,r.ah)(),n.components);return(0,t.jsxs)(e.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,t.jsx)(e.h1,{id:"tree-view",children:"Tree View"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"TreeView"})," component allows you to present information in a hierarchical, nested list format. It is particularly useful for visualizing structures like files and folders in a file system, categories and items in a list, or any other kind of nested arrangement that requires exploration."]}),"\n",(0,t.jsxs)(e.h2,{id:"import",children:["Import",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"import {\n  TreeItem,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useTreeItem,\n  useTreeView,\n} from '@tonic-ui/react';\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"usage",children:["Usage",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.h3,{id:"basic-tree-view",children:["Basic tree view",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-tree-view",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.p,{children:["You can enable node selection and unselection by setting ",(0,t.jsx)(e.code,{children:"isSelectable"})," and ",(0,t.jsx)(e.code,{children:"isUnselectable"})," props to ",(0,t.jsx)(e.code,{children:"true"}),"."]}),"\n",(0,t.jsx)(d.Z,{component:nV,file:{data:"import {\n  Box,\n  Flex,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from './data/tree-nodes.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isSelected }) => {\n        return (\n          <TreeItemContent\n            sx={{\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {node.name}\n              </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <TreeView\n          aria-label=\"basic tree view\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "name": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "name": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "name": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "name": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "name": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "name": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "name": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "name": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "name": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "name": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "name": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "name": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "name": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "name": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "name": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "name": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "name": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "name": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "name": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "name": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "name": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "name": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "name": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "name": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "name": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "name": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "name": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "name": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "name": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "name": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "name": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "name": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "name": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "name": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "name": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "name": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "name": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "name": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "name": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "name": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "name": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "name": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "name": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "name": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "name": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "name": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "name": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "name": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "name": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "name": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "name": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "name": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "name": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "name": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "name": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Flex,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isSelected }) => {\n        return (\n          <TreeItemContent\n            sx={{\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {node.name}\n              </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <TreeView\n          aria-label=\"basic tree view\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"dropdown",children:["Dropdown",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#dropdown",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(d.Z,{component:nM,file:{data:'import {\n  Box,\n  Flex,\n  Icon,\n  Menu,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { ensureArray } from \'ensure-type\';\nimport React from \'react\';\nimport treeNodes from \'./data/tree-nodes.json\';\nimport { findExpandableNodeIds } from \'./utils\';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isSelected }) => {\n        return (\n          <TreeItemContent\n            sx={{\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              \':hover + [role="group"]\': {\n                position: \'relative\',\n                \'::before\': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: \'""\',\n                  position: \'absolute\',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex="none"\n              width="6x"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex="auto"\n                  fontWeight={isSelected ? \'semibold\' : \'normal\'}\n                >\n                  {node.name}\n                </Box>\n              )}\n            </OverflowTooltip>\n            <Flex\n              flex="none"\n              ml="2x"\n            >\n              <Menu>\n                <MenuToggle\n                  onClick={(event) => {\n                    // Uncomment the following line to prevent the tree node from being selected\n                    //event.stopPropagation();\n                  }}\n                  sx={{\n                    color: colorStyle.color.secondary,\n                    \':hover\': {\n                      color: colorStyle.color.info,\n                    },\n                  }}\n                >\n                  <Icon icon="more" />\n                </MenuToggle>\n                <MenuList\n                  PopperProps={{\n                    usePortal: true,\n                  }}\n                  width="max-content"\n                >\n                  <MenuItem>\n                    <Flex alignItems="center" columnGap="2x">\n                      <Icon icon="edit" /> List item\n                    </Flex>\n                  </MenuItem>\n                  <MenuItem>\n                    <Flex alignItems="center" columnGap="2x">\n                      <Icon icon="edit" /> List item\n                    </Flex>\n                  </MenuItem>\n                </MenuList>\n              </Menu>\n            </Flex>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: \'40%\',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY="auto"\n      >\n        <TreeView\n          aria-label="dropdown"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;',path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "name": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "name": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "name": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "name": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "name": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "name": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "name": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "name": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "name": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "name": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "name": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "name": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "name": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "name": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "name": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "name": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "name": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "name": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "name": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "name": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "name": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "name": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "name": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "name": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "name": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "name": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "name": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "name": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "name": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "name": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "name": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "name": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "name": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "name": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "name": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "name": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "name": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "name": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "name": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "name": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "name": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "name": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "name": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "name": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "name": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "name": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "name": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "name": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "name": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "name": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "name": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "name": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "name": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "name": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "name": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:'import {\n  Box,\n  Flex,\n  Icon,\n  Menu,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { ensureArray } from \'ensure-type\';\nimport React from \'react\';\nimport treeNodes from \'@/pages/components/tree-view/data/tree-nodes.json\';\nimport { findExpandableNodeIds } from \'@/pages/components/tree-view/utils\';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isSelected }) => {\n        return (\n          <TreeItemContent\n            sx={{\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              \':hover + [role="group"]\': {\n                position: \'relative\',\n                \'::before\': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: \'""\',\n                  position: \'absolute\',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex="none"\n              width="6x"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex="auto"\n                  fontWeight={isSelected ? \'semibold\' : \'normal\'}\n                >\n                  {node.name}\n                </Box>\n              )}\n            </OverflowTooltip>\n            <Flex\n              flex="none"\n              ml="2x"\n            >\n              <Menu>\n                <MenuToggle\n                  onClick={(event) => {\n                    // Uncomment the following line to prevent the tree node from being selected\n                    //event.stopPropagation();\n                  }}\n                  sx={{\n                    color: colorStyle.color.secondary,\n                    \':hover\': {\n                      color: colorStyle.color.info,\n                    },\n                  }}\n                >\n                  <Icon icon="more" />\n                </MenuToggle>\n                <MenuList\n                  PopperProps={{\n                    usePortal: true,\n                  }}\n                  width="max-content"\n                >\n                  <MenuItem>\n                    <Flex alignItems="center" columnGap="2x">\n                      <Icon icon="edit" /> List item\n                    </Flex>\n                  </MenuItem>\n                  <MenuItem>\n                    <Flex alignItems="center" columnGap="2x">\n                      <Icon icon="edit" /> List item\n                    </Flex>\n                  </MenuItem>\n                </MenuList>\n              </Menu>\n            </Flex>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: \'40%\',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY="auto"\n      >\n        <TreeView\n          aria-label="dropdown"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"multi-selection",children:["Multi-selection",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#multi-selection",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.p,{children:["To enable the selection of multiple nodes, use the ",(0,t.jsx)(e.code,{children:"multiSelect"})," prop."]}),"\n",(0,t.jsx)(e.p,{children:"You can try the following keyboard shortcuts:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Press arrow keys to navigate between nodes."}),"\n",(0,t.jsxs)(e.li,{children:["Press the ",(0,t.jsx)(e.code,{children:"Space"})," key to toggle the selection of a node."]}),"\n",(0,t.jsxs)(e.li,{children:["Press the ",(0,t.jsx)(e.code,{children:"Ctrl"})," key and click the left mouse button to select or unselect a node without affecting the current selection."]}),"\n",(0,t.jsxs)(e.li,{children:["Press the ",(0,t.jsx)(e.code,{children:"Shift"})," key and click the left mouse button to select a range of nodes from the current node to the clicked node."]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["Refer to the ",(0,t.jsx)(e.a,{href:"#accessibility",children:"Accessibility"})," section for more keyboard shortcuts."]}),"\n",(0,t.jsx)(d.Z,{component:nj,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from './data/tree-nodes.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <TreeItemContent\n            sx={{\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {node.name}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <TreeView\n          aria-label=\"multi-selection\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "name": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "name": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "name": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "name": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "name": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "name": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "name": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "name": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "name": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "name": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "name": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "name": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "name": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "name": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "name": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "name": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "name": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "name": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "name": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "name": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "name": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "name": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "name": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "name": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "name": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "name": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "name": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "name": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "name": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "name": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "name": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "name": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "name": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "name": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "name": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "name": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "name": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "name": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "name": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "name": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "name": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "name": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "name": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "name": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "name": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "name": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "name": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "name": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "name": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "name": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "name": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "name": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "name": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "name": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "name": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <TreeItemContent\n            sx={{\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {node.name}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <TreeView\n          aria-label=\"multi-selection\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsx)(e.p,{children:"When using checkboxes for multi-selection, consider hiding the background color of the tree node when the checkbox is selected to enhance accessibility."}),"\n",(0,t.jsx)(e.pre,{disabled:!0,children:(0,t.jsx)(e.code,{className:"language-jsx",children:"<TreeItem\n  key={node.id}\n  nodeId={node.id}\n  render={({ isSelected }) => {\n    return (\n      <TreeItemContent\n        sx={{\n          // Hide the background color of the tree node when the checkbox is selected\n          backgroundColor: isSelected ? 'transparent' : undefined,\n        }}\n      >\n        {/* Render your tree node content */}\n      </TreeItemContent>\n    );\n  }}\n/>\n"})}),"\n",(0,t.jsx)(d.Z,{component:nS,file:{data:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from './data/tree-nodes.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <TreeItemContent\n            sx={{\n              // Hide the background color of the tree node when the checkbox is selected\n              backgroundColor: isSelected ? 'transparent' : undefined,\n\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {node.name}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <TreeView\n          aria-label=\"multi-selection with checkboxes\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "name": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "name": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "name": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "name": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "name": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "name": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "name": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "name": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "name": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "name": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "name": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "name": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "name": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "name": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "name": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "name": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "name": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "name": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "name": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "name": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "name": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "name": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "name": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "name": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "name": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "name": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "name": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "name": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "name": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "name": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "name": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "name": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "name": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "name": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "name": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "name": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "name": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "name": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "name": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "name": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "name": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "name": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "name": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "name": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "name": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "name": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "name": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "name": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "name": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "name": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "name": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "name": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "name": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "name": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "name": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <TreeItemContent\n            sx={{\n              // Hide the background color of the tree node when the checkbox is selected\n              backgroundColor: isSelected ? 'transparent' : undefined,\n\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {node.name}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <TreeView\n          aria-label=\"multi-selection with checkboxes\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"controlled-tree-view",children:["Controlled tree view",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#controlled-tree-view",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(d.Z,{component:nx,file:{data:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { ensureArray } from \'ensure-type\';\nimport React, { useCallback, useState } from \'react\';\nimport treeNodes from \'./data/tree-nodes.json\';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from \'./utils\';\n\nconst treeMap = buildTreeMap(treeNodes);\nconst expandableNodes = findExpandableNodeIds(treeNodes);\nconst allNodes = Array.from(treeMap.keys());\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? \'folder-open\' : \'folder\';\n          }\n          return \'server\';\n        })();\n        const iconColor = isExpandable ? \'yellow:50\' : \'currentColor\';\n\n        return (\n          <TreeItemContent\n            sx={{\n              // Hide the background color of the tree node when the checkbox is selected\n              backgroundColor: isSelected ? \'transparent\' : undefined,\n\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              \':hover + [role="group"]\': {\n                position: \'relative\',\n                \'::before\': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: \'""\',\n                  position: \'absolute\',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex="none"\n              width="6x"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr="2x"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr="2x" />\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex="auto"\n                  fontWeight={isSelected ? \'semibold\' : \'normal\'}\n                >\n                  {node.name}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [expandedNodes, setExpandedNodes] = useState([]);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodes(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodes(expandableNodes);\n  }, []);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodes([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodes(allNodes);\n  }, []);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodes([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="4x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === expandableNodes.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Box\n        sx={{\n          minWidth: 160,\n          maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="auto"\n        >\n          <TreeView\n            aria-label="controlled"\n            isSelectable\n            isUnselectable\n            multiSelect\n            expandedNodes={expandedNodes}\n            selectedNodes={selectedNodes}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Divider my="4x" />\n      <Stack>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "name": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "name": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "name": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "name": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "name": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "name": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "name": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "name": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "name": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "name": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "name": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "name": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "name": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "name": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "name": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "name": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "name": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "name": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "name": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "name": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "name": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "name": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "name": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "name": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "name": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "name": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "name": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "name": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "name": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "name": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "name": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "name": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "name": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "name": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "name": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "name": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "name": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "name": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "name": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "name": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "name": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "name": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "name": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "name": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "name": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "name": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "name": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "name": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "name": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "name": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "name": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "name": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "name": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "name": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "name": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { ensureArray } from \'ensure-type\';\nimport React, { useCallback, useState } from \'react\';\nimport treeNodes from \'@/pages/components/tree-view/data/tree-nodes.json\';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from \'@/pages/components/tree-view/utils\';\n\nconst treeMap = buildTreeMap(treeNodes);\nconst expandableNodes = findExpandableNodeIds(treeNodes);\nconst allNodes = Array.from(treeMap.keys());\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? \'folder-open\' : \'folder\';\n          }\n          return \'server\';\n        })();\n        const iconColor = isExpandable ? \'yellow:50\' : \'currentColor\';\n\n        return (\n          <TreeItemContent\n            sx={{\n              // Hide the background color of the tree node when the checkbox is selected\n              backgroundColor: isSelected ? \'transparent\' : undefined,\n\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              \':hover + [role="group"]\': {\n                position: \'relative\',\n                \'::before\': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: \'""\',\n                  position: \'absolute\',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex="none"\n              width="6x"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr="2x"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr="2x" />\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex="auto"\n                  fontWeight={isSelected ? \'semibold\' : \'normal\'}\n                >\n                  {node.name}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [expandedNodes, setExpandedNodes] = useState([]);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodes(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodes(expandableNodes);\n  }, []);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodes([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodes(allNodes);\n  }, []);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodes([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="4x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === expandableNodes.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Box\n        sx={{\n          minWidth: 160,\n          maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="auto"\n        >\n          <TreeView\n            aria-label="controlled"\n            isSelectable\n            isUnselectable\n            multiSelect\n            expandedNodes={expandedNodes}\n            selectedNodes={selectedNodes}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Divider my="4x" />\n      <Stack>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"resizable-tree-view",children:["Resizable tree view",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#resizable-tree-view",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.p,{children:["In typical use cases, you can resize the tree view with a minimum width of ",(0,t.jsx)(e.code,{children:"160px"})," and a maximum width of ",(0,t.jsx)(e.code,{children:"40%"})," of the display area. Customize the width and height as needed to match your design and layout requirements."]}),"\n",(0,t.jsx)(d.Z,{component:nc,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useRef, useState } from 'react';\nimport treeNodes from './data/tree-nodes.json';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from './utils';\n\nconst treeMap = buildTreeMap(treeNodes);\nconst expandableNodes = findExpandableNodeIds(treeNodes);\nconst allNodes = Array.from(treeMap.keys());\nconst defaultSelectedNode = allNodes[0];\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <TreeItemContent\n            sx={{\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {node.name}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodes, setSelectedNodes] = useState([defaultSelectedNode]);\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 300,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"auto\"\n        >\n          <TreeView\n            aria-label=\"resizable\"\n            defaultExpandedNodes={expandableNodes}\n            isSelectable\n            isUnselectable={false}\n            selectedNodes={selectedNodes}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodes[0])?.name}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "name": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "name": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "name": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "name": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "name": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "name": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "name": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "name": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "name": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "name": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "name": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "name": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "name": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "name": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "name": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "name": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "name": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "name": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "name": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "name": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "name": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "name": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "name": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "name": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "name": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "name": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "name": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "name": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "name": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "name": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "name": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "name": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "name": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "name": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "name": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "name": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "name": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "name": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "name": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "name": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "name": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "name": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "name": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "name": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "name": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "name": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "name": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "name": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "name": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "name": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "name": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "name": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "name": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "name": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "name": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useRef, useState } from 'react';\nimport treeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from '@/pages/components/tree-view/utils';\n\nconst treeMap = buildTreeMap(treeNodes);\nconst expandableNodes = findExpandableNodeIds(treeNodes);\nconst allNodes = Array.from(treeMap.keys());\nconst defaultSelectedNode = allNodes[0];\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <TreeItemContent\n            sx={{\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  <TreeItemToggleIcon />\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {node.name}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodes, setSelectedNodes] = useState([defaultSelectedNode]);\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 300,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"auto\"\n        >\n          <TreeView\n            aria-label=\"resizable\"\n            defaultExpandedNodes={expandableNodes}\n            isSelectable\n            isUnselectable={false}\n            selectedNodes={selectedNodes}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeItemRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodes[0])?.name}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"moving-items-dnd",children:["Moving items (DnD)",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#moving-items-dnd",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(d.Z,{component:ne,file:{data:"import {\n  Box,\n  Flex,\n  ResizeHandle,\n  Scrollbar,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport templateTreeNodes from './data/tree-nodes.json';\nimport DndTable from './dnd-table';\nimport DndTree from './dnd-tree';\nimport {\n  buildTreeMap,\n} from './utils';\n\nconst buildTreeNodes = (source) => {\n  const threatTypes = [\n    'Virus/Malware',\n    'Spyware/Grayware',\n    'URL Filtering',\n    'Web Reputation',\n    'Network Virus',\n    'Application Control',\n  ];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).map(node => {\n      node.parent = node.parent ?? null;\n      node.children = ensureArray(node.children).map(child => {\n        child.parent = node;\n        return child;\n      });\n      node.data = {\n        data: _.range(15).map((i) => {\n          const [nodeIndex = ''] = ensureArray(String(node.name).match(/\\d+/));\n\n          const endpoint = `Endpoint ${nodeIndex}_${i+1}`;\n\n          // Randomly pick a subset of threat types\n          const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n\n          // Generate a random date within the past 30 days\n          const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n\n          return {\n            id: `${node.id}_${i+1}`,\n            endpoint,\n            detections,\n            lastSeen,\n          };\n        }),\n      };\n\n      traverse(node.children);\n    });\n  };\n\n  const treeNodes = JSON.parse(JSON.stringify(source));\n  traverse(treeNodes);\n\n  return treeNodes;\n};\n\nconst useRefresh = () => {\n  const [, rerender] = useState();\n  return useCallback(() => {\n    rerender({});\n  }, []);\n};\n\nconst App = () => {\n  const treeNodes = useConst(() => buildTreeNodes(templateTreeNodes));\n  const treeMap = useMemo(() => {\n    return buildTreeMap(treeNodes);\n  }, [treeNodes]);\n  const refresh = useRefresh();\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodeId, setSelectedNodeId] = useState(ensureArray(treeNodes)[0]?.id);\n  const tableData = treeMap.get(selectedNodeId)?.data?.data;\n  const handleNodeDrop = useCallback((context) => {\n    const { source, target, data } = context;\n\n    const sourceNode = treeMap.get(source);\n    const targetNode = treeMap.get(target);\n\n    const movedData = sourceNode.data.data.filter(x => _.includes(data, x.id));\n\n    sourceNode.data.data = _.differenceBy(sourceNode.data.data, movedData, 'id');\n    targetNode.data.data = _.uniqBy([\n      ...ensureArray(targetNode.data.data),\n      ...movedData,\n    ], 'id');\n\n    // Force re-render\n    refresh();\n  }, []);\n  const handleNodeSelect = useCallback((nodeIds) => {\n    setSelectedNodeId(nodeIds[0]);\n  }, []);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Flex\n        ref={containerRef}\n        sx={{\n          boxShadow: colorStyle.shadow.thick,\n          cursor: isResizing ? 'col-resize' : 'default',\n        }}\n      >\n        <Box\n          ref={resizableRef}\n          sx={{\n            flex: 'none',\n            width: 300,\n          }}\n        >\n          <Scrollbar\n            height=\"100%\"\n            overflowX=\"hidden\"\n            overflowY=\"auto\"\n          >\n            <DndTree\n              data={treeNodes}\n              onNodeDrop={handleNodeDrop}\n              onNodeSelect={handleNodeSelect}\n            />\n          </Scrollbar>\n        </Box>\n        <Flex\n          sx={{\n            flex: 'auto',\n            position: 'relative',\n          }}\n        >\n          <ResizeHandle\n            onResizeStart={() => {\n              setIsResizing(true);\n            }}\n            onResizeEnd={() => {\n              setIsResizing(false);\n            }}\n            onResize={({ clientX }) => {\n              const el = resizableRef.current;\n              if (!el) {\n                return;\n              }\n\n              const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n              const minWidth = 160;\n              const maxWidth = parentWidth * 0.4;\n              const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n              if (canDrag) {\n                const nextWidth = clientX - parentLeft;\n                el.style.width = `${nextWidth}px`;\n              }\n            }}\n            sx={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              bottom: 0,\n              borderLeft: 1,\n              borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n              _hover: {\n                borderLeftColor: highlightedDividerColor,\n              },\n              zIndex: 1,\n            }}\n          />\n          <DndTable\n            key={selectedNodeId} // Force re-render when selected node changes\n            node={treeMap.get(selectedNodeId)}\n            data={tableData}\n            width=\"100%\"\n          />\n        </Flex>\n      </Flex>\n    </DndProvider>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": "1",\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "name": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "name": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "name": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "name": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "name": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "name": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "name": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "name": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "name": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "name": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "name": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "name": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "name": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "name": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "name": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "name": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "name": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "name": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "name": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "name": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "2",\n    "name": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "name": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "name": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "name": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "name": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "name": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "name": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": "3",\n    "name": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "name": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "name": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "name": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "name": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "name": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "name": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "name": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "name": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "name": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "name": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "4",\n    "name": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": "5",\n    "name": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "name": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "name": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "name": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "name": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "name": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "name": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "name": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "name": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "name": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "name": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": "6",\n    "name": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "name": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "name": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "name": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": "7",\n    "name": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/dnd-table.js":"import {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Divider,\n  Flex,\n  Icon,\n  Image,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  OverflowTooltip,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  useColorMode,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport {\n  dataAttr,\n} from '@tonic-ui/utils';\nimport { ensureArray, ensureNumber } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDrag } from 'react-dnd';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport iconDrag from '@/pages/components/tree-view/icons/icon-drag.svg';\n\nconst Draggable = ({\n  canDrag: canDragProp,\n  children,\n  item: itemProp,\n}) => {\n  const [collectedProps, dragRef, dragPreviewRef] = useDrag({\n    type: 'dnd',\n    item: itemProp,\n    canDrag: canDragProp,\n    collect: (monitor) => {\n      // DragSourceMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor\n      return {\n        isDragging: monitor.isDragging(),\n      };\n    },\n  });\n\n  return children({\n    dragRef,\n    dragPreviewRef,\n    isDragging: collectedProps.isDragging,\n  });\n};\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst DndTable = ({\n  node,\n  data,\n  ...rest\n}) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const theme = useTheme();\n  const hoverBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.12)',\n    light: 'rgba(0, 0, 0, 0.12)',\n  }[colorMode];\n  const selectedBackgroundColor = {\n    dark: 'rgba(255, 255, 255, 0.08)',\n    light: 'rgba(0, 0, 0, 0.08)',\n  }[colorMode];\n\n  const [sorting, setSorting] = useState([\n    { id: 'endpoint', desc: false },\n  ]);\n\n  const [rowSelection, setRowSelection] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 40,\n    },\n    {\n      header: () => (\n        <OverflowTooltip label=\"Endpoint\">\n          Endpoint\n        </OverflowTooltip>\n      ),\n      accessorKey: 'endpoint',\n      cell: ({ getValue, row }) => {\n        const value = getValue();\n        return (\n          <OverflowTooltip label={value}>\n            {value}\n          </OverflowTooltip>\n        );\n      },\n      size: 'auto',\n    },\n    {\n      header: () => (\n        <OverflowTooltip label=\"Detections\">\n          Detections\n        </OverflowTooltip>\n      ),\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        const value = detections.length;\n        return (\n          <OverflowTooltip label={value}>\n            {value}\n          </OverflowTooltip>\n        );\n      },\n      size: 'auto',\n    },\n    {\n      header: () => (\n        <OverflowTooltip label=\"Last Seen\">\n          Last Seen\n        </OverflowTooltip>\n      ),\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => {\n        const value = getValue().toISOString();\n        return (\n          <OverflowTooltip label={value}>\n            {value}\n          </OverflowTooltip>\n        );\n      },\n      size: 'auto',\n    },\n  ], []);\n\n  const table = useReactTable({\n    data: ensureArray(data),\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      rowSelection,\n      sorting,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval: true, // Enables/Disables the ability to remove sorting for the table\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    table.resetRowSelection();\n    table.resetPagination();\n  }, [data, table]);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n  const isTableScrollingEnabled = layout !== 'table';\n  const totalCount = table.getCoreRowModel().rows.length;\n  const getTableHeight = () => {\n    if (isTableScrollingEnabled) {\n      const headerHeight = 36;\n      const cellHeight = 36;\n      const footerHeight = 56;\n      const rowsToDisplay = 10;\n      return (headerHeight + rowsToDisplay * cellHeight + footerHeight);\n    }\n    return 'auto';\n  };\n\n  return (\n    <Flex\n      flexDirection=\"column\"\n      {...rest}\n    >\n      <Box flex=\"none\" px=\"3x\" py=\"2x\">\n        {node.name}\n      </Box>\n      <Box flex=\"auto\">\n        <AutoSizer\n          disableHeight\n          onResize={({ width }) => {\n            if (tableWidth !== width) {\n              setTableWidth(width);\n            }\n          }}\n        >\n          {({ width }) => (\n            <Table\n              layout={layout}\n              variant={variant}\n              sx={{\n                // Hide the table if there is no column sizing state\n                visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n                height: getTableHeight(),\n                width,\n              }}\n            >\n              <TableHeader>\n                {table.getHeaderGroups().map(headerGroup => (\n                  <TableHeaderRow\n                    key={headerGroup.id}\n                  >\n                    <TableHeaderCell\n                      sx={{\n                        width: '2x',\n                        pl: '3x',\n                        pr: 0,\n                      }}\n                    />\n                   {headerGroup.headers.map(header => {\n                      let styleProps = {\n                        minWidth: header.column.columnDef.minSize,\n                        width: header.getSize(),\n                        ...header.column.columnDef.style,\n                      };\n                      if (header.column.getCanSort()) {\n                        styleProps = {\n                          ...styleProps,\n                          cursor: 'pointer',\n                          userSelect: 'none',\n                          _hover: {\n                            backgroundColor: hoverBackgroundColor,\n                          },\n                        };\n                      }\n                      if (header.column.getIsSorted()) {\n                        styleProps = {\n                          ...styleProps,\n                          color: colorStyle.color.emphasis,\n                        };\n                      }\n\n                      return (\n                        <TableHeaderCell\n                          key={header.id}\n                          onClick={header.column.getToggleSortingHandler()}\n                          {...styleProps}\n                        >\n                          {header.isPlaceholder ? null : (\n                            <Flex alignItems=\"center\">\n                              {flexRender(header.column.columnDef.header, header.getContext())}\n                              {{\n                                asc: (<Icon icon=\"sort-up\" size={20}  ml=\"1x\" />),\n                                desc: (<Icon icon=\"sort-down\" size={20} ml=\"1x\" />),\n                              }[header.column.getIsSorted()] ?? null}\n                            </Flex>\n                          )}\n                        </TableHeaderCell>\n                      );\n                    })}\n                  </TableHeaderRow>\n                ))}\n              </TableHeader>\n              <ConditionalWrapper\n                condition={isTableScrollingEnabled}\n                wrapper={children => (\n                  <TableScrollbar\n                    height=\"100%\"\n                    overflow=\"visible\" // Make the scrollbar visible\n                  >\n                    {children}\n                  </TableScrollbar>\n                )}\n              >\n                <TableBody>\n                  {table.getRowModel().rows.map(row => {\n                    return (\n                      <Draggable\n                        key={row.id}\n                        item={() => {\n                          const sourceNodeId = node.id;\n                          const selectedRows = table.getSelectedRowModel().rows;\n                          const rowIds = selectedRows.map(row => row.original.id);\n\n                          return {\n                            source: sourceNodeId,\n                            data: rowIds,\n                          };\n                        }}\n                      >\n                        {({ dragRef, dragPreviewRef, isDragging }) => {\n                          const canDrag = row.getIsSelected();\n\n                          return (\n                            <TableRow\n                              data-selected={dataAttr(row.getIsSelected())}\n                              sx={{\n                                position: 'relative',\n                                _hover: {\n                                  backgroundColor: hoverBackgroundColor,\n                                },\n                                _selected: {\n                                  backgroundColor: selectedBackgroundColor,\n                                },\n                              }}\n                            >\n                              <TableCell\n                                sx={{\n                                  width: '2x',\n                                  pl: '3x',\n                                  pr: 0,\n                                  zIndex: canDrag ? 1 : 0,\n                                }}\n                              >\n                                <Box\n                                  ref={dragRef}\n                                >\n                                  <Image\n                                    ref={dragPreviewRef}\n                                    alt=\"draggable\"\n                                    src={iconDrag.src}\n                                    sx={{\n                                      cursor: 'move',\n                                      visibility: row.getIsSelected() ? 'visible' : 'hidden',\n                                      width: '2x',\n                                      height: '4x',\n                                    }}\n                                  />\n                                </Box>\n                              </TableCell>\n                              {row.getVisibleCells().map(cell => {\n                                const styleProps = {\n                                  minWidth: cell.column.columnDef.minSize,\n                                  width: cell.column.getSize(),\n                                  ...cell.column.columnDef.style,\n                                };\n                                return (\n                                  <TableCell\n                                    key={cell.id}\n                                    {...styleProps}\n                                  >\n                                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                                  </TableCell>\n                                );\n                              })}\n                            </TableRow>\n                          );\n                        }}\n                      </Draggable>\n                    );\n                  })}\n                </TableBody>\n              </ConditionalWrapper>\n              <TablePagination\n                count={totalCount}\n                onPageChange={(nextPage) => {\n                  const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n                  table.setPageIndex(pageIndex);\n                }}\n                onRowsPerPageChange={(nextRowsPerPage) => {\n                  const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n                  table.setPageSize(pageSize);\n                }}\n              />\n            </Table>\n          )}\n        </AutoSizer>\n      </Box>\n    </Flex>\n  );\n};\n\nconst TablePagination = ({\n  count,\n  defaultPage = 1,\n  defaultRowsPerPage: defaultRowsPerPageProp,\n  onPageChange: onPageChangeProp,\n  onRowsPerPageChange: onRowsPerPageChangeProp,\n  page: pageProp,\n  rowsPerPage: rowsPerPageProp,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  showFirstButton = false,\n  showLastButton = false,\n}) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const defaultRowsPerPage = defaultRowsPerPageProp ?? ensureArray(rowsPerPageOptions)[0];\n  const [page, setPage] = useState(pageProp ?? defaultPage);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageProp ?? defaultRowsPerPage);\n\n  useEffect(() => {\n    const isControlled = (pageProp !== undefined);\n    if (isControlled) {\n      setPage(pageProp);\n    }\n  }, [pageProp]);\n\n  useEffect(() => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (isControlled) {\n      setRowsPerPage(rowsPerPageProp);\n    }\n  }, [rowsPerPageProp]);\n\n  const onPageChange = useCallback((nextPage) => {\n    const isControlled = (pageProp !== undefined);\n    if (!isControlled) {\n      setPage(nextPage);\n    }\n\n    if (typeof onPageChangeProp === 'function') {\n      onPageChangeProp(nextPage);\n    }\n  }, [pageProp, onPageChangeProp]);\n\n  const onRowsPerPageChange = useCallback((nextRowsPerPage) => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (!isControlled) {\n      setRowsPerPage(nextRowsPerPage);\n    }\n\n    if (typeof onRowsPerPageChangeProp === 'function') {\n      onRowsPerPageChangeProp(nextRowsPerPage);\n    }\n  }, [rowsPerPageProp, onRowsPerPageChangeProp]);\n\n  const totalPages = Math.ceil(count / rowsPerPage);\n  const handlePageChange = (event) => {\n    const nextPage = ensureNumber(event.target.value);\n    if (nextPage <= 1) {\n      onPageChange(1);\n    } else if (nextPage >= totalPages) {\n      onPageChange(totalPages);\n    } else {\n      onPageChange(nextPage);\n    }\n  };\n  const handleRowsPerPageChange = (event) => {\n    const nextRowsPerPage = ensureNumber(event.target.value);\n    if (nextRowsPerPage > 0) {\n      onPageChange(1);\n      onRowsPerPageChange(nextRowsPerPage);\n    }\n  };\n  const canPreviousPage = (page > 1);\n  const canNextPage = (page < totalPages);\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      justifyContent=\"flex-end\"\n      backgroundColor={colorStyle.background.secondary}\n      px=\"6x\"\n      py=\"3x\"\n    >\n      <Text mr=\"2x\">\n        Total: {count}\n      </Text>\n      <Divider\n        orientation=\"vertical\"\n        height=\"6x\"\n      />\n      <Menu>\n        <MenuButton variant=\"ghost\">\n          {rowsPerPage} per page\n        </MenuButton>\n        <MenuList\n          onClick={handleRowsPerPageChange}\n          width=\"100%\"\n        >\n          {rowsPerPageOptions.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n            >\n              {option}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      <Divider\n        orientation=\"vertical\"\n        height=\"6x\"\n      />\n      <Space width=\"2x\" />\n      <Input\n        width=\"10x\"\n        px={0}\n        textAlign=\"center\"\n        onChange={handlePageChange}\n        value={page}\n      />\n      <Space width=\"2x\" />\n      <Text>/</Text>\n      <Space width=\"2x\" />\n      <Text>{totalPages}</Text>\n      <Space width=\"2x\" />\n      <ButtonGroup\n        variant=\"secondary\"\n        sx={{\n          '> *:not(:first-of-type)': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button\n          width=\"8x\"\n          disabled={!canPreviousPage}\n          onClick={(event) => {\n            onPageChange(page - 1);\n          }}\n        >\n          <Icon icon=\"angle-left\" />\n        </Button>\n        <Button\n          width=\"8x\"\n          disabled={!canNextPage}\n          onClick={(event) => {\n            onPageChange(page + 1);\n          }}\n        >\n          <Icon icon=\"angle-right\" />\n        </Button>\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default DndTable;","src/pages/components/tree-view/icons/icon-drag.svg":'<svg width="8" height="16" viewBox="0 0 8 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n<circle cx="2" cy="2" r="1" fill="#5E5E5E"/>\n<circle cx="2" cy="6" r="1" fill="#5E5E5E"/>\n<circle cx="2" cy="10" r="1" fill="#5E5E5E"/>\n<circle cx="2" cy="14" r="1" fill="#5E5E5E"/>\n<circle cx="6" cy="2" r="1" fill="#5E5E5E"/>\n<circle cx="6" cy="6" r="1" fill="#5E5E5E"/>\n<circle cx="6" cy="10" r="1" fill="#5E5E5E"/>\n<circle cx="6" cy="14" r="1" fill="#5E5E5E"/>\n</svg>',"src/pages/components/tree-view/dnd-tree.js":"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback } from 'react';\nimport { useDrop } from 'react-dnd';\n\nconst Droppable = ({\n  canDrop: canDropProp,\n  children,\n  onDrop: onDropProp,\n}) => {\n  const [collectedProps, dropRef] = useDrop({\n    accept: 'dnd',\n    drop: onDropProp,\n    canDrop: canDropProp,\n    collect: (monitor) => {\n      // DropTargetMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor\n      return {\n        isOver: monitor.isOver(),\n      };\n    },\n  });\n\n  return children({\n    dropRef,\n    isOver: collectedProps.isOver,\n  });\n};\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n  onNodeDrop: onNodeDropProp,\n}) => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <TreeItem\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected }) => {\n        const icon = isExpanded ? 'folder-open' : 'folder';\n        const iconColor = 'yellow:50';\n\n        return (\n          <Droppable\n            onDrop={(item, monitor) => {\n              if (typeof onNodeDropProp === 'function') {\n                onNodeDropProp({\n                  ...item,\n                  target: node.id,\n                });\n              }\n            }}\n          >\n            {({ dropRef, isOver }) => (\n              <TreeItemContent\n                ref={dropRef}\n                sx={{\n                  backgroundColor: isOver ? colorStyle.background.highlighted : undefined,\n\n                  // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n                  ':hover + [role=\"group\"]': {\n                    position: 'relative',\n                    '::before': {\n                      backgroundColor: colorStyle.background.highlighted,\n                      content: '\"\"',\n                      position: 'absolute',\n                      top: 0,\n                      bottom: 0,\n                      left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                      width: 1,\n                    },\n                  },\n                }}\n              >\n                <Flex\n                  flex=\"none\"\n                  width=\"6x\"\n                >\n                  {isExpandable && (\n                    <TreeItemToggle>\n                      <TreeItemToggleIcon />\n                    </TreeItemToggle>\n                  )}\n                </Flex>\n                <Icon icon={icon} color={iconColor} mr=\"2x\" />\n                <OverflowTooltip label={node.name}>\n                  {({ ref, style }) => (\n                    <Box\n                      ref={ref}\n                      {...style}\n                      flex=\"auto\"\n                      fontWeight={isSelected ? 'semibold' : 'normal'}\n                    >\n                      {node.name}\n                    </Box>\n                  )}\n                </OverflowTooltip>\n              </TreeItemContent>\n            )}\n          </Droppable>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          nodeDepth={nodeDepth + 1}\n          onNodeDrop={onNodeDropProp}\n        />\n      ))}\n    </TreeItem>\n  );\n};\n\nconst DndTree = ({\n  data,\n  onNodeDrop: onNodeDropProp,\n  onNodeSelect: onNodeSelectProp,\n  ...rest\n}) => {\n  const defaultSelectedNode = ensureArray(data)[0]?.id ?? null;\n  const handleNodeDrop = useCallback((item) => {\n    if (typeof onNodeDropProp === 'function') {\n      onNodeDropProp(item);\n    }\n  }, [onNodeDropProp]);\n  const handleNodeSelect = useCallback((nodeIds) => {\n    if (typeof onNodeSelectProp === 'function') {\n      onNodeSelectProp(nodeIds);\n    }\n  }, [onNodeSelectProp]);\n\n  return (\n    <TreeView\n      aria-label=\"dnd\"\n      isSelectable\n      isUnselectable={false}\n      defaultSelectedNodes={[defaultSelectedNode]}\n      onNodeSelect={handleNodeSelect}\n      {...rest}\n    >\n      {ensureArray(data).map(node => (\n        <TreeItemRender\n          key={node.id}\n          node={node}\n          onNodeDrop={handleNodeDrop}\n        />\n      ))}\n    </TreeView>\n  );\n};\n\nexport default DndTree;","src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Flex,\n  ResizeHandle,\n  Scrollbar,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { ensureArray } from 'ensure-type';\nimport _ from 'lodash';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport templateTreeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport DndTable from '@/pages/components/tree-view/dnd-table';\nimport DndTree from '@/pages/components/tree-view/dnd-tree';\nimport {\n  buildTreeMap,\n} from '@/pages/components/tree-view/utils';\n\nconst buildTreeNodes = (source) => {\n  const threatTypes = [\n    'Virus/Malware',\n    'Spyware/Grayware',\n    'URL Filtering',\n    'Web Reputation',\n    'Network Virus',\n    'Application Control',\n  ];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).map(node => {\n      node.parent = node.parent ?? null;\n      node.children = ensureArray(node.children).map(child => {\n        child.parent = node;\n        return child;\n      });\n      node.data = {\n        data: _.range(15).map((i) => {\n          const [nodeIndex = ''] = ensureArray(String(node.name).match(/\\d+/));\n\n          const endpoint = `Endpoint ${nodeIndex}_${i+1}`;\n\n          // Randomly pick a subset of threat types\n          const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n\n          // Generate a random date within the past 30 days\n          const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n\n          return {\n            id: `${node.id}_${i+1}`,\n            endpoint,\n            detections,\n            lastSeen,\n          };\n        }),\n      };\n\n      traverse(node.children);\n    });\n  };\n\n  const treeNodes = JSON.parse(JSON.stringify(source));\n  traverse(treeNodes);\n\n  return treeNodes;\n};\n\nconst useRefresh = () => {\n  const [, rerender] = useState();\n  return useCallback(() => {\n    rerender({});\n  }, []);\n};\n\nconst App = () => {\n  const treeNodes = useConst(() => buildTreeNodes(templateTreeNodes));\n  const treeMap = useMemo(() => {\n    return buildTreeMap(treeNodes);\n  }, [treeNodes]);\n  const refresh = useRefresh();\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodeId, setSelectedNodeId] = useState(ensureArray(treeNodes)[0]?.id);\n  const tableData = treeMap.get(selectedNodeId)?.data?.data;\n  const handleNodeDrop = useCallback((context) => {\n    const { source, target, data } = context;\n\n    const sourceNode = treeMap.get(source);\n    const targetNode = treeMap.get(target);\n\n    const movedData = sourceNode.data.data.filter(x => _.includes(data, x.id));\n\n    sourceNode.data.data = _.differenceBy(sourceNode.data.data, movedData, 'id');\n    targetNode.data.data = _.uniqBy([\n      ...ensureArray(targetNode.data.data),\n      ...movedData,\n    ], 'id');\n\n    // Force re-render\n    refresh();\n  }, []);\n  const handleNodeSelect = useCallback((nodeIds) => {\n    setSelectedNodeId(nodeIds[0]);\n  }, []);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Flex\n        ref={containerRef}\n        sx={{\n          boxShadow: colorStyle.shadow.thick,\n          cursor: isResizing ? 'col-resize' : 'default',\n        }}\n      >\n        <Box\n          ref={resizableRef}\n          sx={{\n            flex: 'none',\n            width: 300,\n          }}\n        >\n          <Scrollbar\n            height=\"100%\"\n            overflowX=\"hidden\"\n            overflowY=\"auto\"\n          >\n            <DndTree\n              data={treeNodes}\n              onNodeDrop={handleNodeDrop}\n              onNodeSelect={handleNodeSelect}\n            />\n          </Scrollbar>\n        </Box>\n        <Flex\n          sx={{\n            flex: 'auto',\n            position: 'relative',\n          }}\n        >\n          <ResizeHandle\n            onResizeStart={() => {\n              setIsResizing(true);\n            }}\n            onResizeEnd={() => {\n              setIsResizing(false);\n            }}\n            onResize={({ clientX }) => {\n              const el = resizableRef.current;\n              if (!el) {\n                return;\n              }\n\n              const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n              const minWidth = 160;\n              const maxWidth = parentWidth * 0.4;\n              const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n              if (canDrag) {\n                const nextWidth = clientX - parentLeft;\n                el.style.width = `${nextWidth}px`;\n              }\n            }}\n            sx={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              bottom: 0,\n              borderLeft: 1,\n              borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n              _hover: {\n                borderLeftColor: highlightedDividerColor,\n              },\n              zIndex: 1,\n            }}\n          />\n          <DndTable\n            key={selectedNodeId} // Force re-render when selected node changes\n            node={treeMap.get(selectedNodeId)}\n            data={tableData}\n            width=\"100%\"\n          />\n        </Flex>\n      </Flex>\n    </DndProvider>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"load-on-demand",children:["Load on demand",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#load-on-demand",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(d.Z,{component:f,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Spinner,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n  useTreeView,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport {\n  findExpandableNodeIds,\n} from './utils';\n\nconst createTreeNodes = (count) => {\n  const treeNodes = Array.from({ length: count }, (_, index) => {\n    const nodeId = index + 1;\n\n    return {\n      id: `${nodeId}`,\n      name: `Node ${nodeId}`,\n      children: [],\n      loadOnDemand: true,\n    };\n  });\n\n  return treeNodes;\n};\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const {\n    getIsNodeExpanded,\n  } = useTreeView();\n  const nodeId = node.id;\n  const nodeName = node.name;\n  const [childNodes, setChildNodes] = useState(ensureArray(node.children));\n  const [isLoading, setIsLoading] = useState(false);\n  const isExpanded = getIsNodeExpanded(nodeId);\n  const loadOnDemand = node.loadOnDemand && childNodes.length === 0;\n\n  useEffect(() => {\n    let timer = null;\n\n    if (isExpanded && loadOnDemand) {\n      setIsLoading(true);\n      timer = setTimeout(() => {\n        const childNodes = [\n          {\n            id: `${nodeId}.1`,\n            name: `${nodeName}.1`,\n            loadOnDemand: (nodeDepth < 2),\n          },\n          {\n            id: `${nodeId}.2`,\n            name: `${nodeName}.2`,\n          },\n        ];\n\n        setChildNodes(childNodes);\n        setIsLoading(false);\n\n        // The following code is to update the node with the new children.\n        // You can remove it if you don't want to update the node.\n        node.children = childNodes;\n        node.loadOnDemand = false;\n      }, 500);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isExpanded, loadOnDemand, node, nodeId, nodeName, nodeDepth]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={({ isExpandable, isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <TreeItemContent\n            sx={{\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  {isLoading ? <Spinner size=\"xs\" /> : <TreeItemToggleIcon />}\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {node.name}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {loadOnDemand\n        ? <Box key=\"stub\" />\n        : childNodes.map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n              nodeDepth={nodeDepth + 1}\n            />\n          ))\n      }\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = createTreeNodes(5);\n  const expandableNodes = findExpandableNodeIds(treeNodes);\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodes);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodes(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <TreeView\n          aria-label=\"load on demand\"\n          isSelectable\n          isUnselectable\n          expandedNodes={expandedNodes}\n          selectedNodes={selectedNodes}\n          onNodeToggle={handleToggle}\n          onNodeSelect={handleSelect}\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Spinner,\n  TreeItem,\n  TreeItemContent,\n  TreeItemToggle,\n  TreeItemToggleIcon,\n  TreeView,\n  useColorStyle,\n  useTreeView,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport {\n  findExpandableNodeIds,\n} from '@/pages/components/tree-view/utils';\n\nconst createTreeNodes = (count) => {\n  const treeNodes = Array.from({ length: count }, (_, index) => {\n    const nodeId = index + 1;\n\n    return {\n      id: `${nodeId}`,\n      name: `Node ${nodeId}`,\n      children: [],\n      loadOnDemand: true,\n    };\n  });\n\n  return treeNodes;\n};\n\nconst TreeItemRender = ({\n  node,\n  nodeDepth = 0,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const {\n    getIsNodeExpanded,\n  } = useTreeView();\n  const nodeId = node.id;\n  const nodeName = node.name;\n  const [childNodes, setChildNodes] = useState(ensureArray(node.children));\n  const [isLoading, setIsLoading] = useState(false);\n  const isExpanded = getIsNodeExpanded(nodeId);\n  const loadOnDemand = node.loadOnDemand && childNodes.length === 0;\n\n  useEffect(() => {\n    let timer = null;\n\n    if (isExpanded && loadOnDemand) {\n      setIsLoading(true);\n      timer = setTimeout(() => {\n        const childNodes = [\n          {\n            id: `${nodeId}.1`,\n            name: `${nodeName}.1`,\n            loadOnDemand: (nodeDepth < 2),\n          },\n          {\n            id: `${nodeId}.2`,\n            name: `${nodeName}.2`,\n          },\n        ];\n\n        setChildNodes(childNodes);\n        setIsLoading(false);\n\n        // The following code is to update the node with the new children.\n        // You can remove it if you don't want to update the node.\n        node.children = childNodes;\n        node.loadOnDemand = false;\n      }, 500);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isExpanded, loadOnDemand, node, nodeId, nodeName, nodeDepth]);\n\n  return (\n    <TreeItem\n      nodeId={nodeId}\n      render={({ isExpandable, isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <TreeItemContent\n            sx={{\n              // [Optional] Display a connecting line to indicate which is the last node when hovered over the tree item\n              ':hover + [role=\"group\"]': {\n                position: 'relative',\n                '::before': {\n                  backgroundColor: colorStyle.background.highlighted,\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  bottom: 0,\n                  left: 20 + nodeDepth * 24 - (1/2), // Adjust the horizontal position based on depth\n                  width: 1,\n                },\n              },\n            }}\n          >\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeItemToggle>\n                  {isLoading ? <Spinner size=\"xs\" /> : <TreeItemToggleIcon />}\n                </TreeItemToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {({ ref, style }) => (\n                <Box\n                  ref={ref}\n                  {...style}\n                  flex=\"auto\"\n                  fontWeight={isSelected ? 'semibold' : 'normal'}\n                >\n                  {node.name}\n                </Box>\n              )}\n            </OverflowTooltip>\n          </TreeItemContent>\n        );\n      }}\n    >\n      {loadOnDemand\n        ? <Box key=\"stub\" />\n        : childNodes.map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n              nodeDepth={nodeDepth + 1}\n            />\n          ))\n      }\n    </TreeItem>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const treeNodes = createTreeNodes(5);\n  const expandableNodes = findExpandableNodeIds(treeNodes);\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodes);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodes(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"auto\"\n      >\n        <TreeView\n          aria-label=\"load on demand\"\n          isSelectable\n          isUnselectable\n          expandedNodes={expandedNodes}\n          selectedNodes={selectedNodes}\n          onNodeToggle={handleToggle}\n          onNodeSelect={handleSelect}\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeItemRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h2,{id:"accessibility",children:["Accessibility",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#accessibility",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"TreeView"})," component supports both keyboard and mouse navigation and selection.\nThe following keyboard shortcuts are available:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Use the ",(0,t.jsx)(e.code,{children:"Up"})," and ",(0,t.jsx)(e.code,{children:"Down"})," arrow keys to navigate between nodes."]}),"\n",(0,t.jsxs)(e.li,{children:["Use the ",(0,t.jsx)(e.code,{children:"Left"})," and ",(0,t.jsx)(e.code,{children:"Right"})," arrow keys to expand/collapse a node."]}),"\n",(0,t.jsxs)(e.li,{children:["Use the ",(0,t.jsx)(e.code,{children:"Enter"})," key to toggle either the expansion or selection of a node."]}),"\n",(0,t.jsxs)(e.li,{children:["Use the ",(0,t.jsx)(e.code,{children:"Space"})," key to toggle the selection of a node."]}),"\n",(0,t.jsxs)(e.li,{children:["Use the ",(0,t.jsx)(e.code,{children:"Home"})," and ",(0,t.jsx)(e.code,{children:"End"})," keys to quickly navigate to the first or last node."]}),"\n",(0,t.jsxs)(e.li,{children:["Hold down the ",(0,t.jsx)(e.code,{children:"Ctrl"})," key and click the left mouse button to select or unselect a node without affecting the current selection."]}),"\n",(0,t.jsxs)(e.li,{children:["Hold down the ",(0,t.jsx)(e.code,{children:"Shift"})," key and click the left mouse button to select a range of nodes from the current node to the clicked node."]}),"\n",(0,t.jsxs)(e.li,{children:["Use ",(0,t.jsx)(e.code,{children:"Ctrl"}),"+",(0,t.jsx)(e.code,{children:"Shift"}),"+",(0,t.jsx)(e.code,{children:"Home"})," keys to select a range of nodes from the current node to the first node."]}),"\n",(0,t.jsxs)(e.li,{children:["Use ",(0,t.jsx)(e.code,{children:"Ctrl"}),"+",(0,t.jsx)(e.code,{children:"Shift"}),"+",(0,t.jsx)(e.code,{children:"End"})," keys to select a range of nodes from the current node to the last node."]}),"\n",(0,t.jsxs)(e.li,{children:["Use ",(0,t.jsx)(e.code,{children:"Ctrl"}),"+",(0,t.jsx)(e.code,{children:"a"})," keys to select all nodes."]}),"\n"]}),"\n",(0,t.jsxs)(e.h2,{id:"props",children:["Props",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.h3,{id:"treeview",children:["TreeView",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeview",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{align:"left",children:"Name"}),(0,t.jsx)(e.th,{align:"left",children:"Type"}),(0,t.jsx)(e.th,{align:"left",children:"Default"}),(0,t.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"defaultExpandedNodes"}),(0,t.jsx)(e.td,{align:"left",children:"array"}),(0,t.jsx)(e.td,{align:"left",children:"[]"}),(0,t.jsx)(e.td,{align:"left",children:"An array of expanded node IDs for initial state (uncontrolled)."})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"defaultSelectedNodes"}),(0,t.jsx)(e.td,{align:"left",children:"array"}),(0,t.jsx)(e.td,{align:"left",children:"[]"}),(0,t.jsx)(e.td,{align:"left",children:"An array of selected node IDs for initial state (uncontrolled)."})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"expandedNodes"}),(0,t.jsx)(e.td,{align:"left",children:"array"}),(0,t.jsx)(e.td,{align:"left"}),(0,t.jsx)(e.td,{align:"left",children:"An array of expanded node IDs for controlled state."})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"id"}),(0,t.jsx)(e.td,{align:"left",children:"string"}),(0,t.jsx)(e.td,{align:"left"}),(0,t.jsxs)(e.td,{align:"left",children:["The ",(0,t.jsx)(e.code,{children:"id"})," prop used for accessibility purpose. If not provided, a random id will be generated."]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"isSelectable"}),(0,t.jsx)(e.td,{align:"left",children:"bool"}),(0,t.jsx)(e.td,{align:"left",children:"false"}),(0,t.jsx)(e.td,{align:"left",children:"Determines if the tree view allows node selection."})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"isUnselectable"}),(0,t.jsx)(e.td,{align:"left",children:"bool"}),(0,t.jsx)(e.td,{align:"left",children:"false"}),(0,t.jsx)(e.td,{align:"left",children:"Determines if the tree view allows node unselection."})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"multiSelect"}),(0,t.jsx)(e.td,{align:"left",children:"bool"}),(0,t.jsx)(e.td,{align:"left",children:"false"}),(0,t.jsxs)(e.td,{align:"left",children:["If true, ",(0,t.jsx)(e.code,{children:"ctrl"})," and ",(0,t.jsx)(e.code,{children:"shift"})," will trigger multiselect."]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"onNodeFocus"}),(0,t.jsx)(e.td,{align:"left",children:"function"}),(0,t.jsx)(e.td,{align:"left"}),(0,t.jsxs)(e.td,{align:"left",children:["A callback function invoked when a tree node is focused.",(0,t.jsxs)("pre",{children:[(0,t.jsx)(e.code,{children:"function(nodeId: string) => void"}),(0,t.jsx)("br",{})," • ",(0,t.jsx)(e.code,{children:"nodeId"})," The id of the focused node."]})]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"onNodeSelect"}),(0,t.jsx)(e.td,{align:"left",children:"function"}),(0,t.jsx)(e.td,{align:"left"}),(0,t.jsxs)(e.td,{align:"left",children:["A callback function triggered when tree nodes are selected/unselected.",(0,t.jsxs)("pre",{children:[(0,t.jsx)(e.code,{children:"function(nodeIds: Array<string>) => void"}),(0,t.jsx)("br",{})," • ",(0,t.jsx)(e.code,{children:"nodeIds"})," An array of selected node IDs."]})]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"onNodeToggle"}),(0,t.jsx)(e.td,{align:"left",children:"function"}),(0,t.jsx)(e.td,{align:"left"}),(0,t.jsxs)(e.td,{align:"left",children:["A callback function triggered when tree nodes are expanded/collapsed.",(0,t.jsxs)("pre",{children:[(0,t.jsx)(e.code,{children:"function(nodeIds: Array<string>) => void"}),(0,t.jsx)("br",{})," • ",(0,t.jsx)(e.code,{children:"nodeIds"})," An array of expanded node IDs."]})]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"selectedNodes"}),(0,t.jsx)(e.td,{align:"left",children:"array"}),(0,t.jsx)(e.td,{align:"left"}),(0,t.jsx)(e.td,{align:"left",children:"An array of selected node IDs for controlled state."})]})]})]}),"\n",(0,t.jsxs)(e.h3,{id:"treeitem",children:["TreeItem",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeitem",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{align:"left",children:"Name"}),(0,t.jsx)(e.th,{align:"left",children:"Type"}),(0,t.jsx)(e.th,{align:"left",children:"Default"}),(0,t.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"TransitionComponent"}),(0,t.jsx)(e.td,{align:"left",children:"ElementType"}),(0,t.jsx)(e.td,{align:"left",children:"Collapse"}),(0,t.jsx)(e.td,{align:"left",children:"The component used for the transition."})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"TransitionProps"}),(0,t.jsx)(e.td,{align:"left",children:"object"}),(0,t.jsx)(e.td,{align:"left"}),(0,t.jsxs)(e.td,{align:"left",children:["Props applied to the ",(0,t.jsx)(e.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"children"}),(0,t.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,t.jsx)(e.td,{align:"left"}),(0,t.jsx)(e.td,{align:"left",children:"The children of the tree item."})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"disabled"}),(0,t.jsx)(e.td,{align:"left",children:"bool"}),(0,t.jsx)(e.td,{align:"left",children:"false"}),(0,t.jsx)(e.td,{align:"left",children:"Determines if the tree item is disabled."})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"nodeId"}),(0,t.jsx)(e.td,{align:"left",children:"string"}),(0,t.jsx)(e.td,{align:"left"}),(0,t.jsxs)(e.td,{align:"left",children:[(0,t.jsx)(e.code,{children:"REQUIRED"})," The id of the node."]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:"render"}),(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.code,{children:"(context: TreeItemContext) => ReactNode"})}),(0,t.jsx)(e.td,{align:"left"}),(0,t.jsxs)(e.td,{align:"left",children:[(0,t.jsx)(e.code,{children:"REQUIRED"})," A function to render the tree item content.",(0,t.jsx)("br",{}),(0,t.jsxs)("pre",{children:["type TreeItemContext = ","{",(0,t.jsx)("br",{}),"  nodeDepth: number;",(0,t.jsx)("br",{}),"  nodeId: string;",(0,t.jsx)("br",{}),"  isDisabled: boolean;",(0,t.jsx)("br",{}),"  isExpandable: boolean;",(0,t.jsx)("br",{}),"  isExpanded: boolean;",(0,t.jsx)("br",{}),"  isFocused: boolean;",(0,t.jsx)("br",{}),"  isSelected: boolean;",(0,t.jsx)("br",{}),"  select: () => void;",(0,t.jsx)("br",{}),"  selectRange: () => void;",(0,t.jsx)("br",{}),"  toggleExpansion: () => void;",(0,t.jsx)("br",{}),"  toggleSelection: () => void;",(0,t.jsx)("br",{}),"};"]})]})]})]})]}),"\n",(0,t.jsxs)(e.h3,{id:"treeitemcontent",children:["TreeItemContent",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeitemcontent",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(e.table,{children:(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{align:"left",children:"Name"}),(0,t.jsx)(e.th,{align:"left",children:"Type"}),(0,t.jsx)(e.th,{align:"left",children:"Default"}),(0,t.jsx)(e.th,{align:"left",children:"Description"})]})})})]})}var nU=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,r.ah)(),n.components).wrapper;return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(nH,n)})):nH(n)}},31036:function(n,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/tree-view",function(){return o(18020)}])}},function(n){n.O(0,[5220,8726,754,9774,2888,179],function(){return n(n.s=31036)}),_N_E=n.O()}]);