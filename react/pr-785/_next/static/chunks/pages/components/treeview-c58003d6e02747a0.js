(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3991],{58775:function(n,e,r){"use strict";r.d(e,{Z:function(){return g}});var o=r(98922),t=r(49427),d=r(5632),l=r(2784),a=r(79525),i=r(98485),c=r(71561),s=r(28214),h=r(66824),u=["size"];function p(){return(p=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(n[o]=r[o])}return n}).apply(this,arguments)}var m=(0,l.forwardRef)(function(n,e){var r=n.size,t=function(n,e){if(null==n)return{};var r,o,t=function(n,e){if(null==n)return{};var r,o,t={},d=Object.keys(n);for(o=0;o<d.length;o++)r=d[o],e.indexOf(r)>=0||(t[r]=n[r]);return t}(n,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(n);for(o=0;o<d.length;o++)r=d[o],!(e.indexOf(r)>=0)&&Object.prototype.propertyIsEnumerable.call(n,r)&&(t[r]=n[r])}return t}(n,u);return l.createElement(o.SVGIcon,p({size:r,viewBox:"0 0 1024 1024"},t),l.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});m.displayName="CodeSandboxIcon";var f=r(30462);function x(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var r,o,t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var d=[],l=!0,a=!1;try{for(t=t.call(n);!(l=(r=t.next()).done)&&(d.push(r.value),!e||d.length!==e);l=!0);}catch(n){a=!0,o=n}finally{try{l||null==t.return||t.return()}finally{if(a)throw o}}return d}}(n,e)||function(n,e){if(n){if("string"==typeof n)return b(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);if("Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r)return Array.from(n);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return b(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(n,e){(null==e||e>n.length)&&(e=n.length);for(var r=0,o=Array(e);r<e;r++)o[r]=n[r];return o}var N={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},v=function(n){var e=n.component,r=n.file,u=n.sandbox,p=(0,d.useRouter)(),b=x((0,l.useReducer)(function(n){return!n},!1),2),v=b[0],g=b[1],y=x((0,o.useColorMode)(),1)[0],C={dark:c.y,light:c.q}[y],k=x((0,t.useToggle)(!1),2),w=k[0],I=k[1],E=(0,i.Z)(null==r?void 0:r.data),T=E.onCopy,S=E.hasCopied,A=(0,l.useCallback)(function(){T()},[T]),j=(0,l.useCallback)(function(){(0,s.b)(u)},[u]),B=(0,l.useCallback)(function(){g(),I(!1)},[g,I]);return l.createElement(a.nu,{code:null==r?void 0:r.data,disabled:!0,language:"jsx",theme:C},l.createElement(o.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[y],p:"4x"},l.createElement(o.Box,{fontSize:"sm",lineHeight:"sm"},l.createElement(l.Fragment,{key:v},l.createElement(e,null)))),l.createElement(o.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},l.createElement(f.Z,{"data-track":w?"CodeBlock|hide_source|".concat((0,h.Z)({path:p.pathname})):"CodeBlock|show_source|".concat((0,h.Z)({path:p.pathname})),onClick:I},l.createElement(o.Tooltip,{label:w?"Hide the source":"Show the source"},l.createElement(o.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),l.createElement(f.Z,{"data-track":"CodeBlock|copy_source|".concat((0,h.Z)({path:p.pathname})),onClick:A},l.createElement(o.Tooltip,{label:S?"Copied":"Copy the source"},l.createElement(o.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),l.createElement(f.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(p.pathname),onClick:j},l.createElement(o.Tooltip,{label:"Edit in CodeSandbox"},l.createElement(m,{size:{sm:"5x",md:"4x"}}))),l.createElement(f.Z,{"data-track":"CodeBlock|reset|".concat(p.pathname),onClick:B},l.createElement(o.Tooltip,{label:"Reset the demo"},l.createElement(o.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),l.createElement(o.Fade,{in:w},l.createElement(o.Collapse,{in:w,unmountOnExit:!0},l.createElement(a.uz,{style:N}))))};v.displayName="Demo";var g=v},79231:function(n,e,r){"use strict";r.r(e),r.d(e,{default:function(){return j}});var o,t=r(52322),d=r(45392),l=r(58775),a=r(98922),i=r(2784),c=JSON.parse('{"id":"0","name":"Root","children":[{"id":"1","name":"Node 1","children":[{"id":"2","name":"Node 2","children":[{"id":"3","name":"Node 3","children":[{"id":"4","name":"Node 4"}]},{"id":"5","name":"Node 5"}]},{"id":"6","name":"Node 6","children":[{"id":"7","name":"Node 7","children":[{"id":"8","name":"Node 8"},{"id":"9","name":"Node 9","children":[{"id":"10","name":"Node 10","children":[{"id":"11","name":"Node 11"}]}]}]}]}]},{"id":"12","name":"Node 12","children":[{"id":"13","name":"Node 13","children":[{"id":"14","name":"Node 14"}]}]}]}'),s=function(n){var e=[];return!function n(r){Array.isArray(r.children)&&r.children.length>0&&(e.push(r.id),r.children.forEach(n))}(n),e};function h(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var r,o,t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var d=[],l=!0,a=!1;try{for(t=t.call(n);!(l=(r=t.next()).done)&&(d.push(r.value),!e||d.length!==e);l=!0);}catch(n){a=!0,o=n}finally{try{l||null==t.return||t.return()}finally{if(a)throw o}}return d}}(n,e)||function(n,e){if(n){if("string"==typeof n)return u(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);if("Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r)return Array.from(n);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return u(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(n,e){(null==e||e>n.length)&&(e=n.length);for(var r=0,o=Array(e);r<e;r++)o[r]=n[r];return o}var p=(o=[],!function n(e){o.push(e.id),Array.isArray(e.children)&&e.children.length>0&&e.children.forEach(n)}(c),o),m=s(c),f=function n(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=Array.isArray(e.children)?e.children.length:0;return i.createElement(a.TreeNode,{key:e.id,nodeId:e.id,render:function(n){var r=n.isExpanded,t=n.isSelected,d=n.select,l=o>0?r?"folder-open":"folder":"server",c=o>0?"yellow:50":"currentColor";return i.createElement(i.Fragment,null,i.createElement(a.Flex,{onClick:function(n){n.stopPropagation()},mr:"2x"},i.createElement(a.Checkbox,{checked:t,onChange:function(){d()}})),i.createElement(a.Icon,{icon:l,color:c,mr:"2x"}),i.createElement(a.OverflowTooltip,{label:e.name},e.name))},sx:{'&[aria-selected="true"] > *:first-of-type:not(:hover)':{backgroundColor:"transparent"}}},o>0?e.children.map(function(e){return n(e,r+1)}):null)},x=function(){var n=h((0,a.useColorMode)(),1)[0],e=h((0,i.useState)(m),2),r=e[0],o=e[1],t=h((0,i.useState)([]),2),d=t[0],l=t[1];return i.createElement(i.Fragment,null,i.createElement(a.ButtonGroup,{variant:"secondary",columnGap:"2x",mb:"3x"},i.createElement(a.Button,{variant:"secondary",disabled:r.length===m.length,onClick:function(n){o(m)}},"Expand all"),i.createElement(a.Button,{variant:"secondary",disabled:0===r.length,onClick:function(n){o([])}},"Collapse all"),i.createElement(a.Button,{variant:"secondary",disabled:d.length===p.length,onClick:function(n){l(p)}},"Select all"),i.createElement(a.Button,{variant:"secondary",disabled:0===d.length,onClick:function(n){l([])}},"Unselect all")),i.createElement(a.Stack,{spacing:"2x"},i.createElement(a.Text,null,"Expanded nodes: ",r.join(", ")),i.createElement(a.Text,null,"Selected nodes: ",d.join(", "))),i.createElement(a.Divider,{my:"4x"}),i.createElement(a.Box,{minWidth:160,maxWidth:"40%"},i.createElement(a.Scrollbar,{height:240,overflowY:"scroll",sx:{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[n]}},i.createElement(a.TreeView,{"aria-label":"controlled",isSelectable:!0,isMultiSelectable:!0,expandedNodes:r,selectedNodes:d,onToggleNodes:function(n){o(n)},onSelectNodes:function(n){l(n)}},f(c)))))};function b(n,e){(null==e||e>n.length)&&(e=n.length);for(var r=0,o=Array(e);r<e;r++)o[r]=n[r];return o}var N=s(c),v=function n(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=Array.isArray(e.children)?e.children.length:0;return i.createElement(a.TreeNode,{key:e.id,nodeId:e.id,render:function(n){var r=n.isExpanded,t=n.isSelected,d=n.select,l=o>0?r?"folder-open":"folder":"server",c=o>0?"yellow:50":"currentColor";return i.createElement(i.Fragment,null,i.createElement(a.Flex,{onClick:function(n){n.stopPropagation()},mr:"2x"},i.createElement(a.Checkbox,{checked:t,onChange:function(){d()}})),i.createElement(a.Icon,{icon:l,color:c,mr:"2x"}),i.createElement(a.OverflowTooltip,{label:e.name},e.name))},sx:{'&[aria-selected="true"] > *:first-of-type:not(:hover)':{backgroundColor:"transparent"}}},o>0?e.children.map(function(e){return n(e,r+1)}):null)},g=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,a.useColorMode)())||function(n,e){var r,o,t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var d=[],l=!0,a=!1;try{for(t=t.call(n);!(l=(r=t.next()).done)&&(d.push(r.value),!e||d.length!==e);l=!0);}catch(n){a=!0,o=n}finally{try{l||null==t.return||t.return()}finally{if(a)throw o}}return d}}(n,1)||function(n,e){if(n){if("string"==typeof n)return b(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);if("Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r)return Array.from(n);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return b(n,e)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return i.createElement(a.Box,{minWidth:160,maxWidth:"40%"},i.createElement(a.Scrollbar,{height:240,overflowY:"scroll",sx:{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[e]}},i.createElement(a.TreeView,{"aria-label":"multi-select",defaultExpandedNodes:N,isSelectable:!0,isMultiSelectable:!0},v(c))))};function y(n,e){(null==e||e>n.length)&&(e=n.length);for(var r=0,o=Array(e);r<e;r++)o[r]=n[r];return o}var C=s(c),k=function n(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=Array.isArray(e.children)?e.children.length:0;return i.createElement(a.TreeNode,{key:e.id,nodeId:e.id,render:function(n){var r=n.isExpanded,t=o>0?r?"folder-open":"folder":"server",d=o>0?"yellow:50":"currentColor";return i.createElement(i.Fragment,null,i.createElement(a.Icon,{icon:t,color:d,mr:"2x"}),i.createElement(a.OverflowTooltip,{label:e.name},e.name))}},o>0?e.children.map(function(e){return n(e,r+1)}):null)},w=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,a.useColorMode)())||function(n,e){var r,o,t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var d=[],l=!0,a=!1;try{for(t=t.call(n);!(l=(r=t.next()).done)&&(d.push(r.value),!e||d.length!==e);l=!0);}catch(n){a=!0,o=n}finally{try{l||null==t.return||t.return()}finally{if(a)throw o}}return d}}(n,1)||function(n,e){if(n){if("string"==typeof n)return y(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);if("Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r)return Array.from(n);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return y(n,e)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return i.createElement(a.Box,{minWidth:160,maxWidth:"40%"},i.createElement(a.Scrollbar,{height:240,overflowY:"scroll",sx:{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[e]}},i.createElement(a.TreeView,{"aria-label":"node icons",defaultExpandedNodes:C,isSelectable:!0},k(c))))};function I(n,e){(null==e||e>n.length)&&(e=n.length);for(var r=0,o=Array(e);r<e;r++)o[r]=n[r];return o}var E=s(c),T=function n(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=Array.isArray(e.children)?e.children.length:0;return i.createElement(a.TreeNode,{key:e.id,nodeId:e.id,render:function(){return i.createElement(a.OverflowTooltip,{label:e.name},e.name)}},o>0?e.children.map(function(e){return n(e,r+1)}):null)},S=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,a.useColorMode)())||function(n,e){var r,o,t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var d=[],l=!0,a=!1;try{for(t=t.call(n);!(l=(r=t.next()).done)&&(d.push(r.value),!e||d.length!==e);l=!0);}catch(n){a=!0,o=n}finally{try{l||null==t.return||t.return()}finally{if(a)throw o}}return d}}(n,1)||function(n,e){if(n){if("string"==typeof n)return I(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);if("Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r)return Array.from(n);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return I(n,e)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return i.createElement(a.Box,{minWidth:160,maxWidth:"40%"},i.createElement(a.Scrollbar,{height:240,overflowY:"scroll",sx:{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[e]}},i.createElement(a.TreeView,{"aria-label":"basic tree view",defaultExpandedNodes:E,isSelectable:!0},T(c))))};function A(n){var e=Object.assign({div:"div",h1:"h1",h2:"h2",a:"a",svg:"svg",use:"use",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th"},(0,d.ah)(),n.components);return(0,t.jsxs)(e.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n",(0,t.jsx)(e.h1,{id:"tree-view",children:"Tree View"}),"\n",(0,t.jsxs)(e.h2,{id:"usage",children:["Usage",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.h3,{id:"basic-tree-view",children:["Basic tree view",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-tree-view",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(l.Z,{component:S,file:{data:"import {\n  Box,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from './data/tree.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={() => (\n        <OverflowTooltip label={node.name}>\n          {node.name}\n        </OverflowTooltip>\n      )}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n\n  return (\n    <Box\n      minWidth={160}\n      maxWidth=\"40%\"\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n        sx={{\n          border: 1,\n          borderColor,\n        }}\n      >\n        <TreeView\n          aria-label=\"basic tree view\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/treeview/index.page.mdx"},sandbox:{dependencies:{"@tonic-ui/react":"^1.23.0",react:"latest"},files:{"src/pages/components/treeview/data/tree.json":'{\n  "id": "0",\n  "name": "Root",\n  "children": [\n    {\n      "id": "1",\n      "name": "Node 1",\n      "children": [\n        {\n          "id": "2",\n          "name": "Node 2",\n          "children": [\n            {\n              "id": "3",\n              "name": "Node 3",\n              "children": [\n                {\n                  "id": "4",\n                  "name": "Node 4"\n                }\n              ]\n            },\n            {\n              "id": "5",\n              "name": "Node 5"\n            }\n          ]\n        },\n        {\n          "id": "6",\n          "name": "Node 6",\n          "children": [\n            {\n              "id": "7",\n              "name": "Node 7",\n              "children": [\n                {\n                  "id": "8",\n                  "name": "Node 8"\n                },\n                {\n                  "id": "9",\n                  "name": "Node 9",\n                  "children": [\n                    {\n                      "id": "10",\n                      "name": "Node 10",\n                      "children": [\n                        {\n                          "id": "11",\n                          "name": "Node 11"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "12",\n      "name": "Node 12",\n      "children": [\n        {\n          "id": "13",\n          "name": "Node 13",\n          "children": [\n            {\n              "id": "14",\n              "name": "Node 14"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/treeview/utils.js":"export const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nexport const getAllNodeIds = (tree) => {\n  const allNodeIds = [];\n\n  const traverse = (node) => {\n    allNodeIds.push(node.id);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return allNodeIds;\n};"},raw:"import {\n  Box,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from '@/pages/components/treeview/data/tree.json';\nimport { findExpandableNodeIds } from '@/pages/components/treeview/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={() => (\n        <OverflowTooltip label={node.name}>\n          {node.name}\n        </OverflowTooltip>\n      )}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n\n  return (\n    <Box\n      minWidth={160}\n      maxWidth=\"40%\"\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n        sx={{\n          border: 1,\n          borderColor,\n        }}\n      >\n        <TreeView\n          aria-label=\"basic tree view\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"icons",children:["Icons",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#icons",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(l.Z,{component:w,file:{data:"import {\n  Box,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from './data/tree.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n\n  return (\n    <Box\n      minWidth={160}\n      maxWidth=\"40%\"\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n        sx={{\n          border: 1,\n          borderColor,\n        }}\n      >\n        <TreeView\n          aria-label=\"node icons\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/treeview/index.page.mdx"},sandbox:{dependencies:{"@tonic-ui/react":"^1.23.0",react:"latest"},files:{"src/pages/components/treeview/data/tree.json":'{\n  "id": "0",\n  "name": "Root",\n  "children": [\n    {\n      "id": "1",\n      "name": "Node 1",\n      "children": [\n        {\n          "id": "2",\n          "name": "Node 2",\n          "children": [\n            {\n              "id": "3",\n              "name": "Node 3",\n              "children": [\n                {\n                  "id": "4",\n                  "name": "Node 4"\n                }\n              ]\n            },\n            {\n              "id": "5",\n              "name": "Node 5"\n            }\n          ]\n        },\n        {\n          "id": "6",\n          "name": "Node 6",\n          "children": [\n            {\n              "id": "7",\n              "name": "Node 7",\n              "children": [\n                {\n                  "id": "8",\n                  "name": "Node 8"\n                },\n                {\n                  "id": "9",\n                  "name": "Node 9",\n                  "children": [\n                    {\n                      "id": "10",\n                      "name": "Node 10",\n                      "children": [\n                        {\n                          "id": "11",\n                          "name": "Node 11"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "12",\n      "name": "Node 12",\n      "children": [\n        {\n          "id": "13",\n          "name": "Node 13",\n          "children": [\n            {\n              "id": "14",\n              "name": "Node 14"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/treeview/utils.js":"export const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nexport const getAllNodeIds = (tree) => {\n  const allNodeIds = [];\n\n  const traverse = (node) => {\n    allNodeIds.push(node.id);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return allNodeIds;\n};"},raw:"import {\n  Box,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from '@/pages/components/treeview/data/tree.json';\nimport { findExpandableNodeIds } from '@/pages/components/treeview/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n\n  return (\n    <Box\n      minWidth={160}\n      maxWidth=\"40%\"\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n        sx={{\n          border: 1,\n          borderColor,\n        }}\n      >\n        <TreeView\n          aria-label=\"node icons\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"multi-selection",children:["Multi-selection",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#multi-selection",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(l.Z,{component:g,file:{data:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from './data/tree.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n          backgroundColor: 'transparent',\n        },\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n\n  return (\n    <Box\n      minWidth={160}\n      maxWidth=\"40%\"\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n        sx={{\n          border: 1,\n          borderColor,\n        }}\n      >\n        <TreeView\n          aria-label=\"multi-select\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isMultiSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/treeview/index.page.mdx"},sandbox:{dependencies:{"@tonic-ui/react":"^1.23.0",react:"latest"},files:{"src/pages/components/treeview/data/tree.json":'{\n  "id": "0",\n  "name": "Root",\n  "children": [\n    {\n      "id": "1",\n      "name": "Node 1",\n      "children": [\n        {\n          "id": "2",\n          "name": "Node 2",\n          "children": [\n            {\n              "id": "3",\n              "name": "Node 3",\n              "children": [\n                {\n                  "id": "4",\n                  "name": "Node 4"\n                }\n              ]\n            },\n            {\n              "id": "5",\n              "name": "Node 5"\n            }\n          ]\n        },\n        {\n          "id": "6",\n          "name": "Node 6",\n          "children": [\n            {\n              "id": "7",\n              "name": "Node 7",\n              "children": [\n                {\n                  "id": "8",\n                  "name": "Node 8"\n                },\n                {\n                  "id": "9",\n                  "name": "Node 9",\n                  "children": [\n                    {\n                      "id": "10",\n                      "name": "Node 10",\n                      "children": [\n                        {\n                          "id": "11",\n                          "name": "Node 11"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "12",\n      "name": "Node 12",\n      "children": [\n        {\n          "id": "13",\n          "name": "Node 13",\n          "children": [\n            {\n              "id": "14",\n              "name": "Node 14"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/treeview/utils.js":"export const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nexport const getAllNodeIds = (tree) => {\n  const allNodeIds = [];\n\n  const traverse = (node) => {\n    allNodeIds.push(node.id);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return allNodeIds;\n};"},raw:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from '@/pages/components/treeview/data/tree.json';\nimport { findExpandableNodeIds } from '@/pages/components/treeview/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n          backgroundColor: 'transparent',\n        },\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n\n  return (\n    <Box\n      minWidth={160}\n      maxWidth=\"40%\"\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n        sx={{\n          border: 1,\n          borderColor,\n        }}\n      >\n        <TreeView\n          aria-label=\"multi-select\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isMultiSelectable\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"controlled-tree-view",children:["Controlled tree view",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#controlled-tree-view",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(l.Z,{component:x,file:{data:"import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeView,\n  TreeNode,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React, { useState } from 'react';\nimport tree from './data/tree.json';\nimport { findExpandableNodeIds, getAllNodeIds } from './utils';\n\nconst allNodeIds = getAllNodeIds(tree);\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n          backgroundColor: 'transparent',\n        },\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodeIds);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const onToggleNodes = (nodeIds) => {\n    setExpandedNodes(nodeIds);\n  };\n\n  const onSelectNodes = (nodeIds) => {\n    setSelectedNodes(nodeIds);\n  };\n\n  const handleClickExpandAll = (event) => {\n    setExpandedNodes(expandableNodeIds);\n  };\n\n  const handleClickCollapseAll = (event) => {\n    setExpandedNodes([]);\n  };\n\n  const handleClickSelectAll = (event) => {\n    setSelectedNodes(allNodeIds);\n  };\n\n  const handleClickUnselectAll = (event) => {\n    setSelectedNodes([]);\n  };\n\n  return (\n    <>\n      <ButtonGroup\n        variant=\"secondary\"\n        columnGap=\"2x\"\n        mb=\"3x\"\n      >\n        <Button\n          variant=\"secondary\"\n          disabled={expandedNodes.length === expandableNodeIds.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={selectedNodes.length === allNodeIds.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Stack spacing=\"2x\">\n        <Text>Expanded nodes: {expandedNodes.join(', ')}</Text>\n        <Text>Selected nodes: {selectedNodes.join(', ')}</Text>\n      </Stack>\n      <Divider my=\"4x\" />\n      <Box\n        minWidth={160}\n        maxWidth=\"40%\"\n      >\n        <Scrollbar\n          height={240}\n          overflowY=\"scroll\"\n          sx={{\n            border: 1,\n            borderColor,\n          }}\n        >\n          <TreeView\n            aria-label=\"controlled\"\n            isSelectable\n            isMultiSelectable\n            expandedNodes={expandedNodes}\n            selectedNodes={selectedNodes}\n            onToggleNodes={onToggleNodes}\n            onSelectNodes={onSelectNodes}\n          >\n            {renderTree(tree)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/treeview/index.page.mdx"},sandbox:{dependencies:{"@tonic-ui/react":"^1.23.0",react:"latest"},files:{"src/pages/components/treeview/data/tree.json":'{\n  "id": "0",\n  "name": "Root",\n  "children": [\n    {\n      "id": "1",\n      "name": "Node 1",\n      "children": [\n        {\n          "id": "2",\n          "name": "Node 2",\n          "children": [\n            {\n              "id": "3",\n              "name": "Node 3",\n              "children": [\n                {\n                  "id": "4",\n                  "name": "Node 4"\n                }\n              ]\n            },\n            {\n              "id": "5",\n              "name": "Node 5"\n            }\n          ]\n        },\n        {\n          "id": "6",\n          "name": "Node 6",\n          "children": [\n            {\n              "id": "7",\n              "name": "Node 7",\n              "children": [\n                {\n                  "id": "8",\n                  "name": "Node 8"\n                },\n                {\n                  "id": "9",\n                  "name": "Node 9",\n                  "children": [\n                    {\n                      "id": "10",\n                      "name": "Node 10",\n                      "children": [\n                        {\n                          "id": "11",\n                          "name": "Node 11"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "12",\n      "name": "Node 12",\n      "children": [\n        {\n          "id": "13",\n          "name": "Node 13",\n          "children": [\n            {\n              "id": "14",\n              "name": "Node 14"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}',"src/pages/components/treeview/utils.js":"export const findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nexport const getAllNodeIds = (tree) => {\n  const allNodeIds = [];\n\n  const traverse = (node) => {\n    allNodeIds.push(node.id);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return allNodeIds;\n};"},raw:"import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeView,\n  TreeNode,\n  useColorMode,\n} from '@tonic-ui/react';\nimport React, { useState } from 'react';\nimport tree from '@/pages/components/treeview/data/tree.json';\nimport { findExpandableNodeIds, getAllNodeIds } from '@/pages/components/treeview/utils';\n\nconst allNodeIds = getAllNodeIds(tree);\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (childCount > 0) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = (childCount > 0) ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n          backgroundColor: 'transparent',\n        },\n      }}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const borderColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodeIds);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const onToggleNodes = (nodeIds) => {\n    setExpandedNodes(nodeIds);\n  };\n\n  const onSelectNodes = (nodeIds) => {\n    setSelectedNodes(nodeIds);\n  };\n\n  const handleClickExpandAll = (event) => {\n    setExpandedNodes(expandableNodeIds);\n  };\n\n  const handleClickCollapseAll = (event) => {\n    setExpandedNodes([]);\n  };\n\n  const handleClickSelectAll = (event) => {\n    setSelectedNodes(allNodeIds);\n  };\n\n  const handleClickUnselectAll = (event) => {\n    setSelectedNodes([]);\n  };\n\n  return (\n    <>\n      <ButtonGroup\n        variant=\"secondary\"\n        columnGap=\"2x\"\n        mb=\"3x\"\n      >\n        <Button\n          variant=\"secondary\"\n          disabled={expandedNodes.length === expandableNodeIds.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={selectedNodes.length === allNodeIds.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Stack spacing=\"2x\">\n        <Text>Expanded nodes: {expandedNodes.join(', ')}</Text>\n        <Text>Selected nodes: {selectedNodes.join(', ')}</Text>\n      </Stack>\n      <Divider my=\"4x\" />\n      <Box\n        minWidth={160}\n        maxWidth=\"40%\"\n      >\n        <Scrollbar\n          height={240}\n          overflowY=\"scroll\"\n          sx={{\n            border: 1,\n            borderColor,\n          }}\n        >\n          <TreeView\n            aria-label=\"controlled\"\n            isSelectable\n            isMultiSelectable\n            expandedNodes={expandedNodes}\n            selectedNodes={selectedNodes}\n            onToggleNodes={onToggleNodes}\n            onSelectNodes={onSelectNodes}\n          >\n            {renderTree(tree)}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(e.h3,{id:"resizable",children:["Resizable",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#resizable",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.h2,{id:"props",children:["Props",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(e.h3,{id:"treeview",children:["TreeView",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeview",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(e.table,{children:(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{align:"left",children:"Name"}),(0,t.jsx)(e.th,{align:"left",children:"Type"}),(0,t.jsx)(e.th,{align:"left",children:"Default"}),(0,t.jsx)(e.th,{align:"left",children:"Description"})]})})}),"\n",(0,t.jsxs)(e.h3,{id:"treenode",children:["TreeNode",(0,t.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treenode",children:(0,t.jsx)(e.svg,{children:(0,t.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(e.table,{children:(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{align:"left",children:"Name"}),(0,t.jsx)(e.th,{align:"left",children:"Type"}),(0,t.jsx)(e.th,{align:"left",children:"Default"}),(0,t.jsx)(e.th,{align:"left",children:"Description"})]})})})]})}var j=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,d.ah)(),n.components).wrapper;return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(A,n)})):A(n)}},54416:function(n,e,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/treeview",function(){return r(79231)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=54416)}),_N_E=n.O()}]);