(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7574],{58775:function(n,e,d){"use strict";d.d(e,{Z:function(){return y}});var o=d(67569),r=d(49427),t=d(5632),l=d(2784),a=d(79525),i=d(98485),s=d(71561),c=d(57431),m=d(66824),h=["size"];function N(){return(N=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var d=arguments[e];for(var o in d)Object.prototype.hasOwnProperty.call(d,o)&&(n[o]=d[o])}return n}).apply(this,arguments)}var p=(0,l.forwardRef)(function(n,e){var d=n.size,r=function(n,e){if(null==n)return{};var d,o,r=function(n,e){if(null==n)return{};var d,o,r={},t=Object.keys(n);for(o=0;o<t.length;o++)d=t[o],e.indexOf(d)>=0||(r[d]=n[d]);return r}(n,e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);for(o=0;o<t.length;o++)d=t[o],!(e.indexOf(d)>=0)&&Object.prototype.propertyIsEnumerable.call(n,d)&&(r[d]=n[d])}return r}(n,h);return l.createElement(o.SVGIcon,N({size:d,viewBox:"0 0 1024 1024"},r),l.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});p.displayName="CodeSandboxIcon";var u=d(30462);function x(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var d,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var t=[],l=!0,a=!1;try{for(r=r.call(n);!(l=(d=r.next()).done)&&(t.push(d.value),!e||t.length!==e);l=!0);}catch(n){a=!0,o=n}finally{try{l||null==r.return||r.return()}finally{if(a)throw o}}return t}}(n,e)||function(n,e){if(n){if("string"==typeof n)return f(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return f(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,o=Array(e);d<e;d++)o[d]=n[d];return o}var g={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},b=function(n){var e=n.component,d=n.file,h=n.sandbox,N=(0,t.useRouter)(),f=x((0,l.useReducer)(function(n){return!n},!1),2),b=f[0],y=f[1],T=x((0,o.useColorMode)(),1)[0],v={dark:s.y,light:s.q}[T],w=x((0,r.useToggle)(!1),2),S=w[0],j=w[1],E=(0,i.Z)(null==d?void 0:d.data),k=E.onCopy,I=E.hasCopied,C=(0,l.useCallback)(function(){k()},[k]),A=(0,l.useCallback)(function(){(0,c.b)(h)},[h]),O=(0,l.useCallback)(function(){y(),j(!1)},[y,j]);return l.createElement(a.nu,{code:null==d?void 0:d.data,disabled:!0,language:"jsx",theme:v},l.createElement(o.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[T],p:"4x"},l.createElement(o.Box,{fontSize:"sm",lineHeight:"sm"},l.createElement(l.Fragment,{key:b},l.createElement(e,null)))),l.createElement(o.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},l.createElement(u.Z,{"data-track":S?"CodeBlock|hide_source|".concat((0,m.Z)({path:N.pathname})):"CodeBlock|show_source|".concat((0,m.Z)({path:N.pathname})),onClick:j},l.createElement(o.Tooltip,{label:S?"Hide the source":"Show the source"},l.createElement(o.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),l.createElement(u.Z,{"data-track":"CodeBlock|copy_source|".concat((0,m.Z)({path:N.pathname})),onClick:C},l.createElement(o.Tooltip,{label:I?"Copied":"Copy the source"},l.createElement(o.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),l.createElement(u.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(N.pathname),onClick:A},l.createElement(o.Tooltip,{label:"Edit in CodeSandbox"},l.createElement(p,{size:{sm:"5x",md:"4x"}}))),l.createElement(u.Z,{"data-track":"CodeBlock|reset|".concat(N.pathname),onClick:O},l.createElement(o.Tooltip,{label:"Reset the demo"},l.createElement(o.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),l.createElement(o.Fade,{in:S},l.createElement(o.Collapse,{in:S,unmountOnExit:!0},l.createElement(a.uz,{style:g}))))};b.displayName="Demo";var y=b},37181:function(n,e,d){"use strict";d.r(e),d.d(e,{default:function(){return Q}});var o=d(52322),r=d(45392),t=d(58775),l=d(67569),a=d(5081),i=d(2784),s=function(n){var e=new Map;return!function n(d){(0,a.rY)(d).forEach(function(d){e.set(d.id,d),n(d.children)})}(n),e},c=function(n){var e=[];return!function n(d){(0,a.rY)(d).forEach(function(d){Array.isArray(d.children)&&d.children.length>0&&(e.push(d.id),n(d.children))})}(n),e},m=["node","nodeDepth"];function h(){return(h=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var d=arguments[e];for(var o in d)Object.prototype.hasOwnProperty.call(d,o)&&(n[o]=d[o])}return n}).apply(this,arguments)}function N(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var d,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var t=[],l=!0,a=!1;try{for(r=r.call(n);!(l=(d=r.next()).done)&&(t.push(d.value),!e||t.length!==e);l=!0);}catch(n){a=!0,o=n}finally{try{l||null==r.return||r.return()}finally{if(a)throw o}}return t}}(n,e)||function(n,e){if(n){if("string"==typeof n)return p(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return p(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,o=Array(e);d<e;d++)o[d]=n[d];return o}var u=[{id:"1",name:"Node 1",children:[{id:"1.1",name:"Node 1.1"},{id:"1.2",name:"Node 1.2",children:[],loadOnDemand:!0}]},{id:"2",name:"Node 2",children:[],loadOnDemand:!0},{id:"3",name:"Node 3",children:[],loadOnDemand:!0},{id:"4",name:"Node 4",children:[],loadOnDemand:!0},{id:"5",name:"Node 5",children:[],loadOnDemand:!0}],x=function n(e){var d=e.node,o=e.nodeDepth,r=void 0===o?0:o,t=function(n,e){if(null==n)return{};var d,o,r=function(n,e){if(null==n)return{};var d,o,r={},t=Object.keys(n);for(o=0;o<t.length;o++)d=t[o],e.indexOf(d)>=0||(r[d]=n[d]);return r}(n,e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);for(o=0;o<t.length;o++)d=t[o],!(e.indexOf(d)>=0)&&Object.prototype.propertyIsEnumerable.call(n,d)&&(r[d]=n[d])}return r}(e,m),s=(0,l.useTreeView)().getIsNodeExpanded,c=d.id,p=d.name,u=N((0,i.useState)((0,a.rY)(d.children)),2),x=u[0],f=u[1],g=N((0,i.useState)(!1),2),b=g[0],y=g[1],T=s(c),v=d.loadOnDemand&&0===x.length;return(0,i.useEffect)(function(){var n=null;return T&&v&&(y(!0),n=setTimeout(function(){f([{id:"".concat(c,".1"),name:"".concat(p,".1"),loadOnDemand:r<1},{id:"".concat(c,".2"),name:"".concat(p,".2")}]),y(!1)},500)),function(){n&&clearTimeout(n)}},[T,v,c,p,r]),i.createElement(l.TreeNode,h({nodeId:c,render:function(n){var e=n.isExpandable,o=n.isExpanded;n.isSelected,n.select;var r=e?o?"folder-open":"folder":"server",t=e?"yellow:50":"currentColor";return i.createElement(i.Fragment,null,i.createElement(l.Flex,{flex:"none",width:"6x"},e&&i.createElement(l.TreeNodeToggle,null,b?i.createElement(l.Spinner,{size:"xs"}):i.createElement(l.TreeNodeToggleIcon,null))),i.createElement(l.Icon,{icon:r,color:t,mr:"2x"}),i.createElement(l.OverflowTooltip,{label:d.name},d.name))}},t),v?i.createElement(l.Box,{key:"stub"}):x.map(function(e){return i.createElement(n,{key:e.id,node:e,nodeDepth:r+1})}))},f=function(){var n=N((0,l.useColorStyle)(),1)[0],e=N((0,i.useState)(u),1)[0],d=c(e),o=N((0,i.useState)(d),2),r=o[0],t=o[1],s=N((0,i.useState)([]),2),m=s[0],h=s[1],p=(0,i.useCallback)(function(n){t(n)},[]),f=(0,i.useCallback)(function(n){h(n)},[]);return i.createElement(l.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},i.createElement(l.Scrollbar,{height:240,overflowY:"scroll"},i.createElement(l.TreeView,{"aria-label":"lazy loading",isSelectable:!0,multiSelect:!0,expandedNodes:r,selectedNodes:m,onNodeToggle:p,onNodeSelect:f},(0,a.rY)(e).map(function(n){return i.createElement(x,{key:n.id,node:n})}))))},g=JSON.parse('[{"id":1,"name":"Node 1","children":[{"id":"1.1","name":"Node 2","children":[{"id":"1.1.1","name":"Node 3","children":[{"id":"1.1.1.1","name":"Node 4"}]},{"id":"1.1.2","name":"Node 5","children":[{"id":"1.1.2.1","name":"Node 6"}]},{"id":"1.1.3","name":"Node 7","children":[{"id":"1.1.3.1","name":"Node 8"},{"id":"1.1.3.2","name":"Node 9"},{"id":"1.1.3.3","name":"Node 10"}]},{"id":"1.1.4","name":"Node 11"},{"id":"1.1.5","name":"Node 12"}]},{"id":"1.2","name":"Node 13","children":[{"id":"1.2.1","name":"Node 14","children":[{"id":"1.2.1.1","name":"Node 15"}]}]},{"id":"1.3","name":"Node 16","children":[{"id":"1.3.1","name":"Node 17"},{"id":"1.3.2","name":"Node 18"},{"id":"1.3.3","name":"Node 19"},{"id":"1.3.4","name":"Node 20","children":[{"id":"1.3.4.1","name":"Node 21"},{"id":"1.3.4.2","name":"Node 22"},{"id":"1.3.4.3","name":"Node 23"}]},{"id":"1.3.5","name":"Node 24"}]},{"id":"1.4","name":"Node 25","children":[{"id":"1.4.1","name":"Node 26"},{"id":"1.4.2","name":"Node 27"},{"id":"1.4.3","name":"Node 28"}]}]},{"id":2,"name":"Node 29","children":[{"id":"2.1","name":"Node 30","children":[{"id":"2.1.1","name":"Node 31"},{"id":"2.1.2","name":"Node 32"},{"id":"2.1.3","name":"Node 33"}]},{"id":"2.2","name":"Node 34"},{"id":"2.3","name":"Node 35","children":[{"id":"2.3.1","name":"Node 36","children":[{"id":"2.3.1.1","name":"Node 37"},{"id":"2.3.1.2","name":"Node 38"}]}]},{"id":"2.4","name":"Node 39"}]},{"id":3,"name":"Node 40","children":[{"id":"3.1","name":"Node 41","children":[{"id":"3.1.1","name":"Node 42"},{"id":"3.1.2","name":"Node 43","children":[{"id":"3.1.2.1","name":"Node 44"},{"id":"3.1.2.2","name":"Node 45"},{"id":"3.1.2.3","name":"Node 46"},{"id":"3.1.2.4","name":"Node 47"}]},{"id":"3.1.3","name":"Node 48"}]},{"id":"3.2","name":"Node 49","children":[{"id":"3.2.1","name":"Node 50"},{"id":"3.2.2","name":"Node 51"}]},{"id":"3.3","name":"Node 52","children":[{"id":"3.3.1","name":"Node 53"},{"id":"3.3.2","name":"Node 54","children":[{"id":"3.3.2.1","name":"Node 55"}]}]},{"id":"3.4","name":"Node 56"},{"id":"3.5","name":"Node 57","children":[{"id":"3.5.1","name":"Node 58"},{"id":"3.5.2","name":"Node 59","children":[{"id":"3.5.2.1","name":"Node 60"},{"id":"3.5.2.2","name":"Node 61"}]}]}]},{"id":4,"name":"Node 62","children":[{"id":"4.1","name":"Node 63","children":[{"id":"4.1.1","name":"Node 64","children":[{"id":"4.1.1.1","name":"Node 65"},{"id":"4.1.1.2","name":"Node 66"}]},{"id":"4.1.2","name":"Node 67"},{"id":"4.1.3","name":"Node 68"},{"id":"4.1.4","name":"Node 69"}]}]},{"id":5,"name":"Node 70","children":[{"id":"5.1","name":"Node 71","children":[{"id":"5.1.1","name":"Node 72"},{"id":"5.1.2","name":"Node 73"},{"id":"5.1.3","name":"Node 74","children":[{"id":"5.1.3.1","name":"Node 75"}]},{"id":"5.1.4","name":"Node 76","children":[{"id":"5.1.4.1","name":"Node 77"},{"id":"5.1.4.2","name":"Node 78"}]}]},{"id":"5.2","name":"Node 79"},{"id":"5.3","name":"Node 80","children":[{"id":"5.3.1","name":"Node 81"}]},{"id":"5.4","name":"Node 82","children":[{"id":"5.4.1","name":"Node 83","children":[{"id":"5.4.1.1","name":"Node 84"}]},{"id":"5.4.2","name":"Node 85"}]},{"id":"5.5","name":"Node 86"}]},{"id":6,"name":"Node 87","children":[{"id":"6.1","name":"Node 88"},{"id":"6.2","name":"Node 89"},{"id":"6.3","name":"Node 90","children":[{"id":"6.3.1","name":"Node 91"},{"id":"6.3.2","name":"Node 92"},{"id":"6.3.3","name":"Node 93"}]},{"id":"6.4","name":"Node 94"}]},{"id":7,"name":"Node 95","children":[{"id":"7.1","name":"Node 96","children":[{"id":"7.1.1","name":"Node 97"},{"id":"7.1.2","name":"Node 98","children":[{"id":"7.1.2.1","name":"Node 99"},{"id":"7.1.2.2","name":"Node 100"}]}]}]}]'),b=["depth","node"];function y(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var d,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var t=[],l=!0,a=!1;try{for(r=r.call(n);!(l=(d=r.next()).done)&&(t.push(d.value),!e||t.length!==e);l=!0);}catch(n){a=!0,o=n}finally{try{l||null==r.return||r.return()}finally{if(a)throw o}}return t}}(n,e)||function(n,e){if(n){if("string"==typeof n)return T(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return T(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function T(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,o=Array(e);d<e;d++)o[d]=n[d];return o}var v=s(g),w=c(g),S=Array.from(v.keys())[0],j=function n(e){var d=e.depth,o=void 0===d?0:d,r=e.node;return function(n,e){if(null!=n){var d,o,r=function(n,e){if(null==n)return{};var d,o,r={},t=Object.keys(n);for(o=0;o<t.length;o++)d=t[o],e.indexOf(d)>=0||(r[d]=n[d]);return r}(n,e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);for(o=0;o<t.length;o++)d=t[o],!(e.indexOf(d)>=0)&&Object.prototype.propertyIsEnumerable.call(n,d)&&(r[d]=n[d])}}}(e,b),i.createElement(l.TreeNode,{key:r.id,nodeId:r.id,render:function(n){var e=n.isExpandable,d=n.isExpanded,o=e?d?"folder-open":"folder":"server",t=e?"yellow:50":"currentColor";return i.createElement(i.Fragment,null,i.createElement(l.Flex,{flex:"none",width:"6x"},e&&i.createElement(l.TreeNodeToggle,null,i.createElement(l.TreeNodeToggleIcon,null))),i.createElement(l.Icon,{icon:o,color:t,mr:"2x"}),i.createElement(l.OverflowTooltip,{label:r.name},r.name))}},(0,a.rY)(r.children).map(function(e){return i.createElement(n,{key:e.id,depth:o+1,node:e})}))},E=function(){var n,e=y((0,i.useState)(!1),2),d=e[0],o=e[1],r=y((0,l.useColorMode)(),1)[0],t=y((0,l.useColorStyle)(),1)[0],s={dark:"gray:50",light:"gray:50"}[r],c=(0,i.useRef)(),m=(0,i.useRef)(),h=y((0,i.useState)([S]),2),N=h[0],p=h[1],u=(0,i.useCallback)(function(n){p(n)},[]);return i.createElement(l.Flex,{ref:c,sx:{boxShadow:t.shadow.thick,cursor:d?"col-resize":"default"}},i.createElement(l.Box,{ref:m,sx:{flex:"none",width:240}},i.createElement(l.Scrollbar,{height:240,overflowX:"hidden",overflowY:"scroll"},i.createElement(l.TreeView,{"aria-label":"resizable tree view",defaultExpandedNodes:w,isSelectable:!0,isUnselectable:!1,selectedNodes:N,onNodeSelect:u},(0,a.rY)(g).map(function(n){return i.createElement(j,{key:n.id,node:n})})))),i.createElement(l.Flex,{sx:{flex:"auto",px:"3x",py:"2x",position:"relative"}},i.createElement(l.ResizeHandle,{onResizeStart:function(){o(!0)},onResizeEnd:function(){o(!1)},onResize:function(n){var e=n.clientX,d=m.current;if(d){var o=c.current.getBoundingClientRect(),r=o.left,t=o.width;e-r>=160&&e-r<=.4*t&&(d.style.width="".concat(e-r,"px"))}},sx:{position:"absolute",left:0,top:0,bottom:0,borderLeft:1,borderLeftColor:d?s:({dark:"gray:70",light:"gray:30"})[r],_hover:{borderLeftColor:s}}}),i.createElement(l.Box,null,null===(n=v.get(N[0]))||void 0===n?void 0:n.name)))},k=["depth","node"];function I(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var d,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var t=[],l=!0,a=!1;try{for(r=r.call(n);!(l=(d=r.next()).done)&&(t.push(d.value),!e||t.length!==e);l=!0);}catch(n){a=!0,o=n}finally{try{l||null==r.return||r.return()}finally{if(a)throw o}}return t}}(n,e)||function(n,e){if(n){if("string"==typeof n)return C(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return C(n,e)}}(n,e)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,o=Array(e);d<e;d++)o[d]=n[d];return o}var A=s(g),O=c(g),R=Array.from(A.keys()),F=function n(e){var d=e.depth,o=void 0===d?0:d,r=e.node;return function(n,e){if(null!=n){var d,o,r=function(n,e){if(null==n)return{};var d,o,r={},t=Object.keys(n);for(o=0;o<t.length;o++)d=t[o],e.indexOf(d)>=0||(r[d]=n[d]);return r}(n,e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);for(o=0;o<t.length;o++)d=t[o],!(e.indexOf(d)>=0)&&Object.prototype.propertyIsEnumerable.call(n,d)&&(r[d]=n[d])}}}(e,k),i.createElement(l.TreeNode,{key:r.id,nodeId:r.id,render:function(n){var e=n.isExpandable,d=n.isExpanded,o=n.isSelected,t=n.select,a=e?d?"folder-open":"folder":"server",s=e?"yellow:50":"currentColor";return i.createElement(i.Fragment,null,i.createElement(l.Flex,{flex:"none",width:"6x"},e&&i.createElement(l.TreeNodeToggle,null,i.createElement(l.TreeNodeToggleIcon,null))),i.createElement(l.Flex,{onClick:function(n){n.stopPropagation()},mr:"2x"},i.createElement(l.Checkbox,{checked:o,onChange:function(){t()}})),i.createElement(l.Icon,{icon:a,color:s,mr:"2x"}),i.createElement(l.OverflowTooltip,{label:r.name},r.name))},sx:{'&[aria-selected="true"] > *:first-of-type:not(:hover)':{backgroundColor:"transparent"}}},(0,a.rY)(r.children).map(function(e){return i.createElement(n,{key:e.id,depth:o+1,node:e})}))},B=function(){var n=I((0,l.useColorStyle)(),1)[0],e=I((0,i.useState)([]),2),d=e[0],o=e[1],r=I((0,i.useState)([]),2),t=r[0],s=r[1],c=(0,i.useCallback)(function(n){o(n)},[]),m=(0,i.useCallback)(function(n){s(n)},[]),h=(0,i.useCallback)(function(n){o(O)},[]),N=(0,i.useCallback)(function(n){o([])},[]),p=(0,i.useCallback)(function(n){s(R)},[]),u=(0,i.useCallback)(function(n){s([])},[]);return i.createElement(i.Fragment,null,i.createElement(l.ButtonGroup,{variant:"secondary",columnGap:"2x",mb:"4x"},i.createElement(l.Button,{variant:"secondary",disabled:d.length===O.length,onClick:h},"Expand all"),i.createElement(l.Button,{variant:"secondary",disabled:0===d.length,onClick:N},"Collapse all"),i.createElement(l.Button,{variant:"secondary",disabled:t.length===R.length,onClick:p},"Select all"),i.createElement(l.Button,{variant:"secondary",disabled:0===t.length,onClick:u},"Unselect all")),i.createElement(l.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:n.shadow.thick}},i.createElement(l.Scrollbar,{height:240,overflowY:"scroll"},i.createElement(l.TreeView,{"aria-label":"controlled tree view",isSelectable:!0,isUnselectable:!0,multiSelect:!0,expandedNodes:d,selectedNodes:t,onNodeToggle:c,onNodeSelect:m},(0,a.rY)(g).map(function(n){return i.createElement(F,{key:n.id,node:n})})))),i.createElement(l.Divider,{my:"4x"}),i.createElement(l.Stack,null,i.createElement(l.Flex,{alignItems:"flex-start",columnGap:"2x"},i.createElement(l.Text,{whiteSpace:"nowrap"},"Expanded nodes:"),i.createElement(l.Flex,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},d.map(function(n){var e;return i.createElement(l.Code,{key:n,whiteSpace:"nowrap"},null===(e=A.get(n))||void 0===e?void 0:e.name)}))),i.createElement(l.Flex,{alignItems:"flex-start",columnGap:"2x"},i.createElement(l.Text,{whiteSpace:"nowrap"},"Selected nodes:"),i.createElement(l.Flex,{flexWrap:"wrap",columnGap:"1x",rowGap:"1x"},t.map(function(n){var e;return i.createElement(l.Code,{key:n,whiteSpace:"nowrap"},null===(e=A.get(n))||void 0===e?void 0:e.name)})))))},M=["depth","node"];function D(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,o=Array(e);d<e;d++)o[d]=n[d];return o}var z=c(g),V=function n(e){var d=e.depth,o=void 0===d?0:d,r=e.node;return function(n,e){if(null!=n){var d,o,r=function(n,e){if(null==n)return{};var d,o,r={},t=Object.keys(n);for(o=0;o<t.length;o++)d=t[o],e.indexOf(d)>=0||(r[d]=n[d]);return r}(n,e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);for(o=0;o<t.length;o++)d=t[o],!(e.indexOf(d)>=0)&&Object.prototype.propertyIsEnumerable.call(n,d)&&(r[d]=n[d])}}}(e,M),i.createElement(l.TreeNode,{key:r.id,nodeId:r.id,render:function(n){var e=n.isExpandable,d=n.isExpanded,o=n.isSelected,t=n.select,a=e?d?"folder-open":"folder":"server",s=e?"yellow:50":"currentColor";return i.createElement(i.Fragment,null,i.createElement(l.Flex,{flex:"none",width:"6x"},e&&i.createElement(l.TreeNodeToggle,null,i.createElement(l.TreeNodeToggleIcon,null))),i.createElement(l.Flex,{onClick:function(n){n.stopPropagation()},mr:"2x"},i.createElement(l.Checkbox,{checked:o,onChange:function(){t()}})),i.createElement(l.Icon,{icon:a,color:s,mr:"2x"}),i.createElement(l.OverflowTooltip,{label:r.name},r.name))},sx:{'&[aria-selected="true"] > *:first-of-type:not(:hover)':{backgroundColor:"transparent"}}},(0,a.rY)(r.children).map(function(e){return i.createElement(n,{key:e.id,depth:o+1,node:e})}))},W=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,l.useColorStyle)())||function(n,e){var d,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var t=[],l=!0,a=!1;try{for(r=r.call(n);!(l=(d=r.next()).done)&&(t.push(d.value),!e||t.length!==e);l=!0);}catch(n){a=!0,o=n}finally{try{l||null==r.return||r.return()}finally{if(a)throw o}}return t}}(n,1)||function(n,e){if(n){if("string"==typeof n)return D(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return D(n,e)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return i.createElement(l.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:e.shadow.thick}},i.createElement(l.Scrollbar,{height:240,overflowY:"scroll"},i.createElement(l.TreeView,{"aria-label":"multi-selection",defaultExpandedNodes:z,isSelectable:!0,isUnselectable:!0,multiSelect:!0},(0,a.rY)(g).map(function(n){return i.createElement(V,{key:n.id,node:n})}))))},U=["depth","node"];function L(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,o=Array(e);d<e;d++)o[d]=n[d];return o}var Y=c(g),P=function n(e){var d=e.depth,o=void 0===d?0:d,r=e.node;return function(n,e){if(null!=n){var d,o,r=function(n,e){if(null==n)return{};var d,o,r={},t=Object.keys(n);for(o=0;o<t.length;o++)d=t[o],e.indexOf(d)>=0||(r[d]=n[d]);return r}(n,e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);for(o=0;o<t.length;o++)d=t[o],!(e.indexOf(d)>=0)&&Object.prototype.propertyIsEnumerable.call(n,d)&&(r[d]=n[d])}}}(e,U),i.createElement(l.TreeNode,{key:r.id,nodeId:r.id,render:function(n){var e=n.isExpandable,d=n.isExpanded,o=e?d?"folder-open":"folder":"server",t=e?"yellow:50":"currentColor";return i.createElement(i.Fragment,null,i.createElement(l.Flex,{flex:"none",width:"6x"},e&&i.createElement(l.TreeNodeToggle,null,i.createElement(l.TreeNodeToggleIcon,null))),i.createElement(l.Icon,{icon:o,color:t,mr:"2x"}),i.createElement(l.OverflowTooltip,{label:r.name},r.name))}},(0,a.rY)(r.children).map(function(e){return i.createElement(n,{key:e.id,depth:o+1,node:e})}))},G=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,l.useColorStyle)())||function(n,e){var d,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var t=[],l=!0,a=!1;try{for(r=r.call(n);!(l=(d=r.next()).done)&&(t.push(d.value),!e||t.length!==e);l=!0);}catch(n){a=!0,o=n}finally{try{l||null==r.return||r.return()}finally{if(a)throw o}}return t}}(n,1)||function(n,e){if(n){if("string"==typeof n)return L(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return L(n,e)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return i.createElement(l.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:e.shadow.thick}},i.createElement(l.Scrollbar,{height:240,overflowY:"scroll"},i.createElement(l.TreeView,{"aria-label":"multi-selection",defaultExpandedNodes:Y,isSelectable:!0,isUnselectable:!0,multiSelect:!0},(0,a.rY)(g).map(function(n){return i.createElement(P,{key:n.id,node:n})}))))},H=["depth","node"];function _(n,e){(null==e||e>n.length)&&(e=n.length);for(var d=0,o=Array(e);d<e;d++)o[d]=n[d];return o}var $=c(g),X=function n(e){var d=e.depth,o=void 0===d?0:d,r=e.node;return function(n,e){if(null!=n){var d,o,r=function(n,e){if(null==n)return{};var d,o,r={},t=Object.keys(n);for(o=0;o<t.length;o++)d=t[o],e.indexOf(d)>=0||(r[d]=n[d]);return r}(n,e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);for(o=0;o<t.length;o++)d=t[o],!(e.indexOf(d)>=0)&&Object.prototype.propertyIsEnumerable.call(n,d)&&(r[d]=n[d])}}}(e,H),i.createElement(l.TreeNode,{key:r.id,nodeId:r.id,render:function(n){var e=n.isExpandable;return i.createElement(i.Fragment,null,i.createElement(l.Flex,{flex:"none",width:"6x"},e&&i.createElement(l.TreeNodeToggle,null,i.createElement(l.TreeNodeToggleIcon,null))),i.createElement(l.OverflowTooltip,{label:r.name},r.name))}},(0,a.rY)(r.children).map(function(e){return i.createElement(n,{key:e.id,depth:o+1,node:e})}))},Z=function(){var n,e=(function(n){if(Array.isArray(n))return n}(n=(0,l.useColorStyle)())||function(n,e){var d,o,r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var t=[],l=!0,a=!1;try{for(r=r.call(n);!(l=(d=r.next()).done)&&(t.push(d.value),!e||t.length!==e);l=!0);}catch(n){a=!0,o=n}finally{try{l||null==r.return||r.return()}finally{if(a)throw o}}return t}}(n,1)||function(n,e){if(n){if("string"==typeof n)return _(n,e);var d=Object.prototype.toString.call(n).slice(8,-1);if("Object"===d&&n.constructor&&(d=n.constructor.name),"Map"===d||"Set"===d)return Array.from(n);if("Arguments"===d||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(d))return _(n,e)}}(n,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return i.createElement(l.Box,{sx:{minWidth:160,maxWidth:"40%",boxShadow:e.shadow.thick}},i.createElement(l.Scrollbar,{height:240,overflowY:"scroll"},i.createElement(l.TreeView,{"aria-label":"basic tree view",defaultExpandedNodes:$,isSelectable:!0,isUnselectable:!0},(0,a.rY)(g).map(function(n){return i.createElement(X,{key:n.id,node:n})}))))};function q(n){var e=Object.assign({div:"div",h1:"h1",p:"p",code:"code",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",h3:"h3",ul:"ul",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,r.ah)(),n.components);return(0,o.jsxs)(e.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n","\n",(0,o.jsx)(e.h1,{id:"tree-view",children:"Tree View"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"TreeView"})," component allows you to present information in a hierarchical, nested list format. It is particularly useful for visualizing structures like files and folders in a file system, categories and items in a list, or any other kind of nested arrangement that requires exploration."]}),"\n",(0,o.jsxs)(e.h2,{id:"import",children:["Import",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"import {\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useTreeNode,\n  useTreeView,\n} from '@tonic-ui/react';\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"usage",children:["Usage",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.h3,{id:"basic-tree-view",children:["Basic tree view",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-tree-view",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.p,{children:["You can enable node selection and unselection by setting ",(0,o.jsx)(e.code,{children:"isSelectable"})," and ",(0,o.jsx)(e.code,{children:"isUnselectable"})," props to ",(0,o.jsx)(e.code,{children:"true"}),"."]}),"\n",(0,o.jsx)(t.Z,{component:Z,file:{data:"import {\n  Box,\n  Flex,\n  OverflowTooltip,\n  Scrollbar,\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from './data/tree-nodes.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeNodeRender = ({\n  depth = 0,\n  node,\n  ...rest\n}) => {\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable }) => (\n        <>\n          <Flex\n            flex=\"none\"\n            width=\"6x\"\n          >\n            {isExpandable && (\n              <TreeNodeToggle>\n                <TreeNodeToggleIcon />\n              </TreeNodeToggle>\n            )}\n          </Flex>\n          <OverflowTooltip label={node.name}>\n            {node.name}\n          </OverflowTooltip>\n        </>\n      )}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeNodeRender\n          key={node.id}\n          depth={depth + 1}\n          node={node}\n        />\n      ))}\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"basic tree view\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeNodeRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": 1,\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "name": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "name": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "name": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "name": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "name": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "name": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "name": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "name": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "name": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "name": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "name": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "name": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "name": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "name": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "name": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "name": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "name": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "name": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "name": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "name": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 2,\n    "name": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "name": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "name": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "name": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "name": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "name": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "name": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": 3,\n    "name": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "name": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "name": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "name": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "name": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "name": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "name": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "name": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "name": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "name": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "name": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 4,\n    "name": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 5,\n    "name": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "name": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "name": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "name": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "name": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "name": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "name": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "name": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "name": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "name": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "name": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": 6,\n    "name": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "name": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "name": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "name": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": 7,\n    "name": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Flex,\n  OverflowTooltip,\n  Scrollbar,\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeNodeRender = ({\n  depth = 0,\n  node,\n  ...rest\n}) => {\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable }) => (\n        <>\n          <Flex\n            flex=\"none\"\n            width=\"6x\"\n          >\n            {isExpandable && (\n              <TreeNodeToggle>\n                <TreeNodeToggleIcon />\n              </TreeNodeToggle>\n            )}\n          </Flex>\n          <OverflowTooltip label={node.name}>\n            {node.name}\n          </OverflowTooltip>\n        </>\n      )}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeNodeRender\n          key={node.id}\n          depth={depth + 1}\n          node={node}\n        />\n      ))}\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"basic tree view\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeNodeRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(e.h3,{id:"multi-selection",children:["Multi-selection",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#multi-selection",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.p,{children:["To enable the selection of multiple nodes, use the ",(0,o.jsx)(e.code,{children:"multiSelect"})," prop. Refer to the ",(0,o.jsx)(e.a,{href:"#accessibility",children:"Accessibility"})," section for additional details."]}),"\n",(0,o.jsx)(t.Z,{component:G,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from './data/tree-nodes.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeNodeRender = ({\n  depth = 0,\n  node,\n  ...rest\n}) => {\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeNodeToggle>\n                  <TreeNodeToggleIcon />\n                </TreeNodeToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeNodeRender\n          key={node.id}\n          depth={depth + 1}\n          node={node}\n        />\n      ))}\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"multi-selection\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeNodeRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": 1,\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "name": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "name": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "name": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "name": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "name": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "name": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "name": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "name": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "name": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "name": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "name": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "name": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "name": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "name": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "name": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "name": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "name": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "name": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "name": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "name": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 2,\n    "name": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "name": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "name": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "name": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "name": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "name": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "name": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": 3,\n    "name": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "name": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "name": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "name": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "name": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "name": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "name": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "name": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "name": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "name": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "name": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 4,\n    "name": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 5,\n    "name": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "name": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "name": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "name": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "name": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "name": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "name": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "name": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "name": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "name": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "name": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": 6,\n    "name": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "name": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "name": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "name": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": 7,\n    "name": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeNodeRender = ({\n  depth = 0,\n  node,\n  ...rest\n}) => {\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeNodeToggle>\n                  <TreeNodeToggleIcon />\n                </TreeNodeToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeNodeRender\n          key={node.id}\n          depth={depth + 1}\n          node={node}\n        />\n      ))}\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"multi-selection\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeNodeRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsx)(e.p,{children:"When using checkboxes for multi-selection, consider hiding the background color of the tree node when the checkbox is selected to enhance accessibility."}),"\n",(0,o.jsx)(e.pre,{disabled:!0,children:(0,o.jsx)(e.code,{className:"language-jsx",children:"<TreeNode\n  key={node.id}\n  nodeId={node.id}\n  render={({ isExpanded, isSelected, select }) => {\n    // Your tree node render function\n  }}\n  sx={{\n    // Hide the background color of the tree node when the checkbox is selected\n    '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n      backgroundColor: 'transparent',\n    },\n  }}\n/>\n"})}),"\n",(0,o.jsx)(t.Z,{component:W,file:{data:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from './data/tree-nodes.json';\nimport { findExpandableNodeIds } from './utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeNodeRender = ({\n  depth = 0,\n  node,\n  ...rest\n}) => {\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeNodeToggle>\n                  <TreeNodeToggleIcon />\n                </TreeNodeToggle>\n              )}\n            </Flex>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n          backgroundColor: 'transparent',\n        },\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeNodeRender\n          key={node.id}\n          depth={depth + 1}\n          node={node}\n        />\n      ))}\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"multi-selection\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeNodeRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": 1,\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "name": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "name": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "name": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "name": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "name": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "name": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "name": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "name": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "name": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "name": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "name": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "name": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "name": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "name": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "name": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "name": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "name": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "name": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "name": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "name": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 2,\n    "name": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "name": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "name": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "name": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "name": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "name": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "name": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": 3,\n    "name": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "name": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "name": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "name": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "name": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "name": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "name": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "name": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "name": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "name": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "name": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 4,\n    "name": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 5,\n    "name": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "name": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "name": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "name": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "name": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "name": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "name": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "name": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "name": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "name": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "name": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": 6,\n    "name": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "name": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "name": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "name": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": 7,\n    "name": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Checkbox,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React from 'react';\nimport treeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport { findExpandableNodeIds } from '@/pages/components/tree-view/utils';\n\nconst expandableNodeIds = findExpandableNodeIds(treeNodes);\n\nconst TreeNodeRender = ({\n  depth = 0,\n  node,\n  ...rest\n}) => {\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeNodeToggle>\n                  <TreeNodeToggleIcon />\n                </TreeNodeToggle>\n              )}\n            </Flex>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr=\"2x\"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        '&[aria-selected=\"true\"] > *:first-of-type:not(:hover)': {\n          backgroundColor: 'transparent',\n        },\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeNodeRender\n          key={node.id}\n          depth={depth + 1}\n          node={node}\n        />\n      ))}\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"multi-selection\"\n          defaultExpandedNodes={expandableNodeIds}\n          isSelectable\n          isUnselectable\n          multiSelect\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeNodeRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(e.h3,{id:"controlled-tree-view",children:["Controlled tree view",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#controlled-tree-view",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(t.Z,{component:B,file:{data:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { ensureArray } from \'ensure-type\';\nimport React, { useCallback, useState } from \'react\';\nimport treeNodes from \'./data/tree-nodes.json\';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from \'./utils\';\n\nconst treeMap = buildTreeMap(treeNodes);\nconst expandableNodes = findExpandableNodeIds(treeNodes);\nconst allNodes = Array.from(treeMap.keys());\n\nconst TreeNodeRender = ({\n  depth = 0,\n  node,\n  ...rest\n}) => {\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? \'folder-open\' : \'folder\';\n          }\n          return \'server\';\n        })();\n        const iconColor = isExpandable ? \'yellow:50\' : \'currentColor\';\n\n        return (\n          <>\n            <Flex\n              flex="none"\n              width="6x"\n            >\n              {isExpandable && (\n                <TreeNodeToggle>\n                  <TreeNodeToggleIcon />\n                </TreeNodeToggle>\n              )}\n            </Flex>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr="2x"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr="2x" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        \'&[aria-selected="true"] > *:first-of-type:not(:hover)\': {\n          backgroundColor: \'transparent\',\n        },\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeNodeRender\n          key={node.id}\n          depth={depth + 1}\n          node={node}\n        />\n      ))}\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [expandedNodes, setExpandedNodes] = useState([]);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodes(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodes(expandableNodes);\n  }, []);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodes([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodes(allNodes);\n  }, []);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodes([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="4x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === expandableNodes.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Box\n        sx={{\n          minWidth: 160,\n          maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="scroll"\n        >\n          <TreeView\n            aria-label="controlled tree view"\n            isSelectable\n            isUnselectable\n            multiSelect\n            expandedNodes={expandedNodes}\n            selectedNodes={selectedNodes}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeNodeRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Divider my="4x" />\n      <Stack>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": 1,\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "name": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "name": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "name": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "name": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "name": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "name": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "name": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "name": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "name": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "name": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "name": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "name": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "name": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "name": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "name": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "name": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "name": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "name": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "name": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "name": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 2,\n    "name": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "name": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "name": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "name": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "name": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "name": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "name": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": 3,\n    "name": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "name": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "name": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "name": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "name": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "name": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "name": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "name": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "name": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "name": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "name": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 4,\n    "name": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 5,\n    "name": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "name": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "name": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "name": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "name": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "name": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "name": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "name": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "name": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "name": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "name": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": 6,\n    "name": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "name": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "name": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "name": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": 7,\n    "name": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:'import {\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { ensureArray } from \'ensure-type\';\nimport React, { useCallback, useState } from \'react\';\nimport treeNodes from \'@/pages/components/tree-view/data/tree-nodes.json\';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from \'@/pages/components/tree-view/utils\';\n\nconst treeMap = buildTreeMap(treeNodes);\nconst expandableNodes = findExpandableNodeIds(treeNodes);\nconst allNodes = Array.from(treeMap.keys());\n\nconst TreeNodeRender = ({\n  depth = 0,\n  node,\n  ...rest\n}) => {\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? \'folder-open\' : \'folder\';\n          }\n          return \'server\';\n        })();\n        const iconColor = isExpandable ? \'yellow:50\' : \'currentColor\';\n\n        return (\n          <>\n            <Flex\n              flex="none"\n              width="6x"\n            >\n              {isExpandable && (\n                <TreeNodeToggle>\n                  <TreeNodeToggleIcon />\n                </TreeNodeToggle>\n              )}\n            </Flex>\n            <Flex\n              onClick={(event) => {\n                // Prevent event propagation when clicking the checkbox\n                event.stopPropagation();\n              }}\n              mr="2x"\n            >\n              <Checkbox\n                checked={isSelected}\n                onChange={() => {\n                  select();\n                }}\n              />\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr="2x" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      sx={{\n        // Hide the background color of the tree node when the checkbox is selected\n        \'&[aria-selected="true"] > *:first-of-type:not(:hover)\': {\n          backgroundColor: \'transparent\',\n        },\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeNodeRender\n          key={node.id}\n          depth={depth + 1}\n          node={node}\n        />\n      ))}\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [expandedNodes, setExpandedNodes] = useState([]);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodes(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  const handleClickExpandAll = useCallback((event) => {\n    setExpandedNodes(expandableNodes);\n  }, []);\n\n  const handleClickCollapseAll = useCallback((event) => {\n    setExpandedNodes([]);\n  }, []);\n\n  const handleClickSelectAll = useCallback((event) => {\n    setSelectedNodes(allNodes);\n  }, []);\n\n  const handleClickUnselectAll = useCallback((event) => {\n    setSelectedNodes([]);\n  }, []);\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="4x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === expandableNodes.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === allNodes.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Box\n        sx={{\n          minWidth: 160,\n          maxWidth: \'40%\',\n          boxShadow: colorStyle.shadow.thick,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowY="scroll"\n        >\n          <TreeView\n            aria-label="controlled tree view"\n            isSelectable\n            isUnselectable\n            multiSelect\n            expandedNodes={expandedNodes}\n            selectedNodes={selectedNodes}\n            onNodeToggle={handleToggle}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeNodeRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Divider my="4x" />\n      <Stack>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Expanded nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {expandedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex\n          alignItems="flex-start"\n          columnGap="2x"\n        >\n          <Text whiteSpace="nowrap">\n            Selected nodes:\n          </Text>\n          <Flex\n            flexWrap="wrap"\n            columnGap="1x"\n            rowGap="1x"\n          >\n            {selectedNodes.map(nodeId => (\n              <Code key={nodeId} whiteSpace="nowrap">\n                {treeMap.get(nodeId)?.name}\n              </Code>\n            ))}\n          </Flex>\n        </Flex>\n      </Stack>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(e.h3,{id:"resizable-tree-view",children:["Resizable tree view",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#resizable-tree-view",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.p,{children:["In typical use cases, you can resize the tree view with a minimum width of ",(0,o.jsx)(e.code,{children:"160px"})," and a maximum width of ",(0,o.jsx)(e.code,{children:"40%"})," of the display area. Customize the width and height as needed to match your design and layout requirements."]}),"\n",(0,o.jsx)(t.Z,{component:E,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useRef, useState } from 'react';\nimport treeNodes from './data/tree-nodes.json';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from './utils';\n\nconst treeMap = buildTreeMap(treeNodes);\nconst expandableNodes = findExpandableNodeIds(treeNodes);\nconst allNodes = Array.from(treeMap.keys());\nconst defaultSelectedNode = allNodes[0];\n\nconst TreeNodeRender = ({\n  depth = 0,\n  node,\n  ...rest\n}) => {\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeNodeToggle>\n                  <TreeNodeToggleIcon />\n                </TreeNodeToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeNodeRender\n          key={node.id}\n          depth={depth + 1}\n          node={node}\n        />\n      ))}\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodes, setSelectedNodes] = useState([defaultSelectedNode]);\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 240,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"scroll\"\n        >\n          <TreeView\n            aria-label=\"resizable tree view\"\n            defaultExpandedNodes={expandableNodes}\n            isSelectable\n            isUnselectable={false}\n            selectedNodes={selectedNodes}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeNodeRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodes[0])?.name}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/data/tree-nodes.json":'[\n  {\n    "id": 1,\n    "name": "Node 1",\n    "children": [\n      {\n        "id": "1.1",\n        "name": "Node 2",\n        "children": [\n          {\n            "id": "1.1.1",\n            "name": "Node 3",\n            "children": [\n              {\n                "id": "1.1.1.1",\n                "name": "Node 4"\n              }\n            ]\n          },\n          {\n            "id": "1.1.2",\n            "name": "Node 5",\n            "children": [\n              {\n                "id": "1.1.2.1",\n                "name": "Node 6"\n              }\n            ]\n          },\n          {\n            "id": "1.1.3",\n            "name": "Node 7",\n            "children": [\n              {\n                "id": "1.1.3.1",\n                "name": "Node 8"\n              },\n              {\n                "id": "1.1.3.2",\n                "name": "Node 9"\n              },\n              {\n                "id": "1.1.3.3",\n                "name": "Node 10"\n              }\n            ]\n          },\n          {\n            "id": "1.1.4",\n            "name": "Node 11"\n          },\n          {\n            "id": "1.1.5",\n            "name": "Node 12"\n          }\n        ]\n      },\n      {\n        "id": "1.2",\n        "name": "Node 13",\n        "children": [\n          {\n            "id": "1.2.1",\n            "name": "Node 14",\n            "children": [\n              {\n                "id": "1.2.1.1",\n                "name": "Node 15"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "1.3",\n        "name": "Node 16",\n        "children": [\n          {\n            "id": "1.3.1",\n            "name": "Node 17"\n          },\n          {\n            "id": "1.3.2",\n            "name": "Node 18"\n          },\n          {\n            "id": "1.3.3",\n            "name": "Node 19"\n          },\n          {\n            "id": "1.3.4",\n            "name": "Node 20",\n            "children": [\n              {\n                "id": "1.3.4.1",\n                "name": "Node 21"\n              },\n              {\n                "id": "1.3.4.2",\n                "name": "Node 22"\n              },\n              {\n                "id": "1.3.4.3",\n                "name": "Node 23"\n              }\n            ]\n          },\n          {\n            "id": "1.3.5",\n            "name": "Node 24"\n          }\n        ]\n      },\n      {\n        "id": "1.4",\n        "name": "Node 25",\n        "children": [\n          {\n            "id": "1.4.1",\n            "name": "Node 26"\n          },\n          {\n            "id": "1.4.2",\n            "name": "Node 27"\n          },\n          {\n            "id": "1.4.3",\n            "name": "Node 28"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 2,\n    "name": "Node 29",\n    "children": [\n      {\n        "id": "2.1",\n        "name": "Node 30",\n        "children": [\n          {\n            "id": "2.1.1",\n            "name": "Node 31"\n          },\n          {\n            "id": "2.1.2",\n            "name": "Node 32"\n          },\n          {\n            "id": "2.1.3",\n            "name": "Node 33"\n          }\n        ]\n      },\n      {\n        "id": "2.2",\n        "name": "Node 34"\n      },\n      {\n        "id": "2.3",\n        "name": "Node 35",\n        "children": [\n          {\n            "id": "2.3.1",\n            "name": "Node 36",\n            "children": [\n              {\n                "id": "2.3.1.1",\n                "name": "Node 37"\n              },\n              {\n                "id": "2.3.1.2",\n                "name": "Node 38"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "2.4",\n        "name": "Node 39"\n      }\n    ]\n  },\n  {\n    "id": 3,\n    "name": "Node 40",\n    "children": [\n      {\n        "id": "3.1",\n        "name": "Node 41",\n        "children": [\n          {\n            "id": "3.1.1",\n            "name": "Node 42"\n          },\n          {\n            "id": "3.1.2",\n            "name": "Node 43",\n            "children": [\n              {\n                "id": "3.1.2.1",\n                "name": "Node 44"\n              },\n              {\n                "id": "3.1.2.2",\n                "name": "Node 45"\n              },\n              {\n                "id": "3.1.2.3",\n                "name": "Node 46"\n              },\n              {\n                "id": "3.1.2.4",\n                "name": "Node 47"\n              }\n            ]\n          },\n          {\n            "id": "3.1.3",\n            "name": "Node 48"\n          }\n        ]\n      },\n      {\n        "id": "3.2",\n        "name": "Node 49",\n        "children": [\n          {\n            "id": "3.2.1",\n            "name": "Node 50"\n          },\n          {\n            "id": "3.2.2",\n            "name": "Node 51"\n          }\n        ]\n      },\n      {\n        "id": "3.3",\n        "name": "Node 52",\n        "children": [\n          {\n            "id": "3.3.1",\n            "name": "Node 53"\n          },\n          {\n            "id": "3.3.2",\n            "name": "Node 54",\n            "children": [\n              {\n                "id": "3.3.2.1",\n                "name": "Node 55"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "3.4",\n        "name": "Node 56"\n      },\n      {\n        "id": "3.5",\n        "name": "Node 57",\n        "children": [\n          {\n            "id": "3.5.1",\n            "name": "Node 58"\n          },\n          {\n            "id": "3.5.2",\n            "name": "Node 59",\n            "children": [\n              {\n                "id": "3.5.2.1",\n                "name": "Node 60"\n              },\n              {\n                "id": "3.5.2.2",\n                "name": "Node 61"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 4,\n    "name": "Node 62",\n    "children": [\n      {\n        "id": "4.1",\n        "name": "Node 63",\n        "children": [\n          {\n            "id": "4.1.1",\n            "name": "Node 64",\n            "children": [\n              {\n                "id": "4.1.1.1",\n                "name": "Node 65"\n              },\n              {\n                "id": "4.1.1.2",\n                "name": "Node 66"\n              }\n            ]\n          },\n          {\n            "id": "4.1.2",\n            "name": "Node 67"\n          },\n          {\n            "id": "4.1.3",\n            "name": "Node 68"\n          },\n          {\n            "id": "4.1.4",\n            "name": "Node 69"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    "id": 5,\n    "name": "Node 70",\n    "children": [\n      {\n        "id": "5.1",\n        "name": "Node 71",\n        "children": [\n          {\n            "id": "5.1.1",\n            "name": "Node 72"\n          },\n          {\n            "id": "5.1.2",\n            "name": "Node 73"\n          },\n          {\n            "id": "5.1.3",\n            "name": "Node 74",\n            "children": [\n              {\n                "id": "5.1.3.1",\n                "name": "Node 75"\n              }\n            ]\n          },\n          {\n            "id": "5.1.4",\n            "name": "Node 76",\n            "children": [\n              {\n                "id": "5.1.4.1",\n                "name": "Node 77"\n              },\n              {\n                "id": "5.1.4.2",\n                "name": "Node 78"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        "id": "5.2",\n        "name": "Node 79"\n      },\n      {\n        "id": "5.3",\n        "name": "Node 80",\n        "children": [\n          {\n            "id": "5.3.1",\n            "name": "Node 81"\n          }\n        ]\n      },\n      {\n        "id": "5.4",\n        "name": "Node 82",\n        "children": [\n          {\n            "id": "5.4.1",\n            "name": "Node 83",\n            "children": [\n              {\n                "id": "5.4.1.1",\n                "name": "Node 84"\n              }\n            ]\n          },\n          {\n            "id": "5.4.2",\n            "name": "Node 85"\n          }\n        ]\n      },\n      {\n        "id": "5.5",\n        "name": "Node 86"\n      }\n    ]\n  },\n  {\n    "id": 6,\n    "name": "Node 87",\n    "children": [\n      {\n        "id": "6.1",\n        "name": "Node 88"\n      },\n      {\n        "id": "6.2",\n        "name": "Node 89"\n      },\n      {\n        "id": "6.3",\n        "name": "Node 90",\n        "children": [\n          {\n            "id": "6.3.1",\n            "name": "Node 91"\n          },\n          {\n            "id": "6.3.2",\n            "name": "Node 92"\n          },\n          {\n            "id": "6.3.3",\n            "name": "Node 93"\n          }\n        ]\n      },\n      {\n        "id": "6.4",\n        "name": "Node 94"\n      }\n    ]\n  },\n  {\n    "id": 7,\n    "name": "Node 95",\n    "children": [\n      {\n        "id": "7.1",\n        "name": "Node 96",\n        "children": [\n          {\n            "id": "7.1.1",\n            "name": "Node 97"\n          },\n          {\n            "id": "7.1.2",\n            "name": "Node 98",\n            "children": [\n              {\n                "id": "7.1.2.1",\n                "name": "Node 99"\n              },\n              {\n                "id": "7.1.2.2",\n                "name": "Node 100"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]',"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  ResizeHandle,\n  Scrollbar,\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useRef, useState } from 'react';\nimport treeNodes from '@/pages/components/tree-view/data/tree-nodes.json';\nimport {\n  buildTreeMap,\n  findExpandableNodeIds,\n} from '@/pages/components/tree-view/utils';\n\nconst treeMap = buildTreeMap(treeNodes);\nconst expandableNodes = findExpandableNodeIds(treeNodes);\nconst allNodes = Array.from(treeMap.keys());\nconst defaultSelectedNode = allNodes[0];\n\nconst TreeNodeRender = ({\n  depth = 0,\n  node,\n  ...rest\n}) => {\n  return (\n    <TreeNode\n      key={node.id}\n      nodeId={node.id}\n      render={({ isExpandable, isExpanded }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeNodeToggle>\n                  <TreeNodeToggleIcon />\n                </TreeNodeToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n    >\n      {ensureArray(node.children).map(node => (\n        <TreeNodeRender\n          key={node.id}\n          depth={depth + 1}\n          node={node}\n        />\n      ))}\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const dividerColor = {\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  const highlightedDividerColor = {\n    dark: 'gray:50',\n    light: 'gray:50',\n  }[colorMode];\n  const containerRef = useRef();\n  const resizableRef = useRef();\n  const [selectedNodes, setSelectedNodes] = useState([defaultSelectedNode]);\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  return (\n    <Flex\n      ref={containerRef}\n      sx={{\n        boxShadow: colorStyle.shadow.thick,\n        cursor: isResizing ? 'col-resize' : 'default',\n      }}\n    >\n      <Box\n        ref={resizableRef}\n        sx={{\n          flex: 'none',\n          width: 240,\n        }}\n      >\n        <Scrollbar\n          height={240}\n          overflowX=\"hidden\"\n          overflowY=\"scroll\"\n        >\n          <TreeView\n            aria-label=\"resizable tree view\"\n            defaultExpandedNodes={expandableNodes}\n            isSelectable\n            isUnselectable={false}\n            selectedNodes={selectedNodes}\n            onNodeSelect={handleSelect}\n          >\n            {ensureArray(treeNodes).map(node => (\n              <TreeNodeRender\n                key={node.id}\n                node={node}\n              />\n            ))}\n          </TreeView>\n        </Scrollbar>\n      </Box>\n      <Flex\n        sx={{\n          flex: 'auto',\n          px: '3x',\n          py: '2x',\n          position: 'relative',\n        }}\n      >\n        <ResizeHandle\n          onResizeStart={() => {\n            setIsResizing(true);\n          }}\n          onResizeEnd={() => {\n            setIsResizing(false);\n          }}\n          onResize={({ clientX }) => {\n            const el = resizableRef.current;\n            if (!el) {\n              return;\n            }\n\n            const { left: parentLeft, width: parentWidth } = containerRef.current.getBoundingClientRect();\n            const minWidth = 160;\n            const maxWidth = parentWidth * 0.4;\n            const canDrag = clientX - parentLeft >= minWidth && clientX - parentLeft <= maxWidth;\n            if (canDrag) {\n              const nextWidth = clientX - parentLeft;\n              el.style.width = `${nextWidth}px`;\n            }\n          }}\n          sx={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            borderLeft: 1,\n            borderLeftColor: isResizing ? highlightedDividerColor : dividerColor,\n            _hover: {\n              borderLeftColor: highlightedDividerColor,\n            },\n          }}\n        />\n        <Box>\n          {treeMap.get(selectedNodes[0])?.name}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(e.h3,{id:"load-on-demand",children:["Load on demand",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#load-on-demand",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(t.Z,{component:f,file:{data:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Spinner,\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useColorStyle,\n  useTreeView,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport {\n  findExpandableNodeIds,\n} from './utils';\n\nconst initialTreeNodes = [\n  {\n    id: '1',\n    name: 'Node 1',\n    children: [\n      {\n        id: '1.1',\n        name: 'Node 1.1',\n      },\n      {\n        id: '1.2',\n        name: 'Node 1.2',\n        children: [],\n        loadOnDemand: true,\n      },\n    ],\n  },\n  {\n    id: '2',\n    name: 'Node 2',\n    children: [],\n    loadOnDemand: true,\n  },\n  {\n    id: '3',\n    name: 'Node 3',\n    children: [],\n    loadOnDemand: true,\n  },\n  {\n    id: '4',\n    name: 'Node 4',\n    children: [],\n    loadOnDemand: true,\n  },\n  {\n    id: '5',\n    name: 'Node 5',\n    children: [],\n    loadOnDemand: true,\n  },\n];\n\nconst TreeNodeRender = ({\n  node,\n  nodeDepth = 0,\n  ...rest\n}) => {\n  const {\n    getIsNodeExpanded,\n  } = useTreeView();\n  const nodeId = node.id;\n  const nodeName = node.name;\n  const [childNodes, setChildNodes] = useState(ensureArray(node.children));\n  const [isLoading, setIsLoading] = useState(false);\n  const isExpanded = getIsNodeExpanded(nodeId);\n  const loadOnDemand = node.loadOnDemand && childNodes.length === 0;\n\n  useEffect(() => {\n    let timer = null;\n\n    if (isExpanded && loadOnDemand) {\n      setIsLoading(true);\n      timer = setTimeout(() => {\n        const childNodes = [\n          {\n            id: `${nodeId}.1`,\n            name: `${nodeName}.1`,\n            loadOnDemand: (nodeDepth < 1),\n          },\n          {\n            id: `${nodeId}.2`,\n            name: `${nodeName}.2`,\n          }\n        ];\n\n        setChildNodes(childNodes);\n        setIsLoading(false);\n      }, 500);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isExpanded, loadOnDemand, nodeId, nodeName, nodeDepth]);\n\n  return (\n    <TreeNode\n      nodeId={nodeId}\n      render={({ isExpandable, isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeNodeToggle>\n                  {isLoading ? <Spinner size=\"xs\" /> : <TreeNodeToggleIcon />}\n                </TreeNodeToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      {...rest}\n    >\n      {loadOnDemand\n        ? <Box key=\"stub\" />\n        : childNodes.map(node => (\n            <TreeNodeRender\n              key={node.id}\n              node={node}\n              nodeDepth={nodeDepth + 1}\n            />\n          ))\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [treeNodes, /*setTreeNodes*/] = useState(initialTreeNodes);\n  const expandableNodes = findExpandableNodeIds(treeNodes);\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodes);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodes(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"lazy loading\"\n          isSelectable\n          multiSelect\n          expandedNodes={expandedNodes}\n          selectedNodes={selectedNodes}\n          onNodeToggle={handleToggle}\n          onNodeSelect={handleSelect}\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeNodeRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/tree-view/index.page.mdx"},sandbox:{files:{"src/pages/components/tree-view/utils.js":"import { ensureArray } from 'ensure-type';\n\nexport const buildTreeMap = (nodes) => {\n  const treeMap = new Map();\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      treeMap.set(node.id, node);\n      traverse(node.children);\n    });\n  };\n\n  traverse(nodes);\n\n  return treeMap;\n};\n\nexport const findExpandableNodeIds = (nodes) => {\n  const expandableNodeIds = [];\n\n  const traverse = (nodes) => {\n    ensureArray(nodes).forEach((node) => {\n      if (Array.isArray(node.children) && node.children.length > 0) {\n        expandableNodeIds.push(node.id);\n        traverse(node.children);\n      }\n    });\n  };\n\n  traverse(nodes);\n\n  return expandableNodeIds;\n};"},raw:"import {\n  Box,\n  Flex,\n  Icon,\n  OverflowTooltip,\n  Scrollbar,\n  Spinner,\n  TreeNode,\n  TreeNodeToggle,\n  TreeNodeToggleIcon,\n  TreeView,\n  useColorStyle,\n  useTreeView,\n} from '@tonic-ui/react';\nimport { ensureArray } from 'ensure-type';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport {\n  findExpandableNodeIds,\n} from '@/pages/components/tree-view/utils';\n\nconst initialTreeNodes = [\n  {\n    id: '1',\n    name: 'Node 1',\n    children: [\n      {\n        id: '1.1',\n        name: 'Node 1.1',\n      },\n      {\n        id: '1.2',\n        name: 'Node 1.2',\n        children: [],\n        loadOnDemand: true,\n      },\n    ],\n  },\n  {\n    id: '2',\n    name: 'Node 2',\n    children: [],\n    loadOnDemand: true,\n  },\n  {\n    id: '3',\n    name: 'Node 3',\n    children: [],\n    loadOnDemand: true,\n  },\n  {\n    id: '4',\n    name: 'Node 4',\n    children: [],\n    loadOnDemand: true,\n  },\n  {\n    id: '5',\n    name: 'Node 5',\n    children: [],\n    loadOnDemand: true,\n  },\n];\n\nconst TreeNodeRender = ({\n  node,\n  nodeDepth = 0,\n  ...rest\n}) => {\n  const {\n    getIsNodeExpanded,\n  } = useTreeView();\n  const nodeId = node.id;\n  const nodeName = node.name;\n  const [childNodes, setChildNodes] = useState(ensureArray(node.children));\n  const [isLoading, setIsLoading] = useState(false);\n  const isExpanded = getIsNodeExpanded(nodeId);\n  const loadOnDemand = node.loadOnDemand && childNodes.length === 0;\n\n  useEffect(() => {\n    let timer = null;\n\n    if (isExpanded && loadOnDemand) {\n      setIsLoading(true);\n      timer = setTimeout(() => {\n        const childNodes = [\n          {\n            id: `${nodeId}.1`,\n            name: `${nodeName}.1`,\n            loadOnDemand: (nodeDepth < 1),\n          },\n          {\n            id: `${nodeId}.2`,\n            name: `${nodeName}.2`,\n          }\n        ];\n\n        setChildNodes(childNodes);\n        setIsLoading(false);\n      }, 500);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isExpanded, loadOnDemand, nodeId, nodeName, nodeDepth]);\n\n  return (\n    <TreeNode\n      nodeId={nodeId}\n      render={({ isExpandable, isExpanded, isSelected, select }) => {\n        const icon = (() => {\n          if (isExpandable) {\n            return isExpanded ? 'folder-open' : 'folder';\n          }\n          return 'server';\n        })();\n        const iconColor = isExpandable ? 'yellow:50' : 'currentColor';\n\n        return (\n          <>\n            <Flex\n              flex=\"none\"\n              width=\"6x\"\n            >\n              {isExpandable && (\n                <TreeNodeToggle>\n                  {isLoading ? <Spinner size=\"xs\" /> : <TreeNodeToggleIcon />}\n                </TreeNodeToggle>\n              )}\n            </Flex>\n            <Icon icon={icon} color={iconColor} mr=\"2x\" />\n            <OverflowTooltip label={node.name}>\n              {node.name}\n            </OverflowTooltip>\n          </>\n        );\n      }}\n      {...rest}\n    >\n      {loadOnDemand\n        ? <Box key=\"stub\" />\n        : childNodes.map(node => (\n            <TreeNodeRender\n              key={node.id}\n              node={node}\n              nodeDepth={nodeDepth + 1}\n            />\n          ))\n      }\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [treeNodes, /*setTreeNodes*/] = useState(initialTreeNodes);\n  const expandableNodes = findExpandableNodeIds(treeNodes);\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodes);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const handleToggle = useCallback((nodeIds) => {\n    setExpandedNodes(nodeIds);\n  }, []);\n\n  const handleSelect = useCallback((nodeIds) => {\n    setSelectedNodes(nodeIds);\n  }, []);\n\n  return (\n    <Box\n      sx={{\n        minWidth: 160,\n        maxWidth: '40%',\n        boxShadow: colorStyle.shadow.thick,\n      }}\n    >\n      <Scrollbar\n        height={240}\n        overflowY=\"scroll\"\n      >\n        <TreeView\n          aria-label=\"lazy loading\"\n          isSelectable\n          multiSelect\n          expandedNodes={expandedNodes}\n          selectedNodes={selectedNodes}\n          onNodeToggle={handleToggle}\n          onNodeSelect={handleSelect}\n        >\n          {ensureArray(treeNodes).map(node => (\n            <TreeNodeRender\n              key={node.id}\n              node={node}\n            />\n          ))}\n        </TreeView>\n      </Scrollbar>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(e.h2,{id:"accessibility",children:["Accessibility",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#accessibility",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"TreeView"})," component supports both keyboard and mouse navigation and selection.\nThe following keyboard shortcuts are available:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Use the ",(0,o.jsx)(e.code,{children:"Up"})," and ",(0,o.jsx)(e.code,{children:"Down"})," arrow keys to navigate between nodes."]}),"\n",(0,o.jsxs)(e.li,{children:["Use the ",(0,o.jsx)(e.code,{children:"Left"})," and ",(0,o.jsx)(e.code,{children:"Right"})," arrow keys to expand/collapse a node."]}),"\n",(0,o.jsxs)(e.li,{children:["Use the ",(0,o.jsx)(e.code,{children:"Enter"})," key to toggle either the expansion or selection of a node."]}),"\n",(0,o.jsxs)(e.li,{children:["Use the ",(0,o.jsx)(e.code,{children:"Space"})," key to toggle the selection of a node."]}),"\n",(0,o.jsxs)(e.li,{children:["Use the ",(0,o.jsx)(e.code,{children:"Home"})," and ",(0,o.jsx)(e.code,{children:"End"})," keys to quickly navigate to the first or last node."]}),"\n",(0,o.jsxs)(e.li,{children:["Hold down the ",(0,o.jsx)(e.code,{children:"Ctrl"})," key and click the left mouse button to select or unselect a node without affecting the current selection."]}),"\n",(0,o.jsxs)(e.li,{children:["Hold down the ",(0,o.jsx)(e.code,{children:"Shift"})," key and click the left mouse button to select a range of nodes from the current node to the clicked node."]}),"\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"Ctrl"}),"+",(0,o.jsx)(e.code,{children:"Shift"}),"+",(0,o.jsx)(e.code,{children:"Home"})," keys to select a range of nodes from the current node to the first node."]}),"\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"Ctrl"}),"+",(0,o.jsx)(e.code,{children:"Shift"}),"+",(0,o.jsx)(e.code,{children:"End"})," keys to select a range of nodes from the current node to the last node."]}),"\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"Ctrl"}),"+",(0,o.jsx)(e.code,{children:"a"})," keys to select all nodes."]}),"\n"]}),"\n",(0,o.jsxs)(e.h2,{id:"props",children:["Props",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.h3,{id:"treeview",children:["TreeView",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeview",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{align:"left",children:"Name"}),(0,o.jsx)(e.th,{align:"left",children:"Type"}),(0,o.jsx)(e.th,{align:"left",children:"Default"}),(0,o.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(e.tbody,{children:[(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"defaultExpandedNodes"}),(0,o.jsx)(e.td,{align:"left",children:"array"}),(0,o.jsx)(e.td,{align:"left",children:"[]"}),(0,o.jsx)(e.td,{align:"left",children:"An array of expanded node IDs for initial state (uncontrolled)."})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"defaultSelectedNodes"}),(0,o.jsx)(e.td,{align:"left",children:"array"}),(0,o.jsx)(e.td,{align:"left",children:"[]"}),(0,o.jsx)(e.td,{align:"left",children:"An array of selected node IDs for initial state (uncontrolled)."})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"expandedNodes"}),(0,o.jsx)(e.td,{align:"left",children:"array"}),(0,o.jsx)(e.td,{align:"left"}),(0,o.jsx)(e.td,{align:"left",children:"An array of expanded node IDs for controlled state."})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"id"}),(0,o.jsx)(e.td,{align:"left",children:"string"}),(0,o.jsx)(e.td,{align:"left"}),(0,o.jsxs)(e.td,{align:"left",children:["The ",(0,o.jsx)(e.code,{children:"id"})," prop used for accessibility purpose. If not provided, a random id will be generated."]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"isSelectable"}),(0,o.jsx)(e.td,{align:"left",children:"bool"}),(0,o.jsx)(e.td,{align:"left",children:"false"}),(0,o.jsx)(e.td,{align:"left",children:"Determines if the tree view allows node selection."})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"isUnselectable"}),(0,o.jsx)(e.td,{align:"left",children:"bool"}),(0,o.jsx)(e.td,{align:"left",children:"false"}),(0,o.jsx)(e.td,{align:"left",children:"Determines if the tree view allows node unselection."})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"multiSelect"}),(0,o.jsx)(e.td,{align:"left",children:"bool"}),(0,o.jsx)(e.td,{align:"left",children:"false"}),(0,o.jsxs)(e.td,{align:"left",children:["If true, ",(0,o.jsx)(e.code,{children:"ctrl"})," and ",(0,o.jsx)(e.code,{children:"shift"})," will trigger multiselect."]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"onNodeFocus"}),(0,o.jsx)(e.td,{align:"left",children:"function"}),(0,o.jsx)(e.td,{align:"left"}),(0,o.jsxs)(e.td,{align:"left",children:["A callback function invoked when a tree node is focused.",(0,o.jsxs)("pre",{children:[(0,o.jsx)(e.code,{children:"function(nodeId: string) => void"}),(0,o.jsx)("br",{})," • ",(0,o.jsx)(e.code,{children:"nodeId"})," The id of the focused node."]})]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"onNodeSelect"}),(0,o.jsx)(e.td,{align:"left",children:"function"}),(0,o.jsx)(e.td,{align:"left"}),(0,o.jsxs)(e.td,{align:"left",children:["A callback function triggered when tree nodes are selected/unselected.",(0,o.jsxs)("pre",{children:[(0,o.jsx)(e.code,{children:"function(nodeIds: Array<string>) => void"}),(0,o.jsx)("br",{})," • ",(0,o.jsx)(e.code,{children:"nodeIds"})," An array of selected node IDs."]})]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"onNodeToggle"}),(0,o.jsx)(e.td,{align:"left",children:"function"}),(0,o.jsx)(e.td,{align:"left"}),(0,o.jsxs)(e.td,{align:"left",children:["A callback function triggered when tree nodes are expanded/collapsed.",(0,o.jsxs)("pre",{children:[(0,o.jsx)(e.code,{children:"function(nodeIds: Array<string>) => void"}),(0,o.jsx)("br",{})," • ",(0,o.jsx)(e.code,{children:"nodeIds"})," An array of expanded node IDs."]})]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"selectedNodes"}),(0,o.jsx)(e.td,{align:"left",children:"array"}),(0,o.jsx)(e.td,{align:"left"}),(0,o.jsx)(e.td,{align:"left",children:"An array of selected node IDs for controlled state."})]})]})]}),"\n",(0,o.jsxs)(e.h3,{id:"treenode",children:["TreeNode",(0,o.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treenode",children:(0,o.jsx)(e.svg,{children:(0,o.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{align:"left",children:"Name"}),(0,o.jsx)(e.th,{align:"left",children:"Type"}),(0,o.jsx)(e.th,{align:"left",children:"Default"}),(0,o.jsx)(e.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(e.tbody,{children:[(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"ContentComponent"}),(0,o.jsx)(e.td,{align:"left",children:"ElementType"}),(0,o.jsx)(e.td,{align:"left",children:"TreeNodeContent"}),(0,o.jsx)(e.td,{align:"left",children:"The component used to render the contenr of the node."})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"ContentProps"}),(0,o.jsx)(e.td,{align:"left",children:"object"}),(0,o.jsx)(e.td,{align:"left"}),(0,o.jsx)(e.td,{align:"left",children:"Props applied to the content component."})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"TransitionComponent"}),(0,o.jsx)(e.td,{align:"left",children:"ElementType"}),(0,o.jsx)(e.td,{align:"left",children:"Collapse"}),(0,o.jsx)(e.td,{align:"left",children:"The component used for the transition."})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"TransitionProps"}),(0,o.jsx)(e.td,{align:"left",children:"object"}),(0,o.jsx)(e.td,{align:"left"}),(0,o.jsxs)(e.td,{align:"left",children:["Props applied to the ",(0,o.jsx)(e.a,{href:"http://reactcommunity.org/react-transition-group/transition#Transition-props",children:"Transition"})," element."]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"children"}),(0,o.jsx)(e.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(e.td,{align:"left"}),(0,o.jsx)(e.td,{align:"left",children:"The content of the node."})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"disabled"}),(0,o.jsx)(e.td,{align:"left",children:"bool"}),(0,o.jsx)(e.td,{align:"left",children:"false"}),(0,o.jsx)(e.td,{align:"left",children:"Determines if the node is disabled."})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"nodeId"}),(0,o.jsx)(e.td,{align:"left",children:"string"}),(0,o.jsx)(e.td,{align:"left"}),(0,o.jsxs)(e.td,{align:"left",children:[(0,o.jsx)(e.code,{children:"REQUIRED"})," The id of the node."]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{align:"left",children:"render"}),(0,o.jsx)(e.td,{align:"left",children:"function"}),(0,o.jsx)(e.td,{align:"left"}),(0,o.jsxs)(e.td,{align:"left",children:[(0,o.jsx)(e.code,{children:"REQUIRED"})," A render function to render the node.",(0,o.jsxs)("pre",{children:[(0,o.jsx)(e.code,{children:"function(props: object) => ReactNode"})," ",(0,o.jsx)("br",{})," • ",(0,o.jsx)(e.code,{children:"props"})," The props passed to the render function.",(0,o.jsx)("br",{}),"    - nodeDepth: number",(0,o.jsx)("br",{}),"    - nodeId: string",(0,o.jsx)("br",{}),"    - isDisabled: boolean",(0,o.jsx)("br",{}),"    - isExpandable: boolean",(0,o.jsx)("br",{}),"    - isExpanded: boolean",(0,o.jsx)("br",{}),"    - isFocused: boolean",(0,o.jsx)("br",{}),"    - isSelected: boolean",(0,o.jsx)("br",{}),"    - select: function()",(0,o.jsx)("br",{}),"    - selectRange: function()",(0,o.jsx)("br",{}),"    - toggleExpansion: function()",(0,o.jsx)("br",{}),"    - toggleSelection: function()",(0,o.jsx)("br",{})]})]})]})]})]})]})}var Q=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,r.ah)(),n.components).wrapper;return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(q,n)})):q(n)}},31036:function(n,e,d){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/tree-view",function(){return d(37181)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=31036)}),_N_E=n.O()}]);