(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3991],{58775:function(e,n,r){"use strict";r.d(n,{Z:function(){return v}});var t=r(98922),o=r(49427),d=r(5632),l=r(2784),a=r(79525),i=r(98485),c=r(71561),s=r(28214),u=r(66824),h=["size"];function p(){return(p=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e}).apply(this,arguments)}var m=(0,l.forwardRef)(function(e,n){var r=e.size,o=function(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},d=Object.keys(e);for(t=0;t<d.length;t++)r=d[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(t=0;t<d.length;t++)r=d[t],!(n.indexOf(r)>=0)&&Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(e,h);return l.createElement(t.SVGIcon,p({size:r,viewBox:"0 0 1024 1024"},o),l.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});m.displayName="CodeSandboxIcon";var f=r(30462);function b(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var r,t,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var d=[],l=!0,a=!1;try{for(o=o.call(e);!(l=(r=o.next()).done)&&(d.push(r.value),!n||d.length!==n);l=!0);}catch(e){a=!0,t=e}finally{try{l||null==o.return||o.return()}finally{if(a)throw t}}return d}}(e,n)||function(e,n){if(e){if("string"==typeof e)return x(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);if("Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return x(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function x(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=Array(n);r<n;r++)t[r]=e[r];return t}var N={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},y=function(e){var n=e.component,r=e.file,h=e.sandbox,p=(0,d.useRouter)(),x=b((0,l.useReducer)(function(e){return!e},!1),2),y=x[0],v=x[1],g=b((0,t.useColorMode)(),1)[0],S={dark:c.y,light:c.q}[g],T=b((0,o.useToggle)(!1),2),I=T[0],E=T[1],C=(0,i.Z)(null==r?void 0:r.data),A=C.onCopy,k=C.hasCopied,w=(0,l.useCallback)(function(){A()},[A]),j=(0,l.useCallback)(function(){(0,s.b)(h)},[h]),B=(0,l.useCallback)(function(){v(),E(!1)},[v,E]);return l.createElement(a.nu,{code:null==r?void 0:r.data,disabled:!0,language:"jsx",theme:S},l.createElement(t.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[g],p:"4x"},l.createElement(t.Box,{fontSize:"sm",lineHeight:"sm"},l.createElement(l.Fragment,{key:y},l.createElement(n,null)))),l.createElement(t.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},l.createElement(f.Z,{"data-track":I?"CodeBlock|hide_source|".concat((0,u.Z)({path:p.pathname})):"CodeBlock|show_source|".concat((0,u.Z)({path:p.pathname})),onClick:E},l.createElement(t.Tooltip,{label:I?"Hide the source":"Show the source"},l.createElement(t.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),l.createElement(f.Z,{"data-track":"CodeBlock|copy_source|".concat((0,u.Z)({path:p.pathname})),onClick:w},l.createElement(t.Tooltip,{label:k?"Copied":"Copy the source"},l.createElement(t.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),l.createElement(f.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(p.pathname),onClick:j},l.createElement(t.Tooltip,{label:"Edit in CodeSandbox"},l.createElement(m,{size:{sm:"5x",md:"4x"}}))),l.createElement(f.Z,{"data-track":"CodeBlock|reset|".concat(p.pathname),onClick:B},l.createElement(t.Tooltip,{label:"Reset the demo"},l.createElement(t.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),l.createElement(t.Fade,{in:I},l.createElement(t.Collapse,{in:I,unmountOnExit:!0},l.createElement(a.uz,{style:N}))))};y.displayName="Demo";var v=y},9223:function(e,n,r){"use strict";r.r(n);var t,o=r(98922),d=r(2784),l=r(76811);function a(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=Array(n);r<n;r++)t[r]=e[r];return t}var i=function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=Array.isArray(n.children)?n.children.length:0;return d.createElement(o.TreeNode,{key:n.id,label:d.createElement(o.Truncate,null,n.name),nodeId:n.id},t>0?n.children.map(function(n){return e(n,r+1)}):null)},c=(t=[],!function e(n){Array.isArray(n.children)&&n.children.length>0&&(t.push(n.id),n.children.forEach(e))}(l),t);n.default=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,o.useColorStyle)())||function(e,n){var r,t,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var d=[],l=!0,a=!1;try{for(o=o.call(e);!(l=(r=o.next()).done)&&(d.push(r.value),!n||d.length!==n);l=!0);}catch(e){a=!0,t=e}finally{try{l||null==o.return||o.return()}finally{if(a)throw t}}return d}}(e,1)||function(e,n){if(e){if("string"==typeof e)return a(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);if("Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,n)}}(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return d.createElement(o.Scrollbar,{width:400,height:240,overflowY:"visible",sx:{border:1,borderColor:n.divider}},d.createElement(o.TreeView,{"aria-label":"basic tree view",defaultExpandedNodes:c},i(l)))}},12698:function(e,n,r){"use strict";r.r(n);var t,o,d=r(98922),l=r(2784),a=r(76811);function i(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var r,t,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var d=[],l=!0,a=!1;try{for(o=o.call(e);!(l=(r=o.next()).done)&&(d.push(r.value),!n||d.length!==n);l=!0);}catch(e){a=!0,t=e}finally{try{l||null==o.return||o.return()}finally{if(a)throw t}}return d}}(e,n)||function(e,n){if(e){if("string"==typeof e)return c(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);if("Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return c(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=Array(n);r<n;r++)t[r]=e[r];return t}var s=function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=Array.isArray(n.children)?n.children.length:0;return l.createElement(d.TreeNode,{key:n.id,label:l.createElement(d.Truncate,null,n.name),nodeId:n.id},t>0?n.children.map(function(n){return e(n,r+1)}):null)},u=(t=[],!function e(n){t.push(n.id),Array.isArray(n.children)&&n.children.length>0&&n.children.forEach(e)}(a),t),h=(o=[],!function e(n){Array.isArray(n.children)&&n.children.length>0&&(o.push(n.id),n.children.forEach(e))}(a),o);n.default=function(){var e=i((0,d.useColorStyle)(),1)[0],n=i((0,l.useState)(h),2),r=n[0],t=n[1],o=i((0,l.useState)([]),2),c=o[0],p=o[1];return l.createElement(l.Fragment,null,l.createElement(d.ButtonGroup,{variant:"secondary",columnGap:"2x",mb:"3x"},l.createElement(d.Button,{variant:"secondary",disabled:r.length===h.length,onClick:function(e){t(h)}},"Expand all"),l.createElement(d.Button,{variant:"secondary",disabled:0===r.length,onClick:function(e){t([])}},"Collapse all"),l.createElement(d.Button,{variant:"secondary",disabled:c.length===u.length,onClick:function(e){p(u)}},"Select all"),l.createElement(d.Button,{variant:"secondary",disabled:0===c.length,onClick:function(e){p([])}},"Unselect all")),l.createElement(d.Stack,{spacing:"2x"},l.createElement(d.Text,null,"Expanded nodes: ",r.join(", ")),l.createElement(d.Text,null,"Selected nodes: ",c.join(", "))),l.createElement(d.Divider,{my:"4x"}),l.createElement(d.Scrollbar,{width:400,height:240,overflowY:"visible",sx:{border:1,borderColor:e.divider}},l.createElement(d.TreeView,{"aria-label":"controlled",isSelectable:!0,isMultiSelectable:!0,expandedNodes:r,selectedNodes:c,onToggleNodes:function(e){t(e)},onSelectNodes:function(e){p(e)}},s(a))))}},20804:function(e,n,r){"use strict";r.r(n);var t,o=r(98922),d=r(2784),l=r(76811);function a(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=Array(n);r<n;r++)t[r]=e[r];return t}var i=function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=Array.isArray(n.children)?n.children.length:0;return d.createElement(o.TreeNode,{key:n.id,label:d.createElement(o.Truncate,null,n.name),nodeId:n.id},t>0?n.children.map(function(n){return e(n,r+1)}):null)},c=(t=[],!function e(n){Array.isArray(n.children)&&n.children.length>0&&(t.push(n.id),n.children.forEach(e))}(l),t);n.default=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,o.useColorStyle)())||function(e,n){var r,t,o=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=o){var d=[],l=!0,a=!1;try{for(o=o.call(e);!(l=(r=o.next()).done)&&(d.push(r.value),!n||d.length!==n);l=!0);}catch(e){a=!0,t=e}finally{try{l||null==o.return||o.return()}finally{if(a)throw t}}return d}}(e,1)||function(e,n){if(e){if("string"==typeof e)return a(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);if("Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,n)}}(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return d.createElement(o.Scrollbar,{width:400,height:240,overflowY:"visible",sx:{border:1,borderColor:n.divider}},d.createElement(o.TreeView,{"aria-label":"multi-select",defaultExpandedNodes:c,isSelectable:!0,isMultiSelectable:!0},i(l)))}},75994:function(e,n,r){"use strict";r.r(n);var t=r(52322),o=r(45392),d=r(58775),l=r(12698),a=r(20804),i=r(9223);function c(e){var n=Object.assign({div:"div",h1:"h1",h2:"h2",a:"a",svg:"svg",use:"use",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th"},(0,o.ah)(),e.components);return(0,t.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n",(0,t.jsx)(n.h1,{id:"tree-view",children:"Tree View"}),"\n",(0,t.jsxs)(n.h2,{id:"usage",children:["Usage",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.h3,{id:"basic-tree-view",children:["Basic tree view",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic-tree-view",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(d.Z,{component:i.default,file:{data:"import {\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from './data/tree.json';\n\nconst findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      label={<Truncate>{node.name}</Truncate>}\n      nodeId={node.id}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Scrollbar\n      width={400}\n      height={240}\n      overflowY=\"visible\"\n      sx={{\n        border: 1,\n        borderColor: colorStyle.divider,\n      }}\n    >\n      <TreeView\n        aria-label=\"basic tree view\"\n        defaultExpandedNodes={expandableNodeIds}\n      >\n        {renderTree(tree)}\n      </TreeView>\n    </Scrollbar>\n  );\n};\n\nexport default App;",path:"pages/components/treeview/index.mdx"},sandbox:{dependencies:{"@tonic-ui/react":"^1.23.0",react:"latest"},files:{"src/pages/components/treeview/data/tree.json":'{\n  "id": "0",\n  "name": "Root",\n  "children": [\n    {\n      "id": "1",\n      "name": "Node 1",\n      "children": [\n        {\n          "id": "2",\n          "name": "Node 2",\n          "children": [\n            {\n              "id": "3",\n              "name": "Node 3",\n              "children": [\n                {\n                  "id": "4",\n                  "name": "Node 4"\n                }\n              ]\n            },\n            {\n              "id": "5",\n              "name": "Node 5"\n            }\n          ]\n        },\n        {\n          "id": "6",\n          "name": "Node 6",\n          "children": [\n            {\n              "id": "7",\n              "name": "Node 7",\n              "children": [\n                {\n                  "id": "8",\n                  "name": "Node 8"\n                },\n                {\n                  "id": "9",\n                  "name": "Node 9"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "10",\n      "name": "Node 10",\n      "children": [\n        {\n          "id": "11",\n          "name": "Node 11",\n          "children": [\n            {\n              "id": "12",\n              "name": "Node 12"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}'},raw:"import {\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from '@/pages/components/treeview/data/tree.json';\n\nconst findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      label={<Truncate>{node.name}</Truncate>}\n      nodeId={node.id}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Scrollbar\n      width={400}\n      height={240}\n      overflowY=\"visible\"\n      sx={{\n        border: 1,\n        borderColor: colorStyle.divider,\n      }}\n    >\n      <TreeView\n        aria-label=\"basic tree view\"\n        defaultExpandedNodes={expandableNodeIds}\n      >\n        {renderTree(tree)}\n      </TreeView>\n    </Scrollbar>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h3,{id:"multi-selection",children:["Multi-selection",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#multi-selection",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(d.Z,{component:a.default,file:{data:"import {\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from './data/tree.json';\n\nconst findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      label={<Truncate>{node.name}</Truncate>}\n      nodeId={node.id}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Scrollbar\n      width={400}\n      height={240}\n      overflowY=\"visible\"\n      sx={{\n        border: 1,\n        borderColor: colorStyle.divider,\n      }}\n    >\n      <TreeView\n        aria-label=\"multi-select\"\n        defaultExpandedNodes={expandableNodeIds}\n        isSelectable\n        isMultiSelectable\n      >\n        {renderTree(tree)}\n      </TreeView>\n    </Scrollbar>\n  );\n};\n\nexport default App;",path:"pages/components/treeview/index.mdx"},sandbox:{dependencies:{"@tonic-ui/react":"^1.23.0",react:"latest"},files:{"src/pages/components/treeview/data/tree.json":'{\n  "id": "0",\n  "name": "Root",\n  "children": [\n    {\n      "id": "1",\n      "name": "Node 1",\n      "children": [\n        {\n          "id": "2",\n          "name": "Node 2",\n          "children": [\n            {\n              "id": "3",\n              "name": "Node 3",\n              "children": [\n                {\n                  "id": "4",\n                  "name": "Node 4"\n                }\n              ]\n            },\n            {\n              "id": "5",\n              "name": "Node 5"\n            }\n          ]\n        },\n        {\n          "id": "6",\n          "name": "Node 6",\n          "children": [\n            {\n              "id": "7",\n              "name": "Node 7",\n              "children": [\n                {\n                  "id": "8",\n                  "name": "Node 8"\n                },\n                {\n                  "id": "9",\n                  "name": "Node 9"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "10",\n      "name": "Node 10",\n      "children": [\n        {\n          "id": "11",\n          "name": "Node 11",\n          "children": [\n            {\n              "id": "12",\n              "name": "Node 12"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}'},raw:"import {\n  Scrollbar,\n  TreeView,\n  TreeNode,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React from 'react';\nimport tree from '@/pages/components/treeview/data/tree.json';\n\nconst findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      label={<Truncate>{node.name}</Truncate>}\n      nodeId={node.id}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n\n  return (\n    <Scrollbar\n      width={400}\n      height={240}\n      overflowY=\"visible\"\n      sx={{\n        border: 1,\n        borderColor: colorStyle.divider,\n      }}\n    >\n      <TreeView\n        aria-label=\"multi-select\"\n        defaultExpandedNodes={expandableNodeIds}\n        isSelectable\n        isMultiSelectable\n      >\n        {renderTree(tree)}\n      </TreeView>\n    </Scrollbar>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h3,{id:"controlled-tree-view",children:["Controlled tree view",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#controlled-tree-view",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(d.Z,{component:l.default,file:{data:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeView,\n  TreeNode,\n  Truncate,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport React, { useState } from \'react\';\nimport tree from \'./data/tree.json\';\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      label={<Truncate>{node.name}</Truncate>}\n      nodeId={node.id}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nconst getAllNodeIds = (tree) => {\n  const allNodeIds = [];\n\n  const traverse = (node) => {\n    allNodeIds.push(node.id);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return allNodeIds;\n};\n\nconst allNodeIds = getAllNodeIds(tree);\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodeIds);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const onToggleNodes = (nodeIds) => {\n    setExpandedNodes(nodeIds);\n  };\n\n  const onSelectNodes = (nodeIds) => {\n    setSelectedNodes(nodeIds);\n  };\n\n  const handleClickExpandAll = (event) => {\n    setExpandedNodes(expandableNodeIds);\n  };\n\n  const handleClickCollapseAll = (event) => {\n    setExpandedNodes([]);\n  };\n\n  const handleClickSelectAll = (event) => {\n    setSelectedNodes(allNodeIds);\n  };\n\n  const handleClickUnselectAll = (event) => {\n    setSelectedNodes([]);\n  };\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="3x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === expandableNodeIds.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === allNodeIds.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Stack spacing="2x">\n        <Text>Expanded nodes: {expandedNodes.join(\', \')}</Text>\n        <Text>Selected nodes: {selectedNodes.join(\', \')}</Text>\n      </Stack>\n      <Divider my="4x" />\n      <Scrollbar\n        width={400}\n        height={240}\n        overflowY="visible"\n        sx={{\n          border: 1,\n          borderColor: colorStyle.divider,\n        }}\n      >\n        <TreeView\n          aria-label="controlled"\n          isSelectable\n          isMultiSelectable\n          expandedNodes={expandedNodes}\n          selectedNodes={selectedNodes}\n          onToggleNodes={onToggleNodes}\n          onSelectNodes={onSelectNodes}\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </>\n  );\n};\n\nexport default App;',path:"pages/components/treeview/index.mdx"},sandbox:{dependencies:{"@tonic-ui/react":"^1.23.0",react:"latest"},files:{"src/pages/components/treeview/data/tree.json":'{\n  "id": "0",\n  "name": "Root",\n  "children": [\n    {\n      "id": "1",\n      "name": "Node 1",\n      "children": [\n        {\n          "id": "2",\n          "name": "Node 2",\n          "children": [\n            {\n              "id": "3",\n              "name": "Node 3",\n              "children": [\n                {\n                  "id": "4",\n                  "name": "Node 4"\n                }\n              ]\n            },\n            {\n              "id": "5",\n              "name": "Node 5"\n            }\n          ]\n        },\n        {\n          "id": "6",\n          "name": "Node 6",\n          "children": [\n            {\n              "id": "7",\n              "name": "Node 7",\n              "children": [\n                {\n                  "id": "8",\n                  "name": "Node 8"\n                },\n                {\n                  "id": "9",\n                  "name": "Node 9"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      "id": "10",\n      "name": "Node 10",\n      "children": [\n        {\n          "id": "11",\n          "name": "Node 11",\n          "children": [\n            {\n              "id": "12",\n              "name": "Node 12"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}'},raw:'import {\n  Button,\n  ButtonGroup,\n  Divider,\n  Scrollbar,\n  Stack,\n  Text,\n  TreeView,\n  TreeNode,\n  Truncate,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport React, { useState } from \'react\';\nimport tree from \'@/pages/components/treeview/data/tree.json\';\n\nconst renderTree = (node, depth = 0) => {\n  const childCount = Array.isArray(node.children) ? node.children.length : 0;\n\n  return (\n    <TreeNode\n      key={node.id}\n      label={<Truncate>{node.name}</Truncate>}\n      nodeId={node.id}\n    >\n      {(childCount > 0)\n        ? node.children.map(node => renderTree(node, depth + 1))\n        : null\n      }\n    </TreeNode>\n  );\n};\n\nconst findExpandableNodeIds = (tree) => {\n  const expandableNodeIds = [];\n\n  const traverse = (node) => {\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      expandableNodeIds.push(node.id);\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return expandableNodeIds;\n};\n\nconst getAllNodeIds = (tree) => {\n  const allNodeIds = [];\n\n  const traverse = (node) => {\n    allNodeIds.push(node.id);\n    if (Array.isArray(node.children) && node.children.length > 0) {\n      node.children.forEach(traverse);\n    }\n  };\n\n  traverse(tree);\n\n  return allNodeIds;\n};\n\nconst allNodeIds = getAllNodeIds(tree);\nconst expandableNodeIds = findExpandableNodeIds(tree);\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [expandedNodes, setExpandedNodes] = useState(expandableNodeIds);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n\n  const onToggleNodes = (nodeIds) => {\n    setExpandedNodes(nodeIds);\n  };\n\n  const onSelectNodes = (nodeIds) => {\n    setSelectedNodes(nodeIds);\n  };\n\n  const handleClickExpandAll = (event) => {\n    setExpandedNodes(expandableNodeIds);\n  };\n\n  const handleClickCollapseAll = (event) => {\n    setExpandedNodes([]);\n  };\n\n  const handleClickSelectAll = (event) => {\n    setSelectedNodes(allNodeIds);\n  };\n\n  const handleClickUnselectAll = (event) => {\n    setSelectedNodes([]);\n  };\n\n  return (\n    <>\n      <ButtonGroup\n        variant="secondary"\n        columnGap="2x"\n        mb="3x"\n      >\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === expandableNodeIds.length}\n          onClick={handleClickExpandAll}\n        >\n          Expand all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={expandedNodes.length === 0}\n          onClick={handleClickCollapseAll}\n        >\n          Collapse all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === allNodeIds.length}\n          onClick={handleClickSelectAll}\n        >\n          Select all\n        </Button>\n        <Button\n          variant="secondary"\n          disabled={selectedNodes.length === 0}\n          onClick={handleClickUnselectAll}\n        >\n          Unselect all\n        </Button>\n      </ButtonGroup>\n      <Stack spacing="2x">\n        <Text>Expanded nodes: {expandedNodes.join(\', \')}</Text>\n        <Text>Selected nodes: {selectedNodes.join(\', \')}</Text>\n      </Stack>\n      <Divider my="4x" />\n      <Scrollbar\n        width={400}\n        height={240}\n        overflowY="visible"\n        sx={{\n          border: 1,\n          borderColor: colorStyle.divider,\n        }}\n      >\n        <TreeView\n          aria-label="controlled"\n          isSelectable\n          isMultiSelectable\n          expandedNodes={expandedNodes}\n          selectedNodes={selectedNodes}\n          onToggleNodes={onToggleNodes}\n          onSelectNodes={onSelectNodes}\n        >\n          {renderTree(tree)}\n        </TreeView>\n      </Scrollbar>\n    </>\n  );\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,t.jsxs)(n.h2,{id:"props",children:["Props",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsxs)(n.h3,{id:"treeview",children:["TreeView",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treeview",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(n.table,{children:(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"Name"}),(0,t.jsx)(n.th,{align:"left",children:"Type"}),(0,t.jsx)(n.th,{align:"left",children:"Default"}),(0,t.jsx)(n.th,{align:"left",children:"Description"})]})})}),"\n",(0,t.jsxs)(n.h3,{id:"treenode",children:["TreeNode",(0,t.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#treenode",children:(0,t.jsx)(n.svg,{children:(0,t.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,t.jsx)(n.table,{children:(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"Name"}),(0,t.jsx)(n.th,{align:"left",children:"Type"}),(0,t.jsx)(n.th,{align:"left",children:"Default"}),(0,t.jsx)(n.th,{align:"left",children:"Description"})]})})})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,o.ah)(),e.components).wrapper;return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(c,e)})):c(e)}},77153:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/treeview",function(){return r(75994)}])},76811:function(e){"use strict";e.exports=JSON.parse('{"id":"0","name":"Root","children":[{"id":"1","name":"Node 1","children":[{"id":"2","name":"Node 2","children":[{"id":"3","name":"Node 3","children":[{"id":"4","name":"Node 4"}]},{"id":"5","name":"Node 5"}]},{"id":"6","name":"Node 6","children":[{"id":"7","name":"Node 7","children":[{"id":"8","name":"Node 8"},{"id":"9","name":"Node 9"}]}]}]},{"id":"10","name":"Node 10","children":[{"id":"11","name":"Node 11","children":[{"id":"12","name":"Node 12"}]}]}]}')}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=77153)}),_N_E=e.O()}]);