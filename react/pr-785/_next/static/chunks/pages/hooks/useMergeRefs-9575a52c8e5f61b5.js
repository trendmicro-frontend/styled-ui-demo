(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1209],{75799:function(e,n,r){"use strict";r.r(n);var s=r(52322),t=r(45392);function i(e){var n=Object.assign({div:"div",h1:"h1",p:"p",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",code:"code",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,t.ah)(),e.components);return(0,s.jsxs)(n.div,{className:"main-content",id:"main-content",children:[(0,s.jsx)(n.h1,{id:"usemergerefs",children:"useMergeRefs"}),"\n",(0,s.jsx)(n.p,{children:"A custom Hook that merges React refs into a single memoized function."}),"\n",(0,s.jsxs)(n.h2,{id:"import",children:["Import",(0,s.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,s.jsx)(n.svg,{children:(0,s.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useMergeRefs } from '@tonic-ui/react-hooks';\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"usage",children:["Usage",(0,s.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,s.jsx)(n.svg,{children:(0,s.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const refs = useMergeRefs(ref1, ref2);\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"parameters",children:["Parameters",(0,s.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#parameters",children:(0,s.jsx)(n.svg,{children:(0,s.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"left",children:"Name"}),(0,s.jsx)(n.th,{align:"left",children:"Type"}),(0,s.jsx)(n.th,{align:"left",children:"Default"}),(0,s.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"left",children:"...refs"}),(0,s.jsx)(n.td,{align:"left",children:"RefObject"}),(0,s.jsx)(n.td,{align:"left"}),(0,s.jsx)(n.td,{align:"left",children:"The refs to merge."})]})})]}),"\n",(0,s.jsxs)(n.h3,{id:"returns",children:["Returns",(0,s.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#returns",children:(0,s.jsx)(n.svg,{children:(0,s.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Returns a single function that can be used to set multiple refs."}),"\n",(0,s.jsxs)(n.h2,{id:"demos",children:["Demos",(0,s.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#demos",children:(0,s.jsx)(n.svg,{children:(0,s.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,s.jsx)(n.pre,{noInline:!0,children:(0,s.jsx)(n.code,{className:"language-jsx",children:"const Component = React.forwardRef(function Component(props, ref) {\n  const internalRef = React.useRef();\n  const refs = useMergeRefs(internalRef, ref);\n\n  React.useEffect(() => {\n    console.log('ref.current:', ref.current);\n    console.log('internalRef.current:', internalRef.current);\n  }, []);\n\n  return (\n    <Box ref={refs} {...props}>\n      A component with multiple refs\n    </Box>\n  );\n});\n\nrender(() => {\n  const externalRef = React.useRef();\n\n  React.useEffect(() => {\n    console.log('externalRef.current:', externalRef.current);\n  }, []);\n\n  return (\n    <Component ref={externalRef} />\n  );\n});\n"})})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,t.ah)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},46942:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useMergeRefs",function(){return r(75799)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=46942)}),_N_E=e.O()}]);