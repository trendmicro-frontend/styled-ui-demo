(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[40],{39140:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return i}});var a=n(7896),o=n(59740),r=(n(2784),n(30876)),l=["components"],d={};function i(e){var t=e.components,n=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Calendar"),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Calendar,\n} from '@tonic-ui/react-lab';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const CodeBlock = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Box\n      backgroundColor={colorStyle.background.secondary}\n      border={1}\n      borderColor={colorStyle.divider}\n      fontFamily=\"mono\"\n      py=\"3x\"\n      px=\"3x\"\n      whiteSpace=\"pre\"\n      {...props}\n    />\n  );\n};\n\nconst FormGroup = (props) => (\n  <Box mb=\"4x\" {...props} />\n);\n\nconst firstDayOfWeekOptions = [\n  0, // Sunday\n  1, // Monday\n  2, // Tuesday\n  3, // Wednesday\n  4, // Thursday\n  5, // Friday\n  6, // Saturday\n];\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst mapDateOptionToDateObject = (dateOption) => ({\n  'none': null,\n  'today': new Date(),\n  'invalid': new Date(''),\n}[dateOption]);\n\nconst disableWeekdays = (date) => {\n  const day = date.getDay();\n  return (day > 0) && (day < 6);\n};\n\nconst disableWeekends = (date) => {\n  const day = date.getDay();\n  return (day === 0) || (day === 6);\n};\n\nrender(() => {\n  const today = useConst(() => new Date());\n  const [date, setDate] = React.useState(mapDateOptionToDateObject(dateOption));\n  const [locale, setLocale] = React.useState('enUS');\n  const [maxDate, setMaxDate] = React.useState('');\n  const [minDate, setMinDate] = React.useState('');\n  const [error, setError] = React.useState();\n  const [dateOption, changeDateOptionBy] = useSelection('none');\n  const [firstDayOfWeek, changeFirstDayOfWeekBy] = useSelection(0);\n  const [shouldDisableDateOption, changeShouldDisableDateOptionBy] = useSelection('none');\n  const dateFormat = 'yyyy-MM-dd';\n  const displayDate = dateFns.isValid(date) ? dateFns.format(date, dateFormat) : '';\n\n  React.useEffect(() => {\n    setDate(mapDateOptionToDateObject(dateOption));\n  }, [dateOption]);\n\n  return (\n    <>\n      <FormGroup>\n        <Flex\n          alignItems=\"center\"\n          columnGap=\"2x\"\n        >\n          <TextLabel>\n            Selected date:\n          </TextLabel>\n          {error && (\n            <Text color=\"red:50\">{error}</Text>\n          )}\n          {!error && (\n            <Text>{displayDate}</Text>\n          )}\n        </Flex>\n      </FormGroup>\n      <Calendar\n        date={date}\n        firstDayOfWeek={firstDayOfWeek}\n        formatDate={(date, format) => {\n          const options = {\n            locale: locale && dateFnsLocale[locale],\n          };\n          return dateFns.format(date, format, options);\n        }}\n        maxDate={maxDate ? new Date(maxDate) : undefined}\n        minDate={minDate ? new Date(minDate) : undefined}\n        onChange={(nextDate) => {\n          console.log('onChange:', nextDate);\n          setDate(nextDate);\n        }}\n        onError={(error, value) => {\n          console.log('onError:', error);\n          setError(error);\n        }}\n        shouldDisableDate={(date) => {\n          if (shouldDisableDateOption === 'weekdays') {\n            return disableWeekdays(date);\n          }\n          if (shouldDisableDateOption === 'weekends') {\n            return disableWeekends(date);\n          }\n          return false;\n        }}\n      />\n      <Divider my=\"4x\" />\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Localization\n        </Text>\n      </Box>\n      <FormGroup>\n        <Flex\n          alignItems=\"center\"\n          columnGap=\"2x\"\n        >\n          <TextLabel>\n            Locale:\n          </TextLabel>\n          <Menu>\n            <MenuButton variant=\"secondary\" minWidth={100}>\n              {locale && dateFnsLocale[locale].code}\n            </MenuButton>\n            <MenuList\n              onClick={(event) => {\n                const value = event.target.getAttribute('value');\n                setLocale(value);\n              }}\n              maxHeight={240}\n              minWidth={100}\n              overflowY=\"auto\"\n            >\n              {Object.keys(dateFnsLocale).map((locale) => (\n                <MenuItem key={locale} value={locale}>\n                  {dateFnsLocale[locale].code}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <LinkButton onClick={() => setLocale('enUS')}>\n            Reset\n          </LinkButton>\n        </Flex>\n      </FormGroup>\n      <Flex\n        direction=\"column\"\n        mb=\"4x\"\n        rowGap=\"3x\"\n      >\n        <TextLabel>\n          You can use the <Code>formatDate</Code> prop to return a formatted date string in the given format and locale.\n        </TextLabel>\n        <CodeBlock>\n          {`// format\\nimport format from 'date-fns/format';\\n\\n// locale\\nimport enLocale from 'date-fns/locale/en-US'; // English (United States)\\nimport deLocale from 'date-fns/locale/de'; // Deutsch\\nimport esLocale from 'date-fns/locale/es'; // Espa\xf1ol\\nimport frLocale from 'date-fns/locale/fr'; // Fran\xe7ais\\nimport itLocale from 'date-fns/locale/it'; // Italiano\\nimport jaLocale from 'date-fns/locale/ja'; // \u65e5\u672c\u8a9e\\nimport koLocale from 'date-fns/locale/ko'; // \ud55c\uad6d\uc5b4\\nimport zhCNLocale from 'date-fns/locale/zh-CN'; // \u7b80\u4f53\u4e2d\u6587\\nimport zhTWLocale from 'date-fns/locale/zh-TW'; // \u7e41\u9ad4\u4e2d\u6587`}\n        </CodeBlock>\n        <CodeBlock>\n          {`// Calendar component\\nformatDate={(date, format, options) => {\\n  return format(date, format, { locale: enLocale });\\n}}`}\n        </CodeBlock>\n      </Flex>\n      <Divider my=\"4x\" />\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Calendar props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            firstDayOfWeek\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {[0, 1, 2, 3, 4, 5, 6].map(value => (\n            <Button\n              key={value}\n              selected={value === firstDayOfWeek}\n              onClick={changeFirstDayOfWeekBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            {dateOption === 'none' && `date={null}`}\n            {dateOption === 'today' && `date={new Date()}`}\n            {dateOption === 'invalid' && `date={new Date('')}`}\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['none', 'today', 'invalid'].map(value => (\n            <Button\n              key={value}\n              selected={value === dateOption}\n              onClick={changeDateOptionBy(value)}\n              minWidth=\"15x\"\n            >\n              {{\n                'none': 'None',\n                'today': 'Today',\n                'invalid': 'Invalid Date',\n              }[value]}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            minDate={minDate ? `{new Date('${minDate}'}}` : ''}\n          </TextLabel>\n        </Box>\n        <Input\n          type=\"date\"\n          value={minDate}\n          onChange={(e) => setMinDate(e.target.value)}\n          width=\"auto\"\n        />\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            maxDate={maxDate ? `{new Date('${maxDate}'}}` : ''}\n          </TextLabel>\n        </Box>\n        <Input\n          type=\"date\"\n          value={maxDate}\n          onChange={(e) => setMaxDate(e.target.value)}\n          width=\"auto\"\n        />\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            shouldDisableDate\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['none', 'weekdays', 'weekends'].map(value => (\n            <Button\n              key={value}\n              selected={value === shouldDisableDateOption}\n              onClick={changeShouldDisableDateOptionBy(value)}\n              minWidth=\"15x\"\n            >\n              {{\n                'none': 'None',\n                'weekdays': 'Disable Weekdays',\n                'weekends': 'Disable Weekends',\n              }[value]}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n    </>\n  );\n});\n")),(0,r.kt)("h2",null,"Props"),(0,r.kt)("h3",null,"Calendar"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"date"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Date"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The selected date.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"defaultDate"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Date"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The default selected date.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"firstDayOfWeek"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first day of the week.",(0,r.kt)("br",null),"0 = Sunday",(0,r.kt)("br",null),"1 = Monday",(0,r.kt)("br",null),"2 = Tuesday",(0,r.kt)("br",null),"3 = Wednesday",(0,r.kt)("br",null),"4 = Thursday",(0,r.kt)("br",null),"5 = Friday",(0,r.kt)("br",null),"6 = Saturday")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"formatDate"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"A callback called to return the formatted date string in the given format.",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("b",null,"Signature"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"function(date, format, options) => void"),(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"date"),": The original date.",(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"format"),": The string of ",(0,r.kt)("a",{parentName:"td",href:"https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table"},"format tokens"),".",(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"options"),": An object with options.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"minDate"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Date"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The minimum date that can be selected.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"maxDate"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Date"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The maximum date that can be selected.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onChange"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"A callback called when the value (the selected date) changes.",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("b",null,"Signature:"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"function(value) => void"),(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"value"),": The selected date.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onError"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"An error-first callback called when the date validation returns an error (or the date is valid after error).",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("b",null,"Signature"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"function(error, value) => void"),(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"error"),": The error message. It will be ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if the date is valid after error.",(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"value"),": The selected date.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"shouldDisableDate"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Disable specific date.",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("b",null,"Signature:"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"function(date) => boolean"),(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"date"),": The date to check.",(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"returns (boolean)"),": Return ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," if the date will be disabled.")))))}i.isMDXComponent=!0},54476:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/lab/date-pickers/Calendar",function(){return n(39140)}])}},function(e){e.O(0,[9774,2888,179],(function(){return t=54476,e(e.s=t);var t}));var t=e.O();_N_E=t}]);