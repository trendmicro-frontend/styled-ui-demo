(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7807],{41555:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return index_page}});var o=t(52322),r=t(45392),l=t(83449),a=t(95412),i=t(73705),c=t(88510),s=t(67569),d=t(76635),u=t.n(d),m=t(2784);function _extends(){return(_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function _objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function _unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return _arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(e,n)}}function _arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var g=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],f=u().range(360).map(function(e){var n=u().sampleSize(g,u().random(0,g.length)),t=new Date(Date.now()-u().random(0,2592e6));return{id:e+1,endpoint:"Endpoint ".concat(e+1),detections:n,lastSeen:t}}),virtualized_rows=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,s.useColorStyle)())||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,1)||_unsupportedIterableToArray(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],t=(0,m.useMemo)(function(){return[{header:"Endpoint",accessorKey:"endpoint",size:200},{header:"Detections",accessorKey:"detections",cell:function(e){var n;return(function(e){if(Array.isArray(e))return _arrayLikeToArray(e)}(n=(0,e.getValue)())||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||_unsupportedIterableToArray(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).length},size:100},{header:"Last Seen",accessorKey:"lastSeen",cell:function(e){return(0,e.getValue)().toISOString()},size:200}]},[]),o=(0,a.b7)({data:f,columns:t,defaultColumn:{minSize:40},getCoreRowModel:(0,i.sC)()}),r=(0,m.useRef)(),l=(0,c.MG)({count:o.getRowModel().rows.length,getScrollElement:function(){var e;return null===(e=r.current)||void 0===e?void 0:e.firstChild},estimateSize:function(e){return 36},overscan:10});return m.createElement(m.Fragment,null,m.createElement(s.Box,{mb:"4x",px:"3x"},m.createElement(s.Text,null,"Total: ",o.getRowModel().rows.length)),m.createElement(s.Table,_extends({layout:"flexbox"},{height:396}),m.createElement(s.TableHeader,null,o.getHeaderGroups().map(function(e){return m.createElement(s.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return m.createElement(s.TableHeaderCell,_extends({key:e.id},n),e.isPlaceholder?null:m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.header,e.getContext())))}))})),m.createElement(s.TableScrollbar,{ref:r,height:"100%",overflow:"visible"},m.createElement(s.Box,{position:"relative",width:"100%",style:{height:l.getTotalSize()}},m.createElement(s.TableBody,null,l.getVirtualItems().map(function(e){var t=o.getRowModel().rows[e.index];return m.createElement(s.Box,{key:e.key,position:"absolute",top:0,left:0,width:"100%",style:{height:"".concat(e.size,"px"),transform:"translateY(".concat(e.start,"px)")}},t&&m.createElement(s.TableRow,{_hover:{backgroundColor:n.background.highlighted}},t.getVisibleCells().map(function(e){var n=_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return m.createElement(s.TableCell,_extends({key:e.id},n),m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.cell,e.getContext())))})))}))))))},p=t(49427);function sorting_extends(){return(sorting_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function sorting_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function sorting_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?sorting_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):sorting_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function sorting_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return sorting_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return sorting_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function sorting_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var h=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],sorting=function(){var e=sorting_slicedToArray((0,s.useColorMode)(),1)[0],n=sorting_slicedToArray((0,s.useColorStyle)(),1)[0],t=sorting_slicedToArray((0,m.useState)([{id:"eventType",desc:!1}]),2),o=t[0],r=t[1],l=sorting_slicedToArray((0,p.useToggle)(!1),2),c=l[0],d=l[1];(0,m.useEffect)(function(){c&&r([])},[c]);var u=(0,m.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),g=(0,a.b7)({data:h,columns:u,defaultColumn:{minSize:40},state:{sorting:o},enableSorting:!0,enableSortingRemoval:c,getCoreRowModel:(0,i.sC)(),getSortedRowModel:(0,i.tj)(),onSortingChange:function(e){r(e)}}),f=m.createElement(s.Box,{p:"1x"},m.createElement(s.Text,null,"If ",m.createElement(s.Code,null,"true")," then changing sort order will circle like: `none` → `desc` → `asc` → `none` → ..."),m.createElement(s.Text,null,"If ",m.createElement(s.Code,null,"false")," then changing sort order will circle like: `none` → `desc` → `asc` → `desc` → `asc` → ..."));return m.createElement(m.Fragment,null,m.createElement(s.Box,{mb:"4x",px:"3x"},m.createElement(s.Checkbox,{checked:c,onChange:function(){d()}},m.createElement(s.Flex,{alignItems:"center"},"Enable the ability to remove sorting for the table",m.createElement(s.Space,{width:"2x"}),m.createElement(s.Tooltip,{label:"dark"===e?m.createElement(s.LightMode,null,f):m.createElement(s.DarkMode,null,f)},m.createElement(s.Icon,{icon:"info-o"}))))),m.createElement(s.Table,{layout:"flexbox"},m.createElement(s.TableHeader,null,g.getHeaderGroups().map(function(e){return m.createElement(s.TableHeaderRow,{key:e.id},e.headers.map(function(e){var t,o=sorting_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return e.column.getCanSort()&&(o=sorting_objectSpread(sorting_objectSpread({},o),{},{cursor:"pointer",userSelect:"none",_hover:{backgroundColor:n.background.highlighted}})),e.column.getIsSorted()&&(o=sorting_objectSpread(sorting_objectSpread({},o),{},{color:n.color.emphasis})),m.createElement(s.TableHeaderCell,sorting_extends({key:e.id,onClick:e.column.getToggleSortingHandler()},o),e.isPlaceholder?null:m.createElement(s.Flex,{alignItems:"center"},m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.header,e.getContext())),null!==(t=({asc:m.createElement(s.Icon,{icon:"sort-up",size:20,ml:"1x"}),desc:m.createElement(s.Icon,{icon:"sort-down",size:20,ml:"1x"})})[e.column.getIsSorted()])&&void 0!==t?t:null))}))})),m.createElement(s.TableBody,null,g.getRowModel().rows.map(function(e){return m.createElement(s.TableRow,{key:e.id,_hover:{backgroundColor:n.background.highlighted}},e.getVisibleCells().map(function(e){var n=sorting_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return m.createElement(s.TableCell,sorting_extends({key:e.id},n),m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.cell,e.getContext())))}))}))))},b=t(1582),y=t(56827);function icon_handle_extends(){return(icon_handle_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var icon_handle=function(e){return m.createElement(s.SVGIcon,icon_handle_extends({width:"2x",height:"4x",viewBox:"0 0 8 16"},e),m.createElement("circle",{cx:"2",cy:"2",r:"1",fill:"#5E5E5E"}),m.createElement("circle",{cx:"2",cy:"6",r:"1",fill:"#5E5E5E"}),m.createElement("circle",{cx:"2",cy:"10",r:"1",fill:"#5E5E5E"}),m.createElement("circle",{cx:"2",cy:"14",r:"1",fill:"#5E5E5E"}),m.createElement("circle",{cx:"6",cy:"2",r:"1",fill:"#5E5E5E"}),m.createElement("circle",{cx:"6",cy:"6",r:"1",fill:"#5E5E5E"}),m.createElement("circle",{cx:"6",cy:"10",r:"1",fill:"#5E5E5E"}),m.createElement("circle",{cx:"6",cy:"14",r:"1",fill:"#5E5E5E"}))},x=["sx"];function row_ordering_movable_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function row_ordering_movable_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?row_ordering_movable_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):row_ordering_movable_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function row_ordering_movable_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||row_ordering_movable_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function row_ordering_movable_extends(){return(row_ordering_movable_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function row_ordering_movable_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return row_ordering_movable_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return row_ordering_movable_arrayLikeToArray(e,n)}}function row_ordering_movable_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var DragHandleIcon=function(e){var n,t=e.sx,o=function(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}(e,x);return m.createElement(s.Flex,row_ordering_movable_extends({sx:[{'[role="row"]:hover > [role="cell"] &':{opacity:1},opacity:0,cursor:"move",px:"1x",width:"4x",position:"absolute",left:0}].concat(function(e){if(Array.isArray(e))return row_ordering_movable_arrayLikeToArray(e)}(n=Array.isArray(t)?t:[t])||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||row_ordering_movable_unsupportedIterableToArray(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())},o),m.createElement(icon_handle,null))},row_ordering_movable=function(){var e=row_ordering_movable_slicedToArray((0,s.useColorStyle)(),1)[0],n=row_ordering_movable_slicedToArray((0,m.useState)([{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}]),2),t=n[0],o=n[1],r=row_ordering_movable_slicedToArray((0,m.useState)({}),2),l=r[0],c=r[1],d=(0,m.useMemo)(function(){return[{id:"selection",header:function(e){var n=e.table;return m.createElement(s.Checkbox,{checked:n.getIsAllRowsSelected(),indeterminate:n.getIsSomeRowsSelected(),onChange:n.getToggleAllRowsSelectedHandler()})},cell:function(e){var n=e.row;return m.createElement(s.Checkbox,{checked:n.getIsSelected(),disabled:!n.getCanSelect(),indeterminate:n.getIsSomeSelected(),onChange:n.getToggleSelectedHandler()})},size:48,style:{px:"4x"}},{accessorKey:"eventType",header:function(){return m.createElement(s.Truncate,null,"Event Type")},cell:function(e){var n=e.getValue;return m.createElement(s.Truncate,null,n())},size:240},{accessorKey:"affectedDevices",header:function(){return m.createElement(s.Truncate,null,"Affected Devices")},cell:function(e){var n=e.getValue;return m.createElement(s.Truncate,null,n())},size:150,style:{textAlign:"right"}},{accessorKey:"detections",header:function(){return m.createElement(s.Truncate,null,"Detections")},cell:function(e){var n=e.getValue;return m.createElement(s.Truncate,null,n())},size:150,style:{textAlign:"right"}}]},[]),u=(0,a.b7)({data:t,columns:d,defaultColumn:{minSize:48},state:{rowSelection:l},enableRowSelection:!0,onRowSelectionChange:c,getCoreRowModel:(0,i.sC)()}),g=row_ordering_movable_slicedToArray((0,p.useToggle)(!0),2),f=g[0],h=g[1],x=Object.keys(l).length,T=u.getRowModel().rows;return m.createElement(m.Fragment,null,m.createElement(s.Box,{mb:"4x",px:"3x"},m.createElement(s.Checkbox,{checked:f,onChange:function(){h()}},m.createElement(s.Flex,{alignItems:"center"},"Enable reordering of rows by dragging the entire table row"))),m.createElement(s.Box,{mb:"4x",px:"3x"},m.createElement(s.Text,null,x," selected")),m.createElement(s.Table,{layout:"flexbox"},m.createElement(s.TableHeader,null,u.getHeaderGroups().map(function(e){return m.createElement(s.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=row_ordering_movable_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return m.createElement(s.TableHeaderCell,row_ordering_movable_extends({key:e.id},n),e.isPlaceholder?null:(0,a.ie)(e.column.columnDef.header,e.getContext()))}))})),m.createElement(y.aV,{lockVertically:!0,values:T,onChange:function(e){var n=e.oldIndex,r=e.newIndex;o((0,y.Rp)(t,n,r));var a=T.map(function(e,n){return l[n]});c((0,y.Rp)(a,n,r).reduce(function(e,n,t){return void 0!==n&&(e[t]=n),e},{}))},renderList:function(e){var n=e.children,t=e.props;return e.isDragged,m.createElement(s.TableBody,t,n)},renderItem:function(n){var t=n.value,o=n.props,r=n.isDragged;return n.isOutOfBounds,m.createElement(s.TableRow,row_ordering_movable_extends({key:t.id,"data-selected":(0,b.dataAttr)(t.getIsSelected()),sx:{cursor:r?"move":void 0,_hover:{backgroundColor:r?"gray:70":e.background.highlighted},_selected:{backgroundColor:r?"gray:70":e.background.selected}}},o),t.getVisibleCells().map(function(e){var n=row_ordering_movable_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return"selection"===e.column.id?m.createElement(s.TableCell,{key:e.id,sx:row_ordering_movable_objectSpread(row_ordering_movable_objectSpread({},n),{},{position:"relative"})},m.createElement(s.Flex,{alignItems:"center"},m.createElement(DragHandleIcon,{"data-movable-handle":f?void 0:""}),(0,a.ie)(e.column.columnDef.cell,e.getContext()))):m.createElement(s.TableCell,{key:e.id,sx:row_ordering_movable_objectSpread({},n)},(0,a.ie)(e.column.columnDef.cell,e.getContext()))}))}})))};function row_selection_extends(){return(row_selection_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function row_selection_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function row_selection_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?row_selection_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):row_selection_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function row_selection_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return row_selection_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return row_selection_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function row_selection_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var T=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],row_selection=function(){var e=row_selection_slicedToArray((0,s.useColorStyle)(),1)[0],n=row_selection_slicedToArray((0,m.useState)({}),2),t=n[0],o=n[1],r=(0,m.useMemo)(function(){return[{id:"selection",header:function(e){var n=e.table;return m.createElement(s.Checkbox,{checked:n.getIsAllRowsSelected(),indeterminate:n.getIsSomeRowsSelected(),onChange:n.getToggleAllRowsSelectedHandler()})},cell:function(e){var n=e.row;return m.createElement(s.Checkbox,{checked:n.getIsSelected(),disabled:!n.getCanSelect(),indeterminate:n.getIsSomeSelected(),onChange:n.getToggleSelectedHandler()})},size:48,style:{px:"4x"}},{accessorKey:"eventType",header:function(){return m.createElement(s.Truncate,null,"Event Type")},cell:function(e){var n=e.getValue;return m.createElement(s.Truncate,null,n())},size:240},{accessorKey:"affectedDevices",header:function(){return m.createElement(s.Truncate,null,"Affected Devices")},cell:function(e){var n=e.getValue;return m.createElement(s.Truncate,null,n())},size:150,style:{textAlign:"right"}},{accessorKey:"detections",header:function(){return m.createElement(s.Truncate,null,"Detections")},cell:function(e){var n=e.getValue;return m.createElement(s.Truncate,null,n())},size:150,style:{textAlign:"right"}}]},[]),l=(0,a.b7)({data:T,columns:r,defaultColumn:{minSize:48},state:{rowSelection:t},enableRowSelection:!0,onRowSelectionChange:o,getCoreRowModel:(0,i.sC)()}),c=Object.keys(t).length;return m.createElement(m.Fragment,null,m.createElement(s.Box,{mb:"4x",px:"3x"},m.createElement(s.Text,null,c," selected")),m.createElement(s.Table,{layout:"flexbox"},m.createElement(s.TableHeader,null,l.getHeaderGroups().map(function(e){return m.createElement(s.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=row_selection_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return m.createElement(s.TableHeaderCell,row_selection_extends({key:e.id},n),e.isPlaceholder?null:(0,a.ie)(e.column.columnDef.header,e.getContext()))}))})),m.createElement(s.TableBody,null,l.getRowModel().rows.map(function(n){return m.createElement(s.TableRow,{key:n.id,"data-selected":(0,b.dataAttr)(n.getIsSelected()),_hover:{backgroundColor:e.background.highlighted},_selected:{backgroundColor:e.background.selected}},n.getVisibleCells().map(function(e){var n=row_selection_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return m.createElement(s.TableCell,row_selection_extends({key:e.id},n),(0,a.ie)(e.column.columnDef.cell,e.getContext()))}))}))))},w=["isExpanded"];function row_expanding_extends(){return(row_expanding_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function row_expanding_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function row_expanding_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?row_expanding_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):row_expanding_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function row_expanding_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return row_expanding_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return row_expanding_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function row_expanding_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var v=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],C=(0,m.forwardRef)(function(e,n){var t=e.isExpanded,o=function(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}(e,w),r=t?Math.floor(93.1):133,l=b.transitionEasing.easeOut,a=t?(0,b.getEnterTransitionProps)({timeout:r,easing:l}):(0,b.getExitTransitionProps)({timeout:r,easing:l}),i={transform:t?"rotate(90deg)":"rotate(0deg)",transition:(0,b.createTransitionStyle)("transform",a)};return m.createElement(s.ButtonBase,o,m.createElement(s.Icon,row_expanding_extends({icon:"angle-right",size:"4x"},i)))});C.displayName="TableRowToggleIcon";var row_expanding=function(){var e=row_expanding_slicedToArray((0,s.useColorMode)(),1)[0],n=row_expanding_slicedToArray((0,s.useColorStyle)(),1)[0],renderExpandedRow=function(n){var t=Object.entries(n.row.original);return m.createElement(s.Flex,{borderBottom:1,borderBottomColor:{dark:"gray:70",light:"gray:30"}[e]},m.createElement(s.Box,{width:"12x",borderRight:2,borderRightColor:{dark:"gray:60",light:"gray:30"}[e]}),m.createElement(s.Box,{as:"pre",fontFamily:"mono",m:0,px:"3x",py:"2x"},m.createElement(s.Grid,{templateColumns:"auto auto",columnGap:"10x",rowGap:"1x"},t.map(function(e){var n=row_expanding_slicedToArray(e,2),t=n[0],o=n[1];return m.createElement(m.Fragment,{key:t},m.createElement(s.TextLabel,null,t),m.createElement(s.Text,null,Array.isArray(o)?o.map(function(e){return m.createElement(s.Text,{key:e},e)}):"boolean"==typeof o?o.toString():o))}))))},t=(0,m.useMemo)(function(){return[{id:"expand",header:function(){return null},cell:function(e){var n=e.row,t=n.getCanExpand(),o=n.getIsExpanded();return t?m.createElement(C,{isExpanded:o,onClick:n.getToggleExpandedHandler()}):null},size:48},{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),o=(0,a.b7)({data:v,columns:t,defaultColumn:{minSize:40},getRowCanExpand:function(){return!0},getCoreRowModel:(0,i.sC)(),getExpandedRowModel:(0,i.rV)()});return m.createElement(s.Table,{layout:"flexbox"},m.createElement(s.TableHeader,null,o.getHeaderGroups().map(function(e){return m.createElement(s.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=row_expanding_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return m.createElement(s.TableHeaderCell,row_expanding_extends({key:e.id},n),e.isPlaceholder?null:m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.header,e.getContext())))}))})),m.createElement(s.TableBody,null,o.getRowModel().rows.map(function(e){return m.createElement(m.Fragment,{key:e.id},m.createElement(s.TableRow,{"data-selected":(0,b.dataAttr)(e.getIsExpanded()),_hover:{backgroundColor:n.background.highlighted},_selected:{backgroundColor:n.background.selected}},e.getVisibleCells().map(function(e){var n=row_expanding_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return m.createElement(s.TableCell,row_expanding_extends({key:e.id},n),m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.cell,e.getContext())))})),e.getCanExpand()&&m.createElement(s.Collapse,{in:e.getIsExpanded()},renderExpandedRow({row:e})),e.getCanExpand()&&!1)})))},S=t(5081);function pagination_extends(){return(pagination_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function pagination_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function pagination_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?pagination_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):pagination_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function pagination_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||pagination_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pagination_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return pagination_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return pagination_arrayLikeToArray(e,n)}}function pagination_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var R=["Virus/Malware","Spyware/Grayware","URL Filtering","Web Reputation","Network Virus","Application Control"],D=u().range(360).map(function(e){var n=u().sampleSize(R,u().random(0,R.length)),t=new Date(Date.now()-u().random(0,2592e6));return{id:e+1,endpoint:"Endpoint ".concat(e+1),detections:n,lastSeen:t}}),TablePagination=function(e){var n=e.count,t=e.defaultPage,o=void 0===t?1:t,r=e.defaultRowsPerPage,l=e.onPageChange,a=e.onRowsPerPageChange,i=e.page,c=e.rowsPerPage,d=e.rowsPerPageOptions,u=void 0===d?[10,25,50,100]:d;e.showFirstButton,e.showLastButton;var g=pagination_slicedToArray((0,s.useColorStyle)(),1)[0],f=null!=r?r:(0,S.rY)(u)[0],p=pagination_slicedToArray((0,m.useState)(null!=i?i:o),2),h=p[0],b=p[1],y=pagination_slicedToArray((0,m.useState)(null!=c?c:f),2),x=y[0],T=y[1];(0,m.useEffect)(function(){void 0!==i&&b(i)},[i]),(0,m.useEffect)(function(){void 0!==c&&T(c)},[c]);var w=(0,m.useCallback)(function(e){void 0!==i||b(e),"function"==typeof l&&l(e)},[i,l]),v=(0,m.useCallback)(function(e){void 0!==c||T(e),"function"==typeof a&&a(e)},[c,a]),C=Math.ceil(n/x),R=h>1,D=h<C;return m.createElement(s.Flex,{alignItems:"center",justifyContent:"flex-end",backgroundColor:g.background.secondary,px:"6x",py:"3x"},m.createElement(s.Text,{mr:"2x"},"Total: ",n),m.createElement(s.Divider,{orientation:"vertical",height:"6x"}),m.createElement(s.Menu,null,m.createElement(s.MenuButton,{variant:"ghost"},x," per page"),m.createElement(s.MenuList,{onClick:function(e){var n=(0,S.q9)(e.target.value);n>0&&(w(1),v(n))},width:"100%"},u.map(function(e){return m.createElement(s.MenuItem,{key:e,value:e},e)}))),m.createElement(s.Divider,{orientation:"vertical",height:"6x"}),m.createElement(s.Space,{width:"2x"}),m.createElement(s.Input,{width:"10x",px:0,textAlign:"center",onChange:function(e){var n=(0,S.q9)(e.target.value);n<=1?w(1):n>=C?w(C):w(n)},value:h}),m.createElement(s.Space,{width:"2x"}),m.createElement(s.Text,null,"/"),m.createElement(s.Space,{width:"2x"}),m.createElement(s.Text,null,C),m.createElement(s.Space,{width:"2x"}),m.createElement(s.ButtonGroup,{variant:"secondary",sx:{"> *:not(:first-of-type)":{marginLeft:-1}}},m.createElement(s.Button,{width:"8x",disabled:!R,onClick:function(e){w(h-1)}},m.createElement(s.Icon,{icon:"angle-left"})),m.createElement(s.Button,{width:"8x",disabled:!D,onClick:function(e){w(h+1)}},m.createElement(s.Icon,{icon:"angle-right"}))))},ConditionalWrapper=function(e){var n=e.children,t=e.condition,o=e.wrapper;return t?o(n):n},pagination=function(){var e=pagination_slicedToArray((0,s.useColorStyle)(),1)[0],n=(0,m.useMemo)(function(){return[{header:"Endpoint",accessorKey:"endpoint",size:200},{header:"Detections",accessorKey:"detections",cell:function(e){var n;return(function(e){if(Array.isArray(e))return pagination_arrayLikeToArray(e)}(n=(0,e.getValue)())||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||pagination_unsupportedIterableToArray(n)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).length},size:150},{header:"Last Seen",accessorKey:"lastSeen",cell:function(e){return(0,e.getValue)().toISOString()},size:200}]},[]),t=(0,a.b7)({data:D,columns:n,defaultColumn:{minSize:40},getCoreRowModel:(0,i.sC)(),getPaginationRowModel:(0,i.G_)()}),o=t.getState().pagination.pageIndex+1,r=t.getCoreRowModel().rows.length,l={};return l={height:452},m.createElement(m.Fragment,null,m.createElement(s.Box,{mb:"4x",px:"3x"},m.createElement(s.Text,null,"Current page: ",o)),m.createElement(s.Table,pagination_extends({layout:"flexbox"},l),m.createElement(s.TableHeader,null,t.getHeaderGroups().map(function(e){return m.createElement(s.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=pagination_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return m.createElement(s.TableHeaderCell,pagination_extends({key:e.id},n),e.isPlaceholder?null:m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.header,e.getContext())))}))})),m.createElement(ConditionalWrapper,{condition:!0,wrapper:function(e){return m.createElement(s.TableScrollbar,{height:"100%",overflow:"visible"},e)}},m.createElement(s.TableBody,null,t.getRowModel().rows.map(function(n){return m.createElement(s.TableRow,{key:n.id,_hover:{backgroundColor:e.background.highlighted}},n.getVisibleCells().map(function(e){var n=pagination_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return m.createElement(s.TableCell,pagination_extends({key:e.id},n),m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.cell,e.getContext())))}))}))),m.createElement(TablePagination,{count:r,onPageChange:function(e){var n=Math.max((0,S.q9)(e)-1,0);t.setPageIndex(n)},onRowsPerPageChange:function(e){var n=Math.max((0,S.q9)(e),1);t.setPageSize(n)}})))};function column_visibility_extends(){return(column_visibility_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function column_visibility_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function column_visibility_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?column_visibility_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):column_visibility_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function column_visibility_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return column_visibility_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return column_visibility_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_visibility_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var z=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],column_visibility=function(){var e=column_visibility_slicedToArray((0,s.useColorStyle)(),1)[0],n=column_visibility_slicedToArray((0,m.useState)({}),2),t=n[0],o=n[1],r=(0,m.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),l=(0,a.b7)({data:z,columns:r,defaultColumn:{minSize:40},state:{columnVisibility:t},onColumnVisibilityChange:o,getCoreRowModel:(0,i.sC)()});return m.createElement(m.Fragment,null,m.createElement(s.Box,{mb:"4x",px:"3x"},m.createElement(s.Flex,{display:"inline-flex",flexDirection:"column"},m.createElement(s.Checkbox,{checked:l.getIsAllColumnsVisible(),indeterminate:l.getIsSomeColumnsVisible()&&!l.getIsAllColumnsVisible(),onChange:l.getToggleAllColumnsVisibilityHandler()},"Toggle All"),m.createElement(s.Divider,{my:"2x"}),m.createElement(s.Stack,{spacing:"1x"},l.getAllLeafColumns().map(function(e){return m.createElement(m.Fragment,{key:e.id},m.createElement(s.Checkbox,{checked:e.getIsVisible(),onChange:e.getToggleVisibilityHandler()},e.columnDef.header))})))),m.createElement(s.Table,{layout:"flexbox"},m.createElement(s.TableHeader,null,l.getHeaderGroups().map(function(e){return m.createElement(s.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=column_visibility_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return m.createElement(s.TableHeaderCell,column_visibility_extends({key:e.id},n),e.isPlaceholder?null:m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.header,e.getContext())))}))})),m.createElement(s.TableBody,null,l.getRowModel().rows.map(function(n){return m.createElement(s.TableRow,{key:n.id,"data-selected":(0,b.dataAttr)(n.getIsSelected()),_hover:{backgroundColor:e.background.highlighted},_selected:{backgroundColor:e.background.selected}},n.getVisibleCells().map(function(e){var n=column_visibility_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return m.createElement(s.TableCell,column_visibility_extends({key:e.id},n),m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.cell,e.getContext())))}))}))))};function column_resizing_extends(){return(column_resizing_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function column_resizing_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function column_resizing_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?column_resizing_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):column_resizing_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function column_resizing_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return column_resizing_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return column_resizing_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_resizing_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var k=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],column_resizing=function(){var e=column_resizing_slicedToArray((0,s.useColorMode)(),1)[0],n=column_resizing_slicedToArray((0,s.useColorStyle)(),1)[0],t=column_resizing_slicedToArray((0,m.useState)("onChange"),2),o=t[0],r=t[1],l=(0,m.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",enableResizing:!0,size:240},{header:"Affected Devices",accessorKey:"affectedDevices",enableResizing:!0,size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",enableResizing:!0,size:150,style:{textAlign:"right"}}]},[]),c=(0,m.useRef)(),d=(0,a.b7)({data:k,columns:l,defaultColumn:{minSize:40},columnResizeMode:o,getCoreRowModel:(0,i.sC)()});return m.createElement(m.Fragment,null,m.createElement(s.Box,{mb:"4x",px:"3x"},m.createElement(s.Menu,null,m.createElement(s.MenuButton,{variant:"secondary"},"Resize: ",o),m.createElement(s.MenuList,{onClick:function(e){r(e.target.value)},width:"max-content"},m.createElement(s.MenuItem,{value:"onChange"},"Resize: onChange"),m.createElement(s.MenuItem,{value:"onEnd"},"Resize: onEnd")))),m.createElement(s.Table,{ref:c,layout:"flexbox",variant:"outline"},m.createElement(s.TableHeader,null,d.getHeaderGroups().map(function(n){return m.createElement(s.TableHeaderRow,{key:n.id},n.headers.map(function(n){var t,r,l,i=column_resizing_objectSpread({position:"relative",minWidth:n.column.columnDef.minSize,width:n.getSize()},n.column.columnDef.style),u=d.getState().columnSizingInfo,g=u.isResizingColumn===n.column.id,f=null!==(r=null===(l=c.current)||void 0===l?void 0:l.clientHeight)&&void 0!==r?r:"100%",p=(t=({dark:"gray:50",light:"gray:50"})[e],{position:"absolute",top:-1,right:-1*(g?5:8),height:g?f:36,zIndex:1,borderLeft:1,borderLeftColor:g?t:({dark:"gray:70",light:"gray:30"})[e],_hover:{borderLeftColor:t},transform:"onEnd"===o&&g?"translateX(".concat(u.deltaOffset,"px)"):void 0});return m.createElement(s.TableHeaderCell,column_resizing_extends({key:n.id},i),n.isPlaceholder?null:m.createElement(s.Truncate,null,(0,a.ie)(n.column.columnDef.header,n.getContext())),!1!==n.column.columnDef.enableResizing&&m.createElement(s.ResizeHandle,{sx:p,onMouseDown:n.getResizeHandler(),onTouchStart:n.getResizeHandler(),onResize:function(e){e.clientX,e.clientY},onResizeStart:function(e){e.clientX,e.clientY},onResizeEnd:function(e){e.clientX,e.clientY}}))}))})),m.createElement(s.TableBody,null,d.getRowModel().rows.map(function(e){return m.createElement(s.TableRow,{key:e.id,_hover:{backgroundColor:n.background.highlighted}},e.getVisibleCells().map(function(e){var n=column_resizing_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return m.createElement(s.TableCell,column_resizing_extends({key:e.id},n),m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.cell,e.getContext())))}))}))))},P=t(92843),_=t(20103),j=t(28846),E=t(52797);function column_ordering_dnd_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function column_ordering_dnd_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?column_ordering_dnd_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):column_ordering_dnd_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function column_ordering_dnd_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||column_ordering_dnd_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_ordering_dnd_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return column_ordering_dnd_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return column_ordering_dnd_arrayLikeToArray(e,n)}}function column_ordering_dnd_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var DraggableColumn=function(e){var n=e.canDrag,t=e.canDrop,o=e.children,r=e.item,l=e.onDrop,a=column_ordering_dnd_slicedToArray((0,P.c)({type:"column",item:r,canDrag:n,collect:function(e){return{isDragging:e.isDragging()}}}),3),i=a[0],c=a[1],s=a[2],d=column_ordering_dnd_slicedToArray((0,_.L)({accept:"column",drop:l,canDrop:t,collect:function(e){return{isOver:e.isOver()}}}),2),u=d[0];return o({dragRef:c,dragPreviewRef:s,dropRef:d[1],isDragging:i.isDragging,isOver:u.isOver})},column_ordering_dnd=function(){var e=column_ordering_dnd_slicedToArray((0,s.useColorStyle)(),1)[0],n=(0,m.useMemo)(function(){return[{id:1,priority:1,policy:"Team Managers",modifiedTime:16258752e5,modifiedBy:"admin"},{id:2,priority:2,policy:"Marketing Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:3,priority:3,policy:"Sales Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:4,priority:4,policy:"Development Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:5,priority:5,policy:"IT Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:6,priority:null,policy:"Server policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"},{id:7,priority:null,policy:"Endpoint policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"}]},[]),t=(0,m.useMemo)(function(){return[{id:"priority",header:"Priority",accessorKey:"priority",cell:function(e){var n=(0,e.getValue)();return null!=n?n:"-"},size:80},{id:"policy",header:"Policy",accessorKey:"policy",size:240},{id:"modifiedTime",header:"Last Modified",accessorKey:"modifiedTime",cell:function(e){var n=(0,e.getValue)(),t=new Date(n);return"Invalid Date"===t.toString()?"-":m.createElement(s.Truncate,null,t.toLocaleString())},size:180},{id:"modifiedBy",header:"Last Editor",accessorKey:"modifiedBy",size:150}]},[]),o=column_ordering_dnd_slicedToArray((0,m.useState)(t.map(function(e){return e.id})),2),r=o[0],l=o[1],c=(0,a.b7)({data:n,columns:t,defaultColumn:{minSize:40},state:{columnOrder:r},onColumnOrderChange:l,getCoreRowModel:(0,i.sC)()}),moveColumn=function(e,n){var t=function(e){if(Array.isArray(e))return column_ordering_dnd_arrayLikeToArray(e)}(r)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||column_ordering_dnd_unsupportedIterableToArray(r)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();t.splice(t.indexOf(n),0,t.splice(t.indexOf(e),1)[0]),console.log("# columnOrder:",r,t),l(t)};return m.createElement(j.W,{backend:E.PD},m.createElement(s.Table,{layout:"flexbox"},m.createElement(s.TableHeader,null,c.getHeaderGroups().map(function(n){return m.createElement(s.TableHeaderRow,{key:n.id},n.headers.map(function(n){return m.createElement(DraggableColumn,{key:n.id,item:function(){return n},onDrop:function(e,t){moveColumn(e.column.id,n.column.id)}},function(t){var o=t.dragRef,r=t.dragPreviewRef,l=t.dropRef,i=t.isDragging,c=t.isOver,d=column_ordering_dnd_objectSpread({opacity:i?.28:1,minWidth:n.column.columnDef.minSize,width:n.getSize(),_selected:{backgroundColor:e.background.selected}},n.column.columnDef.style),u="priority"!==n.column.columnDef.id,g="priority"!==n.column.columnDef.id;return m.createElement(s.TableHeaderCell,{ref:g?l:void 0,"data-selected":(0,b.dataAttr)(c),sx:column_ordering_dnd_objectSpread({},d)},m.createElement(s.Flex,{ref:u?o:void 0,sx:{alignItems:"center",color:"2x",cursor:u?"move":"default"}},n.isPlaceholder?null:m.createElement(s.Truncate,{ref:r},(0,a.ie)(n.column.columnDef.header,n.getContext()))))})}))})),m.createElement(s.TableBody,null,c.getRowModel().rows.map(function(n,t){return m.createElement(s.TableRow,{key:n.id,_hover:{backgroundColor:e.background.highlighted}},n.getVisibleCells().map(function(e){var n=column_ordering_dnd_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return m.createElement(s.TableCell,{key:e.id,sx:column_ordering_dnd_objectSpread({},n)},m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.cell,e.getContext())))}))}))))},O=t(6738),H=t(34498),B=t.n(H);function column_settings_drawer_extends(){return(column_settings_drawer_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function column_settings_drawer_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return column_settings_drawer_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return column_settings_drawer_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_settings_drawer_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}function column_settings_drawer_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function column_settings_drawer_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?column_settings_drawer_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):column_settings_drawer_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}var A="UPDATE_COLUMNS",reducer=function(e,n){return n.type===A?column_settings_drawer_objectSpread(column_settings_drawer_objectSpread({},e),{},{columns:(0,S.rY)(n.payload)}):e},column_settings_drawer=function(e){var n=e.columns,t=e.defaultColumnOrder,o=e.onUpdateColumns,r=e.isOpen,l=e.onClose,a=column_settings_drawer_slicedToArray((0,s.useColorStyle)(),1)[0],i=column_settings_drawer_slicedToArray((0,m.useReducer)(reducer,{columns:(0,S.rY)(n)}),2),c=i[0],d=i[1],u=c.columns.every(function(e){return!1!==e.isVisible}),g=(0,m.useCallback)(function(){var e=!u;d({type:A,payload:c.columns.map(function(n){return n.isPinned?n:column_settings_drawer_objectSpread(column_settings_drawer_objectSpread({},n),{},{isVisible:e})})})},[u,c.columns]);(0,m.useEffect)(function(){d({type:A,payload:n})},[n]);var f=(0,m.useCallback)(function(){d({type:A,payload:B()(c.columns,function(e){return t.indexOf(e.id)},["asc"])})},[t,c.columns]),p=(0,m.useCallback)(function(){(0,S.zU)(o)(c.columns),(0,S.zU)(l)()},[l,o,c.columns]);return m.createElement(s.Drawer,{autoFocus:!0,backdrop:!0,closeOnEsc:!0,closeOnOutsideClick:!0,returnFocusOnClose:!1,ensureFocus:!0,isClosable:!0,isOpen:r,onClose:l,size:"sm"},m.createElement(s.DrawerOverlay,null),m.createElement(s.DrawerContent,null,m.createElement(s.DrawerHeader,null,"Show/Hide Columns"),m.createElement(s.DrawerBody,null,m.createElement(s.Box,{mb:"1x"},m.createElement(s.Button,{variant:"secondary",onClick:f},"Reset to Default")),m.createElement(s.Box,{mb:"1x"},m.createElement(s.LinkButton,{onClick:g},u?"Clear all":"Select all")),m.createElement(y.aV,{lockVertically:!0,values:c.columns.map(function(e){return column_settings_drawer_objectSpread(column_settings_drawer_objectSpread({},e),{},{disabled:!!e.isPinned})}),onChange:function(e){var n=e.oldIndex,t=e.newIndex;d({type:A,payload:(0,y.Rp)(c.columns,n,t)})},renderList:function(e){var n=e.children,t=e.props;return m.createElement(s.Box,t,n)},renderItem:function(e){var n=e.value,t=(e.index,e.isDragged),o=e.isOutOfBounds,r=e.props,l=!!n.isPinned,i=!1!==n.isVisible,u=l?void 0:t?"gray:70":a.background.highlighted,g=o?"not-allowed":l?void 0:"move";return m.createElement(s.Flex,column_settings_drawer_extends({},r,{sx:{border:1,borderColor:t?"gray:60":"transparent",alignItems:"center",mb:"1x",width:"100%",cursor:g,zIndex:t?"modal":void 0,_hover:{backgroundColor:u}}}),m.createElement(s.Flex,{sx:{"*:hover > &":{opacity:1},opacity:0,px:"1x",minWidth:"4x"}},l?null:m.createElement(icon_handle,null)),m.createElement(s.Checkbox,{role:"checkbox",disabled:l,checked:i,onChange:function(e){var t=e.target.checked;d({type:A,payload:c.columns.map(function(e){return e.id!==n.id?e:column_settings_drawer_objectSpread(column_settings_drawer_objectSpread({},e),{},{isVisible:t})})})}},n.label))}})),m.createElement(s.DrawerFooter,null,m.createElement(s.Grid,{templateColumns:"repeat(2, 1fr)",columnGap:"2x"},m.createElement(s.Button,{variant:"primary",onClick:p},"Save"),m.createElement(s.Button,{variant:"default",onClick:l},"Cancel")))))};function column_ordering_movable_extends(){return(column_ordering_movable_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function column_ordering_movable_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function column_ordering_movable_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?column_ordering_movable_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):column_ordering_movable_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function column_ordering_movable_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return column_ordering_movable_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return column_ordering_movable_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_ordering_movable_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var M=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],getTextWidth=function getTextWidth(e,n){var t=(getTextWidth.canvas||(getTextWidth.canvas=document.createElement("canvas"))).getContext("2d");return t.font=n,t.measureText(e).width||0},column_ordering_movable=function(){var e=(0,s.useTheme)(),n=column_ordering_movable_slicedToArray((0,s.useColorStyle)(),1)[0],t=["eventType","affectedDevices","detections"],o=column_ordering_movable_slicedToArray((0,m.useState)(t),2),r=o[0],l=o[1],c=column_ordering_movable_slicedToArray((0,m.useState)({eventType:!0,affectedDevices:!0,detections:!0}),2),d=c[0],g=c[1],f=(0,p.useConst)(function(){return[{header:"Event Type",accessorKey:"eventType",isPinned:!0,size:"auto"},{header:"Affected Devices",accessorKey:"affectedDevices",isPinned:!1,size:"25%"},{header:"Detections",accessorKey:"detections",isPinned:!1,size:150}]}),h=(0,a.b7)({data:M,columns:f,defaultColumn:{minSize:40},state:{columnOrder:r,columnVisibility:d},onColumnVisibilityChange:g,getCoreRowModel:(0,i.sC)()}),y=column_ordering_movable_slicedToArray((0,m.useState)(0),2),x=y[0],T=y[1];(0,m.useEffect)(function(){if(x){var n=[e.fontWeights.semibold,e.fontSizes.sm,e.fonts.base].join(" "),t=h.getAllColumns().filter(function(e){return"auto"!==e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize,l=o.size;if("number"==typeof l)return{id:t,size:l};if("string"==typeof l&&l.endsWith("%")){var a="string"==typeof o.header?getTextWidth(o.header,n):0;return{id:t,size:Math.max(x*parseFloat(l)/100,a+24,r)}}return{id:t,size:r}}),o=h.getAllColumns().filter(function(e){return"auto"===e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize;return{id:t,size:Math.max(("string"==typeof o.header?getTextWidth(o.header,n):0)+24,r)}}),r=t.reduce(function(e,n){return e+n.size},0),l=o.reduce(function(e,n){return e+n.size},0),a=x-r;if(0===o.length&&a>0){var i=a/t.length;t.forEach(function(e){e.size=e.size+i}),a=0}o.length>0&&a>l&&o.forEach(function(e,n){e.size=Math.max(a/(o.length-n),e.size),a-=e.size});for(var c={},s=0;s<t.length;s++){var d=t[s];c[d.id]=d.size}for(var u=0;u<o.length;u++){var m=o[u];c[m.id]=m.size}h.setColumnSizing(c)}},[f,h,x,e]);var w=column_ordering_movable_slicedToArray((0,m.useState)(!1),2),v=w[0],C=w[1],S=h.getState().columnOrder.map(function(e){var n=h.getColumn(e);return{id:e,label:n.columnDef.header,isPinned:n.columnDef.isPinned,isVisible:h.getState().columnVisibility[e]}}),R=(0,m.useCallback)(function(e){var n=e.map(function(e){return e.id}),t=e.reduce(function(e,n){return e[n.id]=n.isVisible,e},{});l(n),g(t)},[l]);return m.createElement(m.Fragment,null,m.createElement(column_settings_drawer,{columns:S,defaultColumnOrder:t,onUpdateColumns:R,isOpen:v,onClose:function(){return C(!1)}}),m.createElement(s.Flex,{justifyContent:"flex-end",mb:"4x"},m.createElement(s.Button,{variant:"secondary",onClick:function(){return C(!0)}},m.createElement(s.Icon,{icon:"columns"}),m.createElement(s.Space,{width:"2x"}),"Customize Columns")),m.createElement(s.Box,null,m.createElement(O.ZP,{disableHeight:!0,onResize:function(e){var n=e.width;x!==n&&T(n)}},function(e){var t=e.width;return m.createElement(s.Table,{layout:"flexbox",sx:{visibility:u().isEmpty(h.getState().columnSizing)?"hidden":"visible",width:t}},m.createElement(s.TableHeader,null,h.getHeaderGroups().map(function(e){return m.createElement(s.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=column_ordering_movable_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return m.createElement(s.TableHeaderCell,column_ordering_movable_extends({key:e.id},n),e.isPlaceholder?null:m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.header,e.getContext())))}))})),m.createElement(s.TableBody,null,h.getRowModel().rows.map(function(e){return m.createElement(s.TableRow,{key:e.id,"data-selected":(0,b.dataAttr)(e.getIsSelected()),_hover:{backgroundColor:n.background.highlighted},_selected:{backgroundColor:n.background.selected}},e.getVisibleCells().map(function(e){var n=column_ordering_movable_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return m.createElement(s.TableCell,column_ordering_movable_extends({key:e.id},n),m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.cell,e.getContext())))}))})))})))},I=t(28165);function column_auto_sizing_extends(){return(column_auto_sizing_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function column_auto_sizing_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function column_auto_sizing_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?column_auto_sizing_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):column_auto_sizing_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function column_auto_sizing_toConsumableArray(e){return function(e){if(Array.isArray(e))return column_auto_sizing_arrayLikeToArray(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||column_auto_sizing_unsupportedIterableToArray(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_auto_sizing_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||column_auto_sizing_unsupportedIterableToArray(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function column_auto_sizing_unsupportedIterableToArray(e,n){if(e){if("string"==typeof e)return column_auto_sizing_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return column_auto_sizing_arrayLikeToArray(e,n)}}function column_auto_sizing_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var V=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],column_auto_sizing_getTextWidth=function getTextWidth(e,n){var t=(getTextWidth.canvas||(getTextWidth.canvas=document.createElement("canvas"))).getContext("2d");return t.font=n,t.measureText(e).width||0},column_auto_sizing=function(){var e=(0,s.useTheme)(),n=column_auto_sizing_slicedToArray((0,s.useColorStyle)(),1)[0],t=column_auto_sizing_slicedToArray((0,m.useState)([{header:"Event Type",accessorKey:"eventType",size:"auto"},{header:"Affected Devices",accessorKey:"affectedDevices",size:"25%"},{header:"Detections",accessorKey:"detections",size:150}]),2),o=t[0],r=t[1],l=(0,a.b7)({data:V,columns:o,defaultColumn:{minSize:40},getCoreRowModel:(0,i.sC)()}),c=column_auto_sizing_slicedToArray((0,m.useState)(0),2),d=c[0],g=c[1];return(0,m.useEffect)(function(){if(d){var n=[e.fontWeights.semibold,e.fontSizes.sm,e.fonts.base].join(" "),t=l.getAllColumns().filter(function(e){return"auto"!==e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize,l=o.size;if("number"==typeof l)return{id:t,size:l};if("string"==typeof l&&l.endsWith("%")){var a="string"==typeof o.header?column_auto_sizing_getTextWidth(o.header,n):0;return{id:t,size:Math.max(d*parseFloat(l)/100,a+24,r)}}return{id:t,size:r}}),o=l.getAllColumns().filter(function(e){return"auto"===e.columnDef.size}).map(function(e){var t=e.id,o=e.columnDef,r=o.minSize;return{id:t,size:Math.max(("string"==typeof o.header?column_auto_sizing_getTextWidth(o.header,n):0)+24,r)}}),r=t.reduce(function(e,n){return e+n.size},0),a=o.reduce(function(e,n){return e+n.size},0),i=d-r;if(0===o.length&&i>0){var c=i/t.length;t.forEach(function(e){e.size=e.size+c}),i=0}o.length>0&&i>a&&o.forEach(function(e,n){e.size=Math.max(i/(o.length-n),e.size),i-=e.size});for(var s={},u=0;u<t.length;u++){var m=t[u];s[m.id]=m.size}for(var g=0;g<o.length;g++){var f=o[g];s[f.id]=f.size}l.setColumnSizing(s)}},[o,l,d,e]),m.createElement(s.Box,{width:"100%"},o.map(function(e,n){return m.createElement(s.Box,{mb:"4x",key:n},m.createElement(s.Box,{mb:"2x"},m.createElement(s.TextLabel,null,e.header)),m.createElement(s.ButtonGroup,{variant:"secondary",css:(0,I.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["auto","25%",150].map(function(e){return m.createElement(s.Button,{key:e,selected:e===o[n].size,onClick:function(){r([].concat(column_auto_sizing_toConsumableArray(o.slice(0,n)),[column_auto_sizing_objectSpread(column_auto_sizing_objectSpread({},o[n]),{},{size:e})],column_auto_sizing_toConsumableArray(o.slice(n+1))))},minWidth:"15x"},e)})))}),m.createElement(O.ZP,{disableHeight:!0,onResize:function(e){var n=e.width;d!==n&&g(n)}},function(e){var t=e.width;return m.createElement(s.Table,{layout:"flexbox",variant:"default",sx:{visibility:u().isEmpty(l.getState().columnSizing)?"hidden":"visible",width:t}},m.createElement(s.TableHeader,null,l.getHeaderGroups().map(function(e){return m.createElement(s.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=column_auto_sizing_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return m.createElement(s.TableHeaderCell,column_auto_sizing_extends({key:e.id},n),e.isPlaceholder?null:m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.header,e.getContext())))}))})),m.createElement(s.TableBody,null,l.getRowModel().rows.map(function(e){return m.createElement(s.TableRow,{key:e.id,_hover:{backgroundColor:n.background.highlighted}},e.getVisibleCells().map(function(e){var n=column_auto_sizing_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return m.createElement(s.TableCell,column_auto_sizing_extends({key:e.id},n),m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.cell,e.getContext())))}))})))}))};function basic_extends(){return(basic_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function basic_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function basic_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?basic_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):basic_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function basic_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var L=[{id:1,eventType:"Virus/Malware",affectedDevices:20,detections:634},{id:2,eventType:"Spyware/Grayware",affectedDevices:20,detections:634},{id:3,eventType:"URL Filtering",affectedDevices:15,detections:598},{id:4,eventType:"Web Reputation",affectedDevices:15,detections:598},{id:5,eventType:"Network Virus",affectedDevices:15,detections:497},{id:6,eventType:"Application Control",affectedDevices:0,detections:0}],basic=function(){var e,n=(function(e){if(Array.isArray(e))return e}(e=(0,s.useColorStyle)())||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,1)||function(e,n){if(e){if("string"==typeof e)return basic_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return basic_arrayLikeToArray(e,n)}}(e,1)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],t=(0,m.useMemo)(function(){return[{header:"Event Type",accessorKey:"eventType",size:240},{header:"Affected Devices",accessorKey:"affectedDevices",size:150,style:{textAlign:"right"}},{header:"Detections",accessorKey:"detections",size:150,style:{textAlign:"right"}}]},[]),o=(0,a.b7)({data:L,columns:t,defaultColumn:{minSize:40},getCoreRowModel:(0,i.sC)()});return m.createElement(s.Table,{layout:"flexbox"},m.createElement(s.TableHeader,null,o.getHeaderGroups().map(function(e){return m.createElement(s.TableHeaderRow,{key:e.id},e.headers.map(function(e){var n=basic_objectSpread({minWidth:e.column.columnDef.minSize,width:e.getSize()},e.column.columnDef.style);return m.createElement(s.TableHeaderCell,basic_extends({key:e.id},n),e.isPlaceholder?null:m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.header,e.getContext())))}))})),m.createElement(s.TableBody,null,o.getRowModel().rows.map(function(e){return m.createElement(s.TableRow,{key:e.id,_hover:{backgroundColor:n.background.highlighted}},e.getVisibleCells().map(function(e){var n=basic_objectSpread({minWidth:e.column.columnDef.minSize,width:e.column.getSize()},e.column.columnDef.style);return m.createElement(s.TableCell,basic_extends({key:e.id},n),m.createElement(s.Truncate,null,(0,a.ie)(e.column.columnDef.cell,e.getContext())))}))})))};function usage_ownKeys(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function usage_objectSpread(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?usage_ownKeys(Object(t),!0).forEach(function(n){var o;o=t[n],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):usage_ownKeys(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function usage_extends(){return(usage_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function usage_slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return usage_arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return usage_arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function usage_arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var useSelection=function(e){var n=usage_slicedToArray((0,m.useState)(e),2),t=n[0],o=n[1];return[t,function(e){return function(){return o(e)}}]},W=[{id:"priority",header:"Priority",accessorKey:"priority",cell:function(e){var n;return null!==(n=e.priority)&&void 0!==n?n:"-"},size:80},{id:"policy",header:"Policy",accessorKey:"policy",size:240},{id:"modifiedTime",header:"Last Modified",cell:function(e){var n=new Date(e.modifiedTime);return m.createElement(s.Truncate,null,n.toLocaleString())},size:180},{id:"modifiedBy",header:"Last Editor",accessorKey:"modifiedBy",size:150}],F=[{id:1,priority:1,policy:"Team Managers",modifiedTime:16258752e5,modifiedBy:"admin"},{id:2,priority:2,policy:"Marketing Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:3,priority:3,policy:"Sales Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:4,priority:4,policy:"Development Team",modifiedTime:16258752e5,modifiedBy:"admin"},{id:5,priority:5,policy:"IT Department",modifiedTime:16258752e5,modifiedBy:"admin"},{id:6,priority:null,policy:"Server policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"},{id:7,priority:null,policy:"Endpoint policy (Default)",modifiedTime:16250976e5,modifiedBy:"admin"}],FormGroup=function(e){return m.createElement(s.Box,usage_extends({mb:"4x"},e))},usage_ConditionalWrapper=function(e){var n=e.children,t=e.condition,o=e.wrapper;return t?o(n):n},usage=function(){var e=usage_slicedToArray((0,s.useColorStyle)(),1)[0],n=usage_slicedToArray((0,m.useReducer)(function(e){return!e},!1),2),t=n[0],o=n[1],r=usage_slicedToArray(useSelection("flexbox"),2),l=r[0],a=r[1],i=usage_slicedToArray(useSelection("default"),2),c=i[0],d=i[1],u=usage_slicedToArray(useSelection("md"),2),g=u[0],f=u[1],h=usage_slicedToArray((0,p.useToggle)(!0),2),y=h[0],x=h[1],T=usage_slicedToArray((0,p.useToggle)(!0),2),w=T[0],v=T[1],C=usage_slicedToArray((0,p.useToggle)(!0),2),S=C[0],R=C[1],D=(0,m.useMemo)(function(){return F.map(function(e,n){return{id:n,cells:W.map(function(n,t){return{id:"".concat(t,"_").concat(n.id),column:n,row:e}}),row:e}})},[]),z=(0,m.useRef)(),onScrollTableBody=function(e){var n=null==z?void 0:z.current;if(n){var t=e.target.scrollLeft;n.scrollleft!==t&&(n.scrollLeft=t)}},k=S&&"table"!==l,P={},_={};return k&&(P={height:216},_={overflow:"hidden"}),m.createElement(m.Fragment,null,m.createElement(s.Box,{mb:"4x"},m.createElement(s.Text,{fontSize:"lg",lineHeight:"lg"},"Table props")),m.createElement(FormGroup,null,m.createElement(s.Box,{mb:"2x"},m.createElement(s.TextLabel,null,"layout")),m.createElement(s.ButtonGroup,{variant:"secondary",css:(0,I.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["flexbox","table"].map(function(e){return m.createElement(s.Button,{key:e,selected:e===l,onClick:(0,b.callAll)(a(e),function(n){"table"===e&&R(!1)}),minWidth:"15x"},e)}))),m.createElement(FormGroup,null,m.createElement(s.Box,{mb:"2x"},m.createElement(s.TextLabel,null,"variant")),m.createElement(s.ButtonGroup,{variant:"secondary",css:(0,I.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["default","outline"].map(function(e){return m.createElement(s.Button,{key:e,selected:e===c,onClick:d(e),minWidth:"15x"},e)}))),m.createElement(FormGroup,null,m.createElement(s.Box,{mb:"2x"},m.createElement(s.TextLabel,null,"size")),m.createElement(s.ButtonGroup,{variant:"secondary",css:(0,I.iv)({"> *:not(:first-of-type)":{marginLeft:-1}},"","")},["sm","md","lg"].map(function(e){return m.createElement(s.Button,{key:e,selected:e===g,onClick:f(e),minWidth:"15x"},e)}))),m.createElement(s.Divider,{mb:"4x"}),m.createElement(s.Box,{mb:"4x"},m.createElement(s.Text,{fontSize:"lg",lineHeight:"lg"},"Table composition")),m.createElement(FormGroup,null,m.createElement(s.TextLabel,{display:"flex",alignItems:"center"},m.createElement(s.Checkbox,{checked:y,onChange:function(){return x()}}),m.createElement(s.Space,{width:"2x"}),m.createElement(s.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"TableHeader"))),m.createElement(FormGroup,null,m.createElement(s.TextLabel,{display:"flex",alignItems:"center"},m.createElement(s.Checkbox,{checked:w,onChange:function(){return v()}}),m.createElement(s.Space,{width:"2x"}),m.createElement(s.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"TableBody"))),m.createElement(FormGroup,null,m.createElement(s.TextLabel,{display:"flex",alignItems:"center",mb:"3x"},m.createElement(s.Checkbox,{checked:S,disabled:"table"===l,onChange:function(){R(),o()}}),m.createElement(s.Space,{width:"2x"}),m.createElement(s.Text,{fontFamily:"mono",whiteSpace:"nowrap"},"TableScrollbar")),m.createElement(s.Box,{ml:"6x",mb:"4x"},m.createElement(s.Text,{mb:"2x",color:e.color.secondary},"Note: ",m.createElement(s.Code,null,"TableScrollbar")," is only supported when the ",m.createElement(s.Code,null,"layout")," prop is set to ",m.createElement(s.Code,null,"flexbox"),"."))),m.createElement(s.Divider,{mb:"4x"}),m.createElement(s.Flex,{alignItems:"center",columnGap:"3x",minHeight:"5x"},m.createElement(s.Table,usage_extends({key:t,layout:l,variant:c,size:g},P),y&&m.createElement(s.TableHeader,usage_extends({ref:z},_),m.createElement(s.TableHeaderRow,null,W.map(function(e){var n=usage_objectSpread({flex:"none",width:e.size},e.style);return m.createElement(s.TableHeaderCell,usage_extends({key:e.id},n),m.createElement(s.Truncate,null,e.header))}))),w&&m.createElement(usage_ConditionalWrapper,{condition:k,wrapper:function(e){return m.createElement(s.TableScrollbar,{height:"100%",overflow:"visible",onScroll:onScrollTableBody},e)}},m.createElement(s.TableBody,null,D.map(function(n){var t={_hover:{backgroundColor:e.background.highlighted}};return m.createElement(s.TableRow,usage_extends({key:n.id},t),n.cells.map(function(e,t){var o=usage_objectSpread({flex:"none",width:e.column.size},e.column.style);return m.createElement(s.TableCell,usage_extends({key:e.id},o),"function"==typeof e.column.cell?e.column.cell(n.row):m.createElement(s.Truncate,null,e.row[e.column.accessorKey]))}))}))))))};function _createMdxContent(e){var n=Object.assign({div:"div",h1:"h1",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",code:"code",p:"p",h3:"h3",h4:"h4",ol:"ol",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,r.ah)(),e.components);return(0,o.jsxs)(n.div,{className:"main-content",id:"main-content",children:["\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n",(0,o.jsx)(n.h1,{id:"table",children:"Table"}),"\n",(0,o.jsxs)(n.h2,{id:"import",children:["Import",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"import {\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n} from '@tonic-ui/react';\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"usage",children:["Usage",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:usage,file:{data:"import {\n  Box,\n  Button, \n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { callAll } from '@tonic-ui/utils';\nimport React, { useMemo, useReducer, useRef, useState } from 'react';\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst columns = [\n  {\n    id: 'priority',\n    header: 'Priority',\n    accessorKey: 'priority',\n    cell: (row) => row.priority ?? '-',\n    size: 80,\n  },\n  {\n    id: 'policy',\n    header: 'Policy',\n    accessorKey: 'policy',\n    size: 240,\n  },\n  {\n    id: 'modifiedTime',\n    header: 'Last Modified',\n    cell: (row) => {\n      const mtime = new Date(row.modifiedTime);\n      return (\n        <Truncate>\n          {mtime.toLocaleString()}\n        </Truncate>\n      );\n    },\n    size: 180,\n  },\n  {\n    id: 'modifiedBy',\n    header: 'Last Editor',\n    accessorKey: 'modifiedBy',\n    size: 150,\n  },\n];\n\nconst data = [\n  { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n];\n\nconst FormGroup = (props) => (\n  <Box mb=\"4x\" {...props} />\n);\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [updateKey, forceUpdate] = useReducer((value) => !value, false);\n  const [layout, changeLayoutBy] = useSelection('flexbox');\n  const [variant, changeVariantBy] = useSelection('default');\n  const [size, changeSizeBy] = useSelection('md');\n  const [isTableHeaderVisible, toggleIsTableHeaderVisible] = useToggle(true);\n  const [isTableBodyVisible, toggleIsTableBodyVisible] = useToggle(true);\n  const [isTableScrollbarVisible, toggleIsTableScrollbarVisible] = useToggle(true);\n  const rows = useMemo(() => {\n    return data.map((row, rowIndex) => {\n      return {\n        id: rowIndex,\n        cells: columns.map((column, columnIndex) => {\n          return {\n            id: `${columnIndex}_${column.id}`,\n            column,\n            row,\n          };\n        }),\n        row,\n      };\n    });\n  }, []);\n  const tableHeaderRef = useRef();\n  const onScrollTableBody = (e) => {\n    const tableHeader = tableHeaderRef?.current;\n    if (!tableHeader) {\n      return;\n    }\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    const scrollLeft = e.target.scrollLeft;\n    if (tableHeader.scrollleft !== scrollLeft) {\n      tableHeader.scrollLeft = scrollLeft;\n    }\n  };\n  const isTableScrollingEnabled = isTableScrollbarVisible && layout !== 'table';\n  let tableStyleProps = {};\n  let tableHeaderStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const cellHeight = 36;\n    const headerHeight = 36;\n    const rowsToDisplay = 5;\n\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight,\n      // Uncomment the following line to specify the width and enable horizontal scrollbar\n      // width: 200,\n    };\n\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    tableHeaderStyleProps = {\n      overflow: 'hidden',\n    };\n  }\n\n  return (\n    <>\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            layout\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['flexbox', 'table'].map(value => (\n            <Button\n              key={value}\n              selected={value === layout}\n              onClick={callAll(\n                changeLayoutBy(value),\n                (event) => {\n                  if (value === 'table') {\n                    toggleIsTableScrollbarVisible(false);\n                  }\n                },\n              )}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            variant\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['default', 'outline'].map(value => (\n            <Button\n              key={value}\n              selected={value === variant}\n              onClick={changeVariantBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['sm', 'md', 'lg'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableHeaderVisible}\n            onChange={() => toggleIsTableHeaderVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableBodyVisible}\n            onChange={() => toggleIsTableBodyVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\" mb=\"3x\">\n          <Checkbox\n            checked={isTableScrollbarVisible}\n            disabled={layout === 'table'}\n            onChange={() => {\n              toggleIsTableScrollbarVisible();\n\n              // Force update to recalculate table width and height\n              forceUpdate();\n            }}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableScrollbar</Text>\n        </TextLabel>\n        <Box ml=\"6x\" mb=\"4x\">\n          <Text mb=\"2x\" color={colorStyle.color.secondary}>\n            Note: <Code>TableScrollbar</Code> is only supported when the <Code>layout</Code> prop is set to <Code>flexbox</Code>.\n          </Text>\n        </Box>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Flex alignItems=\"center\" columnGap=\"3x\" minHeight=\"5x\">\n        <Table\n          key={updateKey}\n          layout={layout}\n          variant={variant}\n          size={size}\n          {...tableStyleProps}\n        >\n          {isTableHeaderVisible && (\n            <TableHeader\n              ref={tableHeaderRef}\n              {...tableHeaderStyleProps}\n            >\n              <TableHeaderRow>\n                {columns.map(column => {\n                  const styleProps = {\n                    flex: 'none',\n                    width: column.size,\n                    ...column.style,\n                  };\n                  return (\n                    <TableHeaderCell key={column.id} {...styleProps}>\n                      <Truncate>\n                        {column.header}\n                      </Truncate>\n                    </TableHeaderCell>\n                  );\n                })}\n              </TableHeaderRow>\n            </TableHeader>\n          )}\n          {isTableBodyVisible && (\n            <ConditionalWrapper\n              condition={isTableScrollingEnabled}\n              wrapper={children => (\n                <TableScrollbar\n                  height=\"100%\"\n                  overflow=\"visible\" // Make the scrollbar visible\n                  onScroll={onScrollTableBody} // To sync the scroll position of the table header and table body for horizontal scrolling\n                >\n                  {children}\n                </TableScrollbar>\n              )}\n            >\n              <TableBody>\n                {rows.map(row => {\n                  const styleProps = {\n                    _hover: {\n                      backgroundColor: colorStyle.background.highlighted,\n                    },\n                  };\n                  return (\n                    <TableRow key={row.id} {...styleProps}>\n                      {row.cells.map((cell, cellIndex) => {\n                        const styleProps = {\n                          flex: 'none',\n                          width: cell.column.size,\n                          ...cell.column.style,\n                        };\n                        return (\n                          <TableCell key={cell.id} {...styleProps}>\n                            {typeof cell.column.cell === 'function'\n                              ? cell.column.cell(row.row)\n                              : <Truncate>{cell.row[cell.column.accessorKey]}</Truncate>\n                            }\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </ConditionalWrapper>\n          )}\n        </Table>\n      </Flex>\n    </>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  Box,\n  Button, \n  ButtonGroup,\n  Checkbox,\n  Code,\n  Divider,\n  Flex,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { useToggle } from '@tonic-ui/react-hooks';\nimport { callAll } from '@tonic-ui/utils';\nimport React, { useMemo, useReducer, useRef, useState } from 'react';\n\nconst useSelection = (defaultValue) => {\n  const [value, setValue] = useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst columns = [\n  {\n    id: 'priority',\n    header: 'Priority',\n    accessorKey: 'priority',\n    cell: (row) => row.priority ?? '-',\n    size: 80,\n  },\n  {\n    id: 'policy',\n    header: 'Policy',\n    accessorKey: 'policy',\n    size: 240,\n  },\n  {\n    id: 'modifiedTime',\n    header: 'Last Modified',\n    cell: (row) => {\n      const mtime = new Date(row.modifiedTime);\n      return (\n        <Truncate>\n          {mtime.toLocaleString()}\n        </Truncate>\n      );\n    },\n    size: 180,\n  },\n  {\n    id: 'modifiedBy',\n    header: 'Last Editor',\n    accessorKey: 'modifiedBy',\n    size: 150,\n  },\n];\n\nconst data = [\n  { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n  { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n];\n\nconst FormGroup = (props) => (\n  <Box mb=\"4x\" {...props} />\n);\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [updateKey, forceUpdate] = useReducer((value) => !value, false);\n  const [layout, changeLayoutBy] = useSelection('flexbox');\n  const [variant, changeVariantBy] = useSelection('default');\n  const [size, changeSizeBy] = useSelection('md');\n  const [isTableHeaderVisible, toggleIsTableHeaderVisible] = useToggle(true);\n  const [isTableBodyVisible, toggleIsTableBodyVisible] = useToggle(true);\n  const [isTableScrollbarVisible, toggleIsTableScrollbarVisible] = useToggle(true);\n  const rows = useMemo(() => {\n    return data.map((row, rowIndex) => {\n      return {\n        id: rowIndex,\n        cells: columns.map((column, columnIndex) => {\n          return {\n            id: `${columnIndex}_${column.id}`,\n            column,\n            row,\n          };\n        }),\n        row,\n      };\n    });\n  }, []);\n  const tableHeaderRef = useRef();\n  const onScrollTableBody = (e) => {\n    const tableHeader = tableHeaderRef?.current;\n    if (!tableHeader) {\n      return;\n    }\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    const scrollLeft = e.target.scrollLeft;\n    if (tableHeader.scrollleft !== scrollLeft) {\n      tableHeader.scrollLeft = scrollLeft;\n    }\n  };\n  const isTableScrollingEnabled = isTableScrollbarVisible && layout !== 'table';\n  let tableStyleProps = {};\n  let tableHeaderStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const cellHeight = 36;\n    const headerHeight = 36;\n    const rowsToDisplay = 5;\n\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight,\n      // Uncomment the following line to specify the width and enable horizontal scrollbar\n      // width: 200,\n    };\n\n    // Sync the scroll position of the table header and table body for horizontal scrolling\n    tableHeaderStyleProps = {\n      overflow: 'hidden',\n    };\n  }\n\n  return (\n    <>\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table props\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            layout\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['flexbox', 'table'].map(value => (\n            <Button\n              key={value}\n              selected={value === layout}\n              onClick={callAll(\n                changeLayoutBy(value),\n                (event) => {\n                  if (value === 'table') {\n                    toggleIsTableScrollbarVisible(false);\n                  }\n                },\n              )}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            variant\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['default', 'outline'].map(value => (\n            <Button\n              key={value}\n              selected={value === variant}\n              onClick={changeVariantBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <FormGroup>\n        <Box mb=\"2x\">\n          <TextLabel>\n            size\n          </TextLabel>\n        </Box>\n        <ButtonGroup\n          variant=\"secondary\"\n          css={{\n            '> *:not(:first-of-type)': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {['sm', 'md', 'lg'].map(value => (\n            <Button\n              key={value}\n              selected={value === size}\n              onClick={changeSizeBy(value)}\n              minWidth=\"15x\"\n            >\n              {value}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Box mb=\"4x\">\n        <Text fontSize=\"lg\" lineHeight=\"lg\">\n          Table composition\n        </Text>\n      </Box>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableHeaderVisible}\n            onChange={() => toggleIsTableHeaderVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableHeader</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\">\n          <Checkbox\n            checked={isTableBodyVisible}\n            onChange={() => toggleIsTableBodyVisible()}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableBody</Text>\n        </TextLabel>\n      </FormGroup>\n      <FormGroup>\n        <TextLabel display=\"flex\" alignItems=\"center\" mb=\"3x\">\n          <Checkbox\n            checked={isTableScrollbarVisible}\n            disabled={layout === 'table'}\n            onChange={() => {\n              toggleIsTableScrollbarVisible();\n\n              // Force update to recalculate table width and height\n              forceUpdate();\n            }}\n          />\n          <Space width=\"2x\" />\n          <Text fontFamily=\"mono\" whiteSpace=\"nowrap\">TableScrollbar</Text>\n        </TextLabel>\n        <Box ml=\"6x\" mb=\"4x\">\n          <Text mb=\"2x\" color={colorStyle.color.secondary}>\n            Note: <Code>TableScrollbar</Code> is only supported when the <Code>layout</Code> prop is set to <Code>flexbox</Code>.\n          </Text>\n        </Box>\n      </FormGroup>\n      <Divider mb=\"4x\" />\n      <Flex alignItems=\"center\" columnGap=\"3x\" minHeight=\"5x\">\n        <Table\n          key={updateKey}\n          layout={layout}\n          variant={variant}\n          size={size}\n          {...tableStyleProps}\n        >\n          {isTableHeaderVisible && (\n            <TableHeader\n              ref={tableHeaderRef}\n              {...tableHeaderStyleProps}\n            >\n              <TableHeaderRow>\n                {columns.map(column => {\n                  const styleProps = {\n                    flex: 'none',\n                    width: column.size,\n                    ...column.style,\n                  };\n                  return (\n                    <TableHeaderCell key={column.id} {...styleProps}>\n                      <Truncate>\n                        {column.header}\n                      </Truncate>\n                    </TableHeaderCell>\n                  );\n                })}\n              </TableHeaderRow>\n            </TableHeader>\n          )}\n          {isTableBodyVisible && (\n            <ConditionalWrapper\n              condition={isTableScrollingEnabled}\n              wrapper={children => (\n                <TableScrollbar\n                  height=\"100%\"\n                  overflow=\"visible\" // Make the scrollbar visible\n                  onScroll={onScrollTableBody} // To sync the scroll position of the table header and table body for horizontal scrolling\n                >\n                  {children}\n                </TableScrollbar>\n              )}\n            >\n              <TableBody>\n                {rows.map(row => {\n                  const styleProps = {\n                    _hover: {\n                      backgroundColor: colorStyle.background.highlighted,\n                    },\n                  };\n                  return (\n                    <TableRow key={row.id} {...styleProps}>\n                      {row.cells.map((cell, cellIndex) => {\n                        const styleProps = {\n                          flex: 'none',\n                          width: cell.column.size,\n                          ...cell.column.style,\n                        };\n                        return (\n                          <TableCell key={cell.id} {...styleProps}>\n                            {typeof cell.column.cell === 'function'\n                              ? cell.column.cell(row.row)\n                              : <Truncate>{cell.row[cell.column.accessorKey]}</Truncate>\n                            }\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </ConditionalWrapper>\n          )}\n        </Table>\n      </Flex>\n    </>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h2,{id:"examples",children:["Examples",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#examples",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["In this section, we'll explore how to use the ",(0,o.jsx)(n.code,{children:"Table"})," component and various Hooks provided by ",(0,o.jsx)(n.code,{children:"react-table"})," to create tables with features such as sorting, filtering, pagination, and selection."]}),"\n",(0,o.jsxs)(n.p,{children:["To get started with ",(0,o.jsx)(n.code,{children:"react-table"}),", visit ",(0,o.jsx)(n.a,{href:"https://github.com/TanStack/table",children:"https://github.com/TanStack/table"})," to learn more."]}),"\n",(0,o.jsxs)(n.h3,{id:"basic",children:["Basic",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#basic",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:basic,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  // If you want to manage your own state and override the state manager, you can uncomment and modify the following code:\n  /*\n  const [state, setState] = React.useState(table.initialState);\n  table.setOptions(prevOptions => ({\n    ...prevOptions,\n    state,\n    onStateChange: setState,\n  }));\n  */\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableHeaderRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableHeaderCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableHeaderCell>\n              );\n            })}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <TableRow\n            key={row.id}\n            _hover={{\n              backgroundColor: colorStyle.background.highlighted,\n            }}\n          >\n            {row.getVisibleCells().map(cell => {\n              const styleProps = {\n                minWidth: cell.column.columnDef.minSize,\n                width: cell.column.getSize(),\n                ...cell.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={cell.id}\n                  {...styleProps}\n                >\n                  <Truncate>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Truncate>\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  // If you want to manage your own state and override the state manager, you can uncomment and modify the following code:\n  /*\n  const [state, setState] = React.useState(table.initialState);\n  table.setOptions(prevOptions => ({\n    ...prevOptions,\n    state,\n    onStateChange: setState,\n  }));\n  */\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableHeaderRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableHeaderCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableHeaderCell>\n              );\n            })}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <TableRow\n            key={row.id}\n            _hover={{\n              backgroundColor: colorStyle.background.highlighted,\n            }}\n          >\n            {row.getVisibleCells().map(cell => {\n              const styleProps = {\n                minWidth: cell.column.columnDef.minSize,\n                width: cell.column.getSize(),\n                ...cell.column.columnDef.style,\n              };\n              return (\n                <TableCell\n                  key={cell.id}\n                  {...styleProps}\n                >\n                  <Truncate>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </Truncate>\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"column-auto-sizing",children:["Column auto sizing",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-auto-sizing",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:column_auto_sizing,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TextLabel,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const [columns, setColumns] = useState([\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 'auto',\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: '25%',\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n\n  return (\n    <Box width=\"100%\">\n      {columns.map((column, columnIndex) => (\n        <Box mb=\"4x\" key={columnIndex}>\n          <Box mb=\"2x\">\n            <TextLabel>\n              {column.header}\n            </TextLabel>\n          </Box>\n          <ButtonGroup\n            variant=\"secondary\"\n            css={{\n              '> *:not(:first-of-type)': {\n                marginLeft: -1\n              }\n            }}\n          >\n            {['auto', '25%', 150].map(value => (\n              <Button\n                key={value}\n                selected={value === columns[columnIndex].size}\n                onClick={() => {\n                  const newColumns = [\n                    ...columns.slice(0, columnIndex),\n                    {\n                      ...columns[columnIndex],\n                      size: value,\n                    },\n                    ...columns.slice(columnIndex + 1),\n                  ];\n                  setColumns(newColumns);\n                }}\n                minWidth=\"15x\"\n              >\n                {value}\n              </Button>\n            ))}\n          </ButtonGroup>\n        </Box>\n      ))}\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            variant={variant}\n            sx={{\n              // Hide the table if there is no column sizing state\n              visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n              width,\n            }}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n\n                    return (\n                      <TableHeaderCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Truncate>\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                          </Truncate>\n                        )}\n                      </TableHeaderCell>\n                    );\n                  })}\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  _hover={{\n                    backgroundColor: colorStyle.background.highlighted,\n                  }}\n                >\n                  {row.getVisibleCells().map(cell => {\n                    const styleProps = {\n                      minWidth: cell.column.columnDef.minSize,\n                      width: cell.column.getSize(),\n                      ...cell.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        {...styleProps}\n                      >\n                        <Truncate>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Truncate>\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </Box>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TextLabel,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const [columns, setColumns] = useState([\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 'auto',\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: '25%',\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'default'; // One of: 'default', 'outline'\n\n  return (\n    <Box width=\"100%\">\n      {columns.map((column, columnIndex) => (\n        <Box mb=\"4x\" key={columnIndex}>\n          <Box mb=\"2x\">\n            <TextLabel>\n              {column.header}\n            </TextLabel>\n          </Box>\n          <ButtonGroup\n            variant=\"secondary\"\n            css={{\n              '> *:not(:first-of-type)': {\n                marginLeft: -1\n              }\n            }}\n          >\n            {['auto', '25%', 150].map(value => (\n              <Button\n                key={value}\n                selected={value === columns[columnIndex].size}\n                onClick={() => {\n                  const newColumns = [\n                    ...columns.slice(0, columnIndex),\n                    {\n                      ...columns[columnIndex],\n                      size: value,\n                    },\n                    ...columns.slice(columnIndex + 1),\n                  ];\n                  setColumns(newColumns);\n                }}\n                minWidth=\"15x\"\n              >\n                {value}\n              </Button>\n            ))}\n          </ButtonGroup>\n        </Box>\n      ))}\n      <AutoSizer\n        disableHeight\n        onResize={({ width }) => {\n          if (tableWidth !== width) {\n            setTableWidth(width);\n          }\n        }}\n      >\n        {({ width }) => (\n          <Table\n            layout={layout}\n            variant={variant}\n            sx={{\n              // Hide the table if there is no column sizing state\n              visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n              width,\n            }}\n          >\n            <TableHeader>\n              {table.getHeaderGroups().map(headerGroup => (\n                <TableHeaderRow key={headerGroup.id}>\n                  {headerGroup.headers.map(header => {\n                    const styleProps = {\n                      minWidth: header.column.columnDef.minSize,\n                      width: header.getSize(),\n                      ...header.column.columnDef.style,\n                    };\n\n                    return (\n                      <TableHeaderCell\n                        key={header.id}\n                        {...styleProps}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Truncate>\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                          </Truncate>\n                        )}\n                      </TableHeaderCell>\n                    );\n                  })}\n                </TableHeaderRow>\n              ))}\n            </TableHeader>\n            <TableBody>\n              {table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  _hover={{\n                    backgroundColor: colorStyle.background.highlighted,\n                  }}\n                >\n                  {row.getVisibleCells().map(cell => {\n                    const styleProps = {\n                      minWidth: cell.column.columnDef.minSize,\n                      width: cell.column.getSize(),\n                      ...cell.column.columnDef.style,\n                    };\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        {...styleProps}\n                      >\n                        <Truncate>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Truncate>\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </AutoSizer>\n    </Box>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"column-ordering",children:["Column ordering",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-ordering",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h4,{id:"using-react-movable",children:["Using ",(0,o.jsx)(s.Code,{children:"react-movable"}),(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#using-react-movable",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:column_ordering_movable,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  Flex,\n  Icon,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { dataAttr } from '@tonic-ui/utils';\nimport _ from 'lodash';\nimport React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport ColumnSettingsDrawer from './column-settings-drawer';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const defaultColumnOrder = [\n    'eventType',\n    'affectedDevices',\n    'detections',\n  ];\n  const [columnOrder, setColumnOrder] = useState(defaultColumnOrder);\n\n  const [columnVisibility, setColumnVisibility] = useState({\n    eventType: true,\n    affectedDevices: true,\n    detections: true,\n  });\n\n  const columns = useConst(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      isPinned: true,\n      size: 'auto',\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      isPinned: false,\n      size: '25%',\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      isPinned: false,\n      size: 150,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnOrder,\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const [isColumnSettingsDrawerOpen, setIsColumnSettingsDrawerOpen] = useState(false);\n\n/*\n * columns = [\n *   {\n *     id: <string>,\n *     label: <string>,\n *     isPinned: <boolean>,\n *     isVisible: <boolean>,\n *   }\n * ]\n */\n  const orderedColumns = table.getState().columnOrder.map(columnId => {\n    const column = table.getColumn(columnId);\n    return {\n      id: columnId,\n      label: column.columnDef.header,\n      isPinned: column.columnDef.isPinned,\n      isVisible: table.getState().columnVisibility[columnId],\n    };\n  });\n\n  const onUpdateColumns = useCallback((columns) => {\n    const order = columns.map(column => column.id);\n    const visibility = columns.reduce((acc, column) => {\n      acc[column.id] = column.isVisible;\n      return acc;\n    }, {});\n    setColumnOrder(order);\n    setColumnVisibility(visibility);\n  }, [setColumnOrder]);\n\n  return (\n    <>\n      <ColumnSettingsDrawer\n        columns={orderedColumns}\n        defaultColumnOrder={defaultColumnOrder}\n        onUpdateColumns={onUpdateColumns}\n        isOpen={isColumnSettingsDrawerOpen}\n        onClose={() => setIsColumnSettingsDrawerOpen(false)}\n      />\n      <Flex\n        justifyContent=\"flex-end\"\n        mb=\"4x\"\n      >\n        <Button\n          variant=\"secondary\"\n          onClick={() => setIsColumnSettingsDrawerOpen(true)}\n        >\n          <Icon icon=\"columns\" />\n          <Space width=\"2x\" />\n          Customize Columns\n        </Button>\n      </Flex>\n      <Box>\n        <AutoSizer\n          disableHeight\n          onResize={({ width }) => {\n            if (tableWidth !== width) {\n              setTableWidth(width);\n            }\n          }}\n        >\n          {({ width }) => (\n            <Table\n              layout={layout}\n              sx={{\n                // Hide the table if there is no column sizing state\n                visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n\n                width,\n              }}\n            >\n              <TableHeader>\n                {table.getHeaderGroups().map(headerGroup => (\n                  <TableHeaderRow key={headerGroup.id}>\n                    {headerGroup.headers.map(header => {\n                      const styleProps = {\n                        minWidth: header.column.columnDef.minSize,\n                        width: header.getSize(),\n                        ...header.column.columnDef.style,\n                      };\n                      return (\n                        <TableHeaderCell\n                          key={header.id}\n                          {...styleProps}\n                        >\n                          {header.isPlaceholder ? null : (\n                            <Truncate>\n                              {flexRender(header.column.columnDef.header, header.getContext())}\n                            </Truncate>\n                          )}\n                        </TableHeaderCell>\n                      );\n                    })}\n                  </TableHeaderRow>\n                ))}\n              </TableHeader>\n              <TableBody>\n                {table.getRowModel().rows.map(row => (\n                  <TableRow\n                    key={row.id}\n                    data-selected={dataAttr(row.getIsSelected())}\n                    _hover={{\n                      backgroundColor: colorStyle.background.highlighted,\n                    }}\n                    _selected={{\n                      backgroundColor: colorStyle.background.selected,\n                    }}\n                  >\n                    {row.getVisibleCells().map(cell => {\n                      const styleProps = {\n                        minWidth: cell.column.columnDef.minSize,\n                        width: cell.column.getSize(),\n                        ...cell.column.columnDef.style,\n                      };\n                      return (\n                        <TableCell\n                          key={cell.id}\n                          {...styleProps}\n                        >\n                          <Truncate>\n                            {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                          </Truncate>\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </AutoSizer>\n      </Box>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{"src/pages/components/table/column-ordering-movable/column-settings-drawer.js":"import {\n  Box,\n  Button,\n  Checkbox,\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  Grid,\n  LinkButton,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { ensureArray, ensureFunction } from 'ensure-type';\nimport _orderBy from 'lodash/orderBy';\nimport React, { useCallback, useEffect, useReducer } from 'react';\nimport { List, arrayMove } from 'react-movable';\nimport HandleIcon from '@/pages/components/table/icons/icon-handle';\n\nconst UPDATE_COLUMNS = 'UPDATE_COLUMNS';\n\nconst reducer = (state, action) => {\n  if (action.type === UPDATE_COLUMNS) {\n    const nextState = {\n      ...state,\n      columns: ensureArray(action.payload),\n    };\n    return nextState;\n  }\n\n  return state;\n};\n\n/**\n * @param {object} columns - The columns to be displayed in the drawer\n * @param {string} columns[].id - The id of the column\n * @param {string} columns[].label - The label of the column\n * @param {boolean} columns[].isPinned - Whether the column is pinned\n * @param {boolean} columns[].isVisible - Whether the column is visible\n * @param {string[]} defaultColumnOrder - The default order of the columns\n * @param {function} onUpdateColumns - Callback function to be called when the columns are updated\n * @param {boolean} isOpen - Whether the drawer is open\n * @param {function} onClose - Callback function to be called when the drawer is closed\n */\nconst ColumnSettingsDrawer = ({\n  columns: columnsProp,\n  defaultColumnOrder: defaultColumnOrder,\n  onUpdateColumns,\n  isOpen,\n  onClose,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const [state, dispatch] = useReducer(reducer, {\n    columns: ensureArray(columnsProp),\n  });\n  const allColumnsVisible = state.columns.every(column => column.isVisible !== false);\n  const isToggleAllChecked = allColumnsVisible;\n  const toggleAllColumns = useCallback(() => {\n    const isVisible = !allColumnsVisible;\n    dispatch({\n      type: UPDATE_COLUMNS,\n      payload: state.columns.map(column => {\n        if (column.isPinned) {\n          return column;\n        }\n        return {\n          ...column,\n          isVisible: isVisible,\n        };\n      }),\n    });\n  }, [allColumnsVisible, state.columns]);\n\n  useEffect(() => {\n    const nextColumns = columnsProp;\n    dispatch({\n      type: UPDATE_COLUMNS,\n      payload: nextColumns,\n    });\n  }, [columnsProp]);\n\n  const handleClickResetToDefault = useCallback(() => {\n    const nextColumns = _orderBy(state.columns, (column) => defaultColumnOrder.indexOf(column.id), ['asc']);\n    dispatch({\n      type: UPDATE_COLUMNS,\n      payload: nextColumns,\n    });\n  }, [defaultColumnOrder, state.columns]);\n\n  const handleUpdateColumns = useCallback(() => {\n    ensureFunction(onUpdateColumns)(state.columns);\n    ensureFunction(onClose)();\n  }, [onClose, onUpdateColumns, state.columns]);\n\n  return (\n    <Drawer\n      autoFocus={true}\n      backdrop={true}\n      closeOnEsc={true}\n      closeOnOutsideClick={true}\n      returnFocusOnClose={false}\n      ensureFocus={true}\n      isClosable={true}\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"sm\"\n    >\n      <DrawerOverlay />\n      <DrawerContent>\n        <DrawerHeader>\n          Show/Hide Columns\n        </DrawerHeader>\n        <DrawerBody>\n          <Box mb=\"1x\">\n            <Button\n              variant=\"secondary\"\n              onClick={handleClickResetToDefault}\n            >\n              Reset to Default\n            </Button>\n          </Box>\n          <Box mb=\"1x\">\n            <LinkButton onClick={toggleAllColumns}>\n              {isToggleAllChecked ? 'Clear all' : 'Select all'}\n            </LinkButton>\n          </Box>\n            <List\n              lockVertically={true}\n              values={state.columns.map(column => ({\n                ...column,\n                // Set disabled to true if the column is pinned\n                disabled: !!column.isPinned,\n              }))}\n              onChange={({ oldIndex, newIndex }) => {\n                dispatch({\n                  type: UPDATE_COLUMNS,\n                  payload: arrayMove(state.columns, oldIndex, newIndex),\n                });\n              }}\n              renderList={({ children, props }) => (\n                <Box {...props}>\n                  {children}\n                </Box>\n              )}\n              renderItem={({ value: column, index, isDragged, isOutOfBounds, props }) => {\n                const isPinned = !!column.isPinned;\n                const isVisible = column.isVisible !== false;\n                const hoverBackgroundColor = (() => {\n                  if (isPinned) {\n                    return;\n                  }\n                  if (isDragged) {\n                    return 'gray:70';\n                  }\n                  return colorStyle.background.highlighted;\n                })()\n                // Cursor for the draggable element\n                const cursor = (() => {\n                  if (isOutOfBounds) {\n                    return 'not-allowed';\n                  }\n                  if (isPinned) {\n                    return;\n                  }\n                  return isDragged ? 'move' : 'move';\n                })();\n                // Ensure the draggable element appears on top of other elements when dragged\n                const zIndex = isDragged ? 'modal' : undefined;\n\n                return (\n                  <Flex\n                    {...props}\n                    sx={{\n                      border: 1,\n                      borderColor: isDragged ? 'gray:60' : 'transparent',\n                      alignItems: 'center',\n                      mb: '1x',\n                      width: '100%',\n                      cursor,\n                      zIndex,\n                      _hover: {\n                        backgroundColor: hoverBackgroundColor,\n                      },\n                    }}\n                  >\n                    <Flex\n                      // Mark any node with the `data-movable-handle` attribute if you wish you wish to use it as a DnD handle.\n                      // The rest of renderItem will be then ignored and not start the drag and drop.\n                      //data-movable-handle\n                      sx={{\n                        '*:hover > &': {\n                          opacity: 1,\n                        },\n                        opacity: 0,\n                        px: '1x',\n                        minWidth: '4x',\n                      }}\n                    >\n                      {!isPinned ? <HandleIcon /> : null}\n                    </Flex>\n                    <Checkbox\n                      // The \"role\" attribute must be included for \"react-movable\" to verify the interactivity of the element\n                      // https://github.com/tajo/react-movable/blob/master/src/utils.ts\n                      role=\"checkbox\"\n                      disabled={isPinned}\n                      checked={isVisible}\n                      onChange={(event) => {\n                        const isVisible = event.target.checked;\n                        const nextColumns = state.columns.map(_column => {\n                          if (_column.id !== column.id) {\n                            return _column;\n                          } \n                          return {\n                            ..._column,\n                            isVisible,\n                          };\n                        });\n                        dispatch({\n                          type: UPDATE_COLUMNS,\n                          payload: nextColumns,\n                        });\n                      }}\n                    >\n                      {column.label}\n                    </Checkbox>\n                  </Flex>\n                );\n              }}\n            />\n        </DrawerBody>\n        <DrawerFooter>\n          <Grid templateColumns=\"repeat(2, 1fr)\" columnGap=\"2x\">\n            <Button\n              variant=\"primary\"\n              onClick={handleUpdateColumns}\n            >\n              Save\n            </Button>\n            <Button\n              variant=\"default\"\n              onClick={onClose}\n            >\n              Cancel\n            </Button>\n          </Grid>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport default ColumnSettingsDrawer;","src/pages/components/table/icons/icon-handle.js":'import { SVGIcon } from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst Icon = (props) => (\n  <SVGIcon width="2x" height="4x" viewBox="0 0 8 16" {...props}>\n    <circle cx="2" cy="2" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="6" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="10" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="14" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="2" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="6" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="10" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="14" r="1" fill="#5E5E5E"/>\n  </SVGIcon>\n);\n\nexport default Icon;'},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Button,\n  Flex,\n  Icon,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n  useTheme,\n} from '@tonic-ui/react';\nimport {\n  useConst,\n} from '@tonic-ui/react-hooks';\nimport { dataAttr } from '@tonic-ui/utils';\nimport _ from 'lodash';\nimport React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport ColumnSettingsDrawer from '@/pages/components/table/column-ordering-movable/column-settings-drawer';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nconst getTextWidth = (text, font) => {\n  // re-use canvas object for better performance\n  const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width || 0;\n};\n\nconst App = () => {\n  const theme = useTheme();\n  const [colorStyle] = useColorStyle();\n  const defaultColumnOrder = [\n    'eventType',\n    'affectedDevices',\n    'detections',\n  ];\n  const [columnOrder, setColumnOrder] = useState(defaultColumnOrder);\n\n  const [columnVisibility, setColumnVisibility] = useState({\n    eventType: true,\n    affectedDevices: true,\n    detections: true,\n  });\n\n  const columns = useConst(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      isPinned: true,\n      size: 'auto',\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      isPinned: false,\n      size: '25%',\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      isPinned: false,\n      size: 150,\n    },\n  ]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnOrder,\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const [tableWidth, setTableWidth] = useState(0);\n\n  useEffect(() => {\n    if (!tableWidth) {\n      return;\n    }\n\n    const gutterWidth = 12 + 12; // 12px padding on each side of the cell\n    const tableHeaderCellFont = [\n      theme.fontWeights.semibold,\n      theme.fontSizes.sm,\n      theme.fonts.base,\n    ].join(' '); // => '600 14px \"Segoe UI\",-apple-system,BlinkMacSystemFont,\"Helvetica Neue\",Helvetica,Arial,sans-serif'\n\n    // Fixed columns are columns with a fixed size (e.g. 100 or '10%')\n    const fixedColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size !== 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize, size } = columnDef;\n\n        // If the column size is a number, return the original size value\n        if (typeof size === 'number') {\n          return {\n            id,\n            size,\n          };\n        }\n\n        // If the column size is a percentage, return the computed size value\n        if (typeof size === 'string' && size.endsWith('%')) {\n          const textWidth = (typeof columnDef.header === 'string')\n            ? getTextWidth(columnDef.header, tableHeaderCellFont)\n            : 0;\n          const percentageWidth = tableWidth * parseFloat(size) / 100;\n\n          return {\n            id,\n            size: Math.max(\n              percentageWidth, // percentage of table width\n              textWidth + gutterWidth, // text width with padding\n              minSize, // minimum size (e.g. 40px)\n            ),\n          };\n        }\n\n        // Otherwise, return the minimum size value\n        return {\n          id,\n          size: minSize,\n        };\n      });\n\n    // Flexible columns are columns with a flexible size (e.g. 'auto')\n    const flexColumns = table.getAllColumns()\n      .filter(column => column.columnDef.size === 'auto')\n      .map(column => {\n        const { id, columnDef } = column;\n        const { minSize } = columnDef;\n        const textWidth = (typeof columnDef.header === 'string')\n          ? getTextWidth(columnDef.header, tableHeaderCellFont)\n          : 0;\n\n        return {\n          id,\n          size: Math.max(\n            textWidth + gutterWidth, // text width with padding\n            minSize, // minimum size (e.g. 40px)\n          ),\n        };\n      });\n\n    const totalFixedColumnSize = fixedColumns.reduce((acc, column) => acc + column.size, 0);\n    const totalFlexColumnSize = flexColumns.reduce((acc, column) => acc + column.size, 0);\n\n    let extraSpaceLeft = tableWidth - totalFixedColumnSize;\n\n    // Distribute extra space to fixed columns if flex columns are not present\n    if ((flexColumns.length === 0) && (extraSpaceLeft > 0)) {\n      const extraSpacePerColumn = extraSpaceLeft / fixedColumns.length;\n      fixedColumns.forEach(column => {\n        column.size = column.size + extraSpacePerColumn;\n      });\n      extraSpaceLeft = 0;\n    }\n\n    // Distribute extra space to flex columns if flex columns are present\n    if ((flexColumns.length > 0) && (extraSpaceLeft > totalFlexColumnSize)) {\n      /**\n       * Assume that the extra space is 500px and the total flex column size is 400px:\n       * > extraSpaceLeft = 500\n       * > flexColumns = [ { size: 250 }, { size: 150 } ] // => Total size: 400px\n       *\n       * Iteration #0:\n       * > column.size = Math.max(500 / (2 - 0), 250) = Math.max(250, 250) = 250\n       * > extraSpaceLeft = 500 - 250 = 250\n       *\n       * Iteration #1:\n       * > column.size = Math.max(250 / (2 - 1), 150) = Math.max(250, 150) = 250\n       * > extraSpaceLeft = 250 - 250 = 0                         \n       */\n      flexColumns.forEach((column, index) => {\n        column.size = Math.max(\n          extraSpaceLeft / (flexColumns.length - index),\n          column.size,\n        );\n        extraSpaceLeft -= column.size;\n      });\n    }\n\n    const columnSizing = {};\n\n    for (let i = 0; i < fixedColumns.length; i++) {\n      const column = fixedColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n    for (let i = 0; i < flexColumns.length; i++) {\n      const column = flexColumns[i];\n      columnSizing[column.id] = column.size;\n    }\n\n    table.setColumnSizing(columnSizing);\n  }, [columns, table, tableWidth, theme]);\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const [isColumnSettingsDrawerOpen, setIsColumnSettingsDrawerOpen] = useState(false);\n\n/*\n * columns = [\n *   {\n *     id: <string>,\n *     label: <string>,\n *     isPinned: <boolean>,\n *     isVisible: <boolean>,\n *   }\n * ]\n */\n  const orderedColumns = table.getState().columnOrder.map(columnId => {\n    const column = table.getColumn(columnId);\n    return {\n      id: columnId,\n      label: column.columnDef.header,\n      isPinned: column.columnDef.isPinned,\n      isVisible: table.getState().columnVisibility[columnId],\n    };\n  });\n\n  const onUpdateColumns = useCallback((columns) => {\n    const order = columns.map(column => column.id);\n    const visibility = columns.reduce((acc, column) => {\n      acc[column.id] = column.isVisible;\n      return acc;\n    }, {});\n    setColumnOrder(order);\n    setColumnVisibility(visibility);\n  }, [setColumnOrder]);\n\n  return (\n    <>\n      <ColumnSettingsDrawer\n        columns={orderedColumns}\n        defaultColumnOrder={defaultColumnOrder}\n        onUpdateColumns={onUpdateColumns}\n        isOpen={isColumnSettingsDrawerOpen}\n        onClose={() => setIsColumnSettingsDrawerOpen(false)}\n      />\n      <Flex\n        justifyContent=\"flex-end\"\n        mb=\"4x\"\n      >\n        <Button\n          variant=\"secondary\"\n          onClick={() => setIsColumnSettingsDrawerOpen(true)}\n        >\n          <Icon icon=\"columns\" />\n          <Space width=\"2x\" />\n          Customize Columns\n        </Button>\n      </Flex>\n      <Box>\n        <AutoSizer\n          disableHeight\n          onResize={({ width }) => {\n            if (tableWidth !== width) {\n              setTableWidth(width);\n            }\n          }}\n        >\n          {({ width }) => (\n            <Table\n              layout={layout}\n              sx={{\n                // Hide the table if there is no column sizing state\n                visibility: _.isEmpty(table.getState().columnSizing) ? 'hidden' : 'visible',\n\n                width,\n              }}\n            >\n              <TableHeader>\n                {table.getHeaderGroups().map(headerGroup => (\n                  <TableHeaderRow key={headerGroup.id}>\n                    {headerGroup.headers.map(header => {\n                      const styleProps = {\n                        minWidth: header.column.columnDef.minSize,\n                        width: header.getSize(),\n                        ...header.column.columnDef.style,\n                      };\n                      return (\n                        <TableHeaderCell\n                          key={header.id}\n                          {...styleProps}\n                        >\n                          {header.isPlaceholder ? null : (\n                            <Truncate>\n                              {flexRender(header.column.columnDef.header, header.getContext())}\n                            </Truncate>\n                          )}\n                        </TableHeaderCell>\n                      );\n                    })}\n                  </TableHeaderRow>\n                ))}\n              </TableHeader>\n              <TableBody>\n                {table.getRowModel().rows.map(row => (\n                  <TableRow\n                    key={row.id}\n                    data-selected={dataAttr(row.getIsSelected())}\n                    _hover={{\n                      backgroundColor: colorStyle.background.highlighted,\n                    }}\n                    _selected={{\n                      backgroundColor: colorStyle.background.selected,\n                    }}\n                  >\n                    {row.getVisibleCells().map(cell => {\n                      const styleProps = {\n                        minWidth: cell.column.columnDef.minSize,\n                        width: cell.column.getSize(),\n                        ...cell.column.columnDef.style,\n                      };\n                      return (\n                        <TableCell\n                          key={cell.id}\n                          {...styleProps}\n                        >\n                          <Truncate>\n                            {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                          </Truncate>\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </AutoSizer>\n      </Box>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h4,{id:"using-react-dnd",children:["Using ",(0,o.jsx)(s.Code,{children:"react-dnd"}),(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#using-react-dnd",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:column_ordering_dnd,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Flex,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  dataAttr,\n} from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nconst DraggableColumn = ({\n  canDrag: canDragProp,\n  canDrop: canDropProp,\n  children,\n  item: itemProp,\n  onDrop: onDropProp,\n}) => {\n  // https://react-dnd.github.io/react-dnd/docs/api/use-drag\n  const [collectedDragProps, dragRef, dragPreviewRef] = useDrag({\n    type: 'column',\n    item: itemProp,\n    canDrag: canDragProp,\n    collect: (monitor) => {\n      // DragSourceMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor\n      return {\n        isDragging: monitor.isDragging(),\n      };\n    },\n  })\n\n  // https://react-dnd.github.io/react-dnd/docs/api/use-drop\n  const [collectedDropProps, dropRef] = useDrop({\n    accept: 'column',\n    drop: onDropProp,\n    canDrop: canDropProp,\n    collect: (monitor) => {\n      // DropTargetMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor\n      return {\n        isOver: monitor.isOver(),\n      };\n    }\n  })\n\n  return children({\n    dragRef,\n    dragPreviewRef,\n    dropRef,\n    isDragging: collectedDragProps.isDragging,\n    isOver: collectedDropProps.isOver,\n  });\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const data = useMemo(() => [\n    { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n    { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  ], []);\n  const columns = useMemo(() => [\n    {\n      id: 'priority',\n      header: 'Priority',\n      accessorKey: 'priority',\n      cell: ({ getValue }) => {\n        const priority = getValue();\n        return priority ?? '-';\n      },\n      size: 80,\n    },\n    {\n      id: 'policy',\n      header: 'Policy',\n      accessorKey: 'policy',\n      size: 240,\n    },\n    {\n      id: 'modifiedTime',\n      header: 'Last Modified',\n      accessorKey: 'modifiedTime',\n      cell: ({ getValue }) => {\n        const mtime = getValue();\n        const date = new Date(mtime);\n        if (date.toString() === 'Invalid Date') {\n          return '-';\n        }\n        return (\n          <Truncate>\n            {date.toLocaleString()}\n          </Truncate>\n        );\n      },\n      size: 180,\n    },\n    {\n      id: 'modifiedBy',\n      header: 'Last Editor',\n      accessorKey: 'modifiedBy',\n      size: 150,\n    },\n  ], []);\n\n  const [columnOrder, setColumnOrder] = useState(columns.map(column => column.id));\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnOrder,\n    },\n    onColumnOrderChange: setColumnOrder,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const moveColumn = (draggedColumnId, targetColumnId) => {\n    const newColumnOrder = [...columnOrder];\n    newColumnOrder.splice(\n      newColumnOrder.indexOf(targetColumnId),\n      0,\n      newColumnOrder.splice(newColumnOrder.indexOf(draggedColumnId), 1)[0],\n    );\n    console.log('# columnOrder:', columnOrder, newColumnOrder);\n    setColumnOrder(newColumnOrder);\n  };\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                return (\n                  <DraggableColumn\n                    key={header.id}\n                    item={() => header}\n                    onDrop={(item, monitor) => {\n                      const draggedColumnId = item.column.id;\n                      const targetColumnId = header.column.id;\n                      moveColumn(draggedColumnId, targetColumnId);\n                    }}\n                  >\n                    {({\n                      dragRef,\n                      dragPreviewRef,\n                      dropRef,\n                      isDragging,\n                      isOver,\n                    }) => {\n                      const styleProps = {\n                        opacity: isDragging ? 0.28 : 1,\n                        minWidth: header.column.columnDef.minSize,\n                        width: header.getSize(),\n                        _selected: {\n                          backgroundColor: colorStyle.background.selected,\n                        },\n                        ...header.column.columnDef.style,\n                      };\n                      const canDrag = header.column.columnDef.id !== 'priority';\n                      const canDrop = header.column.columnDef.id !== 'priority';\n                      return (\n                        <TableHeaderCell\n                          ref={canDrop ? dropRef : undefined}\n                          data-selected={dataAttr(isOver)}\n                          sx={{\n                            ...styleProps,\n                          }}\n                        >\n                          <Flex\n                            ref={canDrag ? dragRef : undefined}\n                            sx={{\n                              alignItems: 'center',\n                              color: '2x',\n                              cursor: canDrag ? 'move' : 'default',\n                            }}\n                          >\n                            {header.isPlaceholder ? null : (\n                              <Truncate ref={dragPreviewRef}>\n                                {flexRender(header.column.columnDef.header, header.getContext())}\n                              </Truncate>\n                            )}\n                          </Flex>\n                        </TableHeaderCell>\n                      );\n                    }}\n                  </DraggableColumn>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map((row, index) => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    sx={{\n                      ...styleProps,\n                    }}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </DndProvider>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Flex,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  dataAttr,\n} from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nconst DraggableColumn = ({\n  canDrag: canDragProp,\n  canDrop: canDropProp,\n  children,\n  item: itemProp,\n  onDrop: onDropProp,\n}) => {\n  // https://react-dnd.github.io/react-dnd/docs/api/use-drag\n  const [collectedDragProps, dragRef, dragPreviewRef] = useDrag({\n    type: 'column',\n    item: itemProp,\n    canDrag: canDragProp,\n    collect: (monitor) => {\n      // DragSourceMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor\n      return {\n        isDragging: monitor.isDragging(),\n      };\n    },\n  })\n\n  // https://react-dnd.github.io/react-dnd/docs/api/use-drop\n  const [collectedDropProps, dropRef] = useDrop({\n    accept: 'column',\n    drop: onDropProp,\n    canDrop: canDropProp,\n    collect: (monitor) => {\n      // DropTargetMonitor\n      // https://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor\n      return {\n        isOver: monitor.isOver(),\n      };\n    }\n  })\n\n  return children({\n    dragRef,\n    dragPreviewRef,\n    dropRef,\n    isDragging: collectedDragProps.isDragging,\n    isOver: collectedDropProps.isOver,\n  });\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const data = useMemo(() => [\n    { id: 1, priority: 1, policy: 'Team Managers', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 2, priority: 2, policy: 'Marketing Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 3, priority: 3, policy: 'Sales Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 4, priority: 4, policy: 'Development Team', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 5, priority: 5, policy: 'IT Department', modifiedTime: 1625875200000, modifiedBy: 'admin' },\n    { id: 6, priority: null, policy: 'Server policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n    { id: 7, priority: null, policy: 'Endpoint policy (Default)', modifiedTime: 1625097600000, modifiedBy: 'admin' },\n  ], []);\n  const columns = useMemo(() => [\n    {\n      id: 'priority',\n      header: 'Priority',\n      accessorKey: 'priority',\n      cell: ({ getValue }) => {\n        const priority = getValue();\n        return priority ?? '-';\n      },\n      size: 80,\n    },\n    {\n      id: 'policy',\n      header: 'Policy',\n      accessorKey: 'policy',\n      size: 240,\n    },\n    {\n      id: 'modifiedTime',\n      header: 'Last Modified',\n      accessorKey: 'modifiedTime',\n      cell: ({ getValue }) => {\n        const mtime = getValue();\n        const date = new Date(mtime);\n        if (date.toString() === 'Invalid Date') {\n          return '-';\n        }\n        return (\n          <Truncate>\n            {date.toLocaleString()}\n          </Truncate>\n        );\n      },\n      size: 180,\n    },\n    {\n      id: 'modifiedBy',\n      header: 'Last Editor',\n      accessorKey: 'modifiedBy',\n      size: 150,\n    },\n  ], []);\n\n  const [columnOrder, setColumnOrder] = useState(columns.map(column => column.id));\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnOrder,\n    },\n    onColumnOrderChange: setColumnOrder,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const moveColumn = (draggedColumnId, targetColumnId) => {\n    const newColumnOrder = [...columnOrder];\n    newColumnOrder.splice(\n      newColumnOrder.indexOf(targetColumnId),\n      0,\n      newColumnOrder.splice(newColumnOrder.indexOf(draggedColumnId), 1)[0],\n    );\n    console.log('# columnOrder:', columnOrder, newColumnOrder);\n    setColumnOrder(newColumnOrder);\n  };\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                return (\n                  <DraggableColumn\n                    key={header.id}\n                    item={() => header}\n                    onDrop={(item, monitor) => {\n                      const draggedColumnId = item.column.id;\n                      const targetColumnId = header.column.id;\n                      moveColumn(draggedColumnId, targetColumnId);\n                    }}\n                  >\n                    {({\n                      dragRef,\n                      dragPreviewRef,\n                      dropRef,\n                      isDragging,\n                      isOver,\n                    }) => {\n                      const styleProps = {\n                        opacity: isDragging ? 0.28 : 1,\n                        minWidth: header.column.columnDef.minSize,\n                        width: header.getSize(),\n                        _selected: {\n                          backgroundColor: colorStyle.background.selected,\n                        },\n                        ...header.column.columnDef.style,\n                      };\n                      const canDrag = header.column.columnDef.id !== 'priority';\n                      const canDrop = header.column.columnDef.id !== 'priority';\n                      return (\n                        <TableHeaderCell\n                          ref={canDrop ? dropRef : undefined}\n                          data-selected={dataAttr(isOver)}\n                          sx={{\n                            ...styleProps,\n                          }}\n                        >\n                          <Flex\n                            ref={canDrag ? dragRef : undefined}\n                            sx={{\n                              alignItems: 'center',\n                              color: '2x',\n                              cursor: canDrag ? 'move' : 'default',\n                            }}\n                          >\n                            {header.isPlaceholder ? null : (\n                              <Truncate ref={dragPreviewRef}>\n                                {flexRender(header.column.columnDef.header, header.getContext())}\n                              </Truncate>\n                            )}\n                          </Flex>\n                        </TableHeaderCell>\n                      );\n                    }}\n                  </DraggableColumn>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map((row, index) => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    sx={{\n                      ...styleProps,\n                    }}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </DndProvider>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"column-resizing",children:["Column resizing",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-resizing",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:column_resizing,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  ResizeHandle,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useMemo, useRef, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const [columnResizeMode, setColumnResizeMode] = useState('onChange');\n\n  // https://tanstack.com/table/v8/docs/api/features/column-sizing#column-def-options\n  //\n  // ```\n  // enableResizing?: boolean\n  // ```\n  // Enables or disables column resizing for the column\n  //\n  // ```\n  // size?: number\n  // ```\n  // The desired size for the column\n  //\n  // ```\n  // minSize?: number\n  // ```\n  // The minimum allowed size for the column\n  //\n  // ```\n  // maxSize?: number\n  // ```\n  // The maximum allowed size for the column\n  //\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      enableResizing: true,\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const tableRef = useRef();\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    columnResizeMode,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'outline'; // One of: 'default', 'outline'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Menu>\n          <MenuButton variant=\"secondary\">\n            Resize: {columnResizeMode}\n          </MenuButton>\n          <MenuList\n            onClick={(event) => {\n              const value = event.target.value;\n              setColumnResizeMode(value);\n            }}\n            width=\"max-content\"\n          >\n            <MenuItem value=\"onChange\">\n              Resize: onChange\n            </MenuItem>\n            <MenuItem value=\"onEnd\">\n              Resize: onEnd\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </Box>\n      <Table\n        ref={tableRef}\n        layout={layout}\n        variant={variant}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  position: 'relative',\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                const columnSizingInfo = table.getState().columnSizingInfo;\n                const isResizingColumn = (columnSizingInfo.isResizingColumn === header.column.id);\n                const tableHeight = tableRef.current?.clientHeight ?? '100%';\n\n                // ResizeHandle\n                const resizeHandleSX = (() => {\n                  const dividerColor = {\n                    dark: 'gray:70',\n                    light: 'gray:30',\n                  }[colorMode];\n                  const highlightedDividerColor = {\n                    dark: 'gray:50',\n                    light: 'gray:50',\n                  }[colorMode];\n                  const dividerWidth = 1;\n                  const hoverableWidth = 8;\n                  const translucentWidth = 4;\n\n                  return {\n                    // You must specify absolute positioning for the resize handle to work correctly\n                    position: 'absolute',\n                    top: (variant === 'outline') ? -1 : 0,\n                    right: -1 * (isResizingColumn ? dividerWidth + translucentWidth : hoverableWidth),\n                    height: isResizingColumn ? tableHeight : 36,\n                    zIndex: 1,\n\n                    borderLeft: dividerWidth,\n                    borderLeftColor: isResizingColumn ? highlightedDividerColor : dividerColor,\n                    _hover: {\n                      borderLeftColor: highlightedDividerColor,\n                    },\n\n                    // Use `transform: translateX()` to move the resize handle when `columnResizeMode` is 'onEnd'\n                    transform: (columnResizeMode === 'onEnd' && isResizingColumn)\n                      ? `translateX(${columnSizingInfo.deltaOffset}px)`\n                      : undefined,\n                  };\n                })();\n\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                    {(header.column.columnDef.enableResizing !== false) && (\n                      <ResizeHandle\n                        sx={resizeHandleSX}\n\n                        // The following `onMouseDown` and `onTouchStart` props are required for the resize handle to work with `@tanstack/react-table`\n                        onMouseDown={header.getResizeHandler()}\n                        onTouchStart={header.getResizeHandler()}\n\n                        // The following `onResize`, `onResizeStart`, and `onResizeEnd` props can be used to update the column size when resizing\n                        onResize={({ clientX, clientY }) => {\n                          // Update the column size based on the current resizing coordinates\n                        }}\n                        onResizeStart={({ clientX, clientY }) => {\n                          // Get the initial position of the resize handle when resizing starts\n                        }}\n                        onResizeEnd={({ clientX, clientY }) => {\n                          // Get the final position of the resize handle when resizing ends\n                        }}\n                      />\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  ResizeHandle,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport React, { useMemo, useRef, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const [columnResizeMode, setColumnResizeMode] = useState('onChange');\n\n  // https://tanstack.com/table/v8/docs/api/features/column-sizing#column-def-options\n  //\n  // ```\n  // enableResizing?: boolean\n  // ```\n  // Enables or disables column resizing for the column\n  //\n  // ```\n  // size?: number\n  // ```\n  // The desired size for the column\n  //\n  // ```\n  // minSize?: number\n  // ```\n  // The minimum allowed size for the column\n  //\n  // ```\n  // maxSize?: number\n  // ```\n  // The maximum allowed size for the column\n  //\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      enableResizing: true,\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      enableResizing: true,\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const tableRef = useRef();\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    columnResizeMode,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const variant = 'outline'; // One of: 'default', 'outline'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Menu>\n          <MenuButton variant=\"secondary\">\n            Resize: {columnResizeMode}\n          </MenuButton>\n          <MenuList\n            onClick={(event) => {\n              const value = event.target.value;\n              setColumnResizeMode(value);\n            }}\n            width=\"max-content\"\n          >\n            <MenuItem value=\"onChange\">\n              Resize: onChange\n            </MenuItem>\n            <MenuItem value=\"onEnd\">\n              Resize: onEnd\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </Box>\n      <Table\n        ref={tableRef}\n        layout={layout}\n        variant={variant}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  position: 'relative',\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                const columnSizingInfo = table.getState().columnSizingInfo;\n                const isResizingColumn = (columnSizingInfo.isResizingColumn === header.column.id);\n                const tableHeight = tableRef.current?.clientHeight ?? '100%';\n\n                // ResizeHandle\n                const resizeHandleSX = (() => {\n                  const dividerColor = {\n                    dark: 'gray:70',\n                    light: 'gray:30',\n                  }[colorMode];\n                  const highlightedDividerColor = {\n                    dark: 'gray:50',\n                    light: 'gray:50',\n                  }[colorMode];\n                  const dividerWidth = 1;\n                  const hoverableWidth = 8;\n                  const translucentWidth = 4;\n\n                  return {\n                    // You must specify absolute positioning for the resize handle to work correctly\n                    position: 'absolute',\n                    top: (variant === 'outline') ? -1 : 0,\n                    right: -1 * (isResizingColumn ? dividerWidth + translucentWidth : hoverableWidth),\n                    height: isResizingColumn ? tableHeight : 36,\n                    zIndex: 1,\n\n                    borderLeft: dividerWidth,\n                    borderLeftColor: isResizingColumn ? highlightedDividerColor : dividerColor,\n                    _hover: {\n                      borderLeftColor: highlightedDividerColor,\n                    },\n\n                    // Use `transform: translateX()` to move the resize handle when `columnResizeMode` is 'onEnd'\n                    transform: (columnResizeMode === 'onEnd' && isResizingColumn)\n                      ? `translateX(${columnSizingInfo.deltaOffset}px)`\n                      : undefined,\n                  };\n                })();\n\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                    {(header.column.columnDef.enableResizing !== false) && (\n                      <ResizeHandle\n                        sx={resizeHandleSX}\n\n                        // The following `onMouseDown` and `onTouchStart` props are required for the resize handle to work with `@tanstack/react-table`\n                        onMouseDown={header.getResizeHandler()}\n                        onTouchStart={header.getResizeHandler()}\n\n                        // The following `onResize`, `onResizeStart`, and `onResizeEnd` props can be used to update the column size when resizing\n                        onResize={({ clientX, clientY }) => {\n                          // Update the column size based on the current resizing coordinates\n                        }}\n                        onResizeStart={({ clientX, clientY }) => {\n                          // Get the initial position of the resize handle when resizing starts\n                        }}\n                        onResizeEnd={({ clientX, clientY }) => {\n                          // Get the final position of the resize handle when resizing ends\n                        }}\n                      />\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"column-visibility",children:["Column visibility",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#column-visibility",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:column_visibility,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Divider,\n  Flex,\n  Stack,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { Fragment, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [columnVisibility, setColumnVisibility] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Flex\n          display=\"inline-flex\"\n          flexDirection=\"column\"\n        >\n          <Checkbox\n            checked={table.getIsAllColumnsVisible()}\n            indeterminate={table.getIsSomeColumnsVisible() && !table.getIsAllColumnsVisible()}\n            onChange={table.getToggleAllColumnsVisibilityHandler()}\n          >\n            Toggle All\n          </Checkbox>\n          <Divider my=\"2x\" />\n          <Stack spacing=\"1x\">\n            {table.getAllLeafColumns().map(column => {\n              return (\n                <Fragment key={column.id}>\n                  <Checkbox\n                    checked={column.getIsVisible()}\n                    onChange={column.getToggleVisibilityHandler()}\n                  >\n                    {column.columnDef.header}\n                  </Checkbox>\n                </Fragment>\n              );\n            })}\n          </Stack>\n        </Flex>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Divider,\n  Flex,\n  Stack,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { Fragment, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [columnVisibility, setColumnVisibility] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      columnVisibility,\n    },\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Flex\n          display=\"inline-flex\"\n          flexDirection=\"column\"\n        >\n          <Checkbox\n            checked={table.getIsAllColumnsVisible()}\n            indeterminate={table.getIsSomeColumnsVisible() && !table.getIsAllColumnsVisible()}\n            onChange={table.getToggleAllColumnsVisibilityHandler()}\n          >\n            Toggle All\n          </Checkbox>\n          <Divider my=\"2x\" />\n          <Stack spacing=\"1x\">\n            {table.getAllLeafColumns().map(column => {\n              return (\n                <Fragment key={column.id}>\n                  <Checkbox\n                    checked={column.getIsVisible()}\n                    onChange={column.getToggleVisibilityHandler()}\n                  >\n                    {column.columnDef.header}\n                  </Checkbox>\n                </Fragment>\n              );\n            })}\n          </Stack>\n        </Flex>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"pagination",children:["Pagination",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#pagination",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:pagination,file:{data:'import {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from \'@tanstack/react-table\';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Icon,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { ensureArray, ensureNumber } from \'ensure-type\';\nimport _ from \'lodash\';\nimport React, { useCallback, useEffect, useMemo, useState } from \'react\';\n\nconst threatTypes = [\n  \'Virus/Malware\',\n  \'Spyware/Grayware\',\n  \'URL Filtering\',\n  \'Web Reputation\',\n  \'Network Virus\',\n  \'Application Control\',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: \'Endpoint\',\n      accessorKey: \'endpoint\',\n      size: 200,\n    },\n    {\n      header: \'Detections\',\n      accessorKey: \'detections\',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 150,\n    },\n    {\n      header: \'Last Seen\',\n      accessorKey: \'lastSeen\',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  });\n\n  const layout = \'flexbox\'; // One of: \'flexbox\', \'table\'\n  const isTableScrollingEnabled = layout !== \'table\';\n  const currentPage = table.getState().pagination.pageIndex + 1;\n  const totalCount = table.getCoreRowModel().rows.length;\n  let tableStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const headerHeight = 36;\n    const cellHeight = 36;\n    const footerHeight = 56;\n    const rowsToDisplay = 10;\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight + footerHeight,\n    };\n  }\n\n  return (\n    <>\n      <Box mb="4x" px="3x">\n        <Text>Current page: {currentPage}</Text>\n      </Box>\n      <Table\n        layout={layout}\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <ConditionalWrapper\n          condition={isTableScrollingEnabled}\n          wrapper={children => (\n            <TableScrollbar\n              height="100%"\n              overflow="visible" // Make the scrollbar visible\n            >\n              {children}\n            </TableScrollbar>\n          )}\n        >\n          <TableBody>\n            {table.getRowModel().rows.map(row => (\n              <TableRow\n                key={row.id}\n                _hover={{\n                  backgroundColor: colorStyle.background.highlighted,\n                }}\n              >\n                {row.getVisibleCells().map(cell => {\n                  const styleProps = {\n                    minWidth: cell.column.columnDef.minSize,\n                    width: cell.column.getSize(),\n                    ...cell.column.columnDef.style,\n                  };\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      {...styleProps}\n                    >\n                      <Truncate>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </Truncate>\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableBody>\n        </ConditionalWrapper>\n        <TablePagination\n          count={totalCount}\n          onPageChange={(nextPage) => {\n            const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n            table.setPageIndex(pageIndex);\n          }}\n          onRowsPerPageChange={(nextRowsPerPage) => {\n            const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n            table.setPageSize(pageSize);\n          }}\n        />\n      </Table>\n    </>\n  );\n};\n\nconst TablePagination = ({\n  count,\n  defaultPage = 1,\n  defaultRowsPerPage: defaultRowsPerPageProp,\n  onPageChange: onPageChangeProp,\n  onRowsPerPageChange: onRowsPerPageChangeProp,\n  page: pageProp,\n  rowsPerPage: rowsPerPageProp,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  showFirstButton = false,\n  showLastButton = false,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const defaultRowsPerPage = defaultRowsPerPageProp ?? ensureArray(rowsPerPageOptions)[0];\n  const [page, setPage] = useState(pageProp ?? defaultPage);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageProp ?? defaultRowsPerPage);\n\n  useEffect(() => {\n    const isControlled = (pageProp !== undefined);\n    if (isControlled) {\n      setPage(pageProp);\n    }\n  }, [pageProp]);\n\n  useEffect(() => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (isControlled) {\n      setRowsPerPage(rowsPerPageProp);\n    }\n  }, [rowsPerPageProp]);\n\n  const onPageChange = useCallback((nextPage) => {\n    const isControlled = (pageProp !== undefined);\n    if (!isControlled) {\n      setPage(nextPage);\n    }\n\n    if (typeof onPageChangeProp === \'function\') {\n      onPageChangeProp(nextPage);\n    }\n  }, [pageProp, onPageChangeProp]);\n\n  const onRowsPerPageChange = useCallback((nextRowsPerPage) => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (!isControlled) {\n      setRowsPerPage(nextRowsPerPage);\n    }\n\n    if (typeof onRowsPerPageChangeProp === \'function\') {\n      onRowsPerPageChangeProp(nextRowsPerPage);\n    }\n  }, [rowsPerPageProp, onRowsPerPageChangeProp]);\n\n  const totalPages = Math.ceil(count / rowsPerPage);\n  const handlePageChange = (event) => {\n    const nextPage = ensureNumber(event.target.value);\n    if (nextPage <= 1) {\n      onPageChange(1);\n    } else if (nextPage >= totalPages) {\n      onPageChange(totalPages);\n    } else {\n      onPageChange(nextPage);\n    }\n  };\n  const handleRowsPerPageChange = (event) => {\n    const nextRowsPerPage = ensureNumber(event.target.value);\n    if (nextRowsPerPage > 0) {\n      onPageChange(1);\n      onRowsPerPageChange(nextRowsPerPage);\n    }\n  };\n  const canPreviousPage = (page > 1);\n  const canNextPage = (page < totalPages);\n\n  return (\n    <Flex\n      alignItems="center"\n      justifyContent="flex-end"\n      backgroundColor={colorStyle.background.secondary}\n      px="6x"\n      py="3x"\n    >\n      <Text mr="2x">\n        Total: {count}\n      </Text>\n      <Divider\n        orientation="vertical"\n        height="6x"\n      />\n      <Menu>\n        <MenuButton variant="ghost">\n          {rowsPerPage} per page\n        </MenuButton>\n        <MenuList\n          onClick={handleRowsPerPageChange}\n          width="100%"\n        >\n          {rowsPerPageOptions.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n            >\n              {option}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      <Divider\n        orientation="vertical"\n        height="6x"\n      />\n      <Space width="2x" />\n      <Input\n        width="10x"\n        px={0}\n        textAlign="center"\n        onChange={handlePageChange}\n        value={page}\n      />\n      <Space width="2x" />\n      <Text>/</Text>\n      <Space width="2x" />\n      <Text>{totalPages}</Text>\n      <Space width="2x" />\n      <ButtonGroup\n        variant="secondary"\n        sx={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button\n          width="8x"\n          disabled={!canPreviousPage}\n          onClick={(event) => {\n            onPageChange(page - 1);\n          }}\n        >\n          <Icon icon="angle-left" />\n        </Button>\n        <Button\n          width="8x"\n          disabled={!canNextPage}\n          onClick={(event) => {\n            onPageChange(page + 1);\n          }}\n        >\n          <Icon icon="angle-right" />\n        </Button>\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;',path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:'import {\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from \'@tanstack/react-table\';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Icon,\n  Input,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorStyle,\n} from \'@tonic-ui/react\';\nimport { ensureArray, ensureNumber } from \'ensure-type\';\nimport _ from \'lodash\';\nimport React, { useCallback, useEffect, useMemo, useState } from \'react\';\n\nconst threatTypes = [\n  \'Virus/Malware\',\n  \'Spyware/Grayware\',\n  \'URL Filtering\',\n  \'Web Reputation\',\n  \'Network Virus\',\n  \'Application Control\',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: \'Endpoint\',\n      accessorKey: \'endpoint\',\n      size: 200,\n    },\n    {\n      header: \'Detections\',\n      accessorKey: \'detections\',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 150,\n    },\n    {\n      header: \'Last Seen\',\n      accessorKey: \'lastSeen\',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  });\n\n  const layout = \'flexbox\'; // One of: \'flexbox\', \'table\'\n  const isTableScrollingEnabled = layout !== \'table\';\n  const currentPage = table.getState().pagination.pageIndex + 1;\n  const totalCount = table.getCoreRowModel().rows.length;\n  let tableStyleProps = {};\n\n  if (isTableScrollingEnabled) {\n    const headerHeight = 36;\n    const cellHeight = 36;\n    const footerHeight = 56;\n    const rowsToDisplay = 10;\n    tableStyleProps = {\n      height: headerHeight + rowsToDisplay * cellHeight + footerHeight,\n    };\n  }\n\n  return (\n    <>\n      <Box mb="4x" px="3x">\n        <Text>Current page: {currentPage}</Text>\n      </Box>\n      <Table\n        layout={layout}\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <ConditionalWrapper\n          condition={isTableScrollingEnabled}\n          wrapper={children => (\n            <TableScrollbar\n              height="100%"\n              overflow="visible" // Make the scrollbar visible\n            >\n              {children}\n            </TableScrollbar>\n          )}\n        >\n          <TableBody>\n            {table.getRowModel().rows.map(row => (\n              <TableRow\n                key={row.id}\n                _hover={{\n                  backgroundColor: colorStyle.background.highlighted,\n                }}\n              >\n                {row.getVisibleCells().map(cell => {\n                  const styleProps = {\n                    minWidth: cell.column.columnDef.minSize,\n                    width: cell.column.getSize(),\n                    ...cell.column.columnDef.style,\n                  };\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      {...styleProps}\n                    >\n                      <Truncate>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </Truncate>\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableBody>\n        </ConditionalWrapper>\n        <TablePagination\n          count={totalCount}\n          onPageChange={(nextPage) => {\n            const pageIndex = Math.max(ensureNumber(nextPage) - 1, 0);\n            table.setPageIndex(pageIndex);\n          }}\n          onRowsPerPageChange={(nextRowsPerPage) => {\n            const pageSize = Math.max(ensureNumber(nextRowsPerPage), 1);\n            table.setPageSize(pageSize);\n          }}\n        />\n      </Table>\n    </>\n  );\n};\n\nconst TablePagination = ({\n  count,\n  defaultPage = 1,\n  defaultRowsPerPage: defaultRowsPerPageProp,\n  onPageChange: onPageChangeProp,\n  onRowsPerPageChange: onRowsPerPageChangeProp,\n  page: pageProp,\n  rowsPerPage: rowsPerPageProp,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  showFirstButton = false,\n  showLastButton = false,\n}) => {\n  const [colorStyle] = useColorStyle();\n  const defaultRowsPerPage = defaultRowsPerPageProp ?? ensureArray(rowsPerPageOptions)[0];\n  const [page, setPage] = useState(pageProp ?? defaultPage);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageProp ?? defaultRowsPerPage);\n\n  useEffect(() => {\n    const isControlled = (pageProp !== undefined);\n    if (isControlled) {\n      setPage(pageProp);\n    }\n  }, [pageProp]);\n\n  useEffect(() => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (isControlled) {\n      setRowsPerPage(rowsPerPageProp);\n    }\n  }, [rowsPerPageProp]);\n\n  const onPageChange = useCallback((nextPage) => {\n    const isControlled = (pageProp !== undefined);\n    if (!isControlled) {\n      setPage(nextPage);\n    }\n\n    if (typeof onPageChangeProp === \'function\') {\n      onPageChangeProp(nextPage);\n    }\n  }, [pageProp, onPageChangeProp]);\n\n  const onRowsPerPageChange = useCallback((nextRowsPerPage) => {\n    const isControlled = (rowsPerPageProp !== undefined);\n    if (!isControlled) {\n      setRowsPerPage(nextRowsPerPage);\n    }\n\n    if (typeof onRowsPerPageChangeProp === \'function\') {\n      onRowsPerPageChangeProp(nextRowsPerPage);\n    }\n  }, [rowsPerPageProp, onRowsPerPageChangeProp]);\n\n  const totalPages = Math.ceil(count / rowsPerPage);\n  const handlePageChange = (event) => {\n    const nextPage = ensureNumber(event.target.value);\n    if (nextPage <= 1) {\n      onPageChange(1);\n    } else if (nextPage >= totalPages) {\n      onPageChange(totalPages);\n    } else {\n      onPageChange(nextPage);\n    }\n  };\n  const handleRowsPerPageChange = (event) => {\n    const nextRowsPerPage = ensureNumber(event.target.value);\n    if (nextRowsPerPage > 0) {\n      onPageChange(1);\n      onRowsPerPageChange(nextRowsPerPage);\n    }\n  };\n  const canPreviousPage = (page > 1);\n  const canNextPage = (page < totalPages);\n\n  return (\n    <Flex\n      alignItems="center"\n      justifyContent="flex-end"\n      backgroundColor={colorStyle.background.secondary}\n      px="6x"\n      py="3x"\n    >\n      <Text mr="2x">\n        Total: {count}\n      </Text>\n      <Divider\n        orientation="vertical"\n        height="6x"\n      />\n      <Menu>\n        <MenuButton variant="ghost">\n          {rowsPerPage} per page\n        </MenuButton>\n        <MenuList\n          onClick={handleRowsPerPageChange}\n          width="100%"\n        >\n          {rowsPerPageOptions.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n            >\n              {option}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n      <Divider\n        orientation="vertical"\n        height="6x"\n      />\n      <Space width="2x" />\n      <Input\n        width="10x"\n        px={0}\n        textAlign="center"\n        onChange={handlePageChange}\n        value={page}\n      />\n      <Space width="2x" />\n      <Text>/</Text>\n      <Space width="2x" />\n      <Text>{totalPages}</Text>\n      <Space width="2x" />\n      <ButtonGroup\n        variant="secondary"\n        sx={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button\n          width="8x"\n          disabled={!canPreviousPage}\n          onClick={(event) => {\n            onPageChange(page - 1);\n          }}\n        >\n          <Icon icon="angle-left" />\n        </Button>\n        <Button\n          width="8x"\n          disabled={!canNextPage}\n          onClick={(event) => {\n            onPageChange(page + 1);\n          }}\n        >\n          <Icon icon="angle-right" />\n        </Button>\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nconst ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n\nexport default App;',title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"row-expanding",children:["Row expanding",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-expanding",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:row_expanding,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  ButtonBase,\n  Collapse,\n  Flex,\n  Grid,\n  Icon,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  createTransitionStyle,\n  dataAttr,\n  getEnterTransitionProps,\n  getExitTransitionProps,\n  transitionEasing,\n} from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n    const entries = Object.entries(row.original);\n    const renderValue = (value) => {\n      if (Array.isArray(value)) {\n        return value.map(item => <Text key={item}>{item}</Text>);\n      }\n\n      if (typeof value === 'boolean') {\n        return value.toString();\n      }\n\n      return value;\n    };\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          <Grid\n            templateColumns=\"auto auto\"\n            columnGap=\"10x\"\n            rowGap=\"1x\"\n          >\n            {entries.map(([key, value]) => {\n              return (\n                <Fragment key={key}>\n                  <TextLabel>\n                    {key}\n                  </TextLabel>\n                  <Text>\n                    {renderValue(value)}\n                  </Text>\n                </Fragment>\n              );\n            })}\n          </Grid>\n        </Box>\n      </Flex>\n    );\n  };\n\n  /*\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          {JSON.stringify(row.original, null, 2)}\n        </Box>\n      </Flex>\n    );\n  };\n  */\n\n  const columns = useMemo(() => [\n    {\n      id: 'expand',\n      header: () => null,\n      cell: ({ row }) => {\n        const canExpand = row.getCanExpand();\n        const isExpanded = row.getIsExpanded();\n\n        if (!canExpand) {\n          return null;\n        }\n\n        return (\n          <TableRowToggleIcon\n            isExpanded={isExpanded}\n            onClick={row.getToggleExpandedHandler()}\n          />\n        );\n      },\n      size: 48,\n    },\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getRowCanExpand: () => true,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableHeaderRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableHeaderCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableHeaderCell>\n              );\n            })}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <Fragment key={row.id}>\n            <TableRow\n              data-selected={dataAttr(row.getIsExpanded())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n            {(row.getCanExpand() && layout === 'flexbox') && (\n              <Collapse in={row.getIsExpanded()}>\n                {renderExpandedRow({ row })}\n              </Collapse>\n            )}\n            {(row.getCanExpand() && layout === 'table') && (\n              <TableRow>\n                <TableCell\n                  padding={0}\n                  borderBottom={0}\n                  colSpan={row.getVisibleCells().length}\n                >\n                  <Collapse in={row.getIsExpanded()}>\n                    {renderExpandedRow({ row })}\n                  </Collapse>\n                </TableCell>\n              </TableRow>\n            )}\n          </Fragment>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nconst TableRowToggleIcon = forwardRef((\n  {\n    isExpanded,\n    ...rest\n  },\n  ref,\n) => {\n  const timeout = isExpanded\n    ? Math.floor(133 * 0.7) // exit\n    : 133; // enter\n  const easing = transitionEasing.easeOut;\n  const transitionProps = isExpanded\n    ? getEnterTransitionProps({ timeout, easing })\n    : getExitTransitionProps({ timeout, easing });\n  const styleProps = {\n    transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',\n    transition: createTransitionStyle('transform', transitionProps),\n  };\n\n  return (\n    <ButtonBase {...rest}>\n      <Icon icon=\"angle-right\" size=\"4x\" {...styleProps} />\n    </ButtonBase>\n  );\n});\nTableRowToggleIcon.displayName = 'TableRowToggleIcon';\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  ButtonBase,\n  Collapse,\n  Flex,\n  Grid,\n  Icon,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  TextLabel,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  createTransitionStyle,\n  dataAttr,\n  getEnterTransitionProps,\n  getExitTransitionProps,\n  transitionEasing,\n} from '@tonic-ui/utils';\nimport React, { Fragment, forwardRef, useMemo } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n    const entries = Object.entries(row.original);\n    const renderValue = (value) => {\n      if (Array.isArray(value)) {\n        return value.map(item => <Text key={item}>{item}</Text>);\n      }\n\n      if (typeof value === 'boolean') {\n        return value.toString();\n      }\n\n      return value;\n    };\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          <Grid\n            templateColumns=\"auto auto\"\n            columnGap=\"10x\"\n            rowGap=\"1x\"\n          >\n            {entries.map(([key, value]) => {\n              return (\n                <Fragment key={key}>\n                  <TextLabel>\n                    {key}\n                  </TextLabel>\n                  <Text>\n                    {renderValue(value)}\n                  </Text>\n                </Fragment>\n              );\n            })}\n          </Grid>\n        </Box>\n      </Flex>\n    );\n  };\n\n  /*\n  const renderExpandedRow = ({ row }) => {\n    const tableBorderColor = {\n      dark: 'gray:70',\n      light: 'gray:30',\n    }[colorMode];\n    const dividerColor = {\n      dark: 'gray:60',\n      light: 'gray:30',\n    }[colorMode];\n\n    return (\n      <Flex\n        borderBottom={1}\n        borderBottomColor={tableBorderColor}\n      >\n        <Box width=\"12x\" borderRight={2} borderRightColor={dividerColor} />\n        <Box as=\"pre\" fontFamily=\"mono\" m={0} px=\"3x\" py=\"2x\">\n          {JSON.stringify(row.original, null, 2)}\n        </Box>\n      </Flex>\n    );\n  };\n  */\n\n  const columns = useMemo(() => [\n    {\n      id: 'expand',\n      header: () => null,\n      cell: ({ row }) => {\n        const canExpand = row.getCanExpand();\n        const isExpanded = row.getIsExpanded();\n\n        if (!canExpand) {\n          return null;\n        }\n\n        return (\n          <TableRowToggleIcon\n            isExpanded={isExpanded}\n            onClick={row.getToggleExpandedHandler()}\n          />\n        );\n      },\n      size: 48,\n    },\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getRowCanExpand: () => true,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n\n  return (\n    <Table layout={layout}>\n      <TableHeader>\n        {table.getHeaderGroups().map(headerGroup => (\n          <TableHeaderRow key={headerGroup.id}>\n            {headerGroup.headers.map(header => {\n              const styleProps = {\n                minWidth: header.column.columnDef.minSize,\n                width: header.getSize(),\n                ...header.column.columnDef.style,\n              };\n              return (\n                <TableHeaderCell\n                  key={header.id}\n                  {...styleProps}\n                >\n                  {header.isPlaceholder ? null : (\n                    <Truncate>\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </Truncate>\n                  )}\n                </TableHeaderCell>\n              );\n            })}\n          </TableHeaderRow>\n        ))}\n      </TableHeader>\n      <TableBody>\n        {table.getRowModel().rows.map(row => (\n          <Fragment key={row.id}>\n            <TableRow\n              data-selected={dataAttr(row.getIsExpanded())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n            {(row.getCanExpand() && layout === 'flexbox') && (\n              <Collapse in={row.getIsExpanded()}>\n                {renderExpandedRow({ row })}\n              </Collapse>\n            )}\n            {(row.getCanExpand() && layout === 'table') && (\n              <TableRow>\n                <TableCell\n                  padding={0}\n                  borderBottom={0}\n                  colSpan={row.getVisibleCells().length}\n                >\n                  <Collapse in={row.getIsExpanded()}>\n                    {renderExpandedRow({ row })}\n                  </Collapse>\n                </TableCell>\n              </TableRow>\n            )}\n          </Fragment>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nconst TableRowToggleIcon = forwardRef((\n  {\n    isExpanded,\n    ...rest\n  },\n  ref,\n) => {\n  const timeout = isExpanded\n    ? Math.floor(133 * 0.7) // exit\n    : 133; // enter\n  const easing = transitionEasing.easeOut;\n  const transitionProps = isExpanded\n    ? getEnterTransitionProps({ timeout, easing })\n    : getExitTransitionProps({ timeout, easing });\n  const styleProps = {\n    transform: isExpanded ? 'rotate(90deg)' : 'rotate(0deg)',\n    transition: createTransitionStyle('transform', transitionProps),\n  };\n\n  return (\n    <ButtonBase {...rest}>\n      <Icon icon=\"angle-right\" size=\"4x\" {...styleProps} />\n    </ButtonBase>\n  );\n});\nTableRowToggleIcon.displayName = 'TableRowToggleIcon';\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.p,{children:["The way the expanded row is displayed in the ",(0,o.jsx)(n.code,{children:"Table"})," component depends on the value of the ",(0,o.jsx)(n.code,{children:"layout"})," prop."]}),"\n",(0,o.jsxs)(n.p,{children:["If the ",(0,o.jsx)(n.code,{children:"layout"})," prop is set to ",(0,o.jsx)(n.code,{children:"flexbox"}),", the expanded row will appear below the current row. On the other hand, if the ",(0,o.jsx)(n.code,{children:"layout"})," prop is set to ",(0,o.jsx)(n.code,{children:"table"}),", the expanded row will be displayed within a ",(0,o.jsx)(n.code,{children:"TableCell"})," that spans across the visible cells in a new row."]}),"\n",(0,o.jsxs)(n.p,{children:["Below are the code snippets that demonstrate how to render the expanded row based on the ",(0,o.jsx)(n.code,{children:"layout"})," prop:"]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// layout='flexbox'\n<TableRow>\n  <TableCell>Cell 1</TableCell>\n  <TableCell>Cell 2</TableCell>\n  <TableCell>Cell 3</TableCell>\n</TableRow>\n{row.getCanExpand() && (\n  <Collapse in={row.getIsExpanded()}>\n    {renderExpandedRow({ row })}\n  </Collapse>\n)}\n"})}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// layout='table'\n<TableRow>\n  <TableCell>Cell 1</TableCell>\n  <TableCell>Cell 2</TableCell>\n  <TableCell>Cell 3</TableCell>\n</TableRow>\n{row.getCanExpand() && (\n  <TableRow>\n    <TableCell\n      padding={0}\n      borderBottom={0}\n      colSpan={row.getVisibleCells().length}\n    >\n      <Collapse in={row.getIsExpanded()}>\n        {renderExpandedRow({ row })}\n      </Collapse>\n    </TableCell>\n  </TableRow>\n)}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"row-selection",children:["Row selection",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-selection",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:row_selection,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [rowSelection, setRowSelection] = useState({});\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 48,\n      style: {\n        px: '4x',\n      },\n    },\n    {\n      accessorKey: 'eventType',\n      header: () => (\n        <Truncate>\n          Event Type\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 240,\n    },\n    {\n      accessorKey: 'affectedDevices',\n      header: () => (\n        <Truncate>\n          Affected Devices\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      accessorKey: 'detections',\n      header: () => (\n        <Truncate>\n          Detections\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 48,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const selectedRowCount = Object.keys(rowSelection).length;\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      flexRender(header.column.columnDef.header, header.getContext())\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [rowSelection, setRowSelection] = useState({});\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 48,\n      style: {\n        px: '4x',\n      },\n    },\n    {\n      accessorKey: 'eventType',\n      header: () => (\n        <Truncate>\n          Event Type\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 240,\n    },\n    {\n      accessorKey: 'affectedDevices',\n      header: () => (\n        <Truncate>\n          Affected Devices\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      accessorKey: 'detections',\n      header: () => (\n        <Truncate>\n          Detections\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 48,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const selectedRowCount = Object.keys(rowSelection).length;\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      flexRender(header.column.columnDef.header, header.getContext())\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              data-selected={dataAttr(row.getIsSelected())}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n              _selected={{\n                backgroundColor: colorStyle.background.selected,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"row-ordering",children:["Row ordering",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#row-ordering",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h4,{id:"using-react-movable-1",children:["Using ",(0,o.jsx)(s.Code,{children:"react-movable"}),(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#using-react-movable-1",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:row_ordering_movable,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Flex,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useToggle,\n} from '@tonic-ui/react-hooks';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\nimport { List, arrayMove } from 'react-movable';\nimport HandleIcon from './icons/icon-handle';\n\nconst DragHandleIcon = ({ sx, ...rest }) => {\n  return (\n    <Flex\n      sx={[\n        {\n          '[role=\"row\"]:hover > [role=\"cell\"] &': {\n            opacity: 1,\n          },\n          opacity: 0,\n          cursor: 'move',\n          px: '1x',\n          width: '4x',\n          position: 'absolute',\n          left: 0,\n        },\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n      {...rest}\n    >\n      <HandleIcon />\n    </Flex>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [data, setData] = useState([\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ]);\n  const [rowSelection, setRowSelection] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 48,\n      style: {\n        px: '4x',\n      },\n    },\n    {\n      accessorKey: 'eventType',\n      header: () => (\n        <Truncate>\n          Event Type\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 240,\n    },\n    {\n      accessorKey: 'affectedDevices',\n      header: () => (\n        <Truncate>\n          Affected Devices\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      accessorKey: 'detections',\n      header: () => (\n        <Truncate>\n          Detections\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 48,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const [enableRowOrderingByDraggingTableRow, toggleEnableRowOrderingByDraggingTableRow] = useToggle(true);\n  const selectedRowCount = Object.keys(rowSelection).length;\n  const rows = table.getRowModel().rows;\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Checkbox\n          checked={enableRowOrderingByDraggingTableRow}\n          onChange={() => {\n            toggleEnableRowOrderingByDraggingTableRow();\n          }}\n        >\n          <Flex alignItems=\"center\">\n            Enable reordering of rows by dragging the entire table row\n          </Flex>\n        </Checkbox>\n      </Box>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      flexRender(header.column.columnDef.header, header.getContext())\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <List\n          lockVertically={true}\n          values={rows}\n          onChange={({ oldIndex, newIndex }) => {\n            // Update the data\n            setData(arrayMove(data, oldIndex, newIndex));\n\n            // Update the row selection state\n            const oldRowSelectionValues = rows.map((value, key) => rowSelection[key]);\n            const newRowSelectionValues = arrayMove(oldRowSelectionValues, oldIndex, newIndex);\n            const newRowSelection = newRowSelectionValues.reduce((acc, value, key) => {\n              if (value !== undefined) {\n                acc[key] = value;\n              }\n              return acc;\n            }, {});\n            setRowSelection(newRowSelection);\n          }}\n          renderList={({ children, props, isDragged }) => {\n            return (\n              <TableBody {...props}>{children}</TableBody>\n            );\n          }}\n          renderItem={({ value: row, props, isDragged, isOutOfBounds }) => {\n            return (\n              <TableRow\n                key={row.id}\n                data-selected={dataAttr(row.getIsSelected())}\n                sx={{\n                  cursor: isDragged ? 'move' : undefined,\n                  _hover: {\n                    backgroundColor: isDragged ? 'gray:70' : colorStyle.background.highlighted,\n                  },\n                  _selected: {\n                    backgroundColor: isDragged ? 'gray:70' : colorStyle.background.selected,\n                  },\n                }}\n                {...props}\n              >\n                {row.getVisibleCells().map(cell => {\n                  const styleProps = {\n                    minWidth: cell.column.columnDef.minSize,\n                    width: cell.column.getSize(),\n                    ...cell.column.columnDef.style,\n                  };\n\n                  if (cell.column.id === 'selection') {\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        sx={{\n                          ...styleProps,\n                          position: 'relative',\n                        }}\n                      >\n                        <Flex alignItems=\"center\">\n                          <DragHandleIcon\n                            {...{\n                              // Mark any node with the `data-movable-handle` attribute if you wish you wish to use it as a DnD handle.\n                              // The rest of renderItem will be then ignored and not start the drag and drop.\n                              'data-movable-handle': enableRowOrderingByDraggingTableRow ? undefined : '',\n                            }}\n                          />\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Flex>\n                      </TableCell>\n                    );\n                  }\n\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      sx={{\n                        ...styleProps,\n                      }}\n                    >\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          }}\n        />\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{"src/pages/components/table/icons/icon-handle.js":'import { SVGIcon } from \'@tonic-ui/react\';\nimport React from \'react\';\n\nconst Icon = (props) => (\n  <SVGIcon width="2x" height="4x" viewBox="0 0 8 16" {...props}>\n    <circle cx="2" cy="2" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="6" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="10" r="1" fill="#5E5E5E"/>\n    <circle cx="2" cy="14" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="2" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="6" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="10" r="1" fill="#5E5E5E"/>\n    <circle cx="6" cy="14" r="1" fill="#5E5E5E"/>\n  </SVGIcon>\n);\n\nexport default Icon;'},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Flex,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useToggle,\n} from '@tonic-ui/react-hooks';\nimport { dataAttr } from '@tonic-ui/utils';\nimport React, { useMemo, useState } from 'react';\nimport { List, arrayMove } from 'react-movable';\nimport HandleIcon from '@/pages/components/table/icons/icon-handle';\n\nconst DragHandleIcon = ({ sx, ...rest }) => {\n  return (\n    <Flex\n      sx={[\n        {\n          '[role=\"row\"]:hover > [role=\"cell\"] &': {\n            opacity: 1,\n          },\n          opacity: 0,\n          cursor: 'move',\n          px: '1x',\n          width: '4x',\n          position: 'absolute',\n          left: 0,\n        },\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n      {...rest}\n    >\n      <HandleIcon />\n    </Flex>\n  );\n};\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const [data, setData] = useState([\n    { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n    { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n    { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n    { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n    { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n    { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n  ]);\n  const [rowSelection, setRowSelection] = useState({});\n\n  const columns = useMemo(() => [\n    {\n      id: 'selection',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllRowsSelected()}\n          indeterminate={table.getIsSomeRowsSelected()}\n          onChange={table.getToggleAllRowsSelectedHandler()}\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          disabled={!row.getCanSelect()}\n          indeterminate={row.getIsSomeSelected()}\n          onChange={row.getToggleSelectedHandler()}\n        />\n      ),\n      size: 48,\n      style: {\n        px: '4x',\n      },\n    },\n    {\n      accessorKey: 'eventType',\n      header: () => (\n        <Truncate>\n          Event Type\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 240,\n    },\n    {\n      accessorKey: 'affectedDevices',\n      header: () => (\n        <Truncate>\n          Affected Devices\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      accessorKey: 'detections',\n      header: () => (\n        <Truncate>\n          Detections\n        </Truncate>\n      ),\n      cell: ({ getValue }) => (\n        <Truncate>{getValue()}</Truncate>\n      ),\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 48,\n    },\n    state: {\n      rowSelection,\n    },\n    enableRowSelection: true, // enable row selection for all rows\n    // enableRowSelection: row => row.original.detections > 0, // or enable row selection conditionally per row\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const [enableRowOrderingByDraggingTableRow, toggleEnableRowOrderingByDraggingTableRow] = useToggle(true);\n  const selectedRowCount = Object.keys(rowSelection).length;\n  const rows = table.getRowModel().rows;\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Checkbox\n          checked={enableRowOrderingByDraggingTableRow}\n          onChange={() => {\n            toggleEnableRowOrderingByDraggingTableRow();\n          }}\n        >\n          <Flex alignItems=\"center\">\n            Enable reordering of rows by dragging the entire table row\n          </Flex>\n        </Checkbox>\n      </Box>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>\n          {selectedRowCount} selected\n        </Text>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      flexRender(header.column.columnDef.header, header.getContext())\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <List\n          lockVertically={true}\n          values={rows}\n          onChange={({ oldIndex, newIndex }) => {\n            // Update the data\n            setData(arrayMove(data, oldIndex, newIndex));\n\n            // Update the row selection state\n            const oldRowSelectionValues = rows.map((value, key) => rowSelection[key]);\n            const newRowSelectionValues = arrayMove(oldRowSelectionValues, oldIndex, newIndex);\n            const newRowSelection = newRowSelectionValues.reduce((acc, value, key) => {\n              if (value !== undefined) {\n                acc[key] = value;\n              }\n              return acc;\n            }, {});\n            setRowSelection(newRowSelection);\n          }}\n          renderList={({ children, props, isDragged }) => {\n            return (\n              <TableBody {...props}>{children}</TableBody>\n            );\n          }}\n          renderItem={({ value: row, props, isDragged, isOutOfBounds }) => {\n            return (\n              <TableRow\n                key={row.id}\n                data-selected={dataAttr(row.getIsSelected())}\n                sx={{\n                  cursor: isDragged ? 'move' : undefined,\n                  _hover: {\n                    backgroundColor: isDragged ? 'gray:70' : colorStyle.background.highlighted,\n                  },\n                  _selected: {\n                    backgroundColor: isDragged ? 'gray:70' : colorStyle.background.selected,\n                  },\n                }}\n                {...props}\n              >\n                {row.getVisibleCells().map(cell => {\n                  const styleProps = {\n                    minWidth: cell.column.columnDef.minSize,\n                    width: cell.column.getSize(),\n                    ...cell.column.columnDef.style,\n                  };\n\n                  if (cell.column.id === 'selection') {\n                    return (\n                      <TableCell\n                        key={cell.id}\n                        sx={{\n                          ...styleProps,\n                          position: 'relative',\n                        }}\n                      >\n                        <Flex alignItems=\"center\">\n                          <DragHandleIcon\n                            {...{\n                              // Mark any node with the `data-movable-handle` attribute if you wish you wish to use it as a DnD handle.\n                              // The rest of renderItem will be then ignored and not start the drag and drop.\n                              'data-movable-handle': enableRowOrderingByDraggingTableRow ? undefined : '',\n                            }}\n                          />\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </Flex>\n                      </TableCell>\n                    );\n                  }\n\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      sx={{\n                        ...styleProps,\n                      }}\n                    >\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          }}\n        />\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"sorting",children:["Sorting",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#sorting",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:sorting,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Code,\n  DarkMode,\n  Flex,\n  Icon,\n  LightMode,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Tooltip,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useToggle,\n} from '@tonic-ui/react-hooks';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const [sorting, setSorting] = useState([\n    { id: 'eventType', desc: false },\n  ]);\n  const [enableSortingRemoval, toggleEnableSortingRemoval] = useToggle(false);\n\n  useEffect(() => {\n    if (enableSortingRemoval) {\n      setSorting([]);\n    }\n  }, [enableSortingRemoval]);\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      sorting,\n    },\n    // https://tanstack.com/table/v8/docs/api/features/sorting\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval, // Enables/Disables the ability to remove sorting for the table\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const enableSortingRemovalTooltipLabel = (\n    <Box p=\"1x\">\n      <Text>\n        If <Code>true</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `none` → ...\n      </Text>\n      <Text>\n        If <Code>false</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `desc` → `asc` → ...\n      </Text>\n    </Box>\n  );\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Checkbox\n          checked={enableSortingRemoval}\n          onChange={() => {\n            toggleEnableSortingRemoval();\n          }}\n        >\n          <Flex alignItems=\"center\">\n            Enable the ability to remove sorting for the table\n            <Space width=\"2x\" />\n            <Tooltip\n              label={colorMode === 'dark'\n                ? <LightMode>{enableSortingRemovalTooltipLabel}</LightMode>\n                : <DarkMode>{enableSortingRemovalTooltipLabel}</DarkMode>\n              }\n            >\n              <Icon icon=\"info-o\" />\n            </Tooltip>\n          </Flex>\n        </Checkbox>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                let styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                if (header.column.getCanSort()) {\n                  styleProps = {\n                    ...styleProps,\n                    cursor: 'pointer',\n                    userSelect: 'none',\n                    _hover: {\n                      backgroundColor: colorStyle.background.highlighted,\n                    },\n                  };\n                }\n                if (header.column.getIsSorted()) {\n                  styleProps = {\n                    ...styleProps,\n                    color: colorStyle.color.emphasis,\n                  };\n                }\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    onClick={header.column.getToggleSortingHandler()}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Flex alignItems=\"center\">\n                        <Truncate>\n                          {flexRender(header.column.columnDef.header, header.getContext())}\n                        </Truncate>\n                        {{\n                          asc: (<Icon icon=\"sort-up\" size={20}  ml=\"1x\" />),\n                          desc: (<Icon icon=\"sort-down\" size={20} ml=\"1x\" />),\n                        }[header.column.getIsSorted()] ?? null}\n                      </Flex>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n              </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Box,\n  Checkbox,\n  Code,\n  DarkMode,\n  Flex,\n  Icon,\n  LightMode,\n  Space,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  Text,\n  Tooltip,\n  Truncate,\n  useColorMode,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport {\n  useToggle,\n} from '@tonic-ui/react-hooks';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nconst data = [\n  { id: 1, eventType: 'Virus/Malware', affectedDevices: 20, detections: 634 },\n  { id: 2, eventType: 'Spyware/Grayware', affectedDevices: 20, detections: 634 },\n  { id: 3, eventType: 'URL Filtering', affectedDevices: 15, detections: 598 },\n  { id: 4, eventType: 'Web Reputation', affectedDevices: 15, detections: 598 },\n  { id: 5, eventType: 'Network Virus', affectedDevices: 15, detections: 497 },\n  { id: 6, eventType: 'Application Control', affectedDevices: 0, detections: 0 }\n];\n\nconst App = () => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle();\n  const [sorting, setSorting] = useState([\n    { id: 'eventType', desc: false },\n  ]);\n  const [enableSortingRemoval, toggleEnableSortingRemoval] = useToggle(false);\n\n  useEffect(() => {\n    if (enableSortingRemoval) {\n      setSorting([]);\n    }\n  }, [enableSortingRemoval]);\n\n  const columns = useMemo(() => [\n    {\n      header: 'Event Type',\n      accessorKey: 'eventType',\n      size: 240,\n    },\n    {\n      header: 'Affected Devices',\n      accessorKey: 'affectedDevices',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      size: 150,\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    state: {\n      sorting,\n    },\n    // https://tanstack.com/table/v8/docs/api/features/sorting\n    enableSorting: true, // Enables/Disables sorting for the table\n    enableSortingRemoval, // Enables/Disables the ability to remove sorting for the table\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: (nextSorting) => { // A function to be called with an `updaterFn` when `state.sorting` change\n      setSorting(nextSorting);\n    },\n  });\n\n  const layout = 'flexbox'; // One of: 'flexbox', 'table'\n  const enableSortingRemovalTooltipLabel = (\n    <Box p=\"1x\">\n      <Text>\n        If <Code>true</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `none` → ...\n      </Text>\n      <Text>\n        If <Code>false</Code> then changing sort order will circle like: `none` → `desc` → `asc` → `desc` → `asc` → ...\n      </Text>\n    </Box>\n  );\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Checkbox\n          checked={enableSortingRemoval}\n          onChange={() => {\n            toggleEnableSortingRemoval();\n          }}\n        >\n          <Flex alignItems=\"center\">\n            Enable the ability to remove sorting for the table\n            <Space width=\"2x\" />\n            <Tooltip\n              label={colorMode === 'dark'\n                ? <LightMode>{enableSortingRemovalTooltipLabel}</LightMode>\n                : <DarkMode>{enableSortingRemovalTooltipLabel}</DarkMode>\n              }\n            >\n              <Icon icon=\"info-o\" />\n            </Tooltip>\n          </Flex>\n        </Checkbox>\n      </Box>\n      <Table layout={layout}>\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                let styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                if (header.column.getCanSort()) {\n                  styleProps = {\n                    ...styleProps,\n                    cursor: 'pointer',\n                    userSelect: 'none',\n                    _hover: {\n                      backgroundColor: colorStyle.background.highlighted,\n                    },\n                  };\n                }\n                if (header.column.getIsSorted()) {\n                  styleProps = {\n                    ...styleProps,\n                    color: colorStyle.color.emphasis,\n                  };\n                }\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    onClick={header.column.getToggleSortingHandler()}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Flex alignItems=\"center\">\n                        <Truncate>\n                          {flexRender(header.column.columnDef.header, header.getContext())}\n                        </Truncate>\n                        {{\n                          asc: (<Icon icon=\"sort-up\" size={20}  ml=\"1x\" />),\n                          desc: (<Icon icon=\"sort-down\" size={20} ml=\"1x\" />),\n                        }[header.column.getIsSorted()] ?? null}\n                      </Flex>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows.map(row => (\n            <TableRow\n              key={row.id}\n              _hover={{\n                backgroundColor: colorStyle.background.highlighted,\n              }}\n            >\n              {row.getVisibleCells().map(cell => {\n                const styleProps = {\n                  minWidth: cell.column.columnDef.minSize,\n                  width: cell.column.getSize(),\n                  ...cell.column.columnDef.style,\n                };\n                return (\n                  <TableCell\n                    key={cell.id}\n                    {...styleProps}\n                  >\n                    <Truncate>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </Truncate>\n                  </TableCell>\n                );\n              })}\n              </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h3,{id:"virtualized-rows",children:["Virtualized rows",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#virtualized-rows",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(l.Z,{component:virtualized_rows,file:{data:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport {\n  Box,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useMemo, useRef } from 'react';\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Endpoint',\n      accessorKey: 'endpoint',\n      size: 200,\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 100,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const scrollRef = useRef();\n  const headerHeight = 36;\n  const cellHeight = 36;\n  const rowsToDisplay = 10;\n  const tableStyleProps = {\n    height: headerHeight + rowsToDisplay * cellHeight,\n  };\n\n  // https://tanstack.com/virtual/v3/docs/api/virtualizer\n  const rowVirtualizer = useVirtualizer({\n    count: table.getRowModel().rows.length,\n    getScrollElement: () => scrollRef.current?.firstChild,\n    estimateSize: (index) => cellHeight,\n    overscan: rowsToDisplay,\n  });\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>Total: {table.getRowModel().rows.length}</Text>\n      </Box>\n      <Table\n        layout=\"flexbox\"\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableScrollbar\n          ref={scrollRef}\n          height=\"100%\"\n          overflow=\"visible\" // Make the scrollbar visible\n        >\n          <Box\n            position=\"relative\"\n            width=\"100%\"\n            style={{\n              height: rowVirtualizer.getTotalSize(),\n            }}\n          >\n            <TableBody>\n              {rowVirtualizer.getVirtualItems().map(virtualRow => {\n                const row = table.getRowModel().rows[virtualRow.index];\n                return (\n                  <Box\n                    key={virtualRow.key}\n                    position=\"absolute\"\n                    top={0}\n                    left={0}\n                    width=\"100%\"\n                    style={{\n                      height: `${virtualRow.size}px`,\n                      transform: `translateY(${virtualRow.start}px)`,\n                    }}\n                  >\n                    {row && (\n                      <TableRow\n                        _hover={{\n                          backgroundColor: colorStyle.background.highlighted,\n                        }}\n                      >\n                        {row.getVisibleCells().map(cell => {\n                          const styleProps = {\n                            minWidth: cell.column.columnDef.minSize,\n                            width: cell.column.getSize(),\n                            ...cell.column.columnDef.style,\n                          };\n                          return (\n                            <TableCell\n                              key={cell.id}\n                              {...styleProps}\n                            >\n                              <Truncate>\n                                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                              </Truncate>\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    )}\n                  </Box>\n                );\n              })}\n            </TableBody>\n          </Box>\n        </TableScrollbar>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",path:"pages/components/table/index.page.mdx"},sandbox:{files:{},raw:"import {\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport {\n  Box,\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableScrollbar,\n  Text,\n  Truncate,\n  useColorStyle,\n} from '@tonic-ui/react';\nimport _ from 'lodash';\nimport React, { useMemo, useRef } from 'react';\n\nconst threatTypes = [\n  'Virus/Malware',\n  'Spyware/Grayware',\n  'URL Filtering',\n  'Web Reputation',\n  'Network Virus',\n  'Application Control',\n];\n\nconst data = _.range(360).map((i) => {\n  // Randomly pick a subset of threat types\n  const detections = _.sampleSize(threatTypes, _.random(0, threatTypes.length));\n  // Generate a random date within the past 30 days\n  const lastSeen = new Date(Date.now() - _.random(0, 60 * 60 * 24 * 30 * 1000));\n  return {\n    id: i + 1,\n    endpoint: `Endpoint ${i + 1}`,\n    detections,\n    lastSeen,\n  };\n});\n\nconst App = () => {\n  const [colorStyle] = useColorStyle();\n  const columns = useMemo(() => [\n    {\n      header: 'Endpoint',\n      accessorKey: 'endpoint',\n      size: 200,\n    },\n    {\n      header: 'Detections',\n      accessorKey: 'detections',\n      cell: ({ getValue }) => {\n        const detections = [...getValue()];\n        return detections.length;\n      },\n      size: 100,\n    },\n    {\n      header: 'Last Seen',\n      accessorKey: 'lastSeen',\n      cell: ({ getValue }) => getValue().toISOString(),\n      size: 200,\n    },\n  ], []);\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      minSize: 40,\n    },\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  const scrollRef = useRef();\n  const headerHeight = 36;\n  const cellHeight = 36;\n  const rowsToDisplay = 10;\n  const tableStyleProps = {\n    height: headerHeight + rowsToDisplay * cellHeight,\n  };\n\n  // https://tanstack.com/virtual/v3/docs/api/virtualizer\n  const rowVirtualizer = useVirtualizer({\n    count: table.getRowModel().rows.length,\n    getScrollElement: () => scrollRef.current?.firstChild,\n    estimateSize: (index) => cellHeight,\n    overscan: rowsToDisplay,\n  });\n\n  return (\n    <>\n      <Box mb=\"4x\" px=\"3x\">\n        <Text>Total: {table.getRowModel().rows.length}</Text>\n      </Box>\n      <Table\n        layout=\"flexbox\"\n        {...tableStyleProps}\n      >\n        <TableHeader>\n          {table.getHeaderGroups().map(headerGroup => (\n            <TableHeaderRow key={headerGroup.id}>\n              {headerGroup.headers.map(header => {\n                const styleProps = {\n                  minWidth: header.column.columnDef.minSize,\n                  width: header.getSize(),\n                  ...header.column.columnDef.style,\n                };\n                return (\n                  <TableHeaderCell\n                    key={header.id}\n                    {...styleProps}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <Truncate>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </Truncate>\n                    )}\n                  </TableHeaderCell>\n                );\n              })}\n            </TableHeaderRow>\n          ))}\n        </TableHeader>\n        <TableScrollbar\n          ref={scrollRef}\n          height=\"100%\"\n          overflow=\"visible\" // Make the scrollbar visible\n        >\n          <Box\n            position=\"relative\"\n            width=\"100%\"\n            style={{\n              height: rowVirtualizer.getTotalSize(),\n            }}\n          >\n            <TableBody>\n              {rowVirtualizer.getVirtualItems().map(virtualRow => {\n                const row = table.getRowModel().rows[virtualRow.index];\n                return (\n                  <Box\n                    key={virtualRow.key}\n                    position=\"absolute\"\n                    top={0}\n                    left={0}\n                    width=\"100%\"\n                    style={{\n                      height: `${virtualRow.size}px`,\n                      transform: `translateY(${virtualRow.start}px)`,\n                    }}\n                  >\n                    {row && (\n                      <TableRow\n                        _hover={{\n                          backgroundColor: colorStyle.background.highlighted,\n                        }}\n                      >\n                        {row.getVisibleCells().map(cell => {\n                          const styleProps = {\n                            minWidth: cell.column.columnDef.minSize,\n                            width: cell.column.getSize(),\n                            ...cell.column.columnDef.style,\n                          };\n                          return (\n                            <TableCell\n                              key={cell.id}\n                              {...styleProps}\n                            >\n                              <Truncate>\n                                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                              </Truncate>\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    )}\n                  </Box>\n                );\n              })}\n            </TableBody>\n          </Box>\n        </TableScrollbar>\n      </Table>\n    </>\n  );\n};\n\nexport default App;",title:"Tonic UI"}}),"\n",(0,o.jsxs)(n.h2,{id:"commonly-asked-questions",children:["Commonly Asked Questions",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#commonly-asked-questions",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h3,{id:"how-to-make-the-table-body-vertically-scrollable",children:["How to make the table body vertically scrollable?",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-to-make-the-table-body-vertically-scrollable",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsx)(n.p,{children:"To make the table body vertically scrollable, you can follow these steps:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Calculate the height of the table based on the number of rows to display."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const cellHeight = 36;\nconst headerHeight = 36;\nconst rowsToDisplay = 10;\nconst tableHeight = headerHeight + rowsToDisplay * cellHeight;\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsxs)(n.li,{children:["Wrap the ",(0,o.jsx)(n.code,{children:"TableBody"})," component with a ",(0,o.jsx)(n.code,{children:"TableScrollbar"})," component, and set the ",(0,o.jsx)(n.code,{children:"height"})," and ",(0,o.jsx)(n.code,{children:"overflow"})," props of the ",(0,o.jsx)(n.code,{children:"TableScrollbar"})," component to control the scrolling behavior."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:'<Table\n  layout="flexbox"\n  height={tableHeight}\n>\n  <TableHeader>\n    <TableRow>\n      <TableHeaderCell>Cell<TableHeaderCell>\n      <TableHeaderCell>Cell<TableHeaderCell>\n    </TableRow>\n  </TableHeader>\n  <TableScrollbar\n    height="100%"\n    overflow="visible" // Make scrollbar visible\n  >\n    <TableBody>\n      <TableRow>\n        <TableCell>Cell<TableCell>\n        <TableCell>Cell<TableCell>\n      </TableRow>\n    </TableBody>\n  </TableScrollbar>\n</Table>\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"how-to-control-whether-to-enable-the-scrolling-feature",children:["How to control whether to enable the scrolling feature?",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#how-to-control-whether-to-enable-the-scrolling-feature",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["If you want to control whether to enable the scrolling feature dynamically, you can use a custom ",(0,o.jsx)(n.code,{children:"ConditionWrapper"})," component to conditionally wrap ",(0,o.jsx)(n.code,{children:"TableBody"})," with the ",(0,o.jsx)(n.code,{children:"TableScrollbar"})," component."]}),"\n",(0,o.jsxs)(n.p,{children:["Here's an example implementation of the ",(0,o.jsx)(n.code,{children:"ConditionalWrapper"})," component:"]}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:"const ConditionalWrapper = ({\n  children,\n  condition,\n  wrapper,\n}) => {\n  return condition ? wrapper(children) : children;\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"And here's how you can use it in your code:"}),"\n",(0,o.jsx)(n.pre,{disabled:!0,children:(0,o.jsx)(n.code,{className:"language-jsx",children:'<Table\n  height={isTableScrollingEnabled ? tableHeight : undefined}\n>\n  <TableHeader>\n    <TableRow>\n      <TableHeaderCell>Cell<TableHeaderCell>\n      <TableHeaderCell>Cell<TableHeaderCell>\n    </TableRow>\n  </TableHeader>\n  <ConditionalWrapper\n    condition={isTableScrollingEnabled}\n    wrapper={children => (\n      <TableScrollbar\n        height="100%"\n        overflow="visible" // Make scrollbar visible\n      >\n        {children}\n      </TableScrollbar>\n    )}\n  >\n    <TableBody>\n      <TableRow>\n        <TableCell>Cell<TableCell>\n        <TableCell>Cell<TableCell>\n      </TableRow>\n    </TableBody>\n  </ConditionalWrapper>  \n</Table>\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"props",children:["Props",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#props",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.h3,{id:"table-1",children:["Table",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#table-1",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"layout"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'flexbox'"}),(0,o.jsx)(n.td,{align:"left",children:"The layout of the table. One of: 'flexbox', 'table'"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"size"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'md'"}),(0,o.jsx)(n.td,{align:"left",children:"The size of TableCells. One of: 'sm', 'md', 'lg'"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"variant"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'default'"}),(0,o.jsx)(n.td,{align:"left",children:"The variant of the table style to use. One of: 'default', 'outline'"})]})]})]}),"\n",(0,o.jsxs)(n.h3,{id:"tableheader",children:["TableHeader",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheader",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tableheaderrow",children:["TableHeaderRow",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheaderrow",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tableheadercell",children:["TableHeaderCell",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tableheadercell",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tablebody",children:["TableBody",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablebody",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tablerow",children:["TableRow",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablerow",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tablecell",children:["TableCell",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablecell",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left"})]})})]}),"\n",(0,o.jsxs)(n.h3,{id:"tablescrollbar",children:["TableScrollbar",(0,o.jsx)(n.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#tablescrollbar",children:(0,o.jsx)(n.svg,{children:(0,o.jsx)(n.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"TableScrollbar"})," component has the same set of props as the ",(0,o.jsx)(n.a,{href:"./scrollbar#props",children:"Scrollbar"})," component."]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{align:"left",children:"Name"}),(0,o.jsx)(n.th,{align:"left",children:"Type"}),(0,o.jsx)(n.th,{align:"left",children:"Default"}),(0,o.jsx)(n.th,{align:"left",children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"children"}),(0,o.jsx)(n.td,{align:"left",children:"ReactNode | function"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The content of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"width"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left",children:"'auto'"}),(0,o.jsxs)(n.td,{align:"left",children:["The width of the scrollbar. If set to 'auto', you can constrain the width using the ",(0,o.jsx)(n.code,{children:"minWidth"})," and ",(0,o.jsx)(n.code,{children:"maxWidth"})," props."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"height"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left",children:"'auto'"}),(0,o.jsxs)(n.td,{align:"left",children:["The height of the scrollbar. If set to 'auto', you can constrain the height using the ",(0,o.jsx)(n.code,{children:"minHeight"})," and ",(0,o.jsx)(n.code,{children:"maxHeight"})," props."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"minWidth"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The minimum width of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"maxWidth"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The maximum width of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"minHeight"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The minimum height of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"maxHeight"}),(0,o.jsx)(n.td,{align:"left",children:"number | string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The maximum height of the scrollbar."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"minThumbWidth"}),(0,o.jsx)(n.td,{align:"left",children:"number"}),(0,o.jsx)(n.td,{align:"left",children:"32"}),(0,o.jsx)(n.td,{align:"left",children:"The minimum width of the thumb in pixels."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"minThumbHeight"}),(0,o.jsx)(n.td,{align:"left",children:"number"}),(0,o.jsx)(n.td,{align:"left",children:"32"}),(0,o.jsx)(n.td,{align:"left",children:"The minimum height of the thumb in pixels."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"onScroll"}),(0,o.jsx)(n.td,{align:"left",children:(0,o.jsx)(n.code,{children:"(event: UIEvent) => void"})}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"A callback function that is called when the scrollbar is scrolled."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"onUpdate"}),(0,o.jsx)(n.td,{align:"left",children:"function"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsxs)(n.td,{align:"left",children:["A callback function that is called when the scroll position or size of the content changes. The function is passed an object containing the following properties: ",(0,o.jsx)(n.code,{children:"left"}),", ",(0,o.jsx)(n.code,{children:"top"}),", ",(0,o.jsx)(n.code,{children:"scrollLeft"}),", ",(0,o.jsx)(n.code,{children:"scrollTop"}),", ",(0,o.jsx)(n.code,{children:"scrollWidth"}),", ",(0,o.jsx)(n.code,{children:"scrollHeight"}),", ",(0,o.jsx)(n.code,{children:"clientWidth"}),", ",(0,o.jsx)(n.code,{children:"clientHeight"}),"."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"overflow"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left",children:"'auto'"}),(0,o.jsx)(n.td,{align:"left",children:"The overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"overflowX"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The horizontal overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{align:"left",children:"overflowY"}),(0,o.jsx)(n.td,{align:"left",children:"string"}),(0,o.jsx)(n.td,{align:"left"}),(0,o.jsx)(n.td,{align:"left",children:"The vertical overflow of the scrollable content. One of: 'auto', 'scroll', 'hidden'."})]})]})]})]})}var index_page=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,r.ah)(),e.components).wrapper;return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(_createMdxContent,e)})):_createMdxContent(e)}},83449:function(e,n,t){"use strict";t.d(n,{Z:function(){return h}});var o=t(67569),r=t(49427),l=t(5632),a=t(2784),i=t(65245),c=t(82821),s=t(90622),d=t(52057),u=t(63651),m=["size"];function _extends(){return(_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var g=(0,a.forwardRef)(function(e,n){var t=e.size,r=function(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}(e,m);return a.createElement(o.SVGIcon,_extends({size:t,viewBox:"0 0 1024 1024"},r),a.createElement("path",{d:"M755 140.3l0.5-0.3h0.3L512 0 268.3 140h-0.3l0.8 0.4L68.6 256v512L512 1024l443.4-256V256L755 140.3z m-30 506.4v171.2L548 920.1V534.7L883.4 341v215.7l-158.4 90z m-584.4-90.6V340.8L476 534.4v385.7L300 818.5V646.7l-159.4-90.6zM511.7 280l171.1-98.3 166.3 96-336.9 194.5-337-194.6 165.7-95.7L511.7 280z"}))});g.displayName="CodeSandboxIcon";var f=t(94981);function _slicedToArray(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t,o,r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var l=[],a=!0,i=!1;try{for(r=r.call(e);!(a=(t=r.next()).done)&&(l.push(t.value),!n||l.length!==n);a=!0);}catch(e){i=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(i)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return _arrayLikeToArray(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if("Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(e,n)}}(e,n)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=Array(n);t<n;t++)o[t]=e[t];return o}var p={fontFamily:'"SFMono-Medium", "SF Mono", "Segoe UI Mono", Menlo, Consolas, Courier, monospace',fontSize:14,overflowX:"auto"},Demo=function(e){var n=e.component,t=e.file,m=e.sandbox,h=(0,l.useRouter)(),b=_slicedToArray((0,a.useReducer)(function(e){return!e},!1),2),y=b[0],x=b[1],T=_slicedToArray((0,o.useColorMode)(),1)[0],w={dark:s.y,light:s.q}[T],v=_slicedToArray((0,r.useToggle)(!1),2),C=v[0],S=v[1],R=(0,c.Z)(null==t?void 0:t.data),D=R.onCopy,z=R.hasCopied,k=(0,a.useCallback)(function(){D()},[D]),P=(0,a.useCallback)(function(){(0,d.b)(m)},[m]),_=(0,a.useCallback)(function(){x(),S(!1)},[x,S]);return a.createElement(i.nu,{code:null==t?void 0:t.data,disabled:!0,language:"jsx",theme:w},a.createElement(o.Box,{border:1,borderColor:{dark:"gray:70",light:"gray:30"}[T],p:"4x"},a.createElement(o.Box,{fontSize:"sm",lineHeight:"sm"},a.createElement(a.Fragment,{key:y},a.createElement(n,null)))),a.createElement(o.Flex,{columnGap:"2x",justifyContent:"flex-end",mb:"4x"},a.createElement(f.Z,{"data-track":C?"CodeBlock|hide_source|".concat((0,u.Z)({path:h.pathname})):"CodeBlock|show_source|".concat((0,u.Z)({path:h.pathname})),onClick:S},a.createElement(o.Tooltip,{label:C?"Hide the source":"Show the source"},a.createElement(o.Icon,{icon:"code",size:{sm:"5x",md:"4x"}}))),a.createElement(f.Z,{"data-track":"CodeBlock|copy_source|".concat((0,u.Z)({path:h.pathname})),onClick:k},a.createElement(o.Tooltip,{label:z?"Copied":"Copy the source"},a.createElement(o.Icon,{icon:"file-copy-o",size:{sm:"5x",md:"4x"}}))),a.createElement(f.Z,{"data-track":"CodeBlock|edit_in_codesandbox|".concat(h.pathname),onClick:P},a.createElement(o.Tooltip,{label:"Edit in CodeSandbox"},a.createElement(g,{size:{sm:"5x",md:"4x"}}))),a.createElement(f.Z,{"data-track":"CodeBlock|reset|".concat(h.pathname),onClick:_},a.createElement(o.Tooltip,{label:"Reset the demo"},a.createElement(o.Icon,{icon:"redo",size:{sm:"5x",md:"4x"}})))),a.createElement(o.Fade,{in:C},a.createElement(o.Collapse,{in:C,unmountOnExit:!0},a.createElement(i.uz,{style:p}))))};Demo.displayName="Demo";var h=Demo},56208:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/table",function(){return t(41555)}])}},function(e){e.O(0,[5220,8726,754,1630,1049,9774,2888,179],function(){return e(e.s=56208)}),_N_E=e.O()}]);