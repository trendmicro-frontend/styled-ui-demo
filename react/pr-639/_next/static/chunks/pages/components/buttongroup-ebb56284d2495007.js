(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4042],{6556:function(n,t,e){"use strict";e.r(t),e.d(t,{default:function(){return u}});var o=e(7896),r=e(9740),i=(e(2784),e(876)),a=["components"],l={};function u(n){var t=n.components,e=(0,r.Z)(n,a);return(0,i.kt)("wrapper",(0,o.Z)({},l,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",null,"ButtonGroup"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ButtonGroup")," is used to group related buttons."),(0,i.kt)("h2",null,"Import"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { ButtonGroup } from '@tonic-ui/react';\n")),(0,i.kt)("h2",null,"Usage"),(0,i.kt)("h3",null,"Basic button group"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"function Example() {\n  const [colorMode] = useColorMode();\n  const dividerColor ={\n    dark: 'gray:70',\n    light: 'gray:30',\n  }[colorMode];\n  return (\n    <ButtonGroup>\n      <Button>One</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Two</Button>\n      <Divider orientation=\"vertical\" color={dividerColor} />\n      <Button>Three</Button>\n    </ButtonGroup>\n  );\n}\n\nrender(<Example />);\n")),(0,i.kt)("h3",null,"Group variants"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the visual style of every button in a group. You can set the value to ",(0,i.kt)("inlineCode",{parentName:"p"},"emphasis"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"primary"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"default"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"secondary")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ghost"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'function Example() {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor ={\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor ={\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="column" spacing="3x">\n      <ButtonGroup variant="emphasis">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={emphasisDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="primary">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={primaryDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup variant="default">\n        <Button>One</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={defaultDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="secondary"\n        css={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Button>Two</Button>\n        <Button>Three</Button>\n      </ButtonGroup>\n      <ButtonGroup\n        variant="ghost"\n        css={{\n          \'> *:not(:first-of-type)\': {\n            marginLeft: -1\n          }\n        }}\n      >\n        <Button>One</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Two</Button>\n        <Divider orientation="vertical" color={ghostDividerColor} />\n        <Button>Three</Button>\n      </ButtonGroup>\n    </Stack>\n  );\n}\n\nrender(<Example />);\n')),(0,i.kt)("h3",null,"Group sizes"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," prop to change the size of the ",(0,i.kt)("inlineCode",{parentName:"p"},"ButtonGroup"),". You can set the value to ",(0,i.kt)("inlineCode",{parentName:"p"},"sm"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"md"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"lg"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'function Example() {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup size="sm">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="md">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup size="lg">\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Button>Middle</Button>\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="flex-start">\n        <ButtonGroup\n          size="sm"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="md"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          size="lg"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>Left</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Middle</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Right</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n}\n\nrender(<Example />);\n')),(0,i.kt)("h3",null,"Group orientation"),(0,i.kt)("p",null,"Make a set of buttons appear vertically stacked rather than horizontally, by adding ",(0,i.kt)("inlineCode",{parentName:"p"},'orientation="vertical"')," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ButtonGroup")," component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'function Example() {\n  const [colorMode] = useColorMode();\n  const defaultDividerColor ={\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor ={\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n  return (\n    <Stack direction="row" spacing="4x">\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup>\n          <Button>One</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup orientation="vertical">\n          <Button>One</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Two</Button>\n          <Divider color={defaultDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Button>Two</Button>\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n      <Stack spacing="4x" alignItems="center">\n        <ButtonGroup\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider orientation="vertical" color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n        <ButtonGroup\n          orientation="vertical"\n          variant="ghost"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginTop: -1\n            }\n          }}\n        >\n          <Button>One</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Two</Button>\n          <Divider color={ghostDividerColor} />\n          <Button>Three</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  );\n}\n\nrender(<Example />);\n')),(0,i.kt)("h3",null,"Group states"),(0,i.kt)("p",null,"The following example shows different states (i.e. normal, disabled, and selected states) when composing a group of buttons."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},"disabled")," prop to make the ",(0,i.kt)("inlineCode",{parentName:"li"},"Button")," appear disabled."),(0,i.kt)("li",{parentName:"ul"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},"selected")," prop to make the ",(0,i.kt)("inlineCode",{parentName:"li"},"Button")," appear selected.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'function Example() {\n  const [colorMode] = useColorMode();\n  const emphasisDividerColor = {\n    dark: \'red:80\',\n    light: \'red:80\',\n  }[colorMode];\n  const primaryDividerColor = {\n    dark: \'blue:80\',\n    light: \'blue:80\',\n  }[colorMode];\n  const defaultDividerColor = {\n    dark: \'gray:70\',\n    light: \'gray:30\',\n  }[colorMode];\n  const ghostDividerColor = {\n    dark: \'gray:60\',\n    light: \'gray:20\',\n  }[colorMode];\n\n  const icons = [\'chart-pie\', \'chart-line\', \'chart-table\', \'chart-bar\'];\n  const lastIconIndex = icons.length - 1;\n  const [activeButton1, setActiveButton1] = React.useState(\'chart-pie\');\n  const [activeButton2, setActiveButton2] = React.useState(\'chart-pie\');\n  const [activeButton3, setActiveButton3] = React.useState(\'chart-pie\');\n  const [activeButton4, setActiveButton4] = React.useState(\'chart-pie\');\n  const [activeButton5, setActiveButton5] = React.useState(\'chart-pie\');\n  const [activeButton6, setActiveButton6] = React.useState(\'chart-pie\');\n\n  const handleClick1 = (button) => (e) => {\n    setActiveButton1(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick2 = (button) => (e) => {\n    setActiveButton2(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick3 = (button) => (e) => {\n    setActiveButton3(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick4 = (button) => (e) => {\n    setActiveButton4(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick5 = (button) => (e) => {\n    setActiveButton5(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n  const handleClick6 = (button) => (e) => {\n    setActiveButton6(button);\n    // Remove focus when the button is clicked\n    e.currentTarget.blur();\n  };\n\n  return (\n    <Flex direction="column" rowGap="4x">\n      <Box>\n        <TextLabel mb="2x">\n          Emphasis\n        </TextLabel>\n        <ButtonGroup variant="emphasis">\n          {icons.map((key, index) => (\n            <React.Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton1 === key}\n                onClick={handleClick1(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={emphasisDividerColor} />\n              )}\n            </React.Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <TextLabel mb="2x">\n          Primary\n        </TextLabel>\n        <ButtonGroup variant="primary">\n          {icons.map((key, index) => (\n            <React.Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton2 === key}\n                onClick={handleClick2(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={primaryDividerColor} />\n              )}\n            </React.Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <TextLabel mb="2x">\n          Default\n        </TextLabel>\n        <ButtonGroup variant="default">\n          {icons.map((key, index) => (\n            <React.Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton3 === key}\n                onClick={handleClick3(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={defaultDividerColor} />\n              )}\n            </React.Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <TextLabel mb="2x">\n          Secondary\n        </TextLabel>\n        <ButtonGroup\n          variant="secondary"\n          css={{\n            \'> *:not(:first-of-type)\': {\n              marginLeft: -1\n            }\n          }}\n        >\n          {icons.map((key, index) => (\n            <React.Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton4 === key}\n                onClick={handleClick4(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n            </React.Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <TextLabel mb="2x">\n          Ghost\n        </TextLabel>\n        <ButtonGroup\n          variant="ghost"\n        >\n          {icons.map((key, index) => (\n            <React.Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton5 === key}\n                onClick={handleClick5(key)}\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n              {(index !== lastIconIndex) && (\n                <Divider orientation="vertical" color={ghostDividerColor} />\n              )}\n            </React.Fragment>\n          ))}\n        </ButtonGroup>\n      </Box>\n      <Box>\n        <TextLabel mb="2x">\n          Ghost (w/o ButtonGroup)\n        </TextLabel>\n        <Flex>\n          {icons.map((key, index) => (\n            <React.Fragment key={key}>\n              <Button\n                disabled={index === lastIconIndex}\n                selected={activeButton6 === key}\n                onClick={handleClick6(key)}\n                variant="ghost"\n                width="8x"\n              >\n                <Icon icon={key} />\n              </Button>\n            </React.Fragment>\n          ))}\n        </Flex>\n      </Box>\n    </Flex>\n  );\n}\n')),(0,i.kt)("h2",null,"Props"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"children"),(0,i.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," (context) => ReactNode"),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"},"A function child can be used intead of a React element. This function is called with the context object.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"orientation"),(0,i.kt)("td",{parentName:"tr",align:"left"},"string"),(0,i.kt)("td",{parentName:"tr",align:"left"},"'horizontal'"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The orientation of the button group. One of: 'horizontal', 'vertical'")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"size"),(0,i.kt)("td",{parentName:"tr",align:"left"},"string"),(0,i.kt)("td",{parentName:"tr",align:"left"},"'md'"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The size of the button group. One of: 'sm', 'md', 'lg'")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,i.kt)("td",{parentName:"tr",align:"left"},"string"),(0,i.kt)("td",{parentName:"tr",align:"left"},"'default'"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The variant of the button group. One of: 'emphasis', 'primary', 'default', 'secondary', 'ghost'")))))}u.isMDXComponent=!0},5198:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/buttongroup",function(){return e(6556)}])}},function(n){n.O(0,[9774,2888,179],(function(){return t=5198,n(n.s=t);var t}));var t=n.O();_N_E=t}]);