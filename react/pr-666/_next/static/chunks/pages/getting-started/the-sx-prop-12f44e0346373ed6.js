(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4889],{84482:function(n,e,s){"use strict";s.r(e);var r=s(52322),a=s(45392);function i(n){var e=Object.assign({div:"div",h1:"h1",p:"p",code:"code",h2:"h2",a:"a",svg:"svg",use:"use",h3:"h3",pre:"pre"},(0,a.ah)(),n.components);return(0,r.jsxs)(e.div,{className:"main-content",id:"main-content",children:[(0,r.jsx)(e.h1,{id:"the-sx-prop",children:"The sx prop"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"sx"})," prop is a useful shortcut for defining custom styles that has access to the theme. It provides access to a superset of CSS functions exposed in ",(0,r.jsx)(e.code,{children:"@tonic-ui/styled-system"}),", including child and pseudo-selectors, media queries, raw CSS values, and more."]}),"\n",(0,r.jsxs)(e.p,{children:["To get started with the ",(0,r.jsx)(e.code,{children:"sx"})," prop, check out the demo below. It demonstrates how to pass style and pseudo-style props to your components, enabling you to create custom styles with ease."]}),"\n",(0,r.jsxs)(e.h2,{id:"usage",children:["Usage",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(e.h3,{id:"creating-a-custom-button",children:["Creating a custom button",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#creating-a-custom-button",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(e.pre,{expanded:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:"<Button\n  sx={{\n    backgroundColor: 'red:60',\n    '&:focus:not(:active)': {\n      backgroundColor: 'red:60',\n    },\n    '&:hover': {\n      backgroundColor: 'red:50',\n    },\n    '&:active': {\n      backgroundColor: 'red:70',\n    },\n  }}\n>\n  Emphasis Button\n</Button>\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"defining-css-custom-properties-css-variables",children:["Defining CSS custom properties (CSS variables)",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#defining-css-custom-properties-css-variables",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(e.pre,{expanded:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:"<Box\n  sx={{\n    '--my-color-dodger-blue': '#1E90FF'\n  }}\n>\n  <Text\n    backgroundColor=\"var(--my-color-dodger-blue)\"\n    color=\"white:primary\"\n  >\n    This text has a background of Dodger Blue\n  </Text>\n</Box>\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"using-media-queries",children:["Using media queries",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#using-media-queries",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(e.pre,{expanded:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:"<Box\n  fontSize=\"md\"\n  lineHeight=\"md\"\n  sx={{\n    '@media screen and (min-width: 640px)': {\n      fontSize: 'lg',\n      lineHeight: 'lg',\n    },\n    '@media screen and (min-width: 1024px)': {\n      fontSize: 'xl',\n      lineHeight: 'xl',\n    },\n    '@media screen and (min-width: 1280px)': {\n      fontSize: '2xl',\n      lineHeight: '2xl',\n    },\n  }}\n>\n  <Text>\n    This text scales with the screen width\n  </Text>\n</Box>\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"callback-values",children:["Callback values",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#callback-values",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(e.p,{children:["Each property in the ",(0,r.jsx)(e.code,{children:"sx"})," prop can receive a function callback as a value. This is useful when you want to use the ",(0,r.jsx)(e.code,{children:"theme"})," for calculating a value:"]}),"\n",(0,r.jsx)(e.pre,{disabled:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:"<Box sx={{ color: (theme) => theme.sizes['2x'] }} />\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"array-values",children:["Array values",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#array-values",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(e.p,{children:"Array types are useful when you want to partially override some styles in the former index:"}),"\n",(0,r.jsx)(e.pre,{expanded:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:"<Box\n  sx={[\n    {\n      '&:hover': {\n        backgroundColor: 'gray:80',\n        color: 'white:primary',\n      },\n    },\n    true && {\n      '&:hover': {\n        backgroundColor: 'gray:50',\n        color: 'white:primary',\n      },\n    },\n    true && {\n      '&:hover': {\n        backgroundColor: 'yellow:50',\n        color: 'black:primary',\n      },\n    },\n  ]}\n>\n  Hover Me\n</Box>\n"})}),"\n",(0,r.jsx)(e.p,{children:"Each index can be an object or a callback:"}),"\n",(0,r.jsx)(e.pre,{expanded:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:"<Box\n  sx={[\n    {\n      color: 'white:primary',\n    },\n    (theme) => ({\n      '&:hover': {\n        color: theme.colors['white:secondary'],\n      },\n    }),\n  ]}\n>\n  Hover Me\n</Box>\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"passing-the-sx-prop",children:["Passing the ",(0,r.jsx)(e.code,{children:"sx"})," prop",(0,r.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#passing-the-sx-prop",children:(0,r.jsx)(e.svg,{children:(0,r.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsxs)(e.p,{children:["If you want to pass the ",(0,r.jsx)(e.code,{children:"sx"})," prop from a custom component and pass it down to Tonic UI components, we recommend this approach:"]}),"\n",(0,r.jsx)(e.pre,{expanded:!0,noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:"const ListItem = ({ sx, ...rest }) => (\n  <Box\n    sx={[\n      {\n        color: 'white:primary',\n      },\n      ...(Array.isArray(sx) ? sx : [sx]),\n    ]}\n    {...rest}\n  />\n);\n\nrender(() => (\n  <ListItem\n    sx={{\n      color: 'white:secondary',\n      fontWeight: 'semibold',\n    }}\n  >\n    Header\n  </ListItem>\n));\n"})})]})}e.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,a.ah)(),n.components).wrapper;return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(i,n)})):i(n)}},15197:function(n,e,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/getting-started/the-sx-prop",function(){return s(84482)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=15197)}),_N_E=n.O()}]);