(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2153],{68895:function(e,o,n){"use strict";n.r(o);var r=n(52322),s=n(45392);function c(e){var o=Object.assign({nav:"nav",ol:"ol",li:"li",a:"a",h1:"h1",p:"p",code:"code",pre:"pre",h3:"h3",svg:"svg",use:"use"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.nav,{className:"toc",children:(0,r.jsxs)(o.ol,{className:"toc-level toc-level-1",children:[(0,r.jsx)(o.li,{className:"toc-item toc-item-h3",children:(0,r.jsx)(o.a,{className:"toc-link toc-link-h3",href:"#returns",children:"Returns"})}),(0,r.jsx)(o.li,{className:"toc-item toc-item-h3",children:(0,r.jsx)(o.a,{className:"toc-link toc-link-h3",href:"#example",children:"Example"})})]})}),(0,r.jsx)(o.h1,{id:"usecolormode",children:"useColorMode"}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.code,{children:"useColorMode"})," is a custom Hook that gives you access to the current color mode, and a function to change the color mode."]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",children:"// import\nimport { useColorStyle } from '@tonic-ui/react';\n\n// usage\nconst [colorMode, setColorMode] = useColorMode();\n"})}),"\n",(0,r.jsxs)(o.h3,{id:"returns",children:["Returns",(0,r.jsx)(o.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#returns",children:(0,r.jsx)(o.svg,{children:(0,r.jsx)(o.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(o.p,{children:"Returns an array with the current color mode and a function to change the color mode."}),"\n",(0,r.jsxs)(o.h3,{id:"example",children:["Example",(0,r.jsx)(o.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#example",children:(0,r.jsx)(o.svg,{children:(0,r.jsx)(o.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,r.jsx)(o.pre,{disabled:!0,children:(0,r.jsx)(o.code,{className:"language-jsx",children:"// App.jsx\nimport { css, Global } from '@emotion/react';\nimport { Button, useColorMode } from '@tonic-ui/react';\nimport React from 'react';\n\nconst App = () => {\n  const [colorMode, setColorMode] = useColorMode(); // One of: 'dark', 'light'\n  const toggleColorMode = () => {\n    const nextColorMode = {\n      'dark': 'light',\n      'light': 'dark',\n    }[colorMode];\n    setColorMode(nextColorMode);\n  };\n\n  return (\n    <>\n      <Global\n        styles={css`\n          :root {\n            color-scheme: ${colorMode};\n          }\n        `}\n      />\n      <Button onClick={toggleColorMode}>\n        Toggle Color Mode\n      </Button>\n    </>\n  );\n};\n"})})]})}o.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=Object.assign({},(0,s.ah)(),e.components).wrapper;return o?(0,r.jsx)(o,Object.assign({},e,{children:(0,r.jsx)(c,e)})):c(e)}},20014:function(e,o,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/color-mode/useColorMode",function(){return n(68895)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=20014)}),_N_E=e.O()}]);