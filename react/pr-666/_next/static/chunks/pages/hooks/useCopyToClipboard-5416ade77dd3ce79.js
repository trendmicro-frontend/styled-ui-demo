(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7322],{97891:function(n,e,o){"use strict";o.r(e);var i=o(52322),s=o(45392);function t(n){var e=Object.assign({div:"div",h1:"h1",p:"p",code:"code",h2:"h2",a:"a",svg:"svg",use:"use",pre:"pre",h3:"h3"},(0,s.ah)(),n.components);return(0,i.jsxs)(e.div,{className:"main-content",id:"main-content",children:[(0,i.jsx)(e.h1,{id:"usecopytoclipboard",children:"useCopyToClipboard"}),"\n",(0,i.jsxs)(e.p,{children:["A custom Hook that provides a ",(0,i.jsx)(e.code,{children:"copy"})," method to copy text to the clipboard. If anything does not work, it will output an error message and the value will be set to ",(0,i.jsx)(e.code,{children:"null"}),"."]}),"\n",(0,i.jsxs)(e.h2,{id:"import",children:["Import",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#import",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"import { useCopyToClipboard } from '@tonic-ui/react-hooks';\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"usage",children:["Usage",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#usage",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"const [value, copy] = useCopyToClipboard();\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"returns",children:["Returns",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#returns",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(e.p,{children:"Returns an array with the value and the copy function."}),"\n",(0,i.jsxs)(e.h2,{id:"demos",children:["Demos",(0,i.jsx)(e.a,{"aria-hidden":!0,className:"anchor-link",tabIndex:"-1",href:"#demos",children:(0,i.jsx)(e.svg,{children:(0,i.jsx)(e.use,{xlinkHref:"#anchor-link-icon"})})})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"function Component() {\n  const [buttonIsCopied, setButtonIsCopied] = React.useState(null);\n  const [linkIsCopied, setLinkIsCopied] = React.useState(null);\n  const [value, copy] = useCopyToClipboard();\n\n  return (\n    <>\n      <Flex columnGap=\"2x\" mb=\"2x\">\n        <Button\n          minWidth={120}\n          onClick={async function () {\n            const ok = await copy('https://github.com/trendmicro-frontend/tonic-ui')\n            setButtonIsCopied(!!ok);\n            setTimeout(() => setButtonIsCopied(null), 1000);\n          }}\n        >\n          {buttonIsCopied === null && 'Click to copy'}\n          {buttonIsCopied === true && 'Copied'}\n          {buttonIsCopied === false && 'Copy failed'}\n        </Button>\n        <LinkButton\n          onClick={async function () {\n            const ok = await copy('https://github.com/trendmicro-frontend/tonic-ui')\n            setLinkIsCopied(!!ok);\n            setTimeout(() => setLinkIsCopied(null), 1000);\n          }}\n        >\n          {linkIsCopied === null && 'Click to copy'}\n          {linkIsCopied === true && 'Copied'}\n          {linkIsCopied === false && 'Copy failed'}\n        </LinkButton>\n      </Flex>\n      <Text>Copied value: {value}</Text>\n    </>\n  );\n}\n"})})]})}e.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,s.ah)(),n.components).wrapper;return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(t,n)})):t(n)}},11952:function(n,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useCopyToClipboard",function(){return o(97891)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=11952)}),_N_E=n.O()}]);