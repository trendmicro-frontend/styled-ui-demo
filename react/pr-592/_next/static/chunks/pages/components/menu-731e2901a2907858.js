(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7456],{67131:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return m}});var a=n(7896),l=n(59740),r=(n(2784),n(30876)),i=["components"],o={};function m(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Menu"),(0,r.kt)("p",null,"A menu is used to display a list of options to the user. It appears when the user interacts with a button, link, or other control that triggers an action."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Menu"),": The component that provides the menu functionality."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MenuButton"),": A button that composes ",(0,r.kt)("inlineCode",{parentName:"li"},"Button"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MenuToggle"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"MenuToggleIcon")," to create a menu button."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MenuContent"),": An unstyled component that provides the menu content."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MenuDivider"),": A divider that separates menu items."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MenuGroup"),": A component that groups menu items."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MenuItem"),": The individual menu items."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MenuList"),": A styled ",(0,r.kt)("inlineCode",{parentName:"li"},"MenuContent")," that wraps the menu items."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MenuToggle"),": The toggle that opens the menu. This is usually a button or link."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MenuToggleIcon"),": An indicator that appears next to the toggle. This is usually a chevron or arrow."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Submenu"),": The component that provides the submenu functionality."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SubmenuList"),": The list of menu items that appear in the submenu."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SubmenuToggle"),": The toggle that opens the submenu when the menu item is hovered over.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  Menu,\n  MenuButton,\n  MenuContent,\n  MenuDivider,\n  MenuGroup,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  MenuToggleIcon,\n  Submenu,\n  SubmenuList,\n  SubmenuToggle,\n  useMenu,\n  useSubmenu,\n} from '@tonic-ui/react';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("h3",null,"Basic menu structure"),(0,r.kt)("p",null,"Below is a simple example that shows the basic menu structure."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Flex\n  display="inline-flex"\n  flexDirection="column"\n>\n  <MenuItem value="general">\n    <Icon icon="settings" mr="2x" />\n    <Text>General</Text>\n  </MenuItem>\n  <MenuItem value="accounts">\n    <Icon icon="user-team" mr="2x" />\n    <Text>Accounts</Text>\n  </MenuItem>\n  <MenuItem value="privacy">\n    <Icon icon="lock" mr="2x" />\n    <Text>Privacy</Text>\n  </MenuItem>\n  <MenuDivider />\n  <MenuItem disabled value="restore-defaults">\n    <Icon icon="undo" mr="2x" />\n    <Text>Restore Defaults</Text>\n  </MenuItem>\n</Flex>\n')),(0,r.kt)("h3",null,"Cascading submenus"),(0,r.kt)("p",null,"The following example shows a menu with cascading submenus."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Flex\n  justify="space-between"\n>\n  <Flex\n    flexDirection="column"\n  >\n    <MenuItem>\n      <Text>List item</Text>\n    </MenuItem>\n    <MenuItem>\n      <Text>List item</Text>\n    </MenuItem>\n    <MenuDivider />\n    <Submenu>\n      <SubmenuToggle>\n        <MenuItem>\n          <Flex\n            alignItems="center"\n            columnGap="2x"\n            justifyContent="space-between"\n            width="100%"\n          >\n            <Text>Submenu</Text>\n            <Icon icon="angle-right" />\n          </Flex>\n        </MenuItem>\n      </SubmenuToggle>\n      <SubmenuList width="max-content">\n        <MenuItem>\n          <Text>List item</Text>\n        </MenuItem>\n        <MenuItem>\n          <Text>List item</Text>\n        </MenuItem>\n        <Submenu>\n          <SubmenuToggle>\n            <MenuItem>\n              <Flex\n                alignItems="center"\n                columnGap="2x"\n                justifyContent="space-between"\n                width="100%"\n              >\n                <Text>Submenu</Text>\n                <Icon icon="angle-right" />\n              </Flex>\n            </MenuItem>\n          </SubmenuToggle>\n          <SubmenuList width="max-content">\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n          </SubmenuList>\n        </Submenu>\n      </SubmenuList>\n    </Submenu>\n  </Flex>\n  <Flex\n    flexDirection="column"\n  >\n    <MenuItem pl="9x">\n      <Text>List item</Text>\n    </MenuItem>\n    <MenuItem pl="9x">\n      <Text>List item</Text>\n    </MenuItem>\n    <MenuDivider />\n    <Submenu placement="left-start">\n      <SubmenuToggle>\n        <MenuItem>\n          <Flex\n            alignItems="center"\n            columnGap="2x"\n            justifyContent="space-between"\n            width="100%"\n          >\n            <Icon icon="angle-left" />\n            <Text>Submenu</Text>\n          </Flex>\n        </MenuItem>\n      </SubmenuToggle>\n      <SubmenuList width="max-content">\n        <MenuItem pl="9x">\n          <Text>List item</Text>\n        </MenuItem>\n        <MenuItem pl="9x">\n          <Text>List item</Text>\n        </MenuItem>\n        <Submenu placement="left-start">\n          <SubmenuToggle>\n            <MenuItem>\n              <Flex\n                alignItems="center"\n                columnGap="2x"\n                justifyContent="space-between"\n                width="100%"\n              >\n                <Icon icon="angle-left" />\n                <Text>Submenu</Text>\n              </Flex>\n            </MenuItem>\n          </SubmenuToggle>\n          <SubmenuList\n            width="max-content"\n          >\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n            <MenuItem>\n              <Text>List item</Text>\n            </MenuItem>\n          </SubmenuList>\n        </Submenu>\n      </SubmenuList>\n    </Submenu>\n  </Flex>\n</Flex>\n')),(0,r.kt)("h3",null,"Controlled menu"),(0,r.kt)("p",null,"The menu opens over the anchor element by default, and closes when the user clicks outside of the menu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'render(() => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const [selectedValue, setSelectedValue] = React.useState(null);\n  const handleOpenMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n    setIsOpen(!isOpen);\n  };\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n    setIsOpen(false);\n  };\n  const handleClickMenuItem = (event) => {\n    const value = event.target.getAttribute(\'value\');\n    setSelectedValue(value);\n  };\n  const handleMenuItemClick = (event) => {\n    const value = event.target.getAttribute(\'value\');\n    console.log(`List item ${value} clicked`);\n  };\n\n  return (\n    <Flex columnGap="4x" alignItems="center">\n      <Button\n        aria-controls="basic-menu"\n        aria-haspopup="true"\n        aria-expanded={isOpen ? \'true\' : undefined}\n        onClick={handleOpenMenu}\n      >\n        Options\n      </Button>\n      <Text>Selected: {selectedValue}</Text>\n      {isOpen && (\n        <Menu\n          id="basic-menu"\n          anchorEl={anchorEl}\n          isOpen={isOpen}\n          onClose={handleCloseMenu}\n        >\n          <MenuList\n            onClick={handleClickMenuItem}\n            width="max-content"\n          >\n            <MenuItem value={1}>\n              List item 1\n            </MenuItem>\n            <MenuItem value={2}>\n              List item 2\n            </MenuItem>\n            <MenuDivider />\n            <Submenu>\n              <SubmenuToggle>\n                <MenuItem>\n                  <Flex\n                    alignItems="center"\n                    columnGap="2x"\n                    justifyContent="space-between"\n                    width="100%"\n                  >\n                    Submenu\n                    <Icon icon="angle-right" />\n                  </Flex>\n                </MenuItem>\n              </SubmenuToggle>\n              <SubmenuList width="max-content">\n                <MenuItem value={3}>\n                  List item 3\n                </MenuItem>\n                <MenuItem value={4}>\n                  List item 4\n                </MenuItem>\n              </SubmenuList>\n            </Submenu>\n          </MenuList>\n        </Menu>\n      )}\n    </Flex>\n  );\n});\n')),(0,r.kt)("h3",null,"MenuToggle"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MenuToggle")," is a toggle that opens the menu when clicked. It is usually a button or link. The ",(0,r.kt)("inlineCode",{parentName:"p"},"MenuToggleIcon")," can be added to the toggle to indicate the menu is open or closed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Flex alignItems="center">\n  <Menu>\n    <MenuToggle>\n      <Text>Options</Text>\n    </MenuToggle>\n    <MenuList width="max-content">\n      <MenuItem>\n        List item 1\n      </MenuItem>\n      <MenuItem>\n        List item 2\n      </MenuItem>\n      <MenuItem>\n        List item 3\n      </MenuItem>\n    </MenuList>\n  </Menu>\n  <Divider\n    variant="solid"\n    orientation="vertical"\n    height="5x"\n    mx="4x"\n  />\n  <Menu>\n    <MenuToggle>\n      <Flex alignItems="center" userSelect="none">\n        <Text>Options</Text>\n        <Space width="1x" />\n        <MenuToggleIcon />\n      </Flex>\n    </MenuToggle>\n    <MenuList width="max-content">\n      <MenuItem>\n        List item 1\n      </MenuItem>\n      <MenuItem>\n        List item 2\n      </MenuItem>\n      <MenuItem>\n        List item 3\n      </MenuItem>\n    </MenuList>\n  </Menu>\n  <Divider\n    variant="solid"\n    orientation="vertical"\n    height="5x"\n    mx="4x"\n  />\n  <Menu>\n    <MenuToggle>\n      {({ getMenuToggleProps }) => {\n        return (\n          <Button\n            {...getMenuToggleProps()}\n            variant="secondary"\n          >\n            <Text>Options</Text>\n            <Space width="1x" />\n            <MenuToggleIcon />\n          </Button>\n        );\n      }}\n    </MenuToggle>\n    <MenuList width="max-content">\n      <MenuItem>\n        List item 1\n      </MenuItem>\n      <MenuItem>\n        List item 2\n      </MenuItem>\n      <MenuItem>\n        List item 3\n      </MenuItem>\n    </MenuList>\n  </Menu>\n</Flex>\n')),(0,r.kt)("h3",null,"MenuButton"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MenuButton")," composes ",(0,r.kt)("inlineCode",{parentName:"p"},"Button"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"MenuToggle"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"MenuToggleIcon")," to create a button that opens the menu. It's an useful alternative to ",(0,r.kt)("inlineCode",{parentName:"p"},"MenuToggle")," when the toggle is a button."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"disabled",disabled:!0},"const MenuButton = (props) => {\n  const styleProps = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    columnGap: '1x',\n  };\n\n  return (\n    <MenuToggle>\n      {({ getMenuToggleProps }) => (\n        <Button\n          {...getMenuToggleProps()}\n          {...styleProps}\n          {...props}\n        >\n          {children && (\n            <Box>{children}</Box>\n          )}\n          <MenuToggleIcon />\n        </Button>\n      )}\n    </MenuToggle>\n  );\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Menu>\n  <MenuButton variant="secondary">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width="max-content">\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n')),(0,r.kt)("h3",null,"MenuToggleIcon"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MenuToggleIcon")," is an indicator that indicates the menu is open or closed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Menu>\n  <MenuToggle>\n    <MenuToggleIcon />\n  </MenuToggle>\n  <MenuList width="max-content">\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n')),(0,r.kt)("p",null,"You can also customize the indicator by passing a component as children or a function as children that returns a component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Menu placement=\"bottom-start\">\n  {({ isOpen, direction }) => {\n    return (\n      <>\n        <MenuToggle>\n          <MenuToggleIcon>\n            {(state, { ref, style: styleProps }) => {\n              // direction is either 'up' or 'down'\n              const icon = `arrow-${direction}`;\n              styleProps.transform = isOpen ? 'scaleY(-1)' : 'scaleY(1)';\n\n              return (\n                <Icon\n                  ref={ref}\n                  icon={icon}\n                  size=\"4x\"\n                  {...styleProps}\n                />\n              );\n            }}\n          </MenuToggleIcon>\n        </MenuToggle>\n        <MenuList width=\"max-content\">\n          <MenuItem>\n            List item 1\n          </MenuItem>\n          <MenuItem>\n            List item 2\n          </MenuItem>\n          <MenuItem>\n            List item 3\n          </MenuItem>\n        </MenuList>\n      </>\n    );\n  }}\n</Menu>\n")),(0,r.kt)("h3",null,"MenuGroup"),(0,r.kt)("p",null,"To group related menu items, wrap them in a ",(0,r.kt)("inlineCode",{parentName:"p"},"MenuGroup")," and pass a ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," prop for the group title."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const Avatar = (props) => (\n  <Flex\n    p="1x"\n    borderRadius="50%"\n    alignItems="center"\n    justifyContent="center"\n    fontSize="xs"\n    lineHeight="1"\n    {...props}\n  />\n);\n\nrender(\n  <Menu>\n    <MenuToggle>\n      <Avatar\n        bg="gray:50"\n        color="white:secondary"\n        _hover={{\n          color: \'white:primary\',\n        }}\n      >\n        <Icon icon="user-team" size="5x" />\n      </Avatar>\n    </MenuToggle>\n    <MenuList width="max-content">\n      <MenuItem>\n        <Text>Profile</Text>\n      </MenuItem>\n      <MenuDivider />\n      <MenuGroup\n        title={(\n          <Flex justifyContent="space-between">\n            <Text>Other profiles</Text>\n            <Space minWidth="10x" />\n            <ButtonBase title="Manage profiles">\n              <Icon icon="settings" size="3x" />\n            </ButtonBase>\n          </Flex>\n        )}\n      >\n        <MenuItem px="4x">\n          <Avatar color="white" bg="blue:50" mr="2x">\n            JD\n          </Avatar>\n          John Doe\n        </MenuItem>\n        <MenuItem px="4x">\n          <Avatar color="white" bg="gray:50" mr="2x">\n            <Icon icon="user" size="3x" />\n          </Avatar>\n          Guest\n        </MenuItem>\n      </MenuGroup>\n    </MenuList>\n  </Menu>\n);\n')),(0,r.kt)("h3",null,"Menu sizing"),(0,r.kt)("p",null,"To change the width of the menu, pass ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," prop to the ",(0,r.kt)("inlineCode",{parentName:"p"},"MenuList")," component."),(0,r.kt)("h4",null,"fixed width"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Menu>\n  <MenuButton variant="secondary">\n    <Text>This is a very long menu button</Text>\n  </MenuButton>\n  <MenuList width={200}>\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n')),(0,r.kt)("h4",null,"full width"),(0,r.kt)("p",null,"Set ",(0,r.kt)("inlineCode",{parentName:"p"},'display="block"')," on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Menu")," and set ",(0,r.kt)("inlineCode",{parentName:"p"},'width="100%"')," on ",(0,r.kt)("inlineCode",{parentName:"p"},"MenuButton")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"MenuList")," to make the menu as wide as the content."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Menu display="block">\n  <MenuButton variant="secondary" width="100%">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width="100%">\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n')),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"min-content")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Menu>\n  <MenuButton variant="secondary">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width="min-content">\n    <MenuItem >\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n')),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"max-content")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Menu>\n  <MenuButton variant="secondary">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width="max-content">\n    <MenuItem>\n      This is a very long list item 1\n    </MenuItem>\n    <MenuItem>\n      This is a very long list item 2\n    </MenuItem>\n    <MenuItem>\n      This is a very long list item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n')),(0,r.kt)("h3",null,"Placement"),(0,r.kt)("p",null,"To position the menu relative to the toggle, pass a ",(0,r.kt)("inlineCode",{parentName:"p"},"placement")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"Menu"),"."),(0,r.kt)("p",null,"The value can be one of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"top")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"top-start")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"top-end")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bottom")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bottom-start")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bottom-end"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const useSelection = (defaultValue) => {\n  const [value, setValue] = React.useState(defaultValue);\n  const changeBy = (value) => () => setValue(value);\n  return [value, changeBy];\n};\n\nconst gridAreas = [\n  ['top-start', 'top', 'top-end'],\n  ['.', '.', '.'],\n  ['.', 'center', '.'],\n  ['.', '.', '.'],\n  ['bottom-start', 'bottom', 'bottom-end'],\n];\n\nfunction Example() {\n  const [placement, changePlacementBy] = useSelection('bottom-start');\n  const gridTemplateAreas = gridAreas.map((row) => {\n    const rowString = '\"' + row.join(' ') + '\"';\n    return rowString;\n  }).join(' ');\n\n  return (\n    <Flex>\n      <Grid\n        templateAreas={gridTemplateAreas}\n        autoColumns=\"minmax(0, 1fr)\"\n        autoFlow=\"row\"\n        gap=\"2x\"\n      >\n        {gridAreas.flat().map((value, key) => {\n          if (value === '.') {\n            return (<Box key={key} />);\n          }\n\n          if (value === 'center') {\n            return (\n              <Box key={key}>\n                <Menu placement={placement}>\n                  <MenuButton variant=\"secondary\" width={150}>\n                    <Text>Options</Text>\n                  </MenuButton>\n                  <MenuList>\n                    <MenuItem>\n                      List item 1\n                    </MenuItem>\n                    <MenuItem>\n                      List item 2\n                    </MenuItem>\n                    <MenuItem>\n                      List item 3\n                    </MenuItem>\n                  </MenuList>\n                </Menu>\n              </Box>\n            );\n          }\n\n          const changePlacement = changePlacementBy(value);\n          const onClick = () => {\n            changePlacement();\n          };\n\n          return (\n            <Box key={key}>\n              <Button\n                selected={value === placement}\n                onClick={onClick}\n                width=\"100%\"\n              >\n                {value}\n              </Button>\n            </Box>\n          );\n        })}\n      </Grid>\n    </Flex>\n  );\n}\n\nrender(<Example />);\n")),(0,r.kt)("h3",null,"Change menu position"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"offset")," prop can be used to change the menu position. It accepts an array with two numbers in the form of ",(0,r.kt)("inlineCode",{parentName:"p"},"[skidding, distance]"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Skidding")),(0,r.kt)("p",null,"The first number, ",(0,r.kt)("inlineCode",{parentName:"p"},"skidding"),", displaces the menu along the toggle. This value is specified in pixels."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Distance")),(0,r.kt)("p",null,"The second number, ",(0,r.kt)("inlineCode",{parentName:"p"},"distance"),", controls the distance between the menu and the toggle. This value is specified in pixels."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Menu offset={[16, 8]}>\n  <MenuButton variant="secondary">\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList>\n    <MenuItem>\n      List item 1\n    </MenuItem>\n    <MenuItem>\n      List item 2\n    </MenuItem>\n    <MenuItem>\n      List item 3\n    </MenuItem>\n  </MenuList>\n</Menu>\n')),(0,r.kt)("h3",null,"Scrolling"),(0,r.kt)("p",null,"To make the menu scrollable, pass ",(0,r.kt)("inlineCode",{parentName:"p"},'overflow="auto"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},"maxHeight")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"MenuList"),". The menu will become scrollable when the menu items exceed the height of the menu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Menu display="block">\n  <MenuButton variant="secondary" width={200}>\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList\n    maxHeight={200}\n    overflow="auto"\n    width={200}\n  >\n    {Array.from({ length: 100 }).map((_, key) => (\n      <MenuItem key={key}>\n        List item {key + 1}\n      </MenuItem>\n    ))}\n  </MenuList>\n</Menu>\n')),(0,r.kt)("p",null,"You can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Scrollbar")," component to override the default scrollbar."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Menu display="block">\n  <MenuButton variant="secondary" width={200}>\n    <Text>Options</Text>\n  </MenuButton>\n  <MenuList width={200}>\n    <Scrollbar height={200} overflowY="visible">\n      {Array.from({ length: 100 }).map((_, key) => (\n        <MenuItem key={key}>\n          List item {key + 1}\n        </MenuItem>\n      ))}\n    </Scrollbar>\n  </MenuList>\n</Menu>\n')),(0,r.kt)("h3",null,"Input controls"),(0,r.kt)("p",null,"Set ",(0,r.kt)("inlineCode",{parentName:"p"},"closeOnSelect")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," to keep the menu open after selecting a menu item."),(0,r.kt)("p",null,"You can use arrow keys to navigate the menu, and press ",(0,r.kt)("inlineCode",{parentName:"p"},"Enter")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Space")," to select an item."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function menuWithCheckbox() {\n  const [checkedItems, setCheckedItems] = React.useState([\'host\', \'ip\']);\n  const onCheckboxGroupChange = (value) => {\n    setCheckedItems(value);\n  };\n  const handleKeyDown = (event) => {\n    if (event.key === \'Enter\' || event.key === \' \') {\n      const el = event.currentTarget.querySelector(\'input\');\n      if (el) {\n        const value = el.value;\n        const items = [...checkedItems];\n        items.indexOf(value) === -1 ? items.push(value) : items.splice(items.indexOf(value), 1);\n        setCheckedItems(items);\n      }\n    }\n  };\n  return (\n    <Menu closeOnSelect={false}>\n      <MenuButton variant="secondary">\n        <Text>Selected ({checkedItems.length})</Text>\n      </MenuButton>\n      <MenuList width="max-content">\n        <CheckboxGroup\n          size="sm"\n          value={checkedItems}\n          onChange={onCheckboxGroupChange}\n        >\n          <MenuItem onKeyDown={handleKeyDown}>\n            <Checkbox value="host">\n              Endpoint name</Checkbox>\n          </MenuItem>\n          <MenuItem onKeyDown={handleKeyDown}>\n            <Checkbox value="ip">\n              IP address\n            </Checkbox>\n          </MenuItem>\n          <MenuItem onKeyDown={handleKeyDown}>\n            <Checkbox value="os">\n              Operating system\n            </Checkbox>\n          </MenuItem>\n        </CheckboxGroup>\n      </MenuList>\n    </Menu>\n  );\n}\n')),(0,r.kt)("h2",null,"Accessibility"),(0,r.kt)("h3",null,"Keyboard Interaction"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Action"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Enter")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"Space")),(0,r.kt)("td",{parentName:"tr",align:"left"},"When ",(0,r.kt)("inlineCode",{parentName:"td"},"MenuToggle")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"MenuButton")," is focused, opens the menu.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ArrowDown")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"ArrowUp")),(0,r.kt)("td",{parentName:"tr",align:"left"},"When ",(0,r.kt)("inlineCode",{parentName:"td"},"MenuList")," is focused, moves the focus to the next menu item.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Escape")),(0,r.kt)("td",{parentName:"tr",align:"left"},"When a menu item is focused, closes the menu and moves the focus to the toggle.")))),(0,r.kt)("h2",null,"Props"),(0,r.kt)("h3",null,"Menu"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"anchorEl"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ElementType"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The element to which the menu is attached.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"autoSelect"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether to automatically select the first menu item when the menu is opened.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," (context) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function child can be used intead of a React element. This function is called with the context object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"closeOnBlur"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether to close the menu when the user clicks outside of the menu.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"closeOnSelect"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether to close the menu when the user selects a menu item.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"defaultActiveIndex"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the menu item to be selected by default.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"defaultIsOpen"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the menu is open by default.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"isOpen"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the menu is open.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"offset"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[skidding, distance]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[0, 0]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The skidding and distance of the menu.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onBlur"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the menu loses focus.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onClick"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when a menu item is clicked.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onClose"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the menu is closed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onKeyDown"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the user presses a key.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onOpen"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the menu is opened.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"placement"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'bottom-start'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The placement of the menu. One of: 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end'")))),(0,r.kt)("h3",null,"MenuButton"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the menu button is disabled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onClick"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the menu button is clicked.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onKeyDown"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the user presses a key.")))),(0,r.kt)("h3",null,"MenuContent"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"PopperComponent"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ElementType"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Popper"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The component used for the popover.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"PopperProps"),(0,r.kt)("td",{parentName:"tr",align:"left"},"object"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Props applied to the Popper component.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"TransitionComponent"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ElementType"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Collapse"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The component used for the transition.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"TransitionProps"),(0,r.kt)("td",{parentName:"tr",align:"left"},"object"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Props applied to the ",(0,r.kt)("a",{parentName:"td",href:"http://reactcommunity.org/react-transition-group/transition#Transition-props"},"Transition")," element.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"TransitionProps.appear"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"true"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("h3",null,"MenuDivider"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("h3",null,"MenuGroup"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"title"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The title of the menu group.")))),(0,r.kt)("h3",null,"MenuItem"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the menu item is disabled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onClick"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the menu item is clicked.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onKeyDown"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the user presses a key.")))),(0,r.kt)("h3",null,"MenuList"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"PopperComponent"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ElementType"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Popper"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The component used for the popover.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"PopperProps"),(0,r.kt)("td",{parentName:"tr",align:"left"},"object"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Props applied to the Popper component.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"TransitionComponent"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ElementType"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Collapse"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The component used for the transition.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"TransitionProps"),(0,r.kt)("td",{parentName:"tr",align:"left"},"object"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Props applied to the ",(0,r.kt)("a",{parentName:"td",href:"http://reactcommunity.org/react-transition-group/transition#Transition-props"},"Transition")," element.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"TransitionProps.appear"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"true"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("h3",null,"MenuToggle"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," ({ getMenuToggleProps }) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the menu toggle is disabled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onClick"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the menu toggle is clicked.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onKeyDown"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the user presses a key.")))),(0,r.kt)("h3",null,"MenuToggleIcon"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"appear"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"false"),(0,r.kt)("td",{parentName:"tr",align:"left"},"By default the child component does not perform the enter transition when it first mounts, regardless of the value of ",(0,r.kt)("inlineCode",{parentName:"td"},"in"),". If you want this behavior, set both ",(0,r.kt)("inlineCode",{parentName:"td"},"appear")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"in")," to true.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," (state, props) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function child can be used instead of a React element. This function is called with the current transition state ('entering', 'entered', 'exiting', 'exited'), ref, style, and context specific props for a component.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the menu toggle icon is disabled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"easing"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string ","|"," { enter?: string, exit?: string }"),(0,r.kt)("td",{parentName:"tr",align:"left"},"{ enter: easing.easeInOut, exit: easing.easeInOut }"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The timing function that describes how intermediate values are calculated during a transition. You may specify a single timing function for all transitions, or individually with an object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"in"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the component will transition in.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"mountOnEnter"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),', it will "lazy mount" the component on the first ',(0,r.kt)("inlineCode",{parentName:"td"},"in={true}"),". After the first enter transition the component will stay mounted, even on the 'exited' state, unless you also specify ",(0,r.kt)("inlineCode",{parentName:"td"},"unmountOnExit"),". By default the child component is mounted immediately along with the parent transition component.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,r.kt)("td",{parentName:"tr",align:"left"},"number ","|"," { appear?: number, enter?: number, exit?: number }"),(0,r.kt)("td",{parentName:"tr",align:"left"},"{ enter: duration.enterScreen, exit: duration.levingScreen }"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The duration for the transition, in milliseconds. You may specify a single timeout for all transitions, or individually with an object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"unmountOnExit"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", it will unmount the child component when ",(0,r.kt)("inlineCode",{parentName:"td"},"in={false}")," and the animation has finished. By default the child component stays mounted after it reaches the 'exited' state.")))),(0,r.kt)("h3",null,"Submenu"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"defaultIsOpen"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the submenu is open by default.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"isOpen"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the submenu is open.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onClose"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the submenu is closed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"onOpen"),(0,r.kt)("td",{parentName:"tr",align:"left"},"function"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Callback when the submenu is opened.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"placement"),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"'right-start'"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The placement of the submenu. One of: 'right-start', 'right-end', 'left-start', 'left-end'")))),(0,r.kt)("h3",null,"SubmenuList"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("h3",null,"SubmenuToggle"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"children"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ReactNode ","|"," ({ getSubmenuToggleProps }) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether the submenu toggle is disabled.")))))}m.isMDXComponent=!0},21911:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/menu",function(){return n(67131)}])}},function(e){e.O(0,[9774,2888,179],(function(){return t=21911,e(e.s=t);var t}));var t=e.O();_N_E=t}]);