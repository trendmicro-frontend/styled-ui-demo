(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[891],{52824:function(n,e,t){"use strict";t.r(e);var r=t(52322),o=t(45392);function i(n){var e=Object.assign({h1:"h1",p:"p",code:"code",a:"a",h2:"h2",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h3:"h3"},(0,o.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{children:"Grid"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"Grid"})," is a ",(0,r.jsx)(e.a,{href:"box",children:(0,r.jsx)(e.code,{children:"Box"})})," with ",(0,r.jsx)(e.code,{children:"display: grid"})," and comes with helpful style shorthand props."]}),"\n",(0,r.jsx)(e.h2,{children:"Import"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import { Grid } from '@tonic-ui/react';\n"})}),"\n",(0,r.jsx)(e.h2,{children:"Usage"}),"\n",(0,r.jsx)(e.p,{children:"Grid provides the following style shorthand props:"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{align:"left",children:"Shorthand Prop"}),(0,r.jsx)(e.th,{align:"left",children:"Style Prop"}),(0,r.jsx)(e.th,{align:"left",children:"CSS Property"}),(0,r.jsx)(e.th,{children:"Description"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"gap"}),(0,r.jsx)(e.td,{align:"left",children:"gridGap"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/gap",children:"grid-gap"})}),(0,r.jsxs)(e.td,{children:["Sets the gaps (gutters) between rows and columns. It is a shorthand for ",(0,r.jsx)(e.code,{children:"row-gap"})," and ",(0,r.jsx)(e.code,{children:"column-gap"}),"."]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"rowGap"}),(0,r.jsx)(e.td,{align:"left",children:"gridRowGap"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap",children:"grid-row-gap"})}),(0,r.jsx)(e.td,{children:"Sets the size of the gap (gutter) between an element's grid rows."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"columnGap"}),(0,r.jsx)(e.td,{align:"left",children:"gridColumnGap"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap",children:"grid-column-gap"})}),(0,r.jsx)(e.td,{children:"Sets the size of the gap (gutter) between an element's columns."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"row"}),(0,r.jsx)(e.td,{align:"left",children:"gridRow"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row",children:"grid-row"})}),(0,r.jsxs)(e.td,{children:["a shorthand property for ",(0,r.jsx)(e.code,{children:"grid-row-start"})," and ",(0,r.jsx)(e.code,{children:"grid-row-end"}),"."]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"column"}),(0,r.jsx)(e.td,{align:"left",children:"gridColumn"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column",children:"grid-column"})}),(0,r.jsxs)(e.td,{children:["A shorthand property for ",(0,r.jsx)(e.code,{children:"grid-column-start"})," and ",(0,r.jsx)(e.code,{children:"grid-column-end"}),"."]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"area"}),(0,r.jsx)(e.td,{align:"left",children:"gridArea"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area",children:"grid-area"})}),(0,r.jsxs)(e.td,{children:["A shorthand property for ",(0,r.jsx)(e.code,{children:"grid-row-start"}),", ",(0,r.jsx)(e.code,{children:"grid-column-start"}),", ",(0,r.jsx)(e.code,{children:"grid-row-end"})," and ",(0,r.jsx)(e.code,{children:"grid-column-end"}),"."]})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"autoFlow"}),(0,r.jsx)(e.td,{align:"left",children:"gridAutoFlow"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow",children:"grid-auto-flow"})}),(0,r.jsx)(e.td,{children:"Controls how the auto-placement algorithm works."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"autoRows"}),(0,r.jsx)(e.td,{align:"left",children:"gridAutoRows"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows",children:"grid-auto-rows"})}),(0,r.jsx)(e.td,{children:"Specifies the size of an implicitly-created grid row track or pattern of tracks."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"autoColumns"}),(0,r.jsx)(e.td,{align:"left",children:"gridAutoColumns"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns",children:"grid-auto-columns"})}),(0,r.jsx)(e.td,{children:"Specifies the size of an implicitly-created grid column track or pattern of tracks."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"templateRows"}),(0,r.jsx)(e.td,{align:"left",children:"gridTemplateRows"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows",children:"grid-template-rows"})}),(0,r.jsx)(e.td,{children:"Defines the line names and track sizing functions of the grid rows."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"templateColumns"}),(0,r.jsx)(e.td,{align:"left",children:"gridTemplateColumns"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns",children:"grid-template-columns"})}),(0,r.jsx)(e.td,{children:"Defines the line names and track sizing functions of the grid columns."})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:"templateAreas"}),(0,r.jsx)(e.td,{align:"left",children:"gridTemplateAreas"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas",children:"grid-template-areas"})}),(0,r.jsx)(e.td,{children:"Specifies named grid areas."})]})]})]}),"\n",(0,r.jsxs)(e.h3,{children:["The ",(0,r.jsx)(e.code,{children:"gap"})," (",(0,r.jsx)(e.code,{children:"gridGap"}),") property"]}),"\n",(0,r.jsx)(e.pre,{noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'0\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'0\')}>0</Button>\n        <Button variant="outline" onClick={() => setValue(\'10%\')}>10%</Button>\n        <Button variant="outline" onClick={() => setValue(\'1rem\')}>1rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'10px 20px\')}>10px 20px</Button>\n        <Button variant="outline" onClick={() => setValue(\'calc(20px + 10%)\')}>calc(20px + 10%)</Button>\n      </Stack>\n      <pre>\n        {`<Grid gap="${value}">`}\n      </pre>\n      <Grid\n        gap={value}\n        templateColumns="1fr 1fr"\n        bg="gray:10"\n        p="4x"\n        transition="all .3s ease-in"\n      >\n        <GridItem>One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,r.jsxs)(e.h3,{children:["The ",(0,r.jsx)(e.code,{children:"rowGap"})," (",(0,r.jsx)(e.code,{children:"gridRowGap"}),") property"]}),"\n",(0,r.jsx)(e.pre,{noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'0\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'0\')}>0</Button>\n        <Button variant="outline" onClick={() => setValue(\'10%\')}>10%</Button>\n        <Button variant="outline" onClick={() => setValue(\'1rem\')}>1rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'20px\')}>20px</Button>\n      </Stack>\n      <pre>\n        {`<Grid rowGap="${value}">`}\n      </pre>\n      <Grid\n        rowGap={value}\n        templateColumns="1fr 1fr"\n        bg="gray:10"\n        p="4x"\n        transition="all .3s ease-in"\n      >\n        <GridItem>One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,r.jsxs)(e.h3,{children:["The ",(0,r.jsx)(e.code,{children:"columnGap"})," (",(0,r.jsx)(e.code,{children:"gridColumnGap"}),") property"]}),"\n",(0,r.jsx)(e.pre,{noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'0\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'0\')}>0</Button>\n        <Button variant="outline" onClick={() => setValue(\'10%\')}>10%</Button>\n        <Button variant="outline" onClick={() => setValue(\'1rem\')}>1rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'20px\')}>20px</Button>\n      </Stack>\n      <pre>\n        {`<Grid columnGap="${value}">`}\n      </pre>\n      <Grid\n        columnGap={value}\n        templateColumns="1fr 1fr"\n        bg="gray:10"\n        p="4x"\n        transition="all .3s ease-in"\n      >\n        <GridItem>One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,r.jsxs)(e.h3,{children:["The ",(0,r.jsx)(e.code,{children:"row"})," (",(0,r.jsx)(e.code,{children:"gridRow"}),") property"]}),"\n",(0,r.jsx)(e.pre,{noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'1\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'1\')}>1</Button>\n        <Button variant="outline" onClick={() => setValue(\'1 / 3\')}>1 / 3</Button>\n        <Button variant="outline" onClick={() => setValue(\'2 / -1\')}>2 / -1</Button>\n        <Button variant="outline" onClick={() => setValue(\'1 / span 2\')}>1 / span 2</Button>\n      </Stack>\n      <Grid\n        templateRows="repeat(3,minmax(3rem,auto))"\n        templateColumns="1fr 1.5fr 1fr"\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem row={value} bg="blue:50" borderColor="blue:60">One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,r.jsxs)(e.h3,{children:["The ",(0,r.jsx)(e.code,{children:"column"})," (",(0,r.jsx)(e.code,{children:"gridColumn"}),") property"]}),"\n",(0,r.jsx)(e.pre,{noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'1\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'1\')}>1</Button>\n        <Button variant="outline" onClick={() => setValue(\'1 / 3\')}>1 / 3</Button>\n        <Button variant="outline" onClick={() => setValue(\'2 / -1\')}>2 / -1</Button>\n        <Button variant="outline" onClick={() => setValue(\'1 / span 2\')}>1 / span 2</Button>\n      </Stack>\n      <Grid\n        templateRows="repeat(3,minmax(3rem,auto))"\n        templateColumns="1fr 1.5fr 1fr"\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem column={value} bg="blue:50" borderColor="blue:60">One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,r.jsxs)(e.h3,{children:["The ",(0,r.jsx)(e.code,{children:"area"})," (",(0,r.jsx)(e.code,{children:"gridArea"}),") property"]}),"\n",(0,r.jsx)(e.pre,{noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'a\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'a\')}>a</Button>\n        <Button variant="outline" onClick={() => setValue(\'b\')}>b</Button>\n        <Button variant="outline" onClick={() => setValue(\'c\')}>c</Button>\n        <Button variant="outline" onClick={() => setValue(\'2 / 1 / 2 / 4\')}>2 / 1 / 2 / 4</Button>\n      </Stack>\n      <Grid\n        templateRows="repeat(3,minmax(3rem,auto))"\n        templateColumns="1fr 1fr 1fr"\n        templateAreas={`\n          "a a a"\n          "b c c"\n          "b c c"\n        `}\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem area={value}>Example</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,r.jsxs)(e.h3,{children:["The ",(0,r.jsx)(e.code,{children:"autoFlow"})," (",(0,r.jsx)(e.code,{children:"gridAutoFlow"}),") property"]}),"\n",(0,r.jsx)(e.pre,{noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'row\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'row\')}>row</Button>\n        <Button variant="outline" onClick={() => setValue(\'column\')}>column</Button>\n        <Button variant="outline" onClick={() => setValue(\'row dense\')}>row dense</Button>\n      </Stack>\n      <pre>\n        {`<Grid autoFlow="${value}">`}\n      </pre>\n      <Grid\n        autoFlow={value}\n        templateRows="repeat(3,minmax(3rem,auto))"\n        templateColumns="1fr 1fr 1fr"\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem column="auto/span 2">One</GridItem>\n        <GridItem column="auto/span 2">Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,r.jsxs)(e.h3,{children:["The ",(0,r.jsx)(e.code,{children:"autoRows"})," (",(0,r.jsx)(e.code,{children:"gridAutoRows"}),") property"]}),"\n",(0,r.jsx)(e.pre,{noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'auto\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'auto\')}>auto</Button>\n        <Button variant="outline" onClick={() => setValue(\'3rem\')}>3rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'min-content\')}>min-content</Button>\n        <Button variant="outline" onClick={() => setValue(\'minmax(2rem, auto)\')}>minmax(2rem, auto)</Button>\n      </Stack>\n      <pre>\n        {`<Grid autoRows="${value}">`}\n      </pre>\n      <Grid\n        autoRows={value}\n        templateColumns="1fr 1fr"\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem>One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem></GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,r.jsxs)(e.h3,{children:["The ",(0,r.jsx)(e.code,{children:"autoColumns"})," (",(0,r.jsx)(e.code,{children:"gridAutoColumns"}),") property"]}),"\n",(0,r.jsx)(e.pre,{noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'auto\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'auto\')}>auto</Button>\n        <Button variant="outline" onClick={() => setValue(\'1fr\')}>1fr</Button>\n        <Button variant="outline" onClick={() => setValue(\'min-content\')}>min-content</Button>\n        <Button variant="outline" onClick={() => setValue(\'minmax(3rem, auto)\')}>minmax(3rem, auto)</Button>\n      </Stack>\n      <pre>\n        {`<Grid autoColumns="${value}">`}\n      </pre>\n      <Grid\n        autoColumns={value}\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem column="1/3">One</GridItem>\n        <GridItem column="2">Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,r.jsxs)(e.h3,{children:["The ",(0,r.jsx)(e.code,{children:"templateRows"})," (",(0,r.jsx)(e.code,{children:"gridTemplateRows"}),") property"]}),"\n",(0,r.jsx)(e.pre,{noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'auto\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'auto\')}>auto</Button>\n        <Button variant="outline" onClick={() => setValue(\'3rem 4rem 3rem\')}>3rem 4rem 3rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'1fr 2fr 1fr\')}>1fr 2fr 1fr</Button>\n        <Button variant="outline" onClick={() => setValue(\'3rem auto minmax(3rem, 4rem)\')}>3rem auto minmax(3rem, 4rem)</Button>\n      </Stack>\n      <pre>\n        {`<Grid templateRows="${value}">`}\n      </pre>\n      <Grid\n        templateRows={value}\n        templateColumns="1fr 1fr"\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem>One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,r.jsxs)(e.h3,{children:["The ",(0,r.jsx)(e.code,{children:"templateColumns"})," (",(0,r.jsx)(e.code,{children:"gridTemplateColumns"}),") property"]}),"\n",(0,r.jsx)(e.pre,{noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'4rem 4rem\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'4rem 4rem\')}>4rem 4rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'1fr 4rem\')}>1fr 4rem</Button>\n        <Button variant="outline" onClick={() => setValue(\'1fr auto\')}>1fr auto</Button>\n        <Button variant="outline" onClick={() => setValue(\'1fr 2fr\')}>1fr 2fr</Button>\n      </Stack>\n      <pre>\n        {`<Grid templateColumns="${value}">`}\n      </pre>\n      <Grid\n        templateColumns={value}\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem>One</GridItem>\n        <GridItem>Two</GridItem>\n        <GridItem>Three</GridItem>\n        <GridItem>Four</GridItem>\n        <GridItem>Five</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n'})}),"\n",(0,r.jsxs)(e.h3,{children:["The ",(0,r.jsx)(e.code,{children:"templateAreas"})," (",(0,r.jsx)(e.code,{children:"gridTemplateAreas"}),") property"]}),"\n",(0,r.jsx)(e.pre,{noInline:!0,children:(0,r.jsx)(e.code,{className:"language-jsx",children:'const GridItem = (props) => (\n  <Grid bg="teal:50" border={1} borderColor="teal:60" p="3x" {...props} />\n);\n\nfunction Example() {\n  const [value, setValue] = React.useState(\'"a a a" "b c c" "b c c"\');\n\n  return (\n    <>\n      <Stack direction="row" spacing="2x" mb="4x">\n        <Button variant="outline" onClick={() => setValue(\'"a a a" "b c c" "b c c"\')}>\n          <Box fontFamily="mono" py="1x">\n            <Box>"a a a"</Box>\n            <Box>"b c c"</Box>\n            <Box>"b c c"</Box>\n          </Box>\n        </Button>\n        <Button variant="outline" onClick={() => setValue(\'"b b a" "b b c" "b b c"\')}>\n          <Box fontFamily="mono" py="1x">\n            <Box>"b b a"</Box>\n            <Box>"b b c"</Box>\n            <Box>"b b c"</Box>\n          </Box>\n        </Button>\n        <Button variant="outline" onClick={() => setValue(\'"a a ." "a a ." ". b c"\')}>\n          <Box fontFamily="mono" py="1x">\n            <Box>"a a ."</Box>\n            <Box>"a a ."</Box>\n            <Box>". b c"</Box>\n          </Box>\n        </Button>\n      </Stack>\n      <pre>\n        {`<Grid templateAreas=${JSON.stringify(value)}>`}\n      </pre>\n      <Grid\n        templateAreas={value}\n        templateRows="repeat(3,minmax(3rem,auto))"\n        templateColumns="1fr 1fr 1fr"\n        gap="2x"\n        bg="gray:10"\n        p="4x"\n      >\n        <GridItem area="a" bg="blue:50" borderColor="blue:60">One (a)</GridItem>\n        <GridItem area="b" bg="red:50" borderColor="red:60">Two (b)</GridItem>\n        <GridItem area="c" bg="teal:50" borderColor="teal:60">Three (c)</GridItem>\n      </Grid>\n    </>\n  );\n}\n\nrender(<Example />);\n'})})]})}e.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,o.ah)(),n.components).wrapper;return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(i,n)})):i(n)}},86239:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/grid",function(){return t(52824)}])}},function(n){n.O(0,[9774,2888,179],function(){return n(n.s=86239)}),_N_E=n.O()}]);