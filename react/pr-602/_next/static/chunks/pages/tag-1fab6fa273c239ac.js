(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4009],{64237:function(n,e,a){"use strict";a.r(e),a.d(e,{default:function(){return s}});var t=a(7896),r=a(59740),l=(a(2784),a(30876)),o=["components"],i={};function s(n){var e=n.components,a=(0,r.Z)(n,o);return(0,l.kt)("wrapper",(0,t.Z)({},i,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",null,"Tag"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Tag")," is used for items that need to be labeled, categorized, or organized using keywords that describe them."),(0,l.kt)("h2",null,"Import"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { Tag } from '@trendmicro/react-styled-ui';\n")),(0,l.kt)("h2",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"<Tag>Sample Tag</Tag>\n")),(0,l.kt)("h3",null,"Variants"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the visual style of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Tag"),". You can set the value to ",(0,l.kt)("inlineCode",{parentName:"p"},"solid"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"outline"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack direction="row" spacing="2x" shouldWrapChildren>\n  <Tag variant="solid">Solid Tag</Tag>\n  <Tag variant="outline">Outline Tag</Tag>\n</Stack>\n')),(0,l.kt)("h3",null,"Colors"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"variantColor")," prop to change the color scheme of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Tag"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"variantColor")," can be any color key that exist in the ",(0,l.kt)("inlineCode",{parentName:"p"},"theme.colors"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack spacing="4x">\n  <Stack direction="row" spacing="2x" shouldWrapChildren>\n    <Tag variantColor="gray">Gray</Tag>\n    <Tag variantColor="red">Red</Tag>\n    <Tag variantColor="magenta">Magenta</Tag>\n    <Tag variantColor="purple">Purple</Tag>\n    <Tag variantColor="blue">Blue</Tag>\n    <Tag variantColor="green">Green</Tag>\n    <Tag variantColor="teal">Teal</Tag>\n    <Tag variantColor="cyan">Cyan</Tag>\n  </Stack>\n  <Stack direction="row" spacing="2x" shouldWrapChildren>\n    <Tag variantColor="gray" borderRadius="lg">Gray</Tag>\n    <Tag variantColor="red" borderRadius="lg">Red</Tag>\n    <Tag variantColor="magenta" borderRadius="lg">Magenta</Tag>\n    <Tag variantColor="purple" borderRadius="lg">Purple</Tag>\n    <Tag variantColor="blue" borderRadius="lg">Blue</Tag>\n    <Tag variantColor="green" borderRadius="lg">Green</Tag>\n    <Tag variantColor="teal" borderRadius="lg">Teal</Tag>\n    <Tag variantColor="cyan" borderRadius="lg">Cyan</Tag>\n  </Stack>\n  <Stack direction="row" spacing="2x" shouldWrapChildren>\n    <Tag variant="outline" variantColor="gray">Gray</Tag>\n    <Tag variant="outline" variantColor="red">Red</Tag>\n    <Tag variant="outline" variantColor="magenta">Magenta</Tag>\n    <Tag variant="outline" variantColor="purple">Purple</Tag>\n    <Tag variant="outline" variantColor="blue">Blue</Tag>\n    <Tag variant="outline" variantColor="green">Green</Tag>\n    <Tag variant="outline" variantColor="teal">Teal</Tag>\n    <Tag variant="outline" variantColor="cyan">Cyan</Tag>\n  </Stack>\n  <Stack direction="row" spacing="2x" shouldWrapChildren>\n    <Tag variant="outline" variantColor="gray" borderRadius="lg">Gray</Tag>\n    <Tag variant="outline" variantColor="red" borderRadius="lg">Red</Tag>\n    <Tag variant="outline" variantColor="magenta" borderRadius="lg">Magenta</Tag>\n    <Tag variant="outline" variantColor="purple" borderRadius="lg">Purple</Tag>\n    <Tag variant="outline" variantColor="blue" borderRadius="lg">Blue</Tag>\n    <Tag variant="outline" variantColor="green" borderRadius="lg">Green</Tag>\n    <Tag variant="outline" variantColor="teal" borderRadius="lg">Teal</Tag>\n    <Tag variant="outline" variantColor="cyan" borderRadius="lg">Cyan</Tag>\n  </Stack>\n</Stack>\n')),(0,l.kt)("h3",null,"Sizes"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"size")," prop to change the size of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Tag"),". You can set the value to ",(0,l.kt)("inlineCode",{parentName:"p"},"sm"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"md"),", or ",(0,l.kt)("inlineCode",{parentName:"p"},"lg"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack spacing="4x">\n  <Stack\n    align="center"\n    direction="row"\n    spacing="2x"\n  >\n    <Tag size="sm" variantColor="gray">Small</Tag>\n    <Tag size="md" variantColor="gray">Medium</Tag>\n    <Tag size="lg" variantColor="gray">Large</Tag>\n  </Stack>\n  <Stack\n    align="center"\n    direction="row"\n    spacing="2x"\n  >\n    <Tag size="sm" variant="outline" variantColor="gray">Small</Tag>\n    <Tag size="md" variant="outline" variantColor="gray">Medium</Tag>\n    <Tag size="lg" variant="outline" variantColor="gray">Large</Tag>\n  </Stack>\n</Stack>\n')),(0,l.kt)("h3",null,"States"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'<Stack spacing="4x">\n  <Stack direction="row" spacing="4x" shouldWrapChildren>\n    <Tag isClosable>Normal</Tag>\n    <Tag isClosable disabled>Disabled</Tag>\n    <Tag isClosable isInvalid>Invalid</Tag>\n  </Stack>\n  <Stack direction="row" spacing="4x" shouldWrapChildren>\n    <Tag variant="outline" isClosable>Normal</Tag>\n    <Tag variant="outline" isClosable disabled>Disabled</Tag>\n    <Tag variant="outline" isClosable isInvalid>Invalid</Tag>\n  </Stack>\n</Stack>\n')),(0,l.kt)("h3",null,"Add and edit tag"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'function Tags() {\n  const [inputVisible, setInputVisible] = React.useState(false);\n  const [tags, setTags] = React.useState([]);\n  const handleInputVisible = () => setInputVisible(true);\n  const handleInputHidden = () => setInputVisible(false);\n  const handleInputBlur = (e) => {\n    e.stopPropagation();\n    const inputValue = e.target.value;\n    let newTags = tags;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      newTags = [...tags, inputValue];\n    }\n    setTags(newTags);\n    handleInputHidden();\n  };\n  const handleInputKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    if (keyCode === 13) {\n      const inputValue = e.target.value;\n      let newTags = tags;\n      if (inputValue && tags.indexOf(inputValue) === -1) {\n        newTags = [...tags, inputValue];\n      }\n      setTags(newTags);\n      handleInputHidden();\n    }\n\n    if (keyCode === 27) {\n      handleInputHidden();\n    }\n  };\n  const handleTagChange = (index) => (e) => {\n    const inputValue = e.target.value;\n    let newTags = tags;\n    newTags[index] = inputValue;\n    setTags([...newTags]);\n  };\n  const handleTagClose = (index) => (e) => {\n    e.stopPropagation();\n    tags.splice(index, 1);\n    setTags([...tags]);\n  };\n\n  return (\n    <Box>\n      {\n        tags.map((tag, i) => {\n          return (\n            <EditableTag\n              key={i}\n              onChange={handleTagChange(i)}\n              onClose={handleTagClose(i)}\n            >\n              {tag}\n            </EditableTag>\n          );\n        })\n      }\n      { !inputVisible && (\n        <Box\n          display="inline-flex"\n          alignItems="center"\n          borderRadius="sm"\n          border="1px dotted"\n          borderColor="gray:60"\n          width={92}\n          Height="6x"\n          py={2}\n          pl="2x"\n          pr="1x"\n          mt="1x"\n          onClick={handleInputVisible}\n        >\n          <Icon icon="add" color="white:tertiary" />\n          <Space width="2x" />\n          <Text\n            color="white:secondary"\n            fontSize="xs"\n            lineHeight="xs"\n          >\n            New Tag\n          </Text>\n        </Box>\n      )}\n      { inputVisible && (\n        <InputBase\n          autoFocus\n          minHeight="6x"\n          mt="1x"\n          onKeyUp={handleInputKeyUp}\n          onBlur={handleInputBlur}\n        />\n      )}\n    </Box>\n  );\n}\n\nrender(<Tags />);\n')),(0,l.kt)("h3",null,"With input"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"For duplicated entries, put both entries invalid, and hover the token to display error message."),(0,l.kt)("li",{parentName:"ul"},"When paste with text with delimiter, automatically convert to tags. Default delimiter: ",(0,l.kt)("inlineCode",{parentName:"li"},","),", ",(0,l.kt)("inlineCode",{parentName:"li"},";"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const useWrapperStyle = ({\n  isFocused,\n}) => {\n  const [colorMode] = useColorMode();\n  const { sizes } = useTheme();\n  const borderColor = {\n    dark: 'gray:60',\n    light: 'gray:30',\n  }[colorMode];\n  const invalidBorderColor = {\n    dark: 'red:50',\n    light: 'red:60',\n  }[colorMode];\n  const focusBorderColor = {\n    dark: 'blue:60',\n    light: 'blue:60',\n  }[colorMode];\n\n  const pxSpace = sizes['3x'];\n  const pbSpace = sizes['1x'];\n  const px = `calc(${pxSpace} - 1px)`;\n  const pb = `calc(${pbSpace} - 1px)`;\n\n  return {\n    backgroundColor: 'transparent',\n    borderRadius: 'sm',\n    fontSize: 'sm',\n    lineHeight: 'sm',\n    px: px,\n    pb: pb,\n    border: 1,\n    borderColor: isFocused ? focusBorderColor : borderColor,\n    _invalid: {\n      borderColor: invalidBorderColor,\n    },\n  };\n};\n\nconst Tags = () => {\n  const [colorMode] = useColorMode();\n  const tagCreatorRef = React.useRef();\n  const [inputValue, setInputValue] = React.useState('');\n  const [tags, setTags] = React.useState([]);\n  const [placeholderVisible, setPlaceholderVisible] = React.useState(true);\n  const [isWrapperFocused, setWrapperFocused] = React.useState(false);\n  const checkTagAndGetMessage = ({ id, value }) => {\n    const isDuplicated = tags.find((t) => t.value === value && t.id !== id);\n    if (isDuplicated) {\n      return 'Duplicated entries';\n    }\n    return '';\n  };\n  const createTag = (value) => {\n    if (!value) {\n      return;\n    }\n    const newTag = {\n      id: new Date().getTime(),\n      value: value,\n      isActive: false,\n    };\n    const newTags = [...tags, newTag];\n    setTags(newTags);\n    setInputValue('');\n  };\n  const updateTag = ({ id, value }) => {\n    const newTags = [...tags];\n    let tag = newTags.find((t) => t.id === id);\n    tag.value = value || tag.value;\n    tag.isActive = false;\n    setTags(newTags);\n  };\n  const handleInputBlur = (e) => {\n    e.stopPropagation();\n    const value = e.target.value;\n    createTag(value);\n    setWrapperFocused(false);\n    if (tags.length === 0) {\n      setPlaceholderVisible(true);\n    }\n  };\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    setInputValue(value);\n  };\n  const handleInputFocus = (e) => {\n    setPlaceholderVisible(false);\n  };\n  const handleInputKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    let value = e.target.value;\n    if (keyCode === 13) { // Enter\n      createTag(value);\n    }\n    if (keyCode === 186 || keyCode === 188) { // Semicolon(;) or Comma(,)\n      value = value.substring(0, value.length - 1);\n      createTag(value);\n    }\n    if (keyCode === 27) { // Esc\n      setInputValue('');\n    }\n  };\n  const handleInputPaste = (e) => {\n    e.preventDefault();\n    const pastedData = e.clipboardData.getData('text');\n    let separatedValues = pastedData.split(\n      new RegExp([',', ';', '\\n', '\\r', '\\r\\n'].join('|'))\n    );\n    separatedValues = separatedValues.map((value, i) => {\n      return {\n        id: new Date().getTime() + i,\n        value: value.trim(),\n        isActive: false,\n      };\n    });\n    const newTags = [...tags, ...separatedValues];\n    setTags(newTags);\n    setInputValue('');\n  };\n  const handleTagChange = (tagId) => (e) => {\n    const value = e.target.value;\n    updateTag({ id: tagId, value });\n  };\n  const handleTagClick = (tagId) => (e) => {\n    const newTags = [...tags];\n    let tag = newTags.find((t) => t.id === tagId);\n    tag.isActive = true;\n    setTags(newTags);\n  };\n  const handleTagClose = (tagId) => (e) => {\n    e.stopPropagation();\n    const tag = tags.find((t) => t.id === tagId);\n    if (!tag) {\n      return;\n    }\n    const newTags = tags.filter((t) => t.id !== tagId);\n    setTags(newTags);\n    tagCreatorRef.current.focus();\n  };\n  const handleTagFocus = (e) => {\n    setWrapperFocused(true);\n  };\n  const handleWrapperClick = (e) => {\n    const activeTag = tags.find((t) => t.isActive);\n    if (activeTag) {\n      return;\n    }\n    tagCreatorRef.current.focus();\n    setWrapperFocused(true);\n  };\n\n  const wrapperStyle = useWrapperStyle({\n    isFocused: isWrapperFocused,\n  });\n  const placeholderColor = {\n    dark: 'white:tertiary',\n    light: 'black:tertiary',\n  }[colorMode];\n  const invalidColor = {\n    dark: 'red:60',\n    light: 'red:50',\n  }[colorMode];\n\n  const renderTags = tags.map((tag, i) => {\n    return {\n      ...tag,\n      errorMessage: checkTagAndGetMessage({ id: tag.id, value: tag.value }),\n    };\n  });\n  const invalidTags = renderTags.filter((t) => t.errorMessage.length > 0);\n  let hasError = false;\n  if (invalidTags.length > 1) {\n    hasError = true;\n  } else if (invalidTags.length === 1 && invalidTags[0].isActive === false) {\n    hasError = true;\n  }\n\n  return (\n    <>\n      <Box\n        {...wrapperStyle}\n        role=\"presentation\"\n        aria-invalid={hasError}\n        onClick={handleWrapperClick}\n      >\n        {\n          renderTags.map((tag, i) => {\n            const id = tag.id;\n            const value = tag.value;\n            const errorMessage = tag.errorMessage;\n            if (errorMessage) {\n              return (\n                <Popover key={id} hideArrow trigger=\"hover\">\n                    <PopoverTrigger>\n                      <EditableTag\n                        isInvalid={errorMessage.length > 0}\n                        onChange={handleTagChange(id)}\n                        onClick={handleTagClick(id)}\n                        onClose={handleTagClose(id)}\n                        onFocus={handleTagFocus}\n                      >\n                        {value}\n                      </EditableTag>\n                    </PopoverTrigger>\n                  <PopoverContent>\n                    <PopoverBody>{errorMessage}</PopoverBody>\n                  </PopoverContent>\n                </Popover>\n              );\n            }\n            return (\n              <EditableTag\n                key={id}\n                isInvalid={errorMessage.length > 0}\n                onChange={handleTagChange(id)}\n                onClick={handleTagClick(id)}\n                onClose={handleTagClose(id)}\n                onFocus={handleTagFocus}\n              >\n                {value}\n              </EditableTag>\n            );\n          })\n        }\n        {placeholderVisible && (\n          <Text color={placeholderColor}>Placeholder text</Text>\n        )}\n        <InputBase\n          ref={tagCreatorRef}\n          minHeight=\"6x\"\n          mt=\"1x\"\n          value={inputValue}\n          onChange={handleInputChange}\n          onKeyUp={handleInputKeyUp}\n          onBlur={handleInputBlur}\n          onFocus={handleInputFocus}\n          onPaste={handleInputPaste}\n        />\n      </Box>\n      {hasError && (\n        <Text color={invalidColor}>There are invalid entries.</Text>\n      )}\n    </>\n  );\n};\n\nrender(<Tags />);\n")),(0,l.kt)("h2",null,"Props"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"disabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the tag will be disabled. This sets ",(0,l.kt)("inlineCode",{parentName:"td"},"aria-disabled=true")," and you can style this state by passing the ",(0,l.kt)("inlineCode",{parentName:"td"},"_disabled")," prop.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"isInvalid"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", the tag will indicate an error. You can style this state by passing the ",(0,l.kt)("inlineCode",{parentName:"td"},"_invalid")," prop.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"isClosable"),(0,l.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", a close button will appear on the right side.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"onClose"),(0,l.kt)("td",{parentName:"tr",align:"left"},"function"),(0,l.kt)("td",{parentName:"tr",align:"left"}),(0,l.kt)("td",{parentName:"tr",align:"left"},"A callback called when the close button is clicked.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"size"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'md'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The size of the tag component. One of: ",(0,l.kt)("inlineCode",{parentName:"td"},"'sm'"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"'md'"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"'lg'"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"variant"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'solid'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The variant style of the tag component. One of: ",(0,l.kt)("inlineCode",{parentName:"td"},"'solid'"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"'outline'"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"variantColor"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string"),(0,l.kt)("td",{parentName:"tr",align:"left"},"'gray'"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The color scheme of the tag variant. It must be a color key defined in ",(0,l.kt)("inlineCode",{parentName:"td"},"theme.colors"),".")))))}s.isMDXComponent=!0},24031:function(n,e,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tag",function(){return a(64237)}])}},function(n){n.O(0,[9774,2888,179],(function(){return e=24031,n(n.s=e);var e}));var e=n.O();_N_E=e}]);