(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1749],{45614:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return l}});var o=t(7896),u=t(59740),r=(t(2784),t(30876)),c=["components"],s={};function l(n){var e=n.components,t=(0,u.Z)(n,c);return(0,r.kt)("wrapper",(0,o.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"useEventListener"),(0,r.kt)("p",null,"A custom Hook to manage browser event listeners."),(0,r.kt)("h2",null,"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useEventListener } from '@tonic-ui/react-hooks';\n")),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function Component() {\n  const buttonRef = React.useRef(null);\n\n  const onScroll = (event) => {\n    console.log('document scrolled', event);\n  };\n\n  const onClick = (event) => {\n    console.log('button clicked', event);\n  };\n\n  // example with document based event\n  useEventListener(\n    () => (buttonRef.current.ownerDocument || document),\n    'scroll',\n    onScroll,\n  );\n\n  // example with element based event\n  useEventListener(\n    () => buttonRef.current,\n    'click',\n    onClick,\n  );\n\n  return (\n    <Button ref={buttonRef}>\n      Click Me\n    </Button>\n  );\n}\n")))}l.isMDXComponent=!0},25899:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useEventListener",function(){return t(45614)}])}},function(n){n.O(0,[9774,2888,179],(function(){return e=25899,n(n.s=e);var e}));var e=n.O();_N_E=e}]);