(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3731],{54060:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return l}});var o=t(7896),a=t(59740),s=(t(2784),t(30876)),c=["components"],u={};function l(n){var e=n.components,t=(0,a.Z)(n,c);return(0,s.kt)("wrapper",(0,o.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",null,"useEffectOnceWhen"),(0,s.kt)("p",null,"A custom Hook that fires a callback only once when a condition is met."),(0,s.kt)("h2",null,"Import"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { useEffectOnceWhen } from '@tonic-ui/react-hooks';\n")),(0,s.kt)("h2",null,"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"function Component() {\n  const [state, setState] = React.useState('idle');\n\n  useEffectOnceWhen(() => {\n    setTimeout(() => {\n      setState('loaded');\n    }, 3000); // Countdown for 3 seconds\n  }, (state === 'loading'));\n\n  return (\n    <>\n      {state === 'idle' && (\n        <Button onClick={() => setState('loading')}>\n          Click To Run\n        </Button>\n      )}\n      {state === 'loading' && 'Loading component (will be gone in 3 seconds)...'}\n      {state === 'loaded' && 'Component loaded!'}\n    </>\n  );\n}\n")))}l.isMDXComponent=!0},97860:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useEffectOnceWhen",function(){return t(54060)}])}},function(n){n.O(0,[9774,2888,179],(function(){return e=97860,n(n.s=e);var e}));var e=n.O();_N_E=e}]);