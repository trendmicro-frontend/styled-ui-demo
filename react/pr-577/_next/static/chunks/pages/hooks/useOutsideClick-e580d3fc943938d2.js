(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7902],{86066:function(n,e,o){"use strict";o.r(e),o.d(e,{default:function(){return c}});var t=o(7896),r=o(59740),l=(o(2784),o(30876)),s=["components"],i={};function c(n){var e=n.components,o=(0,r.Z)(n,s);return(0,l.kt)("wrapper",(0,t.Z)({},i,o,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",null,"useOutsideClick"),(0,l.kt)("p",null,"A custom Hook that checks if a click happened outside a Ref. Handy for dropdowns, modals and popups etc."),(0,l.kt)("h2",null,"Import"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import { useOutsideClick } from '@tonic-ui/react-hooks';\n")),(0,l.kt)("h2",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const CodeBlock = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Box\n      backgroundColor={colorStyle.background.secondary}\n      border={1}\n      borderColor={colorStyle.divider}\n      fontFamily="mono"\n      py="3x"\n      px="3x"\n      whiteSpace="pre"\n      {...props}\n    />\n  );\n};\n\nconst FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst pointerUpEvents = [\'mouseup\', \'touchend\'];\nconst pointerDownEvents = [\'mousedown\', \'touchstart\'];\n\nrender(() => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const [eventOption, setEventOption] = React.useState(\'pointerUp\');\n  const ref = React.useRef();\n  const handler = React.useCallback(() => {\n    console.log(\'Clicked outside\');\n  }, []);\n  const events = {\n    \'pointerUp\': pointerUpEvents,\n    \'pointerDown\': pointerDownEvents,\n  }[eventOption];\n  useOutsideClick(ref, handler, events || false);\n\n  return (\n    <>\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Setup\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Choose an option:\n          </TextLabel>\n        </Box>\n        <RadioGroup\n          value={eventOption}\n          onChange={setEventOption}\n        >\n          <Flex direction="column" rowGap="2x">\n            <Radio value="pointerUp">\n              Listen to pointer up events (default)\n            </Radio>\n            <Radio value="pointerDown">\n              Listen to pointer down events\n            </Radio>\n            <Radio value="none">\n              No event listeners\n            </Radio>\n          </Flex>\n        </RadioGroup>\n      </FormGroup>\n      {eventOption === \'pointerUp\' && (\n        <CodeBlock>\n          {`useOutsideClick(ref, handler, [${pointerUpEvents.map(x => `\'${x}\'`).join(\', \')}]);`}\n        </CodeBlock>\n      )}\n      {eventOption === \'pointerDown\' && (\n        <CodeBlock>\n          {`useOutsideClick(ref, handler, [${pointerDownEvents.map(x => `\'${x}\'`).join(\', \')}]);`}\n        </CodeBlock>\n      )}\n      {eventOption === \'none\' && (\n        <CodeBlock>\n          {\'useOutsideClick(ref, handler, false);\'}\n        </CodeBlock>\n      )}\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Demo\n        </Text>\n      </Box>\n      <Box\n        ref={ref}\n        backgroundColor={colorStyle.background.secondary}\n        cursor="default"\n        userSelect="none"\n        p="6x"\n      >\n        Click outside me a message will be logged to the console\n      </Box>\n    </>\n  );\n});\n')))}c.isMDXComponent=!0},41906:function(n,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useOutsideClick",function(){return o(86066)}])}},function(n){n.O(0,[9774,2888,179],(function(){return e=41906,n(n.s=e);var e}));var e=n.O();_N_E=e}]);