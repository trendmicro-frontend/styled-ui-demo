(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7902],{6066:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return s}});t(2784);var o=t(876),r=["components"];function a(){return a=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},a.apply(this,arguments)}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i={};function s(e){var n=e.components,t=l(e,r);return(0,o.kt)("wrapper",a({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",null,"useOutsideClick"),(0,o.kt)("p",null,"A custom Hook that checks if a click happened outside a Ref. Handy for dropdowns, modals and popups etc."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// import\nimport { useOutsideClick } from '@tonic-ui/react-hooks';\n\n// usage\nuseOutsideClick(ref, handler, [events]);\n")),(0,o.kt)("h3",null,"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"ref"),(0,o.kt)("td",{parentName:"tr",align:"left"},"RefObject"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"A ref to the element to check if the click happened outside.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"handler"),(0,o.kt)("td",{parentName:"tr",align:"left"},"(event: MouseEvent) => void"),(0,o.kt)("td",{parentName:"tr",align:"left"}),(0,o.kt)("td",{parentName:"tr",align:"left"},"A function to call if the click happened outside the ref.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"events?"),(0,o.kt)("td",{parentName:"tr",align:"left"},"string[]"),(0,o.kt)("td",{parentName:"tr",align:"left"},"['mousedown', 'touchstart']"),(0,o.kt)("td",{parentName:"tr",align:"left"},"An optional array of events to listen to. If ",(0,o.kt)("inlineCode",{parentName:"td"},"events")," is empty, the hook will not listen to any events.")))),(0,o.kt)("h3",null,"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const CodeBlock = (props) => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n\n  return (\n    <Box\n      backgroundColor={colorStyle.background.secondary}\n      border={1}\n      borderColor={colorStyle.divider}\n      fontFamily="mono"\n      py="3x"\n      px="3x"\n      whiteSpace="pre"\n      {...props}\n    />\n  );\n};\n\nconst FormGroup = (props) => (\n  <Box mb="4x" {...props} />\n);\n\nconst pointerDownEvents = [\'mousedown\', \'touchstart\'];\nconst pointerUpEvents = [\'mouseup\', \'touchend\'];\n\nrender(() => {\n  const [colorMode] = useColorMode();\n  const [colorStyle] = useColorStyle({ colorMode });\n  const [eventOption, setEventOption] = React.useState(\'pointerDown\');\n  const ref = React.useRef();\n  const handler = React.useCallback(() => {\n    console.log(\'Clicked outside\');\n  }, []);\n  const events = {\n    \'pointerDown\': pointerDownEvents,\n    \'pointerUp\': pointerUpEvents,\n  }[eventOption];\n\n  useOutsideClick(ref, handler, events || false);\n\n  return (\n    <>\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Setup\n        </Text>\n      </Box>\n      <FormGroup>\n        <Box mb="2x">\n          <TextLabel>\n            Choose an option:\n          </TextLabel>\n        </Box>\n        <RadioGroup\n          value={eventOption}\n          onChange={setEventOption}\n        >\n          <Flex direction="column" rowGap="2x">\n            <Radio value="pointerDown">\n              Listen to pointer down events (default)\n            </Radio>\n            <Radio value="pointerUp">\n              Listen to pointer up events\n            </Radio>\n            <Radio value="none">\n              No event listeners\n            </Radio>\n          </Flex>\n        </RadioGroup>\n      </FormGroup>\n      {eventOption === \'pointerDown\' && (\n        <CodeBlock>\n          {`useOutsideClick(ref, handler, [${pointerDownEvents.map(x => `\'${x}\'`).join(\', \')}]); // or "useOutsideClick(ref, handler)"`}\n        </CodeBlock>\n      )}\n      {eventOption === \'pointerUp\' && (\n        <CodeBlock>\n          {`useOutsideClick(ref, handler, [${pointerUpEvents.map(x => `\'${x}\'`).join(\', \')}]);`}\n        </CodeBlock>\n      )}\n      {eventOption === \'none\' && (\n        <CodeBlock>\n          {\'useOutsideClick(ref, handler, false);\'}\n        </CodeBlock>\n      )}\n      <Divider my="4x" />\n      <Box mb="4x">\n        <Text fontSize="lg" lineHeight="lg">\n          Demo\n        </Text>\n      </Box>\n      <Box\n        ref={ref}\n        backgroundColor={colorStyle.background.secondary}\n        cursor="default"\n        userSelect="none"\n        p="6x"\n      >\n        Click outside me a message will be logged to the console\n      </Box>\n    </>\n  );\n});\n')))}s.isMDXComponent=!0},2418:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useOutsideClick",function(){return t(6066)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=2418,e(e.s=n);var n}));var n=e.O();_N_E=n}]);