(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1209],{8839:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return s}});t(2784);var r=t(876),a=["components"];function o(){return o=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},o.apply(this,arguments)}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var f={};function s(e){var n=e.components,t=l(e,a);return(0,r.kt)("wrapper",o({},f,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"useMergeRefs"),(0,r.kt)("p",null,"A custom Hook that merges React refs into a single memoized function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// import\nimport { useMergeRefs } from '@tonic-ui/react-hooks';\n\n// usage\nconst refs = useMergeRefs(ref1, ref2);\n")),(0,r.kt)("h3",null,"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"...refs"),(0,r.kt)("td",{parentName:"tr",align:"left"},"RefObject"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"The refs to merge.")))),(0,r.kt)("h3",null,"Returns"),(0,r.kt)("p",null,"Returns a single function that can be used to set multiple refs."),(0,r.kt)("h2",null,"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},"const Component = React.forwardRef(function Component(props, ref) {\n  const internalRef = React.useRef();\n  const refs = useMergeRefs(internalRef, ref);\n\n  React.useEffect(() => {\n    console.log('ref.current:', ref.current);\n    console.log('internalRef.current:', internalRef.current);\n  }, []);\n\n  return (\n    <Box ref={refs} {...props}>\n      A component with multiple refs\n    </Box>\n  );\n});\n\nrender(() => {\n  const externalRef = React.useRef();\n\n  React.useEffect(() => {\n    console.log('externalRef.current:', externalRef.current);\n  }, []);\n\n  return (\n    <Component ref={externalRef} />\n  );\n});\n")))}s.isMDXComponent=!0},3777:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/useMergeRefs",function(){return t(8839)}])}},function(e){e.O(0,[9774,2888,179],(function(){return n=3777,e(e.s=n);var n}));var n=e.O();_N_E=n}]);