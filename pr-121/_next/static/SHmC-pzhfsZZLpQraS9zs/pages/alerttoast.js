(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"+wNj":function(t,e,n){"use strict";function o(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}n.d(e,"a",(function(){return o}))},HbGN:function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var o=n("+wNj");function a(t,e){if(null==t)return{};var n,a,r=Object(o.a)(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}},Km8e:function(t,e,n){"use strict";var o=Object.assign.bind(Object);t.exports=o,t.exports.default=t.exports},ZVZ0:function(t,e,n){"use strict";n.d(e,"a",(function(){return u})),n.d(e,"b",(function(){return h}));var o=n("ERkP"),a=n.n(o);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=a.a.createContext({}),b=function(t){var e=a.a.useContext(c),n=e;return t&&(n="function"===typeof t?t(e):i({},e,{},t)),n},u=function(t){var e=b(t.components);return a.a.createElement(c.Provider,{value:e},t.children)},p="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.a.createElement(a.a.Fragment,{},e)}},d=Object(o.forwardRef)((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,l=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),u=b(n),p=o,d=u["".concat(l,".").concat(p)]||u[p]||m[p]||r;return n?a.a.createElement(d,i({ref:e},c,{components:n})):a.a.createElement(d,i({ref:e},c))}));function h(t,e){var n=arguments,o=e&&e.mdxType;if("string"===typeof t||o){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[p]="string"===typeof t?t:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},cxan:function(t,e,n){"use strict";function o(){return(o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t}).apply(this,arguments)}n.d(e,"a",(function(){return o}))},kNvk:function(t,e,n){"use strict";n.r(e),n.d(e,"default",(function(){return b}));var o=n("cxan"),a=n("HbGN"),r=n("ERkP"),l=n.n(r),i=n("ZVZ0"),s=(l.a.createElement,{}),c="wrapper";function b(t){var e=t.components,n=Object(a.a)(t,["components"]);return Object(i.b)(c,Object(o.a)({},s,n,{components:e,mdxType:"MDXLayout"}),Object(i.b)("h1",null,"AlertToast"),Object(i.b)("p",null,"An alert toast is a toast that offers severity levels."),Object(i.b)("p",null,"If you're looking for a simple toast, just to check out the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"./toast"}),Object(i.b)("inlineCode",{parentName:"a"},"Toast"))," component."),Object(i.b)("h2",null,"Import"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import AlertToast from '@trendmicro/react-styled-ui/AlertToast';\n// or\nimport { AlertToast } from '@trendmicro/react-styled-ui';\n")),Object(i.b)("h2",null,"Prerequisite"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"AlertToast")," component should work with the ",Object(i.b)("inlineCode",{parentName:"p"},"useToast")," Hook to trigger a toast notification."),Object(i.b)("p",null,"Learn more about the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"./usetoast"}),Object(i.b)("inlineCode",{parentName:"a"},"useToast"))," Hook."),Object(i.b)("h2",null,"Usage"),Object(i.b)("h3",null,"Layouts"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Increase the vertical padding space to ",Object(i.b)("inlineCode",{parentName:"li"},"4x")," (or ",Object(i.b)("inlineCode",{parentName:"li"},"1rem"),") for a multiline paragraph."),Object(i.b)("li",{parentName:"ul"},"Set the minimum horizontal margin space to ",Object(i.b)("inlineCode",{parentName:"li"},"4x")," (or ",Object(i.b)("inlineCode",{parentName:"li"},"1rem"),") before the close button."),Object(i.b)("li",{parentName:"ul"},"Set the minimum horizontal margin space to ",Object(i.b)("inlineCode",{parentName:"li"},"4x")," (or ",Object(i.b)("inlineCode",{parentName:"li"},"1rem"),") between the icon and the content."),Object(i.b)("li",{parentName:"ul"},"Apply vertical margin space with ",Object(i.b)("inlineCode",{parentName:"li"},"2x")," (or ",Object(i.b)("inlineCode",{parentName:"li"},".5rem"),") between title and its content."),Object(i.b)("li",{parentName:"ul"},"Apply vertical margin space with ",Object(i.b)("inlineCode",{parentName:"li"},"6x")," (or ",Object(i.b)("inlineCode",{parentName:"li"},"1.5rem"),") between the end of the content and the action button (or action link).")),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),'const AlertToastSimple = ({ onClose }) => (\n  <AlertToast onClose={onClose}>\n    <Text>This is a toast notification.</Text>\n  </AlertToast>\n);\n\nconst AlertToastWithIcon = ({ onClose }) => (\n  <AlertToast onClose={onClose} py="4x">\n    <Flex align="flex-start">\n      <Box\n        bg="gray:40"\n        height={48}\n        minWidth={48}\n      />\n      <Space minWidth="4x" />\n      <Text>This is a toast notification.</Text>\n    </Flex>\n  </AlertToast>\n);\n\nconst AlertToastWithTitle = ({ onClose }) => (\n  <AlertToast onClose={onClose} py="4x">\n    <Box mb="2x">\n      <Heading fontWeight="bold">Notification Title</Heading>\n    </Box>\n    <Box mr={-36}>\n      <Text>This is a toast notification.</Text>\n    </Box>\n  </AlertToast>\n);\n\nconst AlertToastWithActionButton = ({ onClose }) => (\n  <AlertToast onClose={onClose} py="4x">\n    <Box mb="6x">\n      <Text>This is a toast notification.</Text>\n    </Box>\n    <Flex justify="flex-end" mr={-36}>\n      <FlatButton variant="outline" color="black:primary" size="sm">\n        Action Button\n      </FlatButton>\n    </Flex>\n  </AlertToast>\n);\n\nconst AlertToastWithActionLink = ({ onClose }) => (\n  <AlertToast onClose={onClose} py="4x">\n    <Box mb="6x">\n      <Text>This is a toast notification.</Text>\n    </Box>\n    <Flex justify="flex-end" mr={-36}>\n      <Link>Action Link</Link>\n    </Flex>\n  </AlertToast>\n);\n\nconst AlertToastWithAllTogether = ({ onClose }) => (\n  <AlertToast onClose={onClose} py="4x">\n    <Box mb="2x">\n      <Heading fontWeight="bold">Notification Title</Heading>\n    </Box>\n    <Flex align="flex-start" mb="6x">\n      <Box\n        bg="gray:40"\n        height={48}\n        minWidth={48}\n      />\n      <Space minWidth="4x" />\n      <Text>This is a toast notification.</Text>\n    </Flex>\n    <Flex justify="flex-end" mr={-36}>\n      <FlatButton variant="outline" color="black:primary" size="sm">\n        Action Button\n      </FlatButton>\n    </Flex>\n  </AlertToast>\n);\n\nconst AlertToastLayout = (props) => {\n  const { colorMode } = useColorMode();\n  const boxShadow = {\n    dark: \'dark.sm\',\n    light: \'light.sm\',\n  }[colorMode];\n\n  return (\n    <Box fontSize="sm" lineHeight="sm" textAlign="left" my="1x" boxShadow={boxShadow} {...props} />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (AlertToastComponent) => () => {\n    toast({\n      duration: 5000,\n      render: ({ onClose }) => (\n        <AlertToastLayout minWidth={320}>\n          <AlertToastComponent onClose={onClose} />\n        </AlertToastLayout>\n      ),\n    });\n  };\n\n  return (\n    <>\n      <Stack direction="column" spacing="6x">\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(AlertToastSimple)}\n          >\n            Show\n          </Button>\n          <AlertToastLayout mt="4x">\n            <AlertToastSimple />\n          </AlertToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(AlertToastWithIcon)}\n          >\n            Show\n          </Button>\n          <AlertToastLayout mt="4x">\n            <AlertToastWithIcon />\n          </AlertToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(AlertToastWithTitle)}\n          >\n            Show\n          </Button>\n          <AlertToastLayout mt="4x">\n            <AlertToastWithTitle />\n          </AlertToastLayout>\n        </Box>\n\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(AlertToastWithActionButton)}\n          >\n            Show\n          </Button>\n          <AlertToastLayout mt="4x">\n            <AlertToastWithActionButton />\n          </AlertToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(AlertToastWithActionLink)}\n          >\n            Show\n          </Button>\n          <AlertToastLayout mt="4x">\n            <AlertToastWithActionLink />\n          </AlertToastLayout>\n        </Box>\n        <Box>\n          <Button\n            variant="secondary"\n            onClick={handleClickBy(AlertToastWithAllTogether)}\n          >\n            Show\n          </Button>\n          <AlertToastLayout mt="4x">\n            <AlertToastWithAllTogether />\n          </AlertToastLayout>\n        </Box>\n      </Stack>\n    </>\n  );\n}\n\nrender(<Example />);\n')),Object(i.b)("h3",null,"Severity levels"),Object(i.b)("p",null,"The alert toast offers four severity levels, each has a distinctive icon and color."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),'const AlertToastSuccess = ({ onClose }) => (\n  <AlertToast onClose={onClose} severity="success">\n    This is a success toast alert.\n  </AlertToast>\n);\n\nconst AlertToastInfo = ({ onClose }) => (\n  <AlertToast onClose={onClose} severity="info">\n    This is an info toast alert.\n  </AlertToast>\n);\n\nconst AlertToastWarning = ({ onClose }) => (\n  <AlertToast onClose={onClose} severity="warning">\n    This is a warning toast alert.\n  </AlertToast>\n);\n\nconst AlertToastError = ({ onClose }) => (\n  <AlertToast onClose={onClose} severity="error">\n    This is an error toast alert.\n  </AlertToast>\n);\n\nconst ToastLayout = (props) => {\n  const { colorMode } = useColorMode();\n  const boxShadow = {\n    dark: \'dark.sm\',\n    light: \'light.sm\',\n  }[colorMode];\n\n  return (\n    <Box fontSize="sm" lineHeight="sm" textAlign="left" my="2x" boxShadow={boxShadow} {...props} />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (AlertToastNotification) => () => {\n    toast({\n      duration: 5000,\n      render: ({ onClose }) => (\n        <ToastLayout minWidth={320}>\n          <AlertToastNotification onClose={onClose} />\n        </ToastLayout>\n      ),\n    });\n  };\n  const alertToasts = [\n    AlertToastSuccess,\n    AlertToastInfo,\n    AlertToastWarning,\n    AlertToastError,\n  ];\n\n  return (\n    <Stack direction="column" spacing="6x">\n      {alertToasts.map((AlertToastNotification, idx) => (\n        <Box key={idx}>\n          <Button variant="secondary" onClick={handleClickBy(AlertToastNotification)}>\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <AlertToastNotification />\n          </ToastLayout>\n        </Box>\n      ))}\n    </Stack>\n  );\n}\n\nrender(<Example />);\n')),Object(i.b)("h3",null,"Icons"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"icon")," prop allows you to override the default icon for the specified severity."),Object(i.b)("p",null,"Setting the ",Object(i.b)("inlineCode",{parentName:"p"},"icon")," prop to ",Object(i.b)("inlineCode",{parentName:"p"},"false")," will remove the icon altogether."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"noInline",noInline:!0}),'const AlertToastWithDefaultIcon = ({ onClose }) => (\n  <AlertToast\n    onClose={onClose}\n    severity="success"\n  >\n    This is a success toast alert.\n  </AlertToast>\n);\n\nconst AlertToastWithAnotherIcon = ({ onClose }) => (\n  <AlertToast\n    onClose={onClose}\n    severity="success"\n    icon="_core.severity-success"\n  >\n    This is a success toast alert.\n  </AlertToast>\n);\n\nconst AlertToastWithProprietaryIcon = ({ onClose }) => (\n  <AlertToast\n    onClose={onClose}\n    severity="success"\n    icon={<TMIcon name="check-circle-o" lineHeight={1} color="gray:80" />}\n  >\n    This is a success toast alert.\n  </AlertToast>\n);\n\nconst AlertToastWithoutIcon = ({ onClose }) => (\n  <AlertToast\n    onClose={onClose}\n    severity="success"\n    icon={false}\n  >\n    This is a success toast alert.\n  </AlertToast>\n);\n\nconst ToastLayout = (props) => {\n  const { colorMode } = useColorMode();\n  const boxShadow = {\n    dark: \'dark.sm\',\n    light: \'light.sm\',\n  }[colorMode];\n\n  return (\n    <Box fontSize="sm" lineHeight="sm" textAlign="left" my="2x" boxShadow={boxShadow} {...props} />\n  );\n};\n\nfunction Example() {\n  const toast = useToast();\n  const handleClickBy = (AlertToastNotification) => () => {\n    toast({\n      duration: 5000,\n      render: ({ onClose }) => (\n        <ToastLayout minWidth={320}>\n          <AlertToastNotification onClose={onClose} />\n        </ToastLayout>\n      ),\n    });\n  };\n  const alertToasts = [\n    AlertToastWithDefaultIcon,\n    AlertToastWithAnotherIcon,\n    AlertToastWithProprietaryIcon,\n    AlertToastWithoutIcon,\n  ];\n\n  return (\n    <Stack direction="column" spacing="6x">\n      {alertToasts.map((AlertToastNotification, idx) => (\n        <Box key={idx}>\n          <Button variant="secondary" onClick={handleClickBy(AlertToastNotification)}>\n            Show\n          </Button>\n          <ToastLayout mt="4x">\n            <AlertToastNotification />\n          </ToastLayout>\n        </Box>\n      ))}\n    </Stack>\n  );\n}\n\nrender(<Example />);\n')),Object(i.b)("h2",null,"Props"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"AlertToast")," composes the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"./toast"}),Object(i.b)("inlineCode",{parentName:"a"},"Toast"))," component."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(o.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(o.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(o.a)({parentName:"tr"},{align:"left"}),"Default"),Object(i.b)("th",Object(o.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"isCloseable"),Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"true"),Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"If ",Object(i.b)("inlineCode",{parentName:"td"},"true"),", a close button will appear on the right side.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"onClose"),Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"function"),Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"})),Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"A callback called when the close button is clicked.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"severity"),Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"string"),Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"'success'"),Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"The severity level of the alert. One of: ",Object(i.b)("inlineCode",{parentName:"td"},"'success'"),", ",Object(i.b)("inlineCode",{parentName:"td"},"'info'"),", ",Object(i.b)("inlineCode",{parentName:"td"},"'warning'"),", ",Object(i.b)("inlineCode",{parentName:"td"},"'error'"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"icon"),Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"string ","|"," ReactNode ","|"," false"),Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"})),Object(i.b)("td",Object(o.a)({parentName:"tr"},{align:"left"}),"Override the icon displayed before the children. Unless provided, the icon is mapped to the value of the ",Object(i.b)("inlineCode",{parentName:"td"},"severity")," prop.")))))}b.isMDXComponent=!0},"z7+t":function(t,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/alerttoast",function(){return n("kNvk")}])}},[["z7+t",0,1]]]);